/*
 *  s5k4e1gx_foxconn camera driver head file
 *
 *  CopyRight (C) Hisilicon Co., Ltd.
 *	Author :
 *  Version:  1.2
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#ifndef _S5K4E1GX_FOXCONN_H
#define _S5K4E1GX_FOXCONN_H

#include "k3_isp_io.h"
/***********************************************************************
 *
 * s5k4e1gx_foxconn init sensor registers list
 *
 ***********************************************************************/
const struct _sensor_reg_t s5k4e1gx_foxconn_init_regs[] = {
{0x0103, 0x01}, //soft_reset
//{0x3030, 0x06},//shut streaming off
{0x0105, 0x01}, //
{0x3030, 0x07},//shut streaming off
/*Analog Setting*/
{0x3000, 0x05},
{0x3001, 0x03},
{0x3002, 0x08},
{0x3003, 0x09},
{0x3004, 0x2E},
{0x3005, 0x06},
{0x3006, 0x34},
{0x3007, 0x00},
{0x3008, 0x3C},
{0x3009, 0x3C},
{0x300A, 0x28},
{0x300B, 0x04},
{0x300C, 0x0A},
{0x300D, 0x02},
{0x300E, 0xE8},
{0x300F, 0x82},
{0x3010, 0x00},
{0x3011, 0x4C},
{0x3012, 0x30},
{0x3013, 0xC0},
{0x3014, 0x00},
{0x3015, 0x00},
{0x3016, 0x2C},
{0x3017, 0x94},
{0x3018, 0x78},
{0x301B, 0x83}, //
{0x301C, 0x04},
{0x301D, 0xD4},
{0x3021, 0x02},
{0x3022, 0x24},
{0x3024, 0x40},
{0x3027, 0x08},
{0x3029, 0xC6},
{0x30BC, 0xB0},
{0x302B, 0x01},
{0x30D8, 0x3F},

/*ADLC setting*/
{0x3070, 0x5F},
{0x3071, 0x00},
{0x3080, 0x04},
{0x3081, 0x38},

/*MIPI setting*/
{0x30BD, 0x00},//SEL_CCP[0]
{0x3084, 0x15},//SYNC Mode
{0x30BE, 0x1A},//M_PCLKDIV_AUTO[4], M_DIV_PCLK[3:0]
{0x30C1, 0x01},//pack video enable [0]
{0x30EE, 0x02},//DPHY enable [1]
{0x3111, 0xc6},//Embedded data off [5]

/*PLL setting*/
{0x0305, 0x05},//06////PLL P = 6
{0x0306, 0x00},//PLL M[8] = 0
{0x0307, 0x78},//PLL M = 101
{0x30B5, 0x01},//01//PLL S = 1 
{0x30E2, 0x02},//02//num lanes[1:0] = 2
{0x30F1, 0x80},//70//DPHY BANDCTRL 404MHz=40.4MHz

/*Timing configuration*/
{0x0202, 0x03},//coarse integration time
{0x0203, 0xd4},
{0x0204, 0x00},//analog gain[msb] 0100 x8 0080 x4
{0x0205, 0x20},//analog gain[lsb] 0040 x2 0020 x1

/*Lens shading*/
#if 1
{0x3096, 0x40},
{0x3097, 0x52}, //sh4ch_blk_width = 82
{0x3098, 0x3e}, //sh4ch_blk_height = 62
{0x3099, 0x03}, //sh4ch_step_x msb (sh4ch_step_x = 799)
{0x309a, 0x1f}, //sh4ch_step_x lsb
{0x309b, 0x04}, //sh4ch_step_y msb (sh4ch_step_y = 1057)
{0x309c, 0x21}, //sh4ch_step_y lsb
{0x309d, 0x00}, //sh4ch_start_blk_cnt_x = 0
{0x309e, 0x00}, //sh4ch_start_int_cnt_x = 0
{0x309f, 0x00}, //sh4ch_start_frac_cnt_x msb (sh4ch_start_frac_cnt_x = 0)
{0x30a0, 0x00}, //sh4ch_start_frac_cnt_x lsb
{0x30a1, 0x00}, //sh4ch_start_blk_cnt_y = 0
{0x30a2, 0x00}, //sh4ch_start_int_cnt_y = 0
{0x30a3, 0x00}, //sh4ch_start_frac_cnt_y msb (sh4ch_start_frac_cnt_x = 0)
{0x30a4, 0x00}, //sh4ch_start_frac_cnt_y lsb
{0x30a5, 0x01},
{0x30a6, 0x00}, // gs_pedestal	= 64

{0x3200, 0x00},
{0x3201, 0xdc},
{0x3202, 0x08},
{0x3203, 0x0f},
{0x3204, 0xde},
{0x3205, 0xc0},
{0x3206, 0x0f},
{0x3207, 0xe8},
{0x3208, 0xf9},
{0x3209, 0x00},
{0x320a, 0x1e},
{0x320b, 0x32},
{0x320c, 0x00},
{0x320d, 0x46},
{0x320e, 0xce},
{0x320f, 0x0f},
{0x3210, 0x93},
{0x3211, 0xb8},
{0x3212, 0x0f},
{0x3213, 0x9e},
{0x3214, 0x8d},
{0x3215, 0x0f},
{0x3216, 0xa3},
{0x3217, 0x8c},
{0x3218, 0x00},
{0x3219, 0xba},
{0x321a, 0xb2},
{0x321b, 0x0f},
{0x321c, 0x69},
{0x321d, 0x03},
{0x321e, 0x0f},
{0x321f, 0xb0},
{0x3220, 0x2e},
{0x3221, 0x00},
{0x3222, 0xcb},
{0x3223, 0xcd},
{0x3224, 0x00},
{0x3225, 0x36},
{0x3226, 0x6e},
{0x3227, 0x00},
{0x3228, 0xb5},
{0x3229, 0xf1},
{0x322a, 0x0e},
{0x322b, 0xba},
{0x322c, 0x48},
{0x322d, 0x00},
{0x322e, 0xf8},
{0x322f, 0xd7},
{0x3230, 0x00},
{0x3231, 0x7b},
{0x3232, 0x00},
{0x3233, 0x0e},
{0x3234, 0xc3},
{0x3235, 0x6e},
{0x3236, 0x0f},
{0x3237, 0xee},
{0x3238, 0x79},
{0x3239, 0x0f},
{0x323a, 0x38},
{0x323b, 0x5b},
{0x323c, 0x01},
{0x323d, 0x4b},
{0x323e, 0x99},
{0x323f, 0x0f},
{0x3240, 0x17},
{0x3241, 0x99},
{0x3242, 0x0f},
{0x3243, 0x8d},
{0x3244, 0xf8},
{0x3245, 0x01},
{0x3246, 0x0f},
{0x3247, 0xfc},
{0x3248, 0x00},
{0x3249, 0x22},
{0x324a, 0x6d},
{0x324b, 0x00},
{0x324c, 0x49},
{0x324d, 0x8d},
{0x324e, 0x0f},
{0x324f, 0x9a},
{0x3250, 0x76},
{0x3251, 0x00},
{0x3252, 0x38},
{0x3253, 0x0c},
{0x3254, 0x0f},
{0x3255, 0xe2},
{0x3256, 0x10},
{0x3257, 0x00},
{0x3258, 0x33},
{0x3259, 0xb4},
{0x325a, 0x0f},
{0x325b, 0xe4},
{0x325c, 0x30},
{0x325d, 0x00},
{0x325e, 0x34},
{0x325f, 0x3f},
{0x3260, 0x0f},
{0x3261, 0x95},
{0x3262, 0xcd},
{0x3263, 0x00},
{0x3264, 0x48},
{0x3265, 0x75},
{0x3266, 0x00},
{0x3267, 0xa5},
{0x3268, 0xd7},
{0x3269, 0x0e},
{0x326a, 0xd7},
{0x326b, 0x4a},
{0x326c, 0x00},
{0x326d, 0xdd},
{0x326e, 0x8b},
{0x326f, 0x0f},
{0x3270, 0xc9},
{0x3271, 0x6d},
{0x3272, 0x00},
{0x3273, 0x05},
{0x3274, 0x2c},
{0x3275, 0x00},
{0x3276, 0x1d},
{0x3277, 0x9f},
{0x3278, 0x00},
{0x3279, 0x14},
{0x327a, 0xc1},
{0x327b, 0x0f},
{0x327c, 0xcb},
{0x327d, 0xb9},
{0x327e, 0x0f},
{0x327f, 0x93},
{0x3280, 0x73},
{0x3281, 0x0f},
{0x3282, 0xe8},
{0x3283, 0x07},
{0x3284, 0x00},
{0x3285, 0x47},
{0x3286, 0xe1},
{0x3287, 0x0f},
{0x3288, 0xaa},
{0x3289, 0xd1},
{0x328a, 0x0f},
{0x328b, 0xfd},
{0x328c, 0x14},
{0x328d, 0x00},
{0x328e, 0x4e},
{0x328f, 0xa2},
{0x3290, 0x00},
{0x3291, 0x4d},
{0x3292, 0x19},
{0x3293, 0x00},
{0x3294, 0x3c},
{0x3295, 0x8f},
{0x3296, 0x0f},
{0x3297, 0x92},
{0x3298, 0x57},
{0x3299, 0x00},
{0x329a, 0x6c},
{0x329b, 0xe4},
{0x329c, 0x00},
{0x329d, 0x11},
{0x329e, 0xfe},
{0x329f, 0x0f},
{0x32a0, 0x83},
{0x32a1, 0xa4},
{0x32a2, 0x0f},
{0x32a3, 0xde},
{0x32a4, 0x54},
{0x32a5, 0x0f},
{0x32a6, 0xac},
{0x32a7, 0x7e},
{0x32a8, 0x00},
{0x32a9, 0x6c},
{0x32aa, 0x09},
{0x32ab, 0x0f},
{0x32ac, 0xa7},
{0x32ad, 0xd7},
{0x32ae, 0x0f},
{0x32af, 0xe6},
{0x32b0, 0xde},
{0x32b1, 0x00},
{0x32b2, 0x76},
{0x32b3, 0xc2},
{0x32b4, 0x00},
{0x32b5, 0x17},
{0x32b6, 0x6d},
{0x32b7, 0x00},
{0x32b8, 0x31},
{0x32b9, 0x0e},
{0x32ba, 0x0f},
{0x32bb, 0xe5},
{0x32bc, 0x55},
{0x32bd, 0x00},
{0x32be, 0x12},
{0x32bf, 0x29},
{0x32c0, 0x0f},
{0x32c1, 0xdc},
{0x32c2, 0x6a},
{0x32c3, 0x00},
{0x32c4, 0x17},
{0x32c5, 0xa4},
{0x32c6, 0x0f},
{0x32c7, 0xfb},
{0x32c8, 0xa5},
{0x32c9, 0x00},
{0x32ca, 0x07},
{0x32cb, 0xf4},
{0x32cc, 0x0f},
{0x32cd, 0xc9},
{0x32ce, 0x4f},
{0x32cf, 0x00},
{0x32d0, 0x24},
{0x32d1, 0x32},
{0x32d2, 0x00},
{0x32d3, 0x62},
{0x32d4, 0xe8},
{0x32d5, 0x0f},
{0x32d6, 0x63},
{0x32d7, 0x6b},
{0x32d8, 0x00},
{0x32d9, 0xc4},
{0x32da, 0x5c},
{0x32db, 0x0f},
{0x32dc, 0xe1},
{0x32dd, 0xd2},
{0x32de, 0x0f},
{0x32df, 0xe9},
{0x32e0, 0xd0},
{0x32e1, 0x00},
{0x32e2, 0x24},
{0x32e3, 0xc7},
{0x32e4, 0x00},
{0x32e5, 0x2d},
{0x32e6, 0xd7},
{0x32e7, 0x0f},
{0x32e8, 0xad},
{0x32e9, 0x1a},
{0x32ea, 0x0f},
{0x32eb, 0xb6},
{0x32ec, 0x62},
{0x32ed, 0x0f},
{0x32ee, 0xb3},
{0x32ef, 0x42},
{0x32f0, 0x00},
{0x32f1, 0x99},
{0x32f2, 0xab},
{0x32f3, 0x0f},
{0x32f4, 0x76},
{0x32f5, 0x4c},
{0x32f6, 0x0f},
{0x32f7, 0xdd},
{0x32f8, 0x82},
{0x32f9, 0x00},
{0x32fa, 0x8e},
{0x32fb, 0xe4},
{0x32fc, 0x00},
{0x32fd, 0x13},
{0x32fe, 0xfe},
{0x32ff, 0x00},
{0x3300, 0x99},
{0x3301, 0xbf},
{0x3302, 0x0e},
{0x3303, 0xfb},
{0x3304, 0x45},
{0x3305, 0x00},
{0x3306, 0xd9},
{0x3307, 0x38},
{0x3308, 0x00},
{0x3309, 0x32},
{0x330a, 0xac},
{0x330b, 0x0f},
{0x330c, 0x29},
{0x330d, 0x15},
{0x330e, 0x00},
{0x330f, 0x20},
{0x3310, 0xb1},
{0x3311, 0x0f},
{0x3312, 0x5e},
{0x3313, 0x01},
{0x3314, 0x00},
{0x3315, 0xe7},
{0x3316, 0xb6},
{0x3317, 0x0f},
{0x3318, 0x59},
{0x3319, 0xeb},
{0x331a, 0x0f},
{0x331b, 0xcd},
{0x331c, 0xcf},
{0x331d, 0x00},
{0x331e, 0xa1},
{0x331f, 0xf8},
{0x3320, 0x0f},
{0x3321, 0xf2},
{0x3322, 0x8c},
{0x3323, 0x00},
{0x3324, 0x20},
{0x3325, 0x54},
{0x3326, 0x00},
{0x3327, 0x09},
{0x3328, 0x91},
{0x3329, 0x0f},
{0x332a, 0xcf},
{0x332b, 0xac},
{0x332c, 0x0f},
{0x332d, 0xed},
{0x332e, 0x29},
{0x332f, 0x00},
{0x3330, 0x5f},
{0x3331, 0x7f},
{0x3332, 0x0f},
{0x3333, 0xf7},
{0x3334, 0x07},
{0x3335, 0x00},
{0x3336, 0x4f},
{0x3337, 0x26},
{0x3338, 0x0f},
{0x3339, 0x4e},
{0x333a, 0x15},
{0x333b, 0x00},
{0x333c, 0xa8},
{0x333d, 0xc8},
{0x333e, 0x00},
{0x333f, 0x52},
{0x3340, 0x85},
{0x3341, 0x0f},
{0x3342, 0x02},
{0x3343, 0x45},
{0x3344, 0x00},
{0x3345, 0xd9},
{0x3346, 0x07},
{0x3347, 0x0f},
{0x3348, 0xdd},
{0x3349, 0x5c},
{0x334a, 0x0f},
{0x334b, 0xed},
{0x334c, 0x45},
{0x334d, 0x00},
{0x334e, 0x1e},
{0x334f, 0x4a},
{0x3350, 0x00},
{0x3351, 0x3f},
{0x3352, 0x57},
{0x3353, 0x0f},
{0x3354, 0x9b},
{0x3355, 0xf3},
{0x3356, 0x0f},
{0x3357, 0xa3},
{0x3358, 0xb8},
{0x3359, 0x0f},
{0x335a, 0xa7},
{0x335b, 0x85},
{0x335c, 0x00},
{0x335d, 0xad},
{0x335e, 0xf3},
{0x335f, 0x0f},
{0x3360, 0x69},
{0x3361, 0x1c},
{0x3362, 0x0f},
{0x3363, 0xc7},
{0x3364, 0xb0},
{0x3365, 0x00},
{0x3366, 0xb4},
{0x3367, 0x74},
{0x3368, 0x00},
{0x3369, 0x2c},
{0x336a, 0x8f},
{0x336b, 0x00},
{0x336c, 0xaa},
{0x336d, 0xbb},
{0x336e, 0x0e},
{0x336f, 0xe2},
{0x3370, 0x0d},
{0x3371, 0x00},
{0x3372, 0xe5},
{0x3373, 0xd9},
{0x3374, 0x00},
{0x3375, 0x5c},
{0x3376, 0xac},
{0x3377, 0x0e},
{0x3378, 0xe5},
{0x3379, 0xf3},
{0x337a, 0x00},
{0x337b, 0x00},
{0x337c, 0xd1},
{0x337d, 0x0f},
{0x337e, 0x4b},
{0x337f, 0x0c},
{0x3380, 0x00},
{0x3381, 0xfd},
{0x3382, 0x22},
{0x3383, 0x0f},
{0x3384, 0x4e},
{0x3385, 0x6d},
{0x3386, 0x0f},
{0x3387, 0x9f},
{0x3388, 0x07},
{0x3389, 0x00},
{0x338a, 0xf4},
{0x338b, 0x5d},
{0x338c, 0x00},
{0x338d, 0x12},
{0x338e, 0xcb},
{0x338f, 0x00},
{0x3390, 0x2f},
{0x3391, 0xc8},
{0x3392, 0x00},
{0x3393, 0x00},
{0x3394, 0x28},
{0x3395, 0x0f},
{0x3396, 0xe0},
{0x3397, 0x2e},
{0x3398, 0x0f},
{0x3399, 0xf7},
{0x339a, 0x28},
{0x339b, 0x00},
{0x339c, 0x2e},
{0x339d, 0xa5},
{0x339e, 0x0f},
{0x339f, 0xe9},
{0x33a0, 0x0c},
{0x33a1, 0x00},
{0x33a2, 0x48},
{0x33a3, 0xc1},
{0x33a4, 0x0f},
{0x33a5, 0x4e},
{0x33a6, 0x7a},
{0x33a7, 0x00},
{0x33a8, 0x93},
{0x33a9, 0x44},
{0x33aa, 0x00},
{0x33ab, 0x76},
{0x33ac, 0x1a},
{0x33ad, 0x0e},
{0x33ae, 0xf7},
{0x33af, 0xda},

{0x3096, 0x60},
{0x3096, 0x40},
#endif
};

/*1280x960*/
const struct _sensor_reg_t s5k4e1gx_foxconn_framesize_1280x960[] = {
    {0x0100, 0x00},//stream off
    {0x0105, 0x01}, //

    {0x301B, 0x83},

    /*Output Size*/
    {0x30A9, 0x02},//Horizontal Binning On
    {0x300E, 0xEB},//Vertical Binning On

    {0x0380, 0x00},//x_even_inc 1
    {0x0381, 0x01},
    {0x0382, 0x00},//x_odd_inc 1
    {0x0383, 0x01},
    {0x0384, 0x00},//y_even_inc 1
    {0x0385, 0x01},
    {0x0386, 0x00},//y_odd_inc 3
    {0x0387, 0x03},

    {0x0344, 0x00},// x_start
    {0x0345, 0x00},
    {0x0346, 0x00},//y_start
    {0x0347, 0x00},
    {0x0348, 0x0A},//x_end
    {0x0349, 0x1F},
    {0x034A, 0x07},//y_end
    {0x034B, 0x9F},

    {0x034C, 0x05},//x_output_size 1280
    {0x034D, 0x00},
    {0x034E, 0x03},//y_output_size 960
    {0x034F, 0xC0},

    {0x30BF, 0xAB}, //outif_enable[7], data_type[5:0](2Bh = bayer 10bit)
    {0x30C0, 0x40}, //video_offset[7:4] 1600%12
    {0x30C8, 0x06}, //video_data_length 1600 = 1280 * 1.25
    {0x30C9, 0x40},

    /*Timing configuration*/
    //{0x0202, 0x03},//coarse integration time
    //{0x0203, 0xd4},
    //{0x0204, 0x00},//analog gain[msb] 0100 x8 0080 x4
    //{0x0205, 0x20},//analog gain[lsb] 0040 x2 0020 x1

    /* Frame Length */
    {0x0340, 0x04},//Capture 07B4(1952[# of row]+[V-blank])
    {0x0341, 0x30},//SXGA 03CC(960[# of row]+[V-blank])

    /* Line Length */
    {0x0342, 0x0B},//2738
    {0x0343, 0xA6},

#if 1
    /*Lens shading*/
    {0x3096, 0x40},
    {0x3097, 0x52}, //sh4ch_blk_width = 82
    {0x3098, 0x3e}, //sh4ch_blk_height = 62
    {0x3099, 0x03}, //sh4ch_step_x msb (sh4ch_step_x = 799)
    {0x309a, 0x1f}, //sh4ch_step_x lsb
    {0x309b, 0x04}, //sh4ch_step_y msb (sh4ch_step_y = 1057)
    {0x309c, 0x21}, //sh4ch_step_y lsb
    {0x309d, 0x00}, //sh4ch_start_blk_cnt_x = 0
    {0x309e, 0x00}, //sh4ch_start_int_cnt_x = 0
    {0x309f, 0x00}, //sh4ch_start_frac_cnt_x msb (sh4ch_start_frac_cnt_x = 0)
    {0x30a0, 0x00}, //sh4ch_start_frac_cnt_x lsb
    {0x30a1, 0x00}, //sh4ch_start_blk_cnt_y = 0
    {0x30a2, 0x00}, //sh4ch_start_int_cnt_y = 0
    {0x30a3, 0x00}, //sh4ch_start_frac_cnt_y msb (sh4ch_start_frac_cnt_x = 0)
    {0x30a4, 0x00}, //sh4ch_start_frac_cnt_y lsb
    {0x30a5, 0x01},
    {0x30a6, 0x00}, // gs_pedestal	= 64
#endif
    {0x0100, 0x01},//stream ON
};

/*1920x1080*/
const struct _sensor_reg_t s5k4e1gx_foxconn_framesize_1080p[] = {
{0x0100, 0x00},//stream off
{0x0105, 0x01}, //
{0x301B, 0x75},

{0x30A9, 0x03}, //Horizontal Binning On
{0x300E, 0xE8}, //Vertical Binning On

{0x0380, 0x00}, //x_even_inc 1
{0x0381, 0x01},
{0x0382, 0x00}, //x_odd_inc 1
{0x0383, 0x01},
{0x0384, 0x00}, //y_even_inc 1
{0x0385, 0x01},
{0x0386, 0x00}, //y_odd_inc 1
{0x0387, 0x01},

{0x0344, 0x01}, //00
{0x0345, 0x58}, //00
{0x0346, 0x01}, //00
{0x0347, 0xB4}, //00
{0x0348, 0x08}, //0A
{0x0349, 0xD7}, //2F
{0x034A, 0x05}, //07
{0x034B, 0xF3}, //A7

{0x034C, 0x07}, //0A//x_output size
{0x034D, 0x80}, //30
{0x034E, 0x04}, //07//y_output size
{0x034F, 0x40}, //A8

{0x30BF, 0xAB}, //outif_enable[7], data_type[5:0](2Bh = bayer 10bit)
{0x30C0, 0x00}, //80//video_offset[7:4] 2400%12
{0x30C8, 0x09}, //0C//video_data_length 2400 = 1920 * 1.25
{0x30C9, 0x60}, //BC

/* Frame Length */
{0x0340, 0x04},//Capture 07B4(1952[# of row]+[V-blank])
{0x0341, 0xB0},//SXGA 03E0(960[# of row]+[V-blank])

/* Line Length */
{0x0342, 0x0B},//2982
{0x0343, 0xA6},

#if 1
/*Lens shading*/
{0x3096, 0x40},
{0x3097, 0x52}, //sh4ch_blk_width = 82
{0x3098, 0x7b}, //sh4ch_blk_height = 123
{0x3099, 0x03}, //sh4ch_step_x msb (sh4ch_step_x = 799)
{0x309a, 0x1f}, //sh4ch_step_x lsb
{0x309b, 0x02}, //sh4ch_step_y msb (sh4ch_step_y = 533)
{0x309c, 0x15}, //sh4ch_step_y lsb
{0x309d, 0x4f}, //sh4ch_start_blk_cnt_x = 79
{0x309e, 0x00}, //sh4ch_start_int_cnt_x = 0
{0x309f, 0xf6}, //sh4ch_start_frac_cnt_x msb (sh4ch_start_frac_cnt_x = 63121)
{0x30a0, 0x91}, //sh4ch_start_frac_cnt_x lsb
{0x30a1, 0x01}, //sh4ch_start_blk_cnt_y = 1
{0x30a2, 0x00}, //sh4ch_start_int_cnt_y = 0
{0x30a3, 0x02}, //sh4ch_start_frac_cnt_y msb (sh4ch_start_frac_cnt_x = 63121)
{0x30a4, 0x15}, //sh4ch_start_frac_cnt_y lsb
{0x30a5, 0x01},
{0x30a6, 0x00}, // gs_pedestal	= 64
#endif
{0x0100, 0x01},//stream ON
};

/*2592x1952*/
const struct _sensor_reg_t s5k4e1gx_foxconn_framesize_full[] = {
{0x0100, 0x00},//stream off
{0x0105, 0x01}, //
{0x301B, 0x75},

/*Output Size*/
{0x30A9, 0x03},//Horizontal Binning On
{0x300E, 0xE8},//Vertical Binning On

{0x0380, 0x00}, //x_even_inc 1
{0x0381, 0x01},
{0x0382, 0x00}, //x_odd_inc 1
{0x0383, 0x01},
{0x0384, 0x00}, //y_even_inc 1
{0x0385, 0x01},
{0x0386, 0x00}, //y_odd_inc 1
{0x0387, 0x01},

{0x0344, 0x00},// x_start
{0x0345, 0x00},
{0x0346, 0x00},//y_start
{0x0347, 0x00},
{0x0348, 0x0A},//x_end
{0x0349, 0x1F},
{0x034A, 0x07},//y_end
{0x034B, 0x9F},

{0x034C, 0x0A},//x_output size 2592
{0x034D, 0x20},
{0x034E, 0x07},//y_output size 1952
{0x034F, 0xA0},

{0x30BF, 0xAB},//outif_enable[7], data_type[5:0](2Bh = bayer 10bit)
{0x30C0, 0x00},//video_offset[7:4] 3240%12
{0x30C8, 0x0C},//video_data_length 3240 = 2592 * 1.25
{0x30C9, 0xA8},

/* Frame Length */
{0x0340, 0x08},//Capture 07B4(1952[# of row]+[V-blank])
{0x0341, 0x64},//SXGA 03E0(960[# of row]+[V-blank])

/* Line Length */
{0x0342, 0x0B},//2982
{0x0343, 0xA6},

#if 1
/*Lens shading*/
{0x3096, 0x40},
{0x3097, 0x52}, 	//sh4ch_blk_width = 82
{0x3098, 0x7b}, 	//sh4ch_blk_height = 123
{0x3099, 0x03}, 	//sh4ch_step_x msb (sh4ch_step_x = 799)
{0x309a, 0x1f}, 	//sh4ch_step_x lsb
{0x309b, 0x02}, 	//sh4ch_step_y msb (sh4ch_step_y = 533)
{0x309c, 0x15}, 	//sh4ch_step_y lsb
{0x309d, 0x00}, 	//sh4ch_start_blk_cnt_x = 0
{0x309e, 0x00}, 	//sh4ch_start_int_cnt_x = 0
{0x309f, 0x00}, 	//sh4ch_start_frac_cnt_x msb (sh4ch_start_frac_cnt_x = 0)
{0x30a0, 0x00}, 	//sh4ch_start_frac_cnt_x lsb
{0x30a1, 0x00}, 	//sh4ch_start_blk_cnt_y = 0
{0x30a2, 0x00}, 	//sh4ch_start_int_cnt_y = 0
{0x30a3, 0x00}, 	//sh4ch_start_frac_cnt_y msb (sh4ch_start_frac_cnt_x = 0)
{0x30a4, 0x00}, 	//sh4ch_start_frac_cnt_y lsb
{0x30a5, 0x01},
{0x30a6, 0x00}, 	// gs_pedestal	= 64
#endif
{0x0100, 0x01},//stream ON
};

#endif /* S5K4E1GX_FOXCONN_H_INCLUDED */

/************************** END ***************************/

