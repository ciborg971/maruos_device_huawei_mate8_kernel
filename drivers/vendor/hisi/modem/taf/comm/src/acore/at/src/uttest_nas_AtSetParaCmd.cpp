#include "gtest/gtest.h"
#include "llt_mockcpp.h"

#include "uttest_AtSetParaCmd.h"

//建议这样引用，避免下面用关键字时需要加前缀 testing::
using namespace testing;


//说明：经过改造后的gtest+，测试套和测试用例名字不允许为空
//      请避免用和gtest相同的关键字，避免不必要的麻烦
//      gtest提供 EXPECT 和 ASSERT 两套,具体含义可以看胶片，两套宏都是一一对应的，下面以EXPECT为例

//1、比对布尔类型 EXPECT_TRUE　EXPECT_FALSE/ASSERT_TRUE
//2、比较整形 EXPECT_EQ EXPECT_NE
//3、比较字符串 EXPECT_STREQ
//4、设置失败输出信息 ADD_FAILUREd
//5、设置成功和失败 SUCCEED FAIL
//6、自定义格式 EXPECT_PRED_FORMAT3
//7、期望带入参数返回TRUE EXPECT_PRED1
//8、浮点型比较 EXPECT_FLOAT_EQ EXPECT_PRED_FORMAT2 ASSERT_PRED_FORMAT2
//9、类型检查 StaticAssertTypeEq
//10、设置3种测试级别事件
//11、获取测试用例名字 test_case_name()
//12、比较异常 EXPECT_THROW
//13、结构体类型比较ASSERT_SAME_DATA ASSERT_SAME_MEMORY

AT_PAR_CMD_ELEMENT_STRU             gstGlastErrCmdInfo = {AT_CMD_GLASTERR,
    At_SetGlastErrPara,     AT_SET_PARA_TIME,   At_QryGlastErrPara,     AT_QRY_PARA_TIME,   VOS_NULL_PTR, AT_NOT_SET_TIME,
    VOS_NULL_PTR,   AT_NOT_SET_TIME,
    AT_CME_INCORRECT_PARAMETERS, CMD_TBL_LIMITED_NULL,
    (VOS_UINT8*)"^GLASTERR",    (VOS_UINT8*)"(0-255)"};



class Test_At_SetCustomizeItemToDefaultVal: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {

    }
protected:
};


TEST_F(Test_At_SetCustomizeItemToDefaultVal, Test_At_SetCustomizeItemToDefaultVal_001)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    AT_CUSTOMIZE_ITEM_DFLT_ENUM_UINT8   enCustomizeItemStub;

    /* 初始化变量 */
    enCustomizeItemStub = AT_CUSTOMIZE_ITEM_DEFAULT_VALUE_FROM_UE;

    MOCKER(At_WriteWifiNVToDefault)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(At_WriteSimLockNVToDefault)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(At_WriteCustomizeSrvNVToDefault)
        .expects(never());

    MOCKER(At_WriteGprsActTimerNVToDefault)
        .expects(never());

    /* 全局变量赋值 */

    /* 调用消息入口函数 */
    ulRst = At_SetCustomizeItemToDefaultVal(enCustomizeItemStub);

    /* 结果验证*/
    EXPECT_EQ(VOS_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}




class Test_At_SetScidPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex = 0;
    }
    void TearDown()
    {

    }
protected:
    VOS_UINT8                   ucIndex;
};


TEST_F(Test_At_SetScidPara, Test_At_SetScidPara001)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;

    /* 初始化变量 */

    /* 全局变量赋值 */
    gastAtClientTab[ucIndex].usClientId = 0;
    gastAtClientTab[ucIndex].opId       = 0;

    /* 桩函数 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用消息入口函数 */
    ulRst = At_SetScidPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_ERROR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();

}
class Test_At_SetVPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetVPara,Test_At_SetVPara_001)
{
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    At_SetVPara(0);

    /* 结果验证*/
    EXPECT_EQ(1, gucAtVType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}



TEST_F(Test_At_SetVPara,Test_At_SetVPara_002)
{
    gastAtParaList[0].usParaLen = 0;
    gastAtParaList[0].ulParaValue = 0;

    At_SetVPara(0);

    /* 结果验证*/
    EXPECT_EQ(0, gucAtVType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


class Test_AT_SetWiFiRatePara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {

    }
};

#if (FEATURE_ON!=FEATURE_LTE)

TEST_F(Test_AT_SetWiFiRatePara,Test_AT_SetWiFiRatePara_001)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_CHAR                           *pcCmd="wl nrate -m 0";

    gucAtParaIndex                    = 1;

    g_ulWifiMode = AT_WIFI_SUPPORT_MODE_N;

    gastAtParaList[0].ulParaValue = 650;

    MOCKER(wifi_athtestcmd)
        .stubs()
        .with(mirror(pcCmd, strlen(pcCmd) + 1));

    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue(BSP_MODULE_SUPPORT));

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiRatePara(0);

    /* 结果验证*/
    EXPECT_EQ(AT_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetWiFiRatePara,Test_AT_SetWiFiRatePara_002)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_CHAR                           *pcCmd="wl nrate -m 1";

    gucAtParaIndex                    = 1;

    g_ulWifiMode = AT_WIFI_SUPPORT_MODE_N;

    gastAtParaList[0].ulParaValue = 1300;

    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue(BSP_MODULE_SUPPORT));

    MOCKER(wifi_athtestcmd)
        .stubs()
        .with(mirror(pcCmd, strlen(pcCmd) + 1));

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiRatePara(0);

    /* 结果验证*/
    EXPECT_EQ(AT_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetWiFiRatePara,Test_AT_SetWiFiRatePara_003)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_CHAR                           *pcCmd="wl nrate -m 2";

    gucAtParaIndex                    = 1;

    g_ulWifiMode = AT_WIFI_SUPPORT_MODE_N;

    gastAtParaList[0].ulParaValue = 1950;

    MOCKER(mdrv_misc_support_check)
        .will(returnValue(BSP_MODULE_SUPPORT));

    MOCKER(wifi_athtestcmd)
        .with(mirror(pcCmd, strlen(pcCmd) + 1));

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiRatePara(0);

    /* 结果验证*/
    EXPECT_EQ(AT_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetWiFiRatePara,Test_AT_SetWiFiRatePara_004)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_CHAR                           *pcCmd="wl nrate -m 3";

    gucAtParaIndex                    = 1;

    g_ulWifiMode = AT_WIFI_SUPPORT_MODE_N;

    gastAtParaList[0].ulParaValue = 2600;

    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue(BSP_MODULE_SUPPORT));

    MOCKER(wifi_athtestcmd)
        .stubs()
        .with(mirror(pcCmd, strlen(pcCmd) + 1));

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiRatePara(0);

    /* 结果验证*/
    EXPECT_EQ(AT_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetWiFiRatePara,Test_AT_SetWiFiRatePara_005)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_CHAR                           *pcCmd="wl nrate -m 4";

    gucAtParaIndex                    = 1;

    g_ulWifiMode = AT_WIFI_SUPPORT_MODE_N;

    gastAtParaList[0].ulParaValue = 3900;

    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue(BSP_MODULE_SUPPORT));

    MOCKER(wifi_athtestcmd)
        .stubs()
        .with(mirror(pcCmd, strlen(pcCmd) + 1));

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiRatePara(0);

    /* 结果验证*/
    EXPECT_EQ(AT_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetWiFiRatePara,Test_AT_SetWiFiRatePara_006)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_CHAR                           *pcCmd="wl nrate -m 5";

    gucAtParaIndex                    = 1;

    g_ulWifiMode = AT_WIFI_SUPPORT_MODE_N;

    gastAtParaList[0].ulParaValue = 5200;

    MOCKER(mdrv_misc_support_check)
        .will(returnValue(BSP_MODULE_SUPPORT));

    MOCKER(wifi_athtestcmd)
        .with(mirror(pcCmd, strlen(pcCmd) + 1));

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiRatePara(0);

    /* 结果验证*/
    EXPECT_EQ(AT_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetWiFiRatePara,Test_AT_SetWiFiRatePara_007)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_CHAR                           *pcCmd="wl nrate -m 6";

    gucAtParaIndex                    = 1;

    g_ulWifiMode = AT_WIFI_SUPPORT_MODE_N;

    gastAtParaList[0].ulParaValue = 5850;

    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue(BSP_MODULE_SUPPORT));

    MOCKER(wifi_athtestcmd)
        .stubs()
        .with(mirror(pcCmd, strlen(pcCmd) + 1));

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiRatePara(0);

    /* 结果验证*/
    EXPECT_EQ(AT_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
#endif

TEST_F(Test_AT_SetWiFiRatePara,Test_AT_SetWiFiRatePara_008)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_CHAR                           *pcCmd="wl nrate -m 7";

    gucAtParaIndex                    = 1;

    g_ulWifiMode = AT_WIFI_SUPPORT_MODE_N;

    gastAtParaList[0].ulParaValue = 6500;

    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue(BSP_MODULE_SUPPORT));

    MOCKER(wifi_athtestcmd)
        .stubs()
        .with(mirror(pcCmd, strlen(pcCmd) + 1));

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiRatePara(0);

    /* 结果验证*/
    EXPECT_EQ(AT_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}

class Test_AT_NdisDialDownProc: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        gucAtParaIndex                    = 0;
    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_NdisDialDownProc,Test_AT_NdisDialDownProc_001)
{
    VOS_UINT32                          ulRslt;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 0;
    gastAtParaList[2].usParaLen = 0;
    gastAtParaList[3].usParaLen = 0;
    gastAtParaList[4].usParaLen = 0;

    g_stAtNdisDhcpPara.ucIpv4Cid = 1;

    g_stAtNdisDhcpPara.enIpv4State = AT_PDP_STATE_ACTED;
    g_stAtNdisDhcpPara.enIpv6State = AT_PDP_STATE_IDLE;
    g_stAtNdisDhcpPara.enIpv4v6State = AT_PDP_STATE_IDLE;

    MOCKER(Ps_SendMsg)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_OK));

    ulRslt = At_NdisDupProc(0);

    //调用被测函数

    //执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRslt);
    EXPECT_EQ(g_stAtNdisDhcpPara.enIpv4State, AT_PDP_STATE_DEACTING);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


#if(FEATURE_ON == FEATURE_IPV6)


TEST_F(Test_AT_NdisDialDownProc,Test_AT_NdisDialDownProc_006)
{
    VOS_UINT32                          ulRslt;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 0;

    g_stAtNdisDhcpPara.ucIpv6Cid = 1;

    g_stAtNdisDhcpPara.enIpv4State = AT_PDP_STATE_IDLE;
    g_stAtNdisDhcpPara.enIpv6State = AT_PDP_STATE_ACTED;
    g_stAtNdisDhcpPara.enIpv4v6State = AT_PDP_STATE_IDLE;

    MOCKER(Ps_SendMsg)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    ulRslt = At_NdisDupProc(0);

    //调用被测函数

    //执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRslt);
    EXPECT_EQ(g_stAtNdisDhcpPara.enIpv6State, AT_PDP_STATE_DEACTING);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



TEST_F(Test_AT_NdisDialDownProc,Test_AT_NdisDialDownProc_007)
{
    VOS_UINT32                          ulRslt;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 0;

    g_stAtNdisDhcpPara.ucIpv4v6Cid = 1;

    g_stAtNdisDhcpPara.enIpv4State = AT_PDP_STATE_IDLE;
    g_stAtNdisDhcpPara.enIpv6State = AT_PDP_STATE_IDLE;
    g_stAtNdisDhcpPara.enIpv4v6State = AT_PDP_STATE_ACTED;

    MOCKER(Ps_SendMsg)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_OK));

    ulRslt = At_NdisDupProc(0);

    //调用被测函数

    //执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRslt);
    EXPECT_EQ(g_stAtNdisDhcpPara.enIpv4v6State, AT_PDP_STATE_DEACTING);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



TEST_F(Test_AT_NdisDialDownProc,Test_AT_NdisDialDownProc_008)
{
    VOS_UINT32                          ulRslt;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 2;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 0;

    g_stAtNdisDhcpPara.ucIpv4v6Cid = 1;

    g_stAtNdisDhcpPara.enIpv4State = AT_PDP_STATE_IDLE;
    g_stAtNdisDhcpPara.enIpv6State = AT_PDP_STATE_IDLE;
    g_stAtNdisDhcpPara.enIpv4v6State = AT_PDP_STATE_ACTED;
    MOCKER(Ps_SendMsg)
        .expects(never());

    ulRslt = At_NdisDupProc(0);

    //调用被测函数

    //执行检查
    EXPECT_EQ(AT_ERROR, ulRslt);
    EXPECT_EQ(g_stAtNdisDhcpPara.enIpv4v6State, AT_PDP_STATE_ACTED);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



TEST_F(Test_AT_NdisDialDownProc,Test_AT_NdisDialDownProc_009)
{
    VOS_UINT32                          ulRslt;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 0;

    g_stAtNdisDhcpPara.ucIpv4v6Cid = 1;

    g_stAtNdisDhcpPara.enIpv4State = AT_PDP_STATE_IDLE;
    g_stAtNdisDhcpPara.enIpv6State = AT_PDP_STATE_IDLE;
    g_stAtNdisDhcpPara.enIpv4v6State = AT_PDP_STATE_ACTED;

    MOCKER(Ps_SendMsg)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    ulRslt = At_NdisDupProc(0);

    //调用被测函数

    //执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRslt);
    EXPECT_EQ(g_stAtNdisDhcpPara.enIpv4v6State, AT_PDP_STATE_DEACTING);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

#endif



TEST_F(Test_AT_NdisDialDownProc,Test_AT_NdisDialDownProc_010)
{
    VOS_UINT32                          ulRslt;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 0;

    g_stAtNdisDhcpPara.ucIpv4v6Cid = 1;

    g_stAtNdisDhcpPara.enIpv4State = AT_PDP_STATE_IDLE;
    g_stAtNdisDhcpPara.enIpv6State = AT_PDP_STATE_IDLE;
    g_stAtNdisDhcpPara.enIpv4v6State = AT_PDP_STATE_IDLE;

    MOCKER(Ps_SendMsg)
        .expects(never());

    ulRslt = At_NdisDupProc(0);

    //调用被测函数

    //执行检查
    EXPECT_EQ(AT_OK, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}




class Test_At_SetNvRestorePara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        gucAtParaIndex                    = 0;
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetNvRestorePara,Test_At_SetNvRestorePara_001)
{
    // 变量声明
    VOS_UINT32                            ulRet;

    //参数初始化

    // 初始化全局变量;
    gucAtParaIndex                      = 1;

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetNvRestorePara(0);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetNvRestorePara,Test_At_SetNvRestorePara_002)
{
    // 变量声明
    VOS_UINT32                            ulRet;

    //参数初始化

    // 初始化全局变量;
    gucAtParaIndex                          = 0;

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(), any(), eq((unsigned short)DRV_AGENT_NVRESTORE_SET_REQ), eq((void *)VOS_NULL_PTR),any(),eq(WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulRet = At_SetNvRestorePara(0);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ(AT_CMD_NVRESTORE_SET, gastAtClientTab[0].CmdCurrentOpt);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetNvRestorePara,Test_At_SetNvRestorePara_003)
{
    // 变量声明
    VOS_UINT32                            ulRet;

    //参数初始化

    // 初始化全局变量;
    gucAtParaIndex                          = 0;

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(), any(), eq((unsigned short)DRV_AGENT_NVRESTORE_SET_REQ), eq((void *)VOS_NULL_PTR),any(),eq(WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    // 调用被测函数
    ulRet = At_SetNvRestorePara(0);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetNvRststtsPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        gucAtParaIndex                    = 0;
    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetNvRststtsPara,Test_AT_SetNvRststtsPara_001)
{
    // 变量声明
    VOS_UINT32                            ulRet;

    //参数初始化

    // 初始化全局变量;
    gucAtParaIndex                      = 1;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetNvRststtsPara(0);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetNvRststtsPara,Test_AT_SetNvRststtsPara_002)
{
    // 变量声明
    VOS_UINT32                            ulRet;

    //参数初始化

    // 初始化全局变量;
    gucAtParaIndex                          = 0;

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(), any(), eq((unsigned short)DRV_AGENT_NVRSTSTTS_QRY_REQ), eq((void *)VOS_NULL_PTR),any(),eq(WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulRet = AT_SetNvRststtsPara(0);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ(AT_CMD_NVRSTSTTS_READ, gastAtClientTab[0].CmdCurrentOpt);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetNvRststtsPara,Test_AT_SetNvRststtsPara_003)
{
    // 变量声明
    VOS_UINT32                            ulRet;

    //参数初始化

    // 初始化全局变量;
    gucAtParaIndex                          = 0;

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(), any(), eq((unsigned short)DRV_AGENT_NVRSTSTTS_QRY_REQ), eq((void *)VOS_NULL_PTR),any(),eq(WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    // 调用被测函数
    ulRet = AT_SetNvRststtsPara(0);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


class Test_At_SetFPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        gucAtParaIndex                      = 0;
        gastAtClientTab[0].UserType         = AT_MODEM_USER;
        g_bSetFlg                           = VOS_TRUE;
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetFPara,Test_At_SetFPara_001)
{
    // 变量声明
    VOS_UINT32                              ulRet;

    //参数初始化

    // 初始化全局变量;
    gastAtClientTab[0].UserType             = AT_MODEM_USER;
    g_bSetFlg                               = VOS_TRUE;

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetFPara(0);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetFPara,Test_At_SetFPara_002)
{
    // 变量声明
    VOS_UINT32                            ulRet;

    //参数初始化

    // 初始化全局变量;
    gastAtClientTab[0].UserType             = AT_COM_USER;
    g_bSetFlg                               = VOS_TRUE;

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetFPara(0);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetFPara,Test_At_SetFPara_003)
{
    // 变量声明
    VOS_UINT32                            ulRet;

    //参数初始化

    // 初始化全局变量;
    gastAtClientTab[0].UserType             = AT_COM_USER;
    g_bSetFlg                               = VOS_FALSE;

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(), any(), eq((unsigned short)DRV_AGENT_NVRESTORE_MANU_DEFAULT_REQ), eq((void *)VOS_NULL_PTR),any(),eq(WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulRet = At_SetFPara(0);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ(AT_CMD_F_SET, gastAtClientTab[0].CmdCurrentOpt);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetFPara,Test_At_SetFPara_004)
{
    // 变量声明
    VOS_UINT32                            ulRet;

    //参数初始化

    // 初始化全局变量;
    gastAtClientTab[0].UserType             = AT_COM_USER;
    g_bSetFlg                               = VOS_FALSE;

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(), any(), eq((unsigned short)DRV_AGENT_NVRESTORE_MANU_DEFAULT_REQ), eq((void *)VOS_NULL_PTR),any(),eq(WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    // 调用被测函数
    ulRet = At_SetFPara(0);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}



class Test_AT_SetCsqlvlPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        gucAtParaIndex                    = 1;
        gastAtParaList[0].usParaLen        = 1;
        gastAtParaList[0].ulParaValue    = 0;
    }
    void TearDown()
    {

    }
};

#if (NAS_FEATURE_CS_VC == FEATURE_ON)

class Test_At_SetDdsetexPara: public ::testing::Test
{
public:
    VOS_UINT8                           ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                                = 0;
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_DDSETEX_SET;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

    }

    void TearDown()
    {
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_DDSETEX_SET;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

        gucAtParaIndex                         = 0;
    }
};


TEST_F(Test_At_SetDdsetexPara,Test_At_SetDdsetexPara_001)
{
    // 参数定义
    VOS_UINT32   ulRst;

    // 参数初始化

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_READ_CMD;

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetDdsetexPara(ucIndex);

    // 执行检查
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetDdsetexPara,Test_At_SetDdsetexPara_002)
{
    // 参数定义
    VOS_UINT32   ulRst;

    // 参数初始化

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex  = 2;

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetDdsetexPara(ucIndex);

    // 执行检查
    ASSERT_EQ(AT_TOO_MANY_PARA, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetDdsetexPara,Test_At_SetDdsetexPara_003)
{
    // 参数定义
    VOS_UINT32   ulRst;

    // 参数初始化
    ucIndex = 0;

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex  = 1;
    gastAtParaList[0].ulParaValue = APP_VC_VOICE_PORT_MODEM;

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetDdsetexPara(ucIndex);

    // 执行检查
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}



TEST_F(Test_At_SetDdsetexPara,Test_At_SetDdsetexPara_004)
{
    // 参数定义
    VOS_UINT32   ulRst;

    // 参数初始化
    ucIndex = 0;

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex  = 1;
    gastAtParaList[0].ulParaValue = APP_VC_VOICE_PORT_DIAG;

    // MOCKER操作;
    MOCKER(APP_VC_SetVoicePort)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRst = At_SetDdsetexPara(ucIndex);

    // 执行检查
    ASSERT_EQ(AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetDdsetexPara,Test_At_SetDdsetexPara_005)
{
    // 参数定义
    TAF_UINT32   ulRst;
    TAF_UINT8    ucIndex;

    // 参数初始化
    ucIndex = 0;

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex  = 1;
    gastAtParaList[0].ulParaValue = APP_VC_VOICE_PORT_DIAG;

    // MOCKER操作;
    MOCKER(APP_VC_SetVoicePort)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRst = At_SetDdsetexPara(ucIndex);

    // 执行检查
    ASSERT_EQ(AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}

class Test_At_SetCvoicePara: public ::testing::Test
{
public:
    VOS_UINT8                           ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                                = 0;
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_CVOICE_SET;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

    }

    void TearDown()
    {
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_CVOICE_SET;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

        gucAtParaIndex                         = 0;
    }
};


TEST_F(Test_At_SetCvoicePara,Test_At_SetCvoicePara_001)
{
    // 参数定义
    VOS_UINT32   ulRst;

    // 参数初始化

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_READ_CMD;

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetCvoicePara(ucIndex);

    // 执行检查
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}



TEST_F(Test_At_SetCvoicePara,Test_At_SetCvoicePara_002)
{
    // 参数定义
    VOS_UINT32   ulRst;

    // 参数初始化

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex  = 2;

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetCvoicePara(ucIndex);

    // 执行检查
    ASSERT_EQ(AT_TOO_MANY_PARA, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetCvoicePara,Test_At_SetCvoicePara_003)
{
    // 参数定义
    VOS_UINT32   ulRst;

    // 参数初始化

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex  = 1;
    gastAtParaList[0].ulParaValue = APP_VC_VOICE_MODE_EARPHONE;

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetCvoicePara(ucIndex);

    // 执行检查
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}



TEST_F(Test_At_SetCvoicePara,Test_At_SetCvoicePara_004)
{
    // 参数定义
    VOS_UINT32   ulRst;

    // 参数初始化

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex  = 1;
    gastAtParaList[0].ulParaValue = APP_VC_VOICE_MODE_PCVOICE;

    // MOCKER操作;
    MOCKER(APP_VC_SetVoiceMode)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulRst = At_SetCvoicePara(ucIndex);

    // 执行检查
    ASSERT_EQ(AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}



TEST_F(Test_At_SetCvoicePara,Test_At_SetCvoicePara_005)
{
    // 参数定义
    VOS_UINT32   ulRst;

    // 参数初始化

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex  = 1;
    gastAtParaList[0].ulParaValue = APP_VC_VOICE_MODE_PCVOICE;

    // MOCKER操作;
    MOCKER(APP_VC_SetVoiceMode)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    // 调用被测函数
    ulRst = At_SetCvoicePara(ucIndex);

    // 执行检查
    ASSERT_EQ(AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
#endif  /* (NAS_FEATURE_CS_VC == FEATURE_ON) */

class Test_At_SetCpasPara: public ::testing::Test
{
public:
    VOS_UINT8                           ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                                = 0;
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_CPAS_SET;
        gastAtClientTab[ucIndex].opId          = 0;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

    }

    void TearDown()
    {
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_CPAS_SET;
        gastAtClientTab[ucIndex].opId          = 0;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

        gucAtParaIndex                         = 0;
    }
};


TEST_F(Test_At_SetCpasPara,Test_At_SetCpasPara_001)
{
    // 参数定义
    VOS_UINT32   ulRst;

    // 参数初始化

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_READ_CMD;

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetCpasPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}



class Test_At_SetDial99Para: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetDial99Para, Test_At_SetDial99Para_001)
{
    // 变量声明
    VOS_UINT32                          ulRslt;

    // 参数初始化

    // 初始化全局变量
    gucAtParaIndex = 8;

    gastAtParaList[0].usParaLen = 11;
    PS_MEM_CPY(gastAtParaList[0].aucPara,"D*99**10*1#", gastAtParaList[0].usParaLen);
    gastAtParaList[0].aucPara[13] = '\0';

    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].aucPara[0] = '*';
    gastAtParaList[1].aucPara[1] = '\0';

    gastAtParaList[2].usParaLen = 2;
    PS_MEM_CPY(gastAtParaList[2].aucPara,"99", gastAtParaList[2].usParaLen);
    gastAtParaList[2].aucPara[2] = '\0';

    gastAtParaList[3].usParaLen = 1;
    gastAtParaList[3].aucPara[0] = '*';
    gastAtParaList[3].aucPara[1] = '\0';

    gastAtParaList[4].usParaLen = 1;
    gastAtParaList[4].aucPara[0] = '*';
    gastAtParaList[4].aucPara[1] = '\0';

    gastAtParaList[5].usParaLen = 2;
    PS_MEM_CPY(gastAtParaList[5].aucPara,"10", gastAtParaList[5].usParaLen);
    gastAtParaList[5].aucPara[2] = '\0';

    gastAtParaList[6].usParaLen = 1;
    gastAtParaList[6].aucPara[0] = '*';
    gastAtParaList[6].aucPara[1] = '\0';

    gastAtParaList[7].usParaLen = 1;
    gastAtParaList[7].aucPara[0] = '1';
    gastAtParaList[7].aucPara[1] = '\0';

    // MOCKER操作

    // 调用被测函数
    ulRslt = At_SetDial99Para(0);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRslt);

    GlobalMockObject::verify();
}


class Test_At_SetAuthdataPara: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};


TEST_F(Test_At_SetAuthdataPara,Test_At_SetAuthdataPara_01)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    //执行检查
    ASSERT_EQ(AT_OK,At_SetAuthdataPara(0));
	GlobalMockObject::verify();
}


TEST_F(Test_At_SetAuthdataPara,Test_At_SetAuthdataPara_02)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gastAtParaList[0].usParaLen = 0;
    //执行检查
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS,At_SetAuthdataPara(0));
	GlobalMockObject::verify();
}



TEST_F(Test_At_SetAuthdataPara,Test_At_SetAuthdataPara_03)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gastAtParaList[0].usParaLen = 1;

    gucAtParaIndex = 6;
    //执行检查
    ASSERT_EQ(AT_TOO_MANY_PARA,At_SetAuthdataPara(0));
	GlobalMockObject::verify();
}


TEST_F(Test_At_SetAuthdataPara,Test_At_SetAuthdataPara_04)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gastAtParaList[0].usParaLen = 1;

    gucAtParaIndex = 5;

    gastAtParaList[1].usParaLen = 1;

    gastAtParaList[1].ulParaValue = 1;

    gastAtParaList[2].usParaLen = 7;

    //执行检查
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS,At_SetAuthdataPara(0));
	GlobalMockObject::verify();
}


TEST_F(Test_At_SetAuthdataPara,Test_At_SetAuthdataPara_05)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gastAtParaList[0].usParaLen = 1;

    gucAtParaIndex = 5;

    gastAtParaList[1].usParaLen = 1;

    gastAtParaList[1].ulParaValue = 1;

    gastAtParaList[2].usParaLen = 5;

    memcpy(gastAtParaList[2].aucPara, "23002", gastAtParaList[2].usParaLen);

    gastAtParaList[3].usParaLen = TAF_MAX_AUTHDATA_PASSWORD_LEN + 1;

    //执行检查
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS,At_SetAuthdataPara(0));
	GlobalMockObject::verify();
}


TEST_F(Test_At_SetAuthdataPara,Test_At_SetAuthdataPara_06)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gastAtParaList[0].usParaLen = 1;

    gucAtParaIndex = 5;

    gastAtParaList[1].usParaLen = 1;

    gastAtParaList[1].ulParaValue = 1;

    gastAtParaList[2].usParaLen = 5;

    memcpy(gastAtParaList[2].aucPara, "23002", gastAtParaList[2].usParaLen);

    gastAtParaList[3].usParaLen = 6;

    memcpy(gastAtParaList[3].aucPara, "abcdef", gastAtParaList[3].usParaLen);

    gastAtParaList[4].usParaLen = TAF_MAX_AUTHDATA_USERNAME_LEN + 1;

    //执行检查
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS,At_SetAuthdataPara(0));
	GlobalMockObject::verify();
}



TEST_F(Test_At_SetAuthdataPara,Test_At_SetAuthdataPara_07)
{
    TAF_AUTHDATA_EXT_STRU  stAuthdata;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    /*输入参数检查*/
    memset(&stAuthdata, 0x00, sizeof(TAF_AUTHDATA_EXT_STRU));

    stAuthdata.ucCid = (TAF_UINT8)gastAtParaList[0].ulParaValue;

    gucAtParaIndex = 5;

    gastAtParaList[1].usParaLen = 1;

    gastAtParaList[1].ulParaValue = 1;

    /*输入参数检查*/
    stAuthdata.bitOpAuthType= 1;
    stAuthdata.enAuthType = (TAF_PDP_AUTH_TYPE_ENUM_UINT8)gastAtParaList[1].ulParaValue;

    gastAtParaList[2].usParaLen = 5;

    memcpy(gastAtParaList[2].aucPara, "23002", gastAtParaList[2].usParaLen);

    /*输入参数检查*/
    stAuthdata.bitOpPlmn= 1;
    memcpy(stAuthdata.aucPlmn, gastAtParaList[2].aucPara, gastAtParaList[2].usParaLen);

    gastAtParaList[3].usParaLen = 6;

    memcpy(gastAtParaList[3].aucPara, "abcdef", gastAtParaList[3].usParaLen);

    /*输入参数检查*/
    stAuthdata.bitOpPassWord= 1;
    memcpy(stAuthdata.aucPassWord, gastAtParaList[3].aucPara, gastAtParaList[3].usParaLen);

    gastAtParaList[4].usParaLen = 4;

    memcpy(gastAtParaList[4].aucPara, "haha", gastAtParaList[4].usParaLen);

    /*输入参数检查*/
    stAuthdata.bitOpUserName= 1;
    memcpy(stAuthdata.aucUserName, gastAtParaList[4].aucPara, gastAtParaList[4].usParaLen);

    //执行检查
    ASSERT_EQ(AT_WAIT_ASYNC_RETURN,At_SetAuthdataPara(0));
	GlobalMockObject::verify();
}
TEST_F(Test_At_SetAuthdataPara,Test_At_SetAuthdataPara_08)
{
    TAF_AUTHDATA_EXT_STRU  stAuthdata;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    /*输入参数检查*/
    memset(&stAuthdata, 0x00, sizeof(TAF_AUTHDATA_EXT_STRU));

    stAuthdata.ucCid = (TAF_UINT8)gastAtParaList[0].ulParaValue;

    gucAtParaIndex = 5;

    gastAtParaList[1].usParaLen = 0;

    /*输入参数检查*/
    stAuthdata.bitOpAuthType= 0;

    gastAtParaList[2].usParaLen = 0;

    /*输入参数检查*/
    stAuthdata.bitOpPlmn = 0;

    gastAtParaList[3].usParaLen = 0;

    /*输入参数检查*/
    stAuthdata.bitOpPassWord= 0;

    gastAtParaList[4].usParaLen = 0;

    /*输入参数检查*/
    stAuthdata.bitOpUserName= 0;

    MOCKER(TAF_PS_SndMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    //执行检查
    ASSERT_EQ(AT_ERROR,At_SetAuthdataPara(0));
	GlobalMockObject::verify();
}
class Test_At_SetXPara: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};


TEST_F(Test_At_SetXPara,Test_At_SetXPara_01)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 0;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetXPara(ucIndex);

    // 执行检查
    EXPECT_EQ(0, gucAtXType);
    EXPECT_EQ(AT_OK, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



TEST_F(Test_At_SetXPara,Test_At_SetXPara_02)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 0;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 3; //设置的参数值

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetXPara(ucIndex);

    // 执行检查
    EXPECT_EQ(3, gucAtXType);
    EXPECT_EQ(AT_OK, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

#if (NAS_FEATURE_CS_VC == FEATURE_ON)

class Test_At_SetClvlPara: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};


TEST_F(Test_At_SetClvlPara,Test_At_SetClvlPara_01)
{
    // 参数定义
    TAF_UINT8       ucIndex;
    TAF_UINT32      ulRst;

    // 参数初始化
    ucIndex = 0;

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_READ_CMD;
    gucAtParaIndex = 1;

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetClvlPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}



TEST_F(Test_At_SetClvlPara,Test_At_SetClvlPara_02)
{
    // 参数定义
    TAF_UINT8       ucIndex;
    TAF_UINT32      ulRst;

    // 参数初始化
    ucIndex = 0;

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetClvlPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}



TEST_F(Test_At_SetClvlPara,Test_At_SetClvlPara_03)
{
    // 参数定义
    TAF_UINT8       ucIndex;
    TAF_UINT32      ulRst;

    // 参数初始化
    ucIndex = 0;

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].ulParaValue = 5;

    // MOCKER操作;
    MOCKER(APP_VC_SetVoiceVolume)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulRst = At_SetClvlPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRst);
    EXPECT_EQ(gastAtParaList[0].ulParaValue, gucAtVolumnLvl);
    EXPECT_EQ(AT_CMD_CLVL_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);


    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}



TEST_F(Test_At_SetClvlPara,Test_At_SetClvlPara_04)
{
    // 参数定义
    TAF_UINT8       ucIndex;
    TAF_UINT32      ulRst;

    // 参数初始化
    ucIndex = 0;

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].ulParaValue = 5;

    // MOCKER操作;
    MOCKER(APP_VC_SetVoiceVolume)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    // 调用被测函数
    ulRst = At_SetClvlPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRst);


    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}

#endif /*(NAS_FEATURE_CS_VC == FEATURE_ON)*/

class Test_At_FistScanSetPortPara: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};


TEST_F(Test_At_FistScanSetPortPara,Test_At_FistScanSetPortPara_01)
{
    VOS_UINT8       aucInputString[] = {'G','1',';','1',',','2','\0'};
    VOS_UINT16      usInputLen;
    VOS_UINT16      usSemiIndex;

    usInputLen  = (VOS_UINT16)VOS_StrLen((VOS_CHAR *)aucInputString);
    usSemiIndex = 0;

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_FistScanSetPortPara(&usSemiIndex, aucInputString, usInputLen));
    ASSERT_EQ(0, usSemiIndex);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_FistScanSetPortPara,Test_At_FistScanSetPortPara_02)
{
    VOS_UINT8       aucInputString[] = {'A','1',';',';','1',',','2','\0'};
    VOS_UINT16      usInputLen;
    VOS_UINT16      usSemiIndex;

    usInputLen = (VOS_UINT16)VOS_StrLen((VOS_CHAR *)aucInputString);
    usSemiIndex = 0;

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_FistScanSetPortPara(&usSemiIndex, aucInputString, usInputLen));
    ASSERT_EQ(3, usSemiIndex);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_FistScanSetPortPara,Test_At_FistScanSetPortPara_03)
{
    VOS_UINT8       aucInputString[] = {';','1',',','2','\0'};
    VOS_UINT16      usInputLen;
    VOS_UINT16      usSemiIndex;

    usInputLen = (VOS_UINT16)VOS_StrLen((VOS_CHAR *)aucInputString);
    usSemiIndex = 0;

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_FistScanSetPortPara(&usSemiIndex, aucInputString, usInputLen));
    ASSERT_EQ(0, usSemiIndex);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_FistScanSetPortPara,Test_At_FistScanSetPortPara_04)
{
    VOS_UINT8       aucInputString[] = {'1',',','2',';','\0'};
    VOS_UINT16      usInputLen;
    VOS_UINT16      usSemiIndex;

    usInputLen = (VOS_UINT16)VOS_StrLen((VOS_CHAR *)aucInputString);
    usSemiIndex = 0;

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_FistScanSetPortPara(&usSemiIndex, aucInputString, usInputLen));
    ASSERT_EQ(usInputLen - 1, usSemiIndex);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_FistScanSetPortPara,Test_At_FistScanSetPortPara_05)
{
    VOS_UINT8       aucInputString[] = {',','A','1',';','1',',','2','\0'};
    VOS_UINT16      usInputLen;
    VOS_UINT16      usSemiIndex;

    usInputLen = (VOS_UINT16)VOS_StrLen((VOS_CHAR *)aucInputString);
    usSemiIndex = 0;

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_FistScanSetPortPara(&usSemiIndex, aucInputString, usInputLen));
    ASSERT_EQ(3, usSemiIndex);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_FistScanSetPortPara,Test_At_FistScanSetPortPara_06)
{
    VOS_UINT8       aucInputString[] = {'A','1',';','1',',','2',',','\0'};
    VOS_UINT16      usInputLen;
    VOS_UINT16      usSemiIndex;

    usInputLen = (VOS_UINT16)VOS_StrLen((VOS_CHAR *)aucInputString);
    usSemiIndex = 0;

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_FistScanSetPortPara(&usSemiIndex, aucInputString, usInputLen));
    ASSERT_EQ(2, usSemiIndex);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_FistScanSetPortPara,Test_At_FistScanSetPortPara_07)
{
    VOS_UINT8       aucInputString[] = {'A','1',';','1',',','2','\0'};
    VOS_UINT16      usInputLen;
    VOS_UINT16      usSemiIndex;

    usInputLen = (VOS_UINT16)VOS_StrLen((VOS_CHAR *)aucInputString);
    usSemiIndex = 0;

    //执行检查
    ASSERT_EQ(VOS_TRUE, At_FistScanSetPortPara(&usSemiIndex, aucInputString, usInputLen));
    ASSERT_EQ(2, usSemiIndex);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SecScanSetPortFirstPara: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};


TEST_F(Test_At_SecScanSetPortFirstPara,Test_At_SecScanSetPortFirstPara_01)
{
    VOS_UINT8       aucInputString[] = {'A','1','1',';','1',',','2','\0'};
    VOS_UINT16      usInputLen;
    VOS_UINT16      usSemiIndex;
    VOS_UINT8       ucFirstParaCount;

    usInputLen          = (VOS_UINT16)VOS_StrLen((VOS_CHAR *)aucInputString);
    usSemiIndex         = 3;
    ucFirstParaCount    = 0;

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_SecScanSetPortFirstPara(usSemiIndex, &ucFirstParaCount, aucInputString, usInputLen));
    ASSERT_EQ(0, ucFirstParaCount);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SecScanSetPortFirstPara,Test_At_SecScanSetPortFirstPara_02)
{
    VOS_UINT8       aucInputString[] = {'A','1',',',',','A','2',';','1',',','2','\0'};
    VOS_UINT16      usInputLen;
    VOS_UINT16      usSemiIndex;
    VOS_UINT8       ucFirstParaCount;

    usInputLen          = (VOS_UINT16)VOS_StrLen((VOS_CHAR *)aucInputString);
    usSemiIndex         = 6;
    ucFirstParaCount    = 0;


    //执行检查
    ASSERT_EQ(VOS_FALSE, At_SecScanSetPortFirstPara(usSemiIndex, &ucFirstParaCount, aucInputString, usInputLen));
    ASSERT_EQ(1, ucFirstParaCount);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SecScanSetPortFirstPara,Test_At_SecScanSetPortFirstPara_03)
{
    VOS_UINT8       aucInputString[] = {'A','3',';','1',',','2','\0'};
    VOS_UINT16      usInputLen;
    VOS_UINT16      usSemiIndex;
    VOS_UINT8       ucFirstParaCount;

    usInputLen          = (VOS_UINT16)VOS_StrLen((VOS_CHAR *)aucInputString);
    usSemiIndex         = 2;
    ucFirstParaCount    = 0;

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_SecScanSetPortFirstPara(usSemiIndex, &ucFirstParaCount, aucInputString, usInputLen));
    ASSERT_EQ(0, ucFirstParaCount);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SecScanSetPortFirstPara,Test_At_SecScanSetPortFirstPara_04)
{
    VOS_UINT8       aucInputString[] = {'A','1',',','A','2',';','1',',','2','\0'};
    VOS_UINT16      usInputLen;
    VOS_UINT16      usSemiIndex;
    VOS_UINT8       ucFirstParaCount;

    usInputLen          = (VOS_UINT16)VOS_StrLen((VOS_CHAR *)aucInputString);
    usSemiIndex         = 5;
    ucFirstParaCount    = 0;

    //执行检查
    ASSERT_EQ(VOS_TRUE, At_SecScanSetPortFirstPara(usSemiIndex, &ucFirstParaCount, aucInputString, usInputLen));
    ASSERT_EQ(2, ucFirstParaCount);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SecScanSetPortFirstPara,Test_At_SecScanSetPortFirstPara_05)
{
    VOS_UINT8       aucInputString[] = {'F','F',';','1',',','2','\0'};
    VOS_UINT16      usInputLen;
    VOS_UINT16      usSemiIndex;
    VOS_UINT8       ucFirstParaCount;

    usInputLen          = (VOS_UINT16)VOS_StrLen((VOS_CHAR *)aucInputString);
    usSemiIndex         = 2;
    ucFirstParaCount    = 0;

    //执行检查
    ASSERT_EQ(VOS_TRUE, At_SecScanSetPortFirstPara(usSemiIndex, &ucFirstParaCount, aucInputString, usInputLen));
    ASSERT_EQ(1, ucFirstParaCount);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SecScanSetPortSecPara: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};


TEST_F(Test_At_SecScanSetPortSecPara,Test_At_SecScanSetPortSecPara_01)
{
    VOS_UINT8       aucInputString[] = {'A','1',',','A','2',';','1',',','2','\0'};
    VOS_UINT16      usInputLen;
    VOS_UINT16      usSemiIndex;
    VOS_UINT8       ucSecParaCount;
    VOS_UINT8       aucSecPara[AT_SETPORT_PARA_MAX_LEN][3];

    VOS_MemSet(aucSecPara, 0x00, AT_SETPORT_PARA_MAX_LEN * 3);

    usInputLen          = AT_SETPORT_PARA_MAX_CHAR_LEN + 10;//VOS_StrLen((VOS_CHAR *)aucInputString);
    usSemiIndex         = 5;
    ucSecParaCount      = 0;

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_SecScanSetPortSecPara(usSemiIndex, &ucSecParaCount, aucSecPara, aucInputString, usInputLen));
    ASSERT_EQ(0, ucSecParaCount);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SecScanSetPortSecPara,Test_At_SecScanSetPortSecPara_02)
{
    VOS_UINT8       aucInputString[] = {'A','1',';','1','1','1',',','2','\0'};
    VOS_UINT16      usInputLen;
    VOS_UINT16      usSemiIndex;
    VOS_UINT8       ucSecParaCount;
    VOS_UINT8       aucSecPara[AT_SETPORT_PARA_MAX_LEN][3];

    VOS_MemSet(aucSecPara, 0x00, AT_SETPORT_PARA_MAX_LEN * 3);

    usInputLen          = (VOS_UINT16)VOS_StrLen((VOS_CHAR *)aucInputString);
    usSemiIndex         = 2;
    ucSecParaCount      = 0;

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_SecScanSetPortSecPara(usSemiIndex, &ucSecParaCount, aucSecPara, aucInputString, usInputLen));
    ASSERT_EQ(0, ucSecParaCount);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SecScanSetPortSecPara,Test_At_SecScanSetPortSecPara_03)
{
    VOS_UINT8       aucInputString[] = {'A','1',';','1',',',',','2','\0'};
    VOS_UINT16      usInputLen;
    VOS_UINT16      usSemiIndex;
    VOS_UINT8       ucSecParaCount;
    VOS_UINT8       aucSecPara[AT_SETPORT_PARA_MAX_LEN][3];

    VOS_MemSet(aucSecPara, 0x00, AT_SETPORT_PARA_MAX_LEN * 3);

    usInputLen          = (VOS_UINT16)VOS_StrLen((VOS_CHAR *)aucInputString);
    usSemiIndex         = 2;
    ucSecParaCount      = 0;

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_SecScanSetPortSecPara(usSemiIndex, &ucSecParaCount, aucSecPara, aucInputString, usInputLen));
    ASSERT_EQ(1, ucSecParaCount);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SecScanSetPortSecPara,Test_At_SecScanSetPortSecPara_04)
{
    VOS_UINT8       aucInputString[] = {'A','1',',','A','2',';','A','3',',','2','\0'};
    VOS_UINT16      usInputLen;
    VOS_UINT16      usSemiIndex;
    VOS_UINT8       ucSecParaCount;
    VOS_UINT8       aucSecPara[AT_SETPORT_PARA_MAX_LEN][3];

    VOS_MemSet(aucSecPara, 0x00, AT_SETPORT_PARA_MAX_LEN * 3);

    usInputLen          = (VOS_UINT16)VOS_StrLen((VOS_CHAR *)aucInputString);
    usSemiIndex         = 5;
    ucSecParaCount      = 0;

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_SecScanSetPortSecPara(usSemiIndex, &ucSecParaCount, aucSecPara, aucInputString, usInputLen));
    ASSERT_EQ(0, ucSecParaCount);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SecScanSetPortSecPara,Test_At_SecScanSetPortSecPara_05)
{
    VOS_UINT8   aucInputString[] = {'A','1',',','A','2',';','A','1',',','2','\0'};
    VOS_UINT16  usInputLen;
    VOS_UINT16  usSemiIndex;
    VOS_UINT8   ucSecParaCount;
    VOS_UINT8   aucSecPara[AT_SETPORT_PARA_MAX_LEN][3];

    VOS_MemSet(aucSecPara, 0x00, AT_SETPORT_PARA_MAX_LEN * 3);

    usInputLen          = (VOS_UINT16)VOS_StrLen((VOS_CHAR *)aucInputString);
    usSemiIndex         = 5;
    ucSecParaCount      = 0;

    //执行检查
    ASSERT_EQ(VOS_TRUE, At_SecScanSetPortSecPara(usSemiIndex, &ucSecParaCount, aucSecPara, aucInputString, usInputLen));
    ASSERT_EQ(2, ucSecParaCount);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

class Test_At_SaveSetPortFirstPara: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};


TEST_F(Test_At_SaveSetPortFirstPara,Test_At_SaveSetPortFirstPara_01)
{
    VOS_UINT8   aucInputString[] = {'A','1',',','1',',','2',';','1',',','2','\0'};
    VOS_UINT16  usInputLen;
    VOS_UINT8   ucFirstParaCount;
    VOS_UINT8   aucFirstPort[AT_SETPORT_PARA_MAX_LEN];

    VOS_MemSet(aucFirstPort, 0x00, AT_SETPORT_PARA_MAX_LEN);

    usInputLen          = (VOS_UINT16)VOS_StrLen((VOS_CHAR *)aucInputString);
    ucFirstParaCount    = 3;

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_SaveSetPortFirstPara(ucFirstParaCount, aucFirstPort, aucInputString));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SaveSetPortFirstPara,Test_At_SaveSetPortFirstPara_02)
{
    VOS_UINT8   aucInputString[] = {'A','2',';','1',',','2','\0'};
    VOS_UINT16  usInputLen;
    VOS_UINT8   ucFirstParaCount;
    VOS_UINT8   aucFirstPort[AT_SETPORT_PARA_MAX_LEN];

    VOS_MemSet(aucFirstPort, 0x00, AT_SETPORT_PARA_MAX_LEN);

    usInputLen          = (VOS_UINT16)VOS_StrLen((VOS_CHAR *)aucInputString);
    ucFirstParaCount    = 1;

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_SaveSetPortFirstPara(ucFirstParaCount, aucFirstPort, aucInputString));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SaveSetPortFirstPara,Test_At_SaveSetPortFirstPara_03)
{
    VOS_UINT8   aucInputString[] = {'A','2','f','f',';','1',',','2','\0'};
    VOS_UINT16  usInputLen;
    VOS_UINT8   ucFirstParaCount;
    VOS_UINT8   aucFirstPort[AT_SETPORT_PARA_MAX_LEN];

    VOS_MemSet(aucFirstPort, 0x00, AT_SETPORT_PARA_MAX_LEN);

    usInputLen          = (VOS_UINT16)VOS_StrLen((VOS_CHAR *)aucInputString);
    ucFirstParaCount    = 2;

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_SaveSetPortFirstPara(ucFirstParaCount, aucFirstPort, aucInputString));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SaveSetPortFirstPara,Test_At_SaveSetPortFirstPara_04)
{
    VOS_UINT8   aucInputString[] = {'A','1',';','1',',','2','\0'};
    VOS_UINT16  usInputLen;
    VOS_UINT8   ucFirstParaCount;
    VOS_UINT8   aucFirstPort[AT_SETPORT_PARA_MAX_LEN];

    VOS_MemSet(aucFirstPort, 0x00, AT_SETPORT_PARA_MAX_LEN);

    usInputLen          = (VOS_UINT16)VOS_StrLen((VOS_CHAR *)aucInputString);
    ucFirstParaCount    = 1;

    //执行检查
    ASSERT_EQ(VOS_TRUE, At_SaveSetPortFirstPara(ucFirstParaCount, aucFirstPort, aucInputString));
    ASSERT_EQ(0xA1, aucFirstPort[0]);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SaveSetPortFirstPara,Test_At_SaveSetPortFirstPara_05)
{
    VOS_UINT8   aucInputString[] = {'F','F',';','1',',','2','\0'};
    VOS_UINT16  usInputLen;
    VOS_UINT8   ucFirstParaCount;
    VOS_UINT8   aucFirstPort[AT_SETPORT_PARA_MAX_LEN];

    VOS_MemSet(aucFirstPort, 0x00, AT_SETPORT_PARA_MAX_LEN);

    usInputLen          = (VOS_UINT16)VOS_StrLen((VOS_CHAR *)aucInputString);
    ucFirstParaCount    = 1;

    //执行检查
    ASSERT_EQ(VOS_TRUE, At_SaveSetPortFirstPara(ucFirstParaCount, aucFirstPort, aucInputString));
    ASSERT_EQ(0xff, aucFirstPort[0]);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SaveSetPortFirstPara,Test_At_SaveSetPortFirstPara_06)
{
    VOS_UINT8   aucInputString[] = {'A','1',',','A','2',';','1',',','2','\0'};
    VOS_UINT16  usInputLen;
    VOS_UINT8   ucFirstParaCount;
    VOS_UINT8   aucFirstPort[AT_SETPORT_PARA_MAX_LEN];

    VOS_MemSet(aucFirstPort, 0x00, AT_SETPORT_PARA_MAX_LEN);

    usInputLen          = (VOS_UINT16)VOS_StrLen((VOS_CHAR *)aucInputString);
    ucFirstParaCount    = 2;

    //执行检查
    ASSERT_EQ(VOS_TRUE, At_SaveSetPortFirstPara(ucFirstParaCount, aucFirstPort, aucInputString));
    ASSERT_EQ(0xA1, aucFirstPort[0]);
    ASSERT_EQ(0xA2, aucFirstPort[1]);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

class Test_At_SaveSetPortSecPara: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};


TEST_F(Test_At_SaveSetPortSecPara,Test_At_SaveSetPortSecPara_01)
{
    VOS_UINT8   ucSecParaCount;
    VOS_UINT8   aucSecPort[AT_SETPORT_PARA_MAX_LEN];
    VOS_UINT8   aucSecPara[AT_SETPORT_PARA_MAX_LEN][3];

    VOS_MemSet(aucSecPort, 0x00, AT_SETPORT_PARA_MAX_LEN);

    ucSecParaCount  = 0;

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_SaveSetPortSecPara(ucSecParaCount, aucSecPort, aucSecPara));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SaveSetPortSecPara,Test_At_SaveSetPortSecPara_02)
{
    VOS_UINT8   ucSecParaCount;
    VOS_UINT8   aucSecPort[AT_SETPORT_PARA_MAX_LEN];
    VOS_UINT8   aucSecPara[AT_SETPORT_PARA_MAX_LEN][3]
    = { "1",
        "1"
    };

    VOS_MemSet(aucSecPort, 0x00, AT_SETPORT_PARA_MAX_LEN);

    ucSecParaCount  = 2;

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_SaveSetPortSecPara(ucSecParaCount, aucSecPort, aucSecPara));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SaveSetPortSecPara,Test_At_SaveSetPortSecPara_03)
{
    VOS_UINT8   ucSecParaCount;
    VOS_UINT8   aucSecPort[AT_SETPORT_PARA_MAX_LEN];
    VOS_UINT8   aucSecPara[AT_SETPORT_PARA_MAX_LEN][3]
    = { "1",
        "3",
        "7"
    };

    VOS_MemSet(aucSecPort, 0x00, AT_SETPORT_PARA_MAX_LEN);

    ucSecParaCount  = 3;

    //执行检查
    ASSERT_EQ(VOS_TRUE, At_SaveSetPortSecPara(ucSecParaCount, aucSecPort, aucSecPara));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SaveSetPortSecPara,Test_At_SaveSetPortSecPara_04)
{
    VOS_UINT8   ucSecParaCount;
    VOS_UINT8   aucSecPort[AT_SETPORT_PARA_MAX_LEN];
    VOS_UINT8   aucSecPara[AT_SETPORT_PARA_MAX_LEN][3]= { "1",
        "2",
        "7"
    };

    VOS_MemSet(aucSecPort, 0x00, AT_SETPORT_PARA_MAX_LEN);

    ucSecParaCount  = 3;

    //执行检查
    ASSERT_EQ(VOS_TRUE, At_SaveSetPortSecPara(ucSecParaCount, aucSecPort, aucSecPara));
    ASSERT_EQ(0x01, aucSecPort[0]);
    ASSERT_EQ(0x02, aucSecPort[1]);
    ASSERT_EQ(0x07, aucSecPort[2]);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SaveSetPortSecPara,Test_At_SaveSetPortSecPara_05)
{
    VOS_UINT8   ucSecParaCount;
    VOS_UINT8   aucSecPort[AT_SETPORT_PARA_MAX_LEN];
    VOS_UINT8   aucSecPara[AT_SETPORT_PARA_MAX_LEN][3]
    = { "1",
        "2",
        "F"
    };

    VOS_MemSet(aucSecPort, 0x00, AT_SETPORT_PARA_MAX_LEN);

    ucSecParaCount  = 3;

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_SaveSetPortSecPara(ucSecParaCount, aucSecPort, aucSecPara));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_IsAvailableSetPortPara: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};


TEST_F(Test_At_IsAvailableSetPortPara,Test_At_IsAvailableSetPortPara_01)
{
    VOS_UINT8       aucInputString[] = {'G','1',';','1',',','2','\0'};
    VOS_UINT16      usInputLen = 6;
    VOS_UINT16      usSemiIndex = 2;

    VOS_UINT8       aucFirstPort[AT_SETPORT_PARA_MAX_LEN];
    VOS_UINT8       aucSecPort[AT_SETPORT_PARA_MAX_LEN];

    MOCKER(At_FistScanSetPortPara)
        .stubs()
        .with(outBoundP((VOS_UINT16 *)&usSemiIndex, (VOS_UINT32)sizeof(VOS_UINT16)), mirror(aucInputString, sizeof(aucInputString)), eq(usInputLen))
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_IsAvailableSetPortPara(aucInputString, usInputLen, aucFirstPort, aucSecPort));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_IsAvailableSetPortPara,Test_At_IsAvailableSetPortPara_02)
{
    VOS_UINT8       aucInputString[] = {'B','1',';','1',',','2','\0'};
    VOS_UINT16      usInputLen = 6;
    VOS_UINT16      usSemiIndex = 2;

    VOS_UINT8       aucFirstPort[AT_SETPORT_PARA_MAX_LEN];
    VOS_UINT8       aucSecPort[AT_SETPORT_PARA_MAX_LEN];

    MOCKER(At_FistScanSetPortPara)
        .stubs()
        .with(outBoundP((VOS_UINT16 *)&usSemiIndex, (VOS_UINT32)sizeof(VOS_UINT16)), mirror(aucInputString, sizeof(aucInputString)), eq(usInputLen))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(At_SecScanSetPortFirstPara)
        .stubs()
        .with(eq(usSemiIndex), any(), mirror(aucInputString, sizeof(aucInputString)), eq(usInputLen))
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_IsAvailableSetPortPara(aucInputString, usInputLen, aucFirstPort, aucSecPort));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_IsAvailableSetPortPara,Test_At_IsAvailableSetPortPara_03)
{
    VOS_UINT8       aucInputString[] = {'A','1',';','B','1',',','2','\0'};
    VOS_UINT16      usInputLen = 6;
    VOS_UINT16      usSemiIndex = 2;

    VOS_UINT8       aucFirstPort[AT_SETPORT_PARA_MAX_LEN];
    VOS_UINT8       aucSecPort[AT_SETPORT_PARA_MAX_LEN];

    MOCKER(At_FistScanSetPortPara)
        .stubs()
        .with(outBoundP((VOS_UINT16 *)&usSemiIndex, (VOS_UINT32)sizeof(VOS_UINT16)), mirror(aucInputString, sizeof(aucInputString)), eq(usInputLen))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(At_SecScanSetPortFirstPara)
        .stubs()
        .with(eq(usSemiIndex), any(), mirror(aucInputString, sizeof(aucInputString)), eq(usInputLen))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(At_SecScanSetPortSecPara)
        .stubs()
        .with(eq(usSemiIndex), any(), any(), mirror(aucInputString, sizeof(aucInputString)), eq(usInputLen))
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_IsAvailableSetPortPara(aucInputString, usInputLen, aucFirstPort, aucSecPort));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_IsAvailableSetPortPara,Test_At_IsAvailableSetPortPara_04)
{
    VOS_UINT8       aucInputString[] = {'A','1',';','B','1',',','2','\0'};
    VOS_UINT16      usInputLen = 6;
    VOS_UINT16      usSemiIndex = 2;

    VOS_UINT8       aucFirstPort[AT_SETPORT_PARA_MAX_LEN];
    VOS_UINT8       aucSecPort[AT_SETPORT_PARA_MAX_LEN];

    MOCKER(At_FistScanSetPortPara)
        .stubs()
        .with(outBoundP((VOS_UINT16 *)&usSemiIndex, (VOS_UINT32)sizeof(VOS_UINT16)), any(), any())
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(At_SecScanSetPortFirstPara)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(At_SecScanSetPortSecPara)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(At_SaveSetPortFirstPara)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_IsAvailableSetPortPara(aucInputString, usInputLen, aucFirstPort, aucSecPort));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_IsAvailableSetPortPara,Test_At_IsAvailableSetPortPara_05)
{
    VOS_UINT8       aucInputString[] = {'A','1',';','B','1',',','2','\0'};
    VOS_UINT16      usInputLen = 6;
    VOS_UINT16      usSemiIndex = 2;

    VOS_UINT8       aucFirstPort[AT_SETPORT_PARA_MAX_LEN];
    VOS_UINT8       aucSecPort[AT_SETPORT_PARA_MAX_LEN];

    MOCKER(At_FistScanSetPortPara)
        .stubs()
        .with(outBoundP((VOS_UINT16 *)&usSemiIndex, (VOS_UINT32)sizeof(VOS_UINT16)), any(), any())
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(At_SecScanSetPortFirstPara)
        .stubs()
        .with(eq(usSemiIndex), any(), mirror(aucInputString, sizeof(aucInputString)), eq(usInputLen))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(At_SecScanSetPortSecPara)
        .stubs()
        .with(eq(usSemiIndex), any(), any(),mirror(aucInputString, sizeof(aucInputString)), eq(usInputLen))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(At_SaveSetPortFirstPara)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(At_SaveSetPortSecPara)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_IsAvailableSetPortPara(aucInputString, usInputLen, aucFirstPort, aucSecPort));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_IsAvailableSetPortPara,Test_At_IsAvailableSetPortPara_06)
{
    VOS_UINT8       aucInputString[] = {'A','1',';','B','1',',','2','\0'};
    VOS_UINT16      usInputLen = 6;
    VOS_UINT16      usSemiIndex = 2;

    VOS_UINT8       aucFirstPort[AT_SETPORT_PARA_MAX_LEN];
    VOS_UINT8       aucSecPort[AT_SETPORT_PARA_MAX_LEN];

    MOCKER(At_FistScanSetPortPara)
        .stubs()
        .with(outBoundP((VOS_UINT16 *)&usSemiIndex, (VOS_UINT32)sizeof(VOS_UINT16)), any(), any())
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(At_SecScanSetPortFirstPara)
        .stubs()
        .with(eq(usSemiIndex), any(), mirror(aucInputString, sizeof(aucInputString)), eq(usInputLen))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(At_SecScanSetPortSecPara)
        .stubs()
        .with(eq(usSemiIndex), any(), any(), mirror(aucInputString, sizeof(aucInputString)), eq(usInputLen))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(At_SaveSetPortFirstPara)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(At_SaveSetPortSecPara)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(AT_CheckPortTypePara)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    //执行检查
    ASSERT_EQ(VOS_FALSE, At_IsAvailableSetPortPara(aucInputString, usInputLen, aucFirstPort, aucSecPort));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



class Test_At_SetPort: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};


TEST_F(Test_At_SetPort,Test_At_SetPort_01)
{
    //参数定义
    AT_PID_ENABLE_TYPE_STRU     stPidEnableType;

    //参数初始化
    stPidEnableType.ulPidEnabled = VOS_FALSE;

    //相关全局变量初始化

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), any(), outBoundP((void *)&stPidEnableType, (VOS_UINT32)sizeof(AT_PID_ENABLE_TYPE_STRU)), any())
        .will(returnValue(NV_ID_NOT_EXIST));

    //执行检查
    ASSERT_EQ(AT_ERROR,At_SetPort(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetPort,Test_At_SetPort_02)
{
    //参数定义
    AT_PID_ENABLE_TYPE_STRU     stPidEnableType;

    //参数初始化
    stPidEnableType.ulPidEnabled = VOS_FALSE;

    //相关全局变量初始化

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(),any(), outBoundP((void *)&stPidEnableType, (VOS_UINT32)sizeof(AT_PID_ENABLE_TYPE_STRU)), any())
        .will(returnValue(NV_OK));

    //执行检查
    ASSERT_EQ(AT_ERROR,At_SetPort(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetPort,Test_At_SetPort_03)
{
    //参数定义
    AT_PID_ENABLE_TYPE_STRU     stPidEnableType;

    //参数初始化
    stPidEnableType.ulPidEnabled = VOS_TRUE;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), any(), outBoundP((void *)&stPidEnableType, (VOS_UINT32)sizeof(AT_PID_ENABLE_TYPE_STRU)), any());


    //执行检查
    ASSERT_EQ(AT_ERROR,At_SetPort(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetPort,Test_At_SetPort_04)
{
    //参数定义
    AT_PID_ENABLE_TYPE_STRU     stPidEnableType;

    //参数初始化
    stPidEnableType.ulPidEnabled = VOS_TRUE;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), any(), outBoundP((void *)&stPidEnableType, (VOS_UINT32)sizeof(AT_PID_ENABLE_TYPE_STRU)), any())
        .will(returnValue((VOS_UINT32)NV_OK));

    //执行检查
    ASSERT_EQ(AT_ERROR,At_SetPort(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetPort,Test_At_SetPort_05)
{
    //参数定义
    AT_PID_ENABLE_TYPE_STRU     stPidEnableType;

    //参数初始化
    stPidEnableType.ulPidEnabled = VOS_TRUE;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 0;

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), any(), outBoundP((void *)&stPidEnableType, (VOS_UINT32)sizeof(AT_PID_ENABLE_TYPE_STRU)), any())
        .will(returnValue((VOS_UINT32)NV_OK));

    //执行检查
    ASSERT_EQ(AT_ERROR,At_SetPort(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetPort,Test_At_SetPort_06)
{
    //参数定义
    AT_PID_ENABLE_TYPE_STRU     stPidEnableType;

    //参数初始化
    stPidEnableType.ulPidEnabled = VOS_TRUE;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 110;

    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), any(), outBoundP((void *)&stPidEnableType, (VOS_UINT32)sizeof(AT_PID_ENABLE_TYPE_STRU)), any())
        .will(returnValue((VOS_UINT32)NV_OK));

    //执行检查
    ASSERT_EQ(AT_ERROR,At_SetPort(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetPort,Test_At_SetPort_07)
{
    //参数定义
    VOS_UINT8     aucFirstPort[AT_SETPORT_PARA_MAX_LEN];
    VOS_UINT8     aucSecPort[AT_SETPORT_PARA_MAX_LEN];
    AT_PID_ENABLE_TYPE_STRU     stPidEnableType;

    //参数初始化
    stPidEnableType.ulPidEnabled = VOS_TRUE;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 13;
    memcpy(gastAtParaList[0].aucPara, "A1,A2;1,,,3,7", gastAtParaList[0].usParaLen);

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), any(), outBoundP((void *)&stPidEnableType, (VOS_UINT32)sizeof(AT_PID_ENABLE_TYPE_STRU)), any())
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(At_IsAvailableSetPortPara)
        .stubs()
        .with(mirror(gastAtParaList[0].aucPara,sizeof(gastAtParaList[0].aucPara)), eq(gastAtParaList[0].usParaLen), outBoundP((VOS_UINT8 *)aucFirstPort, (VOS_UINT32)sizeof(aucFirstPort)), outBoundP((VOS_UINT8 *)aucSecPort, (VOS_UINT32)sizeof(aucSecPort)))
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    //执行检查
    ASSERT_EQ(AT_ERROR,At_SetPort(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetPort,Test_At_SetPort_08)
{
    VOS_UINT8     aucFirstPort[AT_SETPORT_PARA_MAX_LEN];
    VOS_UINT8     aucSecPort[AT_SETPORT_PARA_MAX_LEN];
    AT_PID_ENABLE_TYPE_STRU     stPidEnableType;

    //参数初始化
    stPidEnableType.ulPidEnabled = VOS_TRUE;
    memset(aucFirstPort, 0, AT_SETPORT_PARA_MAX_LEN);
    memset(aucSecPort, 0, AT_SETPORT_PARA_MAX_LEN);
    aucFirstPort[0] = 0xA1;
    aucSecPort[0] = 0x01;
    aucSecPort[1] = 0x02;


    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 6;
    memcpy(gastAtParaList[0].aucPara, "A1;1,2", gastAtParaList[0].usParaLen);

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .expects(exactly(2))
        .with(any(), any(), outBoundP((void *)&stPidEnableType, (VOS_UINT32)sizeof(AT_PID_ENABLE_TYPE_STRU)), any())
        .will(returnObjectList(NV_OK, NV_ID_NOT_EXIST));

    MOCKER(At_IsAvailableSetPortPara)
        .stubs()
        .with(mirror(gastAtParaList[0].aucPara,sizeof(gastAtParaList[0].aucPara)), eq(gastAtParaList[0].usParaLen), outBoundP((VOS_UINT8 *)aucFirstPort, (VOS_UINT32)sizeof(aucFirstPort)), outBoundP((VOS_UINT8 *)aucSecPort, (VOS_UINT32)sizeof(aucSecPort)))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(NV_WriteEx)
        .stubs()
        .will(returnValue(NV_ID_NOT_EXIST));

    //执行检查
    ASSERT_EQ(AT_ERROR,At_SetPort(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetPort,Test_At_SetPort_09)
{
    //参数定义
    VOS_UINT8     aucFirstPort[AT_SETPORT_PARA_MAX_LEN];
    VOS_UINT8     aucSecPort[AT_SETPORT_PARA_MAX_LEN];
    AT_DYNAMIC_PID_TYPE_STRU    stDynamicPidType;
    AT_PID_ENABLE_TYPE_STRU     stPidEnableType;

    //参数初始化
    stPidEnableType.ulPidEnabled = VOS_TRUE;

    memset(aucFirstPort, 0, AT_SETPORT_PARA_MAX_LEN);
    memset(aucSecPort, 0, AT_SETPORT_PARA_MAX_LEN);
    memset(&stDynamicPidType, 0, sizeof(AT_DYNAMIC_PID_TYPE_STRU));

    aucFirstPort[0] = 0xA1;
    aucSecPort[0] = 0x01;
    aucSecPort[1] = 0x02;

    stDynamicPidType.aucFirstPortStyle[0] = 0xA2;
    stDynamicPidType.aucRewindPortStyle[0] = 0x01;
    stDynamicPidType.aucRewindPortStyle[1] = 0x02;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 6;
    memcpy(gastAtParaList[0].aucPara, "A1;1,2", gastAtParaList[0].usParaLen);


    // MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), any(), outBoundP((void *)&stPidEnableType, (VOS_UINT32)sizeof(AT_PID_ENABLE_TYPE_STRU)), any())
        .will(returnValue(NV_OK));

    MOCKER(At_IsAvailableSetPortPara)
        .stubs()
        .with(mirror(gastAtParaList[0].aucPara,sizeof(gastAtParaList[0].aucPara)), eq(gastAtParaList[0].usParaLen), outBoundP((VOS_UINT8 *)aucFirstPort, (VOS_UINT32)sizeof(aucFirstPort)), outBoundP((VOS_UINT8 *)aucSecPort, (VOS_UINT32)sizeof(aucSecPort)))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), eq(en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((void *)&stDynamicPidType, (VOS_UINT32)sizeof(AT_DYNAMIC_PID_TYPE_STRU)))
        .will(returnValue(NV_OK));

    MOCKER(VOS_MemCmp)
        .stubs()
        .will(returnValue(1));

    MOCKER(NV_WriteEx)
        .stubs()
        .will(returnValue(NV_ID_NOT_EXIST));

    //执行检查
    ASSERT_EQ(AT_ERROR, At_SetPort(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetPort,Test_At_SetPort_10)
{
    //参数定义
    VOS_UINT8     aucFirstPort[AT_SETPORT_PARA_MAX_LEN];
    VOS_UINT8     aucSecPort[AT_SETPORT_PARA_MAX_LEN];
    AT_DYNAMIC_PID_TYPE_STRU    stDynamicPidType;
    AT_PID_ENABLE_TYPE_STRU     stPidEnableType;

    //参数初始化
    stPidEnableType.ulPidEnabled = VOS_TRUE;

    memset(aucFirstPort, 0, AT_SETPORT_PARA_MAX_LEN);
    memset(aucSecPort, 0, AT_SETPORT_PARA_MAX_LEN);
    memset(&stDynamicPidType, 0, sizeof(AT_DYNAMIC_PID_TYPE_STRU));

    aucFirstPort[0] = 0xA1;
    aucSecPort[0]   = 0x01;
    aucSecPort[1]   = 0x02;

    stDynamicPidType.aucFirstPortStyle[0]   = 0xA1;
    stDynamicPidType.aucRewindPortStyle[0]  = 0x01;
    stDynamicPidType.aucRewindPortStyle[1]  = 0x02;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 6;
    memcpy(gastAtParaList[0].aucPara, "A1;1,2", gastAtParaList[0].usParaLen);

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), any(), outBoundP((void *)&stPidEnableType, (VOS_UINT32)sizeof(AT_PID_ENABLE_TYPE_STRU)), any())
        .will(returnValue(NV_OK));

    MOCKER(At_IsAvailableSetPortPara)
        .stubs()
        .with(mirror(gastAtParaList[0].aucPara,sizeof(gastAtParaList[0].aucPara)), eq(gastAtParaList[0].usParaLen), outBoundP((VOS_UINT8 *)aucFirstPort, (VOS_UINT32)sizeof(aucFirstPort)), outBoundP((VOS_UINT8 *)aucSecPort, (VOS_UINT32)sizeof(aucSecPort)))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), eq(en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((void *)&stDynamicPidType, (VOS_UINT32)sizeof(AT_DYNAMIC_PID_TYPE_STRU)), any())
        .will(returnValue(NV_OK));

    MOCKER(VOS_MemCmp)
        .stubs()
        .will(returnValue(0));

    MOCKER(NV_WriteEx)
        .stubs()
        .will(returnValue(NV_OK));

    //执行检查
    ASSERT_EQ(AT_OK,At_SetPort(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetPort,Test_At_SetPort_11)
{
    //参数定义
    VOS_UINT8     aucFirstPort[AT_SETPORT_PARA_MAX_LEN];
    VOS_UINT8     aucSecPort[AT_SETPORT_PARA_MAX_LEN];
    AT_DYNAMIC_PID_TYPE_STRU    stDynamicPidType;
    AT_PID_ENABLE_TYPE_STRU     stPidEnableType;

    //参数初始化
    stPidEnableType.ulPidEnabled = VOS_TRUE;

    memset(aucFirstPort, 0, AT_SETPORT_PARA_MAX_LEN);
    memset(aucSecPort, 0, AT_SETPORT_PARA_MAX_LEN);
    memset(&stDynamicPidType, 0, sizeof(AT_DYNAMIC_PID_TYPE_STRU));

    aucFirstPort[0] = 0xA1;
    aucSecPort[0] = 0x01;
    aucSecPort[1] = 0x02;

    stDynamicPidType.aucFirstPortStyle[0] = 0xA2;
    stDynamicPidType.aucRewindPortStyle[0] = 0x01;
    stDynamicPidType.aucRewindPortStyle[1] = 0x02;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 6;
    memcpy(gastAtParaList[0].aucPara, "A1;1,2", gastAtParaList[0].usParaLen);


    // MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), any(), outBoundP((void *)&stPidEnableType, (VOS_UINT32)sizeof(AT_PID_ENABLE_TYPE_STRU)), any())
        .will(returnValue(NV_OK));

    MOCKER(At_IsAvailableSetPortPara)
        .stubs()
        .with(mirror(gastAtParaList[0].aucPara,sizeof(gastAtParaList[0].aucPara)), eq(gastAtParaList[0].usParaLen), outBoundP((VOS_UINT8 *)aucFirstPort, (VOS_UINT32)sizeof(aucFirstPort)), outBoundP((VOS_UINT8 *)aucSecPort, (VOS_UINT32)sizeof(aucSecPort)))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), eq(en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((void *)&stDynamicPidType, (VOS_UINT32)sizeof(AT_DYNAMIC_PID_TYPE_STRU)), any())
        .will(returnValue(NV_OK));

    MOCKER(VOS_MemCmp)
        .stubs()
        .will(returnValue(1));

    MOCKER(NV_WriteEx)
        .stubs()
        .will(returnValue(NV_OK));

    //执行检查
    ASSERT_EQ(AT_OK, At_SetPort(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}




class Test_AT_DialProc: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};

TEST_F(Test_AT_DialProc,Test_AT_DialProc_01)
{
    gastAtParaList[0].usParaLen = 0;

    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_DialProc(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_AT_DialProc,Test_AT_DialProc_02)
{
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;

    /* E5 user */
    gastAtClientTab[0].UserType = AT_APP_USER;

    /* 参数过多 */
    gucAtParaIndex = 8;

    ASSERT_EQ(AT_TOO_MANY_PARA, AT_DialProc(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_AT_DialProc,Test_AT_DialProc_03)
{
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;

    /* E5 user */
    gastAtClientTab[0].UserType = AT_APP_USER;

    /* 参数过多 */
    gucAtParaIndex = 7;

    /* 断开拨号 */
    gastAtParaList[1].ulParaValue = 0;

    MOCKER(AT_Ipv4AddrAtoi)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(AT_AppDialDownProc)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    EXPECT_EQ(AT_OK, AT_DialProc(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
TEST_F(Test_AT_DialProc,Test_AT_DialProc_04)
{
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;

    /* E5 user */
    gastAtClientTab[0].UserType = AT_APP_USER;

    gucAtParaIndex = 7;

    /* 拨号 */
    gastAtParaList[1].ulParaValue = 1;

    /* CHAPV2鉴权 */
    gastAtParaList[5].ulParaValue = PPP_MS_CHAPV2_AUTH_TYPE;

    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_DialProc(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
TEST_F(Test_AT_DialProc,Test_AT_DialProc_05)
{
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;

    /* E5 user */
    gastAtClientTab[0].UserType = AT_APP_USER;

    gucAtParaIndex = 7;

    /* 拨号 */
    gastAtParaList[1].ulParaValue = 1;

    gastAtParaList[5].ulParaValue = PPP_PAP_AUTH_TYPE;

    /* APN超长 */
    gastAtParaList[2].usParaLen = TAF_MAX_APN_LEN + 1;

    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_DialProc(0));


    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
TEST_F(Test_AT_DialProc,Test_AT_DialProc_06)
{
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;

    /* E5 user */
    gastAtClientTab[0].UserType = AT_APP_USER;

    gucAtParaIndex = 7;

    /* 拨号 */
    gastAtParaList[1].ulParaValue = 1;

    gastAtParaList[5].ulParaValue = PPP_PAP_AUTH_TYPE;

    gastAtParaList[2].usParaLen = TAF_MAX_APN_LEN;

    /* IP地址超长 */
    gastAtParaList[6].usParaLen = TAF_MAX_IPV4_ADDR_STR_LEN;

    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_DialProc(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
TEST_F(Test_AT_DialProc,Test_AT_DialProc_07)
{
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;

    /* E5 user */
    gastAtClientTab[0].UserType = AT_APP_USER;

    gucAtParaIndex = 7;

    g_enHiLinkMode = AT_HILINK_NORMAL_MODE;

    /* 拨号 */
    gastAtParaList[1].ulParaValue = 1;

    gastAtParaList[5].ulParaValue = PPP_PAP_AUTH_TYPE;

    gastAtParaList[2].usParaLen = 0;

    gastAtParaList[6].usParaLen = TAF_MAX_IPV4_ADDR_STR_LEN - 1;


    MOCKER(AT_Ipv4AddrAtoi)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(AT_AppDialUpProc)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    ASSERT_EQ(AT_OK, AT_DialProc(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_AT_DialProc,Test_AT_DialProc_08)
{
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;

    /* AT_IPCCOM_USER*/
    gastAtClientTab[0].UserType = AT_IPCCOM_USER;

    /* 参数过多 */
    gucAtParaIndex = 8;

    EXPECT_EQ(AT_TOO_MANY_PARA, AT_DialProc(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_AT_SetCpwordPara: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};

TEST_F(Test_AT_SetCpwordPara,Test_AT_SetCpwordPara_01)
{
    g_enATE5RightFlag = AT_E5_RIGHT_FLAG_NO;

    EXPECT_EQ(AT_SetCpwordPara(0), AT_OK);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCpwordPara,Test_AT_SetCpwordPara_02)
{
    g_enATE5RightFlag = AT_E5_RIGHT_FLAG_YES;

    EXPECT_EQ(AT_SetCpwordPara(0), AT_OK);
    EXPECT_EQ(g_enATE5RightFlag, AT_E5_RIGHT_FLAG_NO);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetZPara: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};

TEST_F(Test_At_SetZPara,Test_At_SetZPara_01)
{
    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue(NV_ID_NOT_EXIST));

    MOCKER(VOS_StrLen)
        .expects(never());

    EXPECT_EQ(At_SetZPara(0), AT_OK);
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetZPara,Test_At_SetZPara_02)
{
    VOS_UINT8                          *pucSystemAppConfig;

    pucSystemAppConfig                  = AT_GetSystemAppConfigAddr();

    *pucSystemAppConfig = SYSTEM_APP_WEBUI;

    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue(NV_OK));

    MOCKER(VOS_StrLen)
        .stubs()
        .will(returnValue(1));

    /*MOCKER(At_sprintf)
        .expects(exactly(3));*/

    EXPECT_EQ(At_SetZPara(0), AT_SUCCESS);

    *pucSystemAppConfig = 0;

    GlobalMockObject::verify();
}


class Test_AT_SetApbatlvlPara: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};

TEST_F(Test_AT_SetApbatlvlPara,Test_AT_SetApbatlvlPara_01)
{
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    MOCKER(mdrv_misc_support_check)
        .stubs()
        .with(eq(BSP_MODULE_TYPE_CHARGE))
        .will(returnValue(BSP_MODULE_SUPPORT));

    MOCKER(mdrv_misc_get_battery_state)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    EXPECT_EQ(AT_SetApbatlvlPara(ucIndex), AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApbatlvlPara,Test_AT_SetApbatlvlPara_02)
{
    VOS_UINT8                           ucIndex;
    BATT_STATE_S                        stBatLvl;
    AT_PAR_CMD_ELEMENT_STRU             stCmdElement         ={AT_CMD_APBATLVL,
        AT_SetApbatlvlPara,     AT_NOT_SET_TIME,  VOS_NULL_PTR,              AT_NOT_SET_TIME,   VOS_NULL_PTR, AT_NOT_SET_TIME,
        VOS_NULL_PTR,   AT_NOT_SET_TIME,
        AT_CME_INCORRECT_PARAMETERS,       CMD_TBL_PIN_IS_LOCKED,
        (VOS_UINT8*)"^APBATLVL",    VOS_NULL_PTR};
    g_stParseContext[ucIndex].pstCmdElement = &stCmdElement;

    ucIndex = 0;

    stBatLvl.charging_state = CHARGING_UP;
    stBatLvl.battery_level  = BATT_LEVEL_0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    MOCKER(mdrv_misc_support_check)
        .stubs()
        .with(eq(BSP_MODULE_TYPE_CHARGE))
        .will(returnValue(BSP_MODULE_SUPPORT));

    MOCKER(mdrv_misc_get_battery_state)
        .stubs()
        .with(outBoundP((BATT_STATE_S *)&stBatLvl, (VOS_UINT32)sizeof(BATT_STATE_S)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    /*MOCKER(At_sprintf)
        .expects(exactly(1));*/

    EXPECT_EQ(AT_SetApbatlvlPara(ucIndex), AT_OK);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApbatlvlPara,Test_AT_SetApbatlvlPara_03)
{
    VOS_UINT8                           ucIndex;
    BATT_STATE_S                        stBatLvl;
    AT_PAR_CMD_ELEMENT_STRU             stCmdElement         ={AT_CMD_APBATLVL,
        AT_SetApbatlvlPara,     AT_NOT_SET_TIME,  VOS_NULL_PTR,              AT_NOT_SET_TIME,   VOS_NULL_PTR, AT_NOT_SET_TIME,
        VOS_NULL_PTR,   AT_NOT_SET_TIME,
        AT_CME_INCORRECT_PARAMETERS,       CMD_TBL_PIN_IS_LOCKED,
        (VOS_UINT8*)"^APBATLVL",    VOS_NULL_PTR};
    g_stParseContext[ucIndex].pstCmdElement = &stCmdElement;

    ucIndex = 0;

    stBatLvl.charging_state = NO_CHARGING_UP;
    stBatLvl.battery_level  = BATT_LEVEL_0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    MOCKER(mdrv_misc_support_check)
        .stubs()
        .with(eq(BSP_MODULE_TYPE_CHARGE))
        .will(returnValue(BSP_MODULE_SUPPORT));

    MOCKER(mdrv_misc_get_battery_state)
        .stubs()
        .with(outBoundP((BATT_STATE_S *)&stBatLvl, (VOS_UINT32)sizeof(BATT_STATE_S)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    /*MOCKER(At_sprintf)
        .expects(exactly(1));*/

    EXPECT_EQ(AT_SetApbatlvlPara(ucIndex), AT_OK);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApbatlvlPara,Test_AT_SetApbatlvlPara_04)
{
    VOS_UINT8                           ucIndex;
    BATT_STATE_S                        stBatLvl;
    AT_PAR_CMD_ELEMENT_STRU             stCmdElement         ={AT_CMD_APBATLVL,
        AT_SetApbatlvlPara,     AT_NOT_SET_TIME,  VOS_NULL_PTR,              AT_NOT_SET_TIME,   VOS_NULL_PTR, AT_NOT_SET_TIME,
        VOS_NULL_PTR,   AT_NOT_SET_TIME,
        AT_CME_INCORRECT_PARAMETERS,       CMD_TBL_PIN_IS_LOCKED,
        (VOS_UINT8*)"^APBATLVL",    VOS_NULL_PTR};
    g_stParseContext[ucIndex].pstCmdElement = &stCmdElement;

    ucIndex = 0;

    stBatLvl.charging_state = CHARGING_INIT;
    stBatLvl.battery_level  = BATT_LEVEL_0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    MOCKER(mdrv_misc_support_check)
        .stubs()
        .with(eq(BSP_MODULE_TYPE_CHARGE))
        .will(returnValue(BSP_MODULE_SUPPORT));

    MOCKER(mdrv_misc_get_battery_state)
        .stubs()
        .with(outBoundP((BATT_STATE_S *)&stBatLvl, (VOS_UINT32)sizeof(BATT_STATE_S)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    EXPECT_EQ(AT_SetApbatlvlPara(ucIndex), AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApbatlvlPara,Test_AT_SetApbatlvlPara_05)
{
    VOS_UINT8                           ucIndex;
    BATT_STATE_S                        stBatLvl;
    AT_PAR_CMD_ELEMENT_STRU             stCmdElement         ={AT_CMD_APBATLVL,
        AT_SetApbatlvlPara,     AT_NOT_SET_TIME,  VOS_NULL_PTR,              AT_NOT_SET_TIME,   VOS_NULL_PTR, AT_NOT_SET_TIME,
        VOS_NULL_PTR,   AT_NOT_SET_TIME,
        AT_CME_INCORRECT_PARAMETERS,       CMD_TBL_PIN_IS_LOCKED,
        (VOS_UINT8*)"^APBATLVL",    VOS_NULL_PTR};
    g_stParseContext[ucIndex].pstCmdElement = &stCmdElement;

    ucIndex = 0;

    stBatLvl.charging_state = NO_CHARGING_UP;
    stBatLvl.battery_level  = BATT_INIT;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    MOCKER(mdrv_misc_support_check)
        .stubs()
        .with(eq(BSP_MODULE_TYPE_CHARGE))
        .will(returnValue(BSP_MODULE_SUPPORT));

    MOCKER(mdrv_misc_get_battery_state)
        .stubs()
        .with(outBoundP((BATT_STATE_S *)&stBatLvl, (VOS_UINT32)sizeof(BATT_STATE_S)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    EXPECT_EQ(AT_SetApbatlvlPara(ucIndex), AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



class Test_AT_SetOpenportPara: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};

TEST_F(Test_AT_SetOpenportPara,Test_AT_SetOpenportPara_01)
{
    EXPECT_EQ(AT_SetOpenportPara(0), AT_OK);


    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



class Test_AT_PhSendRestoreFactParm: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};

TEST_F(Test_AT_PhSendRestoreFactParm,Test_AT_PhSendRestoreFactParm_01)
{
    VOS_MemSet(&gstAtSendData,0x00,sizeof(gstAtSendData));
    VOS_MemSet(&gastAtClientTab,0x00,sizeof(gastAtClientTab));

    AT_PhSendRestoreFactParm();

    EXPECT_EQ(0,gstAtSendData.usBufLen);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_PhSendRestoreFactParm,Test_AT_PhSendRestoreFactParm_02)
{
    char         *paucExpectedStr = "\r\n^FACTORY\r\n";

    VOS_MemSet(&gstAtSendData,0x00,sizeof(gstAtSendData));
    VOS_MemSet(&gastAtClientTab,0x00,sizeof(gastAtClientTab));

    gastAtClientTab[2].UserType = AT_APP_USER;

    AT_PhSendRestoreFactParm();

    ASSERT_STREQ(paucExpectedStr , (char *)pgucAtSndCodeAddr);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}



#if (FEATURE_ON == FEATURE_SECURITY_SHELL)


class Test_AT_SetShellPara: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};

TEST_F(Test_AT_SetShellPara,Test_AT_SetShellPara_01)
{
    gastAtParaList[0].usParaLen = 0;

    EXPECT_EQ( AT_SetShellPara(0), AT_ERROR );

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetShellPara,Test_AT_SetShellPara_02)
{
    gastAtParaList[0].usParaLen = 1;
    gucAtParaIndex              = 2;

    EXPECT_EQ( AT_SetShellPara(0), AT_ERROR );

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}




TEST_F(Test_AT_SetShellPara,Test_AT_SetShellPara_03)
{
    gastAtParaList[0].usParaLen = 1;
    gucAtParaIndex              = 1;

    gastAtParaList[0].ulParaValue = AT_SHELL_WIFI_USE;


    g_enATE5RightFlag = AT_E5_RIGHT_FLAG_YES;

    MOCKER(NV_WriteEx)
        .stubs()
        .will(returnValue(NV_ID_NOT_EXIST));

    EXPECT_EQ( AT_SetShellPara(0), AT_ERROR );

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetShellPara,Test_AT_SetShellPara_04)
{
    gastAtParaList[0].usParaLen = 1;
    gucAtParaIndex              = 1;

    gastAtParaList[0].ulParaValue = AT_SHELL_WIFI_USE;


    g_enATE5RightFlag = AT_E5_RIGHT_FLAG_YES;

    MOCKER(NV_WriteEx)
        .stubs()
        .will(returnValue(NV_OK));

    EXPECT_EQ( AT_SetShellPara(0), AT_OK );

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



TEST_F(Test_AT_SetShellPara, Test_AT_SetShellPara_05)
{
    gastAtParaList[0].usParaLen = 1;
    gucAtParaIndex              = 1;

    gastAtParaList[0].ulParaValue = AT_SHELL_OPEN;

    g_stSpWordCtx.ucShellPwdCheckFlag = VOS_FALSE;

    EXPECT_EQ( AT_SetShellPara(0), AT_ERROR );

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



TEST_F(Test_AT_SetShellPara, Test_AT_SetShellPara_06)
{
    gastAtParaList[0].usParaLen = 1;
    gucAtParaIndex              = 1;

    gastAtParaList[0].ulParaValue = AT_SHELL_OPEN;


    g_enATE5RightFlag = AT_E5_RIGHT_FLAG_YES;

    g_stSpWordCtx.ucShellPwdCheckFlag = VOS_TRUE;

    MOCKER(NV_WriteEx)
        .stubs()
        .will(returnValue(NV_ID_NOT_EXIST));

    EXPECT_EQ( AT_SetShellPara(0), AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetShellPara, Test_AT_SetShellPara_07)
{
    gastAtParaList[0].usParaLen = 1;
    gucAtParaIndex              = 1;

    gastAtParaList[0].ulParaValue = AT_SHELL_OPEN;


    g_enATE5RightFlag = AT_E5_RIGHT_FLAG_YES;

    g_stSpWordCtx.ucShellPwdCheckFlag = VOS_TRUE;

    MOCKER(NV_WriteEx)
        .stubs()
        .will(returnValue(NV_OK));

    EXPECT_EQ( AT_SetShellPara(0), AT_OK );

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetShellPara, Test_AT_SetShellPara_08)
{
    gastAtParaList[0].usParaLen = 1;
    gucAtParaIndex              = 1;

    gastAtParaList[0].ulParaValue = AT_SHELL_CLOSE;


    EXPECT_EQ( AT_SetShellPara(0), AT_OK );

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetShellPara,Test_AT_SetShellPara_09)
{
    gastAtParaList[0].usParaLen = 1;
    gucAtParaIndex              = 1;

    gastAtParaList[0].ulParaValue = AT_SHELL_CLOSE;


    EXPECT_EQ( AT_SetShellPara(0), AT_OK );

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetShellPara,Test_AT_SetShellPara_10)
{
    gastAtParaList[0].usParaLen = 1;
    gucAtParaIndex              = 1;

    gastAtParaList[0].ulParaValue = AT_SHELL_CLOSE;



    MOCKER(NV_WriteEx)
        .stubs()
        .will(returnValue(NV_ID_NOT_EXIST));

    EXPECT_EQ( AT_SetShellPara(0), AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetShellPara,Test_AT_SetShellPara_11)
{
    gastAtParaList[0].usParaLen = 1;
    gucAtParaIndex              = 1;

    gastAtParaList[0].ulParaValue = AT_SHELL_CLOSE;



    MOCKER(NV_WriteEx)
        .stubs()
        .will(returnValue(NV_OK));

    EXPECT_EQ( AT_SetShellPara(0), AT_OK );

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetShellPara,Test_AT_SetShellPara_12)
{
    gastAtParaList[0].usParaLen = 1;
    gucAtParaIndex              = 1;

    gastAtParaList[0].ulParaValue = 255;


    EXPECT_EQ( AT_SetShellPara(0), AT_ERROR );

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

class Test_AT_SetSpwordPara: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};

TEST_F(Test_AT_SetSpwordPara,Test_AT_SetSpwordPara_001)
{
    g_stSpWordCtx.ucErrTimes = AT_SHELL_PWD_VERIFY_MAX_TIMES;

    EXPECT_EQ(AT_ERROR,AT_SetSpwordPara(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetSpwordPara,Test_AT_SetSpwordPara_002)
{
    g_stSpWordCtx.ucErrTimes = 1;
    g_stSpWordCtx.ucShellPwdCheckFlag = VOS_TRUE;

    EXPECT_EQ(AT_ERROR,AT_SetSpwordPara(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetSpwordPara,Test_AT_SetSpwordPara_003)
{
    g_stSpWordCtx.ucErrTimes = 1;
    g_stSpWordCtx.ucShellPwdCheckFlag = VOS_FALSE;
    gucAtParaIndex                     = 2;

    EXPECT_EQ(AT_ERROR,AT_SetSpwordPara(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetSpwordPara,Test_AT_SetSpwordPara_004)
{
    g_stSpWordCtx.ucErrTimes = 1;
    g_stSpWordCtx.ucShellPwdCheckFlag = VOS_FALSE;
    gucAtParaIndex                     = 1;
    gastAtParaList[0].usParaLen        = AT_SHELL_PWD_LEN;

    EXPECT_EQ(AT_ERROR,AT_SetSpwordPara(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetSpwordPara,Test_AT_SetSpwordPara_005)
{
    g_stSpWordCtx.ucErrTimes = 1;
    g_stSpWordCtx.ucShellPwdCheckFlag = VOS_FALSE;
    gucAtParaIndex                     = 1;
    gastAtParaList[0].usParaLen        = AT_SHELL_PWD_LEN;

    gastAtParaList[0].aucPara[0]       = '0';
    gastAtParaList[0].aucPara[1]       = '0';
    gastAtParaList[0].aucPara[2]       = '0';
    gastAtParaList[0].aucPara[3]       = '0';
    gastAtParaList[0].aucPara[4]       = '0';
    gastAtParaList[0].aucPara[5]       = '0';
    gastAtParaList[0].aucPara[6]       = '0';
    gastAtParaList[0].aucPara[7]       = '0';


    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, AT_SetSpwordPara(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetSpwordPara,Test_AT_SetSpwordPara_006)
{
    g_stSpWordCtx.ucErrTimes = 1;
    g_stSpWordCtx.ucShellPwdCheckFlag = VOS_FALSE;
    gucAtParaIndex                     = 1;
    gastAtParaList[0].usParaLen        = AT_SHELL_PWD_LEN;

    gastAtParaList[0].aucPara[0]       = '0';
    gastAtParaList[0].aucPara[1]       = '0';
    gastAtParaList[0].aucPara[2]       = '0';
    gastAtParaList[0].aucPara[3]       = '0';
    gastAtParaList[0].aucPara[4]       = '0';
    gastAtParaList[0].aucPara[5]       = '0';
    gastAtParaList[0].aucPara[6]       = '0';
    gastAtParaList[0].aucPara[7]       = '0';


    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    EXPECT_EQ(AT_ERROR, AT_SetSpwordPara(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


#endif



class Test_At_SetHwVerPara: public ::testing::Test
{
public:
    VOS_UINT8       ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                     = 0;
        g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_BUTT;
    }

    void TearDown()
    {
        ucIndex                     = 0;
        g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_BUTT;
    }
};

TEST_F(Test_At_SetHwVerPara,Test_At_SetHwVerPara_001)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, At_SetHwVerPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

TEST_F(Test_At_SetHwVerPara,Test_At_SetHwVerPara_002)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    EXPECT_EQ(AT_ERROR, At_SetHwVerPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

TEST_F(Test_At_SetHwVerPara,Test_At_SetHwVerPara_003)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, At_SetHwVerPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

class Test_At_SetFHVerPara: public ::testing::Test
{
public:
    VOS_UINT8       ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                     = 0;
        g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_BUTT;
    }

    void TearDown()
    {
        ucIndex                     = 0;
        g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_BUTT;
    }
};

TEST_F(Test_At_SetFHVerPara,Test_At_SetFHVerPara_001)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, At_SetFHVerPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}

TEST_F(Test_At_SetFHVerPara,Test_At_SetFHVerPara_002)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    EXPECT_EQ(AT_ERROR, At_SetFHVerPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}

TEST_F(Test_At_SetFHVerPara,Test_At_SetFHVerPara_003)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, At_SetFHVerPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


class Test_At_SetCLACPara: public ::testing::Test
{
public:
    VOS_UINT8       ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                     = 0;
        gucAtParaIndex              = 0;
        gastAtParaList[0].usParaLen = 0;
        g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_BUTT;
    }

    void TearDown()
    {
        ucIndex                     = 0;
        gucAtParaIndex              = 0;
        gastAtParaList[0].usParaLen =0;
        g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_BUTT;
    }
};

TEST_F(Test_At_SetCLACPara,Test_At_SetCLACPara_001)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, At_SetCLACPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}

TEST_F(Test_At_SetCLACPara,Test_At_SetCLACPara_002)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    MOCKER(AT_ClacCmdProc)
        .expects(exactly(1));

    EXPECT_EQ(AT_OK, At_SetCLACPara(1));

    GlobalMockObject::verify();
}


class Test_At_SetRxDiv: public ::testing::Test
{
public:
    VOS_UINT8       ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                     = 0;
        gucAtParaIndex              = 0;
        gastAtParaList[0].usParaLen = 0;
        g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_BUTT;
    }

    void TearDown()
    {
        ucIndex                     = 0;
        gucAtParaIndex              = 0;
        gastAtParaList[0].usParaLen =0;
        g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_BUTT;
    }
};

TEST_F(Test_At_SetRxDiv,Test_At_SetRxDiv_001)
{
    MOCKER(At_CheckRxDivOrRxPriCmdPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_CME_RX_DIV_OTHER_ERR));

    EXPECT_EQ(AT_CME_RX_DIV_OTHER_ERR, At_SetRxDiv(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}

TEST_F(Test_At_SetRxDiv,Test_At_SetRxDiv_002)
{
    MOCKER(At_CheckRxDivOrRxPriCmdPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(At_GetUserSetRxDivOrRxPriParaNum)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_CME_RX_DIV_OTHER_ERR));

    EXPECT_EQ(AT_CME_RX_DIV_OTHER_ERR, At_SetRxDiv(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}

TEST_F(Test_At_SetRxDiv,Test_At_SetRxDiv_003)
{
    MOCKER(At_CheckRxDivOrRxPriCmdPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(At_GetUserSetRxDivOrRxPriParaNum)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    EXPECT_EQ(AT_ERROR, At_SetRxDiv(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}

TEST_F(Test_At_SetRxDiv,Test_At_SetRxDiv_004)
{
    MOCKER(At_CheckRxDivOrRxPriCmdPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(At_GetUserSetRxDivOrRxPriParaNum)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));


    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, At_SetRxDiv(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


class Test_At_SetCplsPara: public ::testing::Test
{
public:
    VOS_UINT8       ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                     = 0;
        gucAtParaIndex              = 0;
        gastAtParaList[0].usParaLen = 0;
        g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_BUTT;
    }

    void TearDown()
    {
        ucIndex                     = 0;
        gucAtParaIndex              = 0;
        gastAtParaList[0].usParaLen =0;
        g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_BUTT;
    }
};

TEST_F(Test_At_SetCplsPara,Test_At_SetCplsPara_001)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, At_SetCplsPara(ucIndex));
}

TEST_F(Test_At_SetCplsPara,Test_At_SetCplsPara_002)
{
    gucAtParaIndex  = 2;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, At_SetCplsPara(ucIndex));


    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}

TEST_F(Test_At_SetCplsPara,Test_At_SetCplsPara_004)
{
    gucAtParaIndex              = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = MN_PH_PREF_PLMN_UPLMN;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    EXPECT_EQ(AT_ERROR, At_SetCplsPara(ucIndex));

    GlobalMockObject::verify();
}

TEST_F(Test_At_SetCplsPara,Test_At_SetCplsPara_005)
{
    gucAtParaIndex              = 1;
    gastAtParaList[0].usParaLen = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, At_SetCplsPara(ucIndex));
    ASSERT_EQ(AT_CMD_MMA_SET_PREF_PLMN_TYPE, gastAtClientTab[ucIndex].CmdCurrentOpt);

    GlobalMockObject::verify();
}

TEST_F(Test_At_SetCplsPara,Test_At_SetCplsPara_006)
{
    gucAtParaIndex                = 1;
    gastAtParaList[0].usParaLen   = 1;
    gastAtParaList[0].ulParaValue = MN_PH_PREF_PLMN_HPLMN+1;
    g_stATParseCmd.ucCmdOptType   = AT_CMD_OPT_SET_PARA_CMD;


    EXPECT_EQ(AT_CME_OPERATION_NOT_SUPPORTED, At_SetCplsPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


class Test_At_SetCpdwPara: public ::testing::Test
{
public:
    VOS_UINT8       ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                       = 0;
        gucAtParaIndex                = 0;
        gastAtParaList[0].usParaLen   = 0;
        gastAtParaList[1].usParaLen   = 0;
        gastAtParaList[1].ulParaValue = 0;
        gastAtParaList[2].usParaLen   = 0;
        gastAtParaList[3].usParaLen   = 0;
        g_stATParseCmd.ucCmdOptType   = AT_CMD_OPT_BUTT;
    }

    void TearDown()
    {
        ucIndex                       = 0;
        gucAtParaIndex                = 0;
        gastAtParaList[0].usParaLen   = 0;
        gastAtParaList[1].usParaLen   = 0;
        gastAtParaList[1].ulParaValue = 0;
        gastAtParaList[2].usParaLen   = 0;
        gastAtParaList[3].usParaLen   = 0;
        g_stATParseCmd.ucCmdOptType   = AT_CMD_OPT_BUTT;
    }
};

TEST_F(Test_At_SetCpdwPara,Test_At_SetCpdwPara_001)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, At_SetCpdwPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}

TEST_F(Test_At_SetCpdwPara,Test_At_SetCpdwPara_002)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    EXPECT_EQ(AT_ERROR, At_SetCpdwPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}

TEST_F(Test_At_SetCpdwPara,Test_At_SetCpdwPara_003)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, At_SetCpdwPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


class Test_At_SetMsIdInfo: public ::testing::Test
{
public:
    TAF_UINT8                           ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                                = 0;
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_MSID_READ;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

    }

    void TearDown()
    {
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_MSID_READ;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

    }
};


TEST_F(Test_At_SetMsIdInfo, Test_At_SetMsIdInfo_001)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 本地变量初始化 */

    /* 初始化全局变量 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    /* 调用被测函数 */
    ulRst = At_SetMsIdInfo(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_CMD_MSID_READ, gastAtClientTab[ucIndex].CmdCurrentOpt);
    ASSERT_EQ(AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetMsIdInfo, Test_At_SetMsIdInfo_002)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 本地变量初始化 */

    /* 初始化全局变量 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /* 调用被测函数 */
    ulRst = At_SetMsIdInfo(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}



class Test_At_SetGcfIndPara: public ::testing::Test
{
public:
    TAF_UINT8                           ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                                = 0;
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_MSID_READ;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

    }

    void TearDown()
    {
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_MSID_READ;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

        gucAtParaIndex                         = 0;
    }
};


TEST_F(Test_At_SetGcfIndPara, Test_At_SetGcfIndPara_001)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_READ_CMD;

    /* 函数打桩 */


    /* 调用被测函数 */
    ulRst = At_SetGcfIndPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetGcfIndPara, Test_At_SetGcfIndPara_002)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 2;

    /* 函数打桩 */


    /* 调用被测函数 */
    ulRst = At_SetGcfIndPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetGcfIndPara, Test_At_SetGcfIndPara_003)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType   = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                = 1;
    gastAtParaList[0].usParaLen   = 1;
    gastAtParaList[0].ulParaValue = 1;

    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /* 调用被测函数 */
    ulRst = At_SetGcfIndPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetGcfIndPara, Test_At_SetGcfIndPara_004)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucGctTestFlag;

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType   = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                = 1;
    gastAtParaList[0].usParaLen   = 1;
    gastAtParaList[0].ulParaValue = 0;

    ucGctTestFlag                 = 0;

    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(),any(),eq((unsigned short)DRV_AGENT_GCF_IND),mirror((void *)&ucGctTestFlag, sizeof(VOS_UINT8)), any(), any())
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    /* 调用被测函数 */
    ulRst = At_SetGcfIndPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_OK, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetGcfIndPara, Test_At_SetGcfIndPara_005)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 1;
    gastAtParaList[0].usParaLen = 0;

    /* 函数打桩 */


    /* 调用被测函数 */
    ulRst = At_SetGcfIndPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetGcfIndPara, Test_At_SetGcfIndPara_006)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType   = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                = 1;
    gastAtParaList[0].usParaLen   = 1;
    gastAtParaList[0].ulParaValue = 2;

    /* 函数打桩 */


    /* 调用被测函数 */
    ulRst = At_SetGcfIndPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
class Test_At_SetCwasPara: public ::testing::Test
{
public:
    TAF_UINT8                           ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                                = 0;
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_INVALID;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

    }

    void TearDown()
    {
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_INVALID;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

        gucAtParaIndex                         = 0;
    }
};


TEST_F(Test_At_SetCwasPara, Test_At_SetCwasPara_001)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    gucAtParaIndex                = 0;

    /* 函数打桩 */


    /* 调用被测函数 */
    ulRst = At_SetCwasPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetCwasPara, Test_At_SetCwasPara_002)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    gucAtParaIndex                = 2;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].ulParaValue = 2;


    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /* 调用被测函数 */
    ulRst = At_SetCwasPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetCwasPara, Test_At_SetCwasPara_003)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    gucAtParaIndex                = 2;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].ulParaValue = 2;


    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    /* 调用被测函数 */
    ulRst = At_SetCwasPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
class Test_At_SetCGasPara: public ::testing::Test
{
public:
    TAF_UINT8                           ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                                = 0;
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_INVALID;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

    }

    void TearDown()
    {
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_INVALID;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

        gucAtParaIndex                         = 0;
    }
};


TEST_F(Test_At_SetCGasPara, Test_At_SetCGasPara_001)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    gucAtParaIndex                = 0;

    /* 函数打桩 */


    /* 调用被测函数 */
    ulRst = At_SetCGasPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetCGasPara, Test_At_SetCGasPara_002)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    gucAtParaIndex                = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[0].usParaLen   = 1;

    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /* 调用被测函数 */
    ulRst = At_SetCGasPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetCGasPara, Test_At_SetCGasPara_003)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    gucAtParaIndex                = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].ulParaValue = 2;


    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    /* 调用被测函数 */
    ulRst = At_SetCGasPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_WAIT_ASYNC_RETURN, ulRst);
    ASSERT_EQ(AT_CMD_CGAS_QUERY, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetCGasPara, Test_At_SetCGasPara_004)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    gucAtParaIndex                = 2;

    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].ulParaValue = 2;

    /* 函数打桩 */


    /* 调用被测函数 */
    ulRst = At_SetCGasPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
class Test_At_SetCellInfoPara: public ::testing::Test
{
public:
    TAF_UINT8                           ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                                = 0;
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_INVALID;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

    }

    void TearDown()
    {
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_INVALID;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

        gucAtParaIndex                         = 0;
    }
};


TEST_F(Test_At_SetCellInfoPara, Test_At_SetCellInfoPara_001)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    gucAtParaIndex                = 0;

    /* 函数打桩 */


    /* 调用被测函数 */
    ulRst = At_SetCellInfoPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetCellInfoPara, Test_At_SetCellInfoPara_002)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    gucAtParaIndex                = 1;
    gastAtParaList[0].ulParaValue = 1;


    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /* 调用被测函数 */
    ulRst = At_SetCellInfoPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetCellInfoPara, Test_At_SetCellInfoPara_003)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;
    VOS_UINT32                          ulAtCmdCellInfo;

    /* 变量初始化 */
    gucAtParaIndex                = 1;
    gastAtParaList[0].ulParaValue = 1;
    ulAtCmdCellInfo               = 1;


    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(),any(),eq((unsigned short)ID_AT_MTA_WRR_CELLINFO_QRY_REQ),outBoundP((void *)&ulAtCmdCellInfo, (VOS_UINT32)sizeof(VOS_UINT32)),any(),any())
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    /* 调用被测函数 */
    ulRst = At_SetCellInfoPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_WAIT_ASYNC_RETURN, ulRst);
    ASSERT_EQ(AT_CMD_CELLINFO_QUERY, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
class Test_At_GetMeanRpt: public ::testing::Test
{
public:
    TAF_UINT8                           ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                                = 0;
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_INVALID;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

    }

    void TearDown()
    {
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_INVALID;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

        gucAtParaIndex                         = 0;
    }
};


TEST_F(Test_At_GetMeanRpt, Test_At_GetMeanRpt_001)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;


    /* 函数打桩 */


    /* 调用被测函数 */
    ulRst = At_GetMeanRpt(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_GetMeanRpt, Test_At_GetMeanRpt_002)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;


    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /* 调用被测函数 */
    ulRst = At_GetMeanRpt(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
TEST_F(Test_At_GetMeanRpt, Test_At_GetMeanRpt_003)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    /* 调用被测函数 */
    ulRst = At_GetMeanRpt(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_WAIT_ASYNC_RETURN, ulRst);
    ASSERT_EQ(AT_CMD_MEANRPT_QUERY, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
class Test_AT_SetVertime: public ::testing::Test
{
public:
    TAF_UINT8                           ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                                = 0;
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_INVALID;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

    }

    void TearDown()
    {
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_INVALID;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

        gucAtParaIndex                         = 0;
    }
};


TEST_F(Test_AT_SetVertime, Test_AT_SetVertime_001)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;

    /* 函数打桩 */


    /* 调用被测函数 */
    ulRst = AT_SetVertime(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetVertime, Test_AT_SetVertime_002)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_CMD_NO_PARA;

    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /* 调用被测函数 */
    ulRst = AT_SetVertime(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
TEST_F(Test_AT_SetVertime, Test_AT_SetVertime_003)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_CMD_NO_PARA;

    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    /* 调用被测函数 */
    ulRst = AT_SetVertime(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_WAIT_ASYNC_RETURN, ulRst);
    ASSERT_EQ(AT_CMD_VERSIONTIME_READ, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
class Test_At_SetRRCVersion: public ::testing::Test
{
public:
    TAF_UINT8                           ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                                = 0;
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_INVALID;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

    }

    void TearDown()
    {
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_INVALID;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

        gucAtParaIndex                         = 0;
    }
};


TEST_F(Test_At_SetRRCVersion, Test_At_SetRRCVersion_001)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    gucAtParaIndex         = 2;

    /* 函数打桩 */


    /* 调用被测函数 */
    ulRst = At_SetRRCVersion(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetRRCVersion, Test_At_SetRRCVersion_002)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    gucAtParaIndex         = 1;

    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /* 调用被测函数 */
    ulRst = At_SetRRCVersion(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetRRCVersion, Test_At_SetRRCVersion_003)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    gucAtParaIndex         = 1;

    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    /* 调用被测函数 */
    ulRst = At_SetRRCVersion(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_WAIT_ASYNC_RETURN, ulRst);
    ASSERT_EQ(AT_CMD_RRC_VERSION_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
class Test_At_SetFreqLock: public ::testing::Test
{
public:
    TAF_UINT8                           ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                                = 0;
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_INVALID;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

    }

    void TearDown()
    {
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_INVALID;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

        gucAtParaIndex                         = 0;
    }
};



TEST_F(Test_At_SetFreqLock, Test_At_SetFreqLock_001)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    gucAtParaIndex = 3;

    /* 函数打桩 */


    /* 调用被测函数 */
    ulRst = At_SetFreqLock(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetFreqLock, Test_At_SetFreqLock_002)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    gucAtParaIndex                = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen   = 0;

    /* 函数打桩 */


    /* 调用被测函数 */
    ulRst = At_SetFreqLock(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetFreqLock, Test_At_SetFreqLock_003)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    gucAtParaIndex                = 2;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen   = 1;
    gastAtParaList[1].ulParaValue = 3;

    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));


    /* 调用被测函数 */
    ulRst = At_SetFreqLock(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetFreqLock, Test_At_SetFreqLock_004)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;
    MTA_AT_WRR_FREQLOCK_CTRL_STRU       stFreqLock;

    /* 变量初始化 */
    PS_MEM_SET(&stFreqLock, 0, sizeof(MTA_AT_WRR_FREQLOCK_CTRL_STRU));
    gucAtParaIndex                = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen   = 1;
    gastAtParaList[1].ulParaValue = 3;

    stFreqLock.ucFreqLockEnable   = 1;
    stFreqLock.usLockedFreq       = 3;

    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(), any(), eq((unsigned short)ID_AT_MTA_WRR_FREQLOCK_SET_REQ), mirror((void *)&stFreqLock, (VOS_UINT32)sizeof(MTA_AT_WRR_FREQLOCK_CTRL_STRU)), any(), any())
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    /* 调用被测函数 */
    ulRst = At_SetFreqLock(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_WAIT_ASYNC_RETURN, ulRst);
    ASSERT_EQ(AT_CMD_FREQLOCK_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
class Test_At_SetCrpnPara: public ::testing::Test
{
public:
    TAF_UINT8                           ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                                = 0;
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_INVALID;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

    }

    void TearDown()
    {
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_INVALID;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

        gucAtParaIndex                         = 0;
    }
};


TEST_F(Test_At_SetCrpnPara, Test_At_SetCrpnPara_001)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    /* 函数打桩 */


    /* 调用被测函数 */
    ulRst = At_SetCrpnPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_OK, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCrpnPara, Test_At_SetCrpnPara_002)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    gucAtParaIndex              = 1;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 函数打桩 */


    /* 调用被测函数 */
    ulRst = At_SetCrpnPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCrpnPara, Test_At_SetCrpnPara_003)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 2;

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 0;

    /* 函数打桩 */


    /* 调用被测函数 */
    ulRst = At_SetCrpnPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCrpnPara, Test_At_SetCrpnPara_004)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 2;

    gastAtParaList[0].usParaLen   = 1;
    gastAtParaList[0].ulParaValue = 0;
    gastAtParaList[1].usParaLen   = TAF_PH_OPER_NAME_LONG + 1;

    /* 函数打桩 */


    /* 调用被测函数 */
    ulRst = At_SetCrpnPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_CME_TEXT_STRING_TOO_LONG, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCrpnPara, Test_At_SetCrpnPara_005)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 2;

    gastAtParaList[0].usParaLen   = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen   = TAF_PH_OPER_NAME_SHORT + 1;

    /* 函数打桩 */


    /* 调用被测函数 */
    ulRst = At_SetCrpnPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_CME_TEXT_STRING_TOO_LONG, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCrpnPara, Test_At_SetCrpnPara_006)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 2;

    gastAtParaList[0].usParaLen   = 1;
    gastAtParaList[0].ulParaValue = 2;
    gastAtParaList[1].usParaLen   = 7;

    /* 函数打桩 */


    /* 调用被测函数 */
    ulRst = At_SetCrpnPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_CME_TEXT_STRING_TOO_LONG, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCrpnPara, Test_At_SetCrpnPara_007)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 2;

    gastAtParaList[0].usParaLen   = 1;
    gastAtParaList[0].ulParaValue = 2;
    gastAtParaList[1].usParaLen   = 6;

    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(), any(), eq((unsigned short)ID_TAF_MMA_CRPN_QRY_REQ), any(), any(), any())
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /* 调用被测函数 */
    ulRst = At_SetCrpnPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCrpnPara, Test_At_SetCrpnPara_008)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;
    TAF_MMA_CRPN_QRY_PARA_STRU            stMnMmaCrpnQry;
    VOS_UINT8                           aucPlmnId[] = "00101";

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 2;

    gastAtParaList[0].usParaLen   = 1;
    gastAtParaList[0].ulParaValue = 2;
    gastAtParaList[1].usParaLen   = sizeof(aucPlmnId) - 1;
    PS_MEM_CPY(gastAtParaList[1].aucPara, aucPlmnId, sizeof(aucPlmnId));


    PS_MEM_SET(&stMnMmaCrpnQry, 0, sizeof(TAF_MMA_CRPN_QRY_PARA_STRU));

    stMnMmaCrpnQry.ucPlmnType    = 2;
    stMnMmaCrpnQry.usPlmnNameLen = gastAtParaList[1].usParaLen;
    PS_MEM_CPY(stMnMmaCrpnQry.aucPlmnName, aucPlmnId, sizeof(aucPlmnId));

    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(), any(), eq((unsigned short)ID_TAF_MMA_CRPN_QRY_REQ), mirror((void *)&stMnMmaCrpnQry, (VOS_UINT32)sizeof(TAF_MMA_CRPN_QRY_PARA_STRU)), any(), any())
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    /* 调用被测函数 */
    ulRst = At_SetCrpnPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_WAIT_ASYNC_RETURN, ulRst);
    ASSERT_EQ(AT_CMD_CRPN_QUERY, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
class Test_At_SetYjcxPara: public ::testing::Test
{
public:
    TAF_UINT8                           ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                                = 0;
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_INVALID;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

    }

    void TearDown()
    {
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_INVALID;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

        gucAtParaIndex                         = 0;
    }
};



TEST_F(Test_At_SetYjcxPara, Test_At_SetYjcxPara_001)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */

    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));


    /* 调用被测函数 */
    ulRst = At_SetYjcxPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetYjcxPara, Test_At_SetYjcxPara_002)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */

    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(), any(), eq((unsigned short)DRV_AGENT_YJCX_SET_REQ), any(), any(), any())
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    /* 调用被测函数 */
    ulRst = At_SetYjcxPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_WAIT_ASYNC_RETURN, ulRst);
    ASSERT_EQ(AT_CMD_YJCX_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
class Test_At_SetCardModePara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        /* 初始化用户输出缓存 */
        gstAtSendData.usBufLen = 0;
        PS_MEM_SET(gstAtSendData.aucBuffer, 0, sizeof(gstAtSendData.aucBuffer));

    }
    void TearDown()
    {
        /* 初始化用户输出缓存 */
        gstAtSendData.usBufLen = 0;
        PS_MEM_SET(gstAtSendData.aucBuffer, 0, sizeof(gstAtSendData.aucBuffer));

    }
};


TEST_F(Test_At_SetCardModePara, Test_At_SetCardModePara_001)
{
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    MOCKER(AT_GetModemIdFromClient)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    At_SetCardModePara(ucIndex);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCardModePara, Test_At_SetCardModePara_002)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex                       = 0;
    g_stATParseCmd.ucCmdOptType   = AT_CMD_OPT_SET_PARA_CMD;

    /* 函数打桩 */

    /* 调用被测函数 */
    ulRst = At_SetCardModePara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCardModePara, Test_At_SetCardModePara_003)
{
    AT_MODEM_CTX_STRU                  *pstAtModemCtx = VOS_NULL_PTR;
    pstAtModemCtx = AT_GetModemCtxAddr(MODEM_ID_0);

    /* 变量定义 */
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    VOS_UINT8                           aucExpectedStr[]     = "^CARDMODE:1";
    AT_PAR_CMD_ELEMENT_STRU             stCmdElement         = {AT_CMD_CARDMODE,
                                                                At_SetCardModePara,       AT_NOT_SET_TIME,
                                                                VOS_NULL_PTR,             AT_NOT_SET_TIME,
                                                                VOS_NULL_PTR,             AT_NOT_SET_TIME,
                                                                VOS_NULL_PTR,             AT_NOT_SET_TIME,
                                                                AT_CME_INCORRECT_PARAMETERS, CMD_TBL_LIMITED_NULL,
                                                                (VOS_UINT8*)"^CARDMODE",  VOS_NULL_PTR};

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType      = AT_CMD_OPT_SET_CMD_NO_PARA;
    pstAtModemCtx->stAtUsimInfoCtx.enCardStatus = USIMM_CARD_SERVIC_AVAILABLE;
    pstAtModemCtx->stAtUsimInfoCtx.enCardType   = USIMM_CARD_SIM;

    ucIndex                                 = 0;
    g_stParseContext[ucIndex].pstCmdElement = &stCmdElement;

    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;

    /* 函数打桩 */
    MOCKER(AT_GetModemIdFromClient)
        .stubs()
        .with(any(),outBoundP((MODEM_ID_ENUM_UINT16 *)&enModemId, (VOS_UINT32)sizeof(MODEM_ID_ENUM_UINT16)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    /* 调用被测函数 */
    ulRst = At_SetCardModePara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_OK, ulRst);
    ASSERT_STREQ((char *)aucExpectedStr, (char *)pgucAtSndCodeAddr);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCardModePara, Test_At_SetCardModePara_004)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    VOS_UINT8                           aucExpectedStr[]     = "^CARDMODE:2";
    AT_PAR_CMD_ELEMENT_STRU             stCmdElement         = {AT_CMD_CARDMODE,
                                                                At_SetCardModePara,       AT_NOT_SET_TIME,
                                                                VOS_NULL_PTR,             AT_NOT_SET_TIME,
                                                                VOS_NULL_PTR,             AT_NOT_SET_TIME,
                                                                VOS_NULL_PTR,             AT_NOT_SET_TIME,
                                                                AT_CME_INCORRECT_PARAMETERS, CMD_TBL_LIMITED_NULL,
                                                                (VOS_UINT8*)"^CARDMODE",  VOS_NULL_PTR};
    AT_MODEM_CTX_STRU                  *pstAtModemCtx = VOS_NULL_PTR;

    pstAtModemCtx = AT_GetModemCtxAddr(MODEM_ID_0);

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType      = AT_CMD_OPT_SET_CMD_NO_PARA;
    pstAtModemCtx->stAtUsimInfoCtx.enCardStatus = USIMM_CARD_SERVIC_AVAILABLE;
    pstAtModemCtx->stAtUsimInfoCtx.enCardType   = USIMM_CARD_USIM;

    ucIndex                                 = 0;
    g_stParseContext[ucIndex].pstCmdElement = &stCmdElement;

    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;

    /* 函数打桩 */
    MOCKER(AT_GetModemIdFromClient)
        .stubs()
        .with(any(),outBoundP((MODEM_ID_ENUM_UINT16 *)&enModemId, (VOS_UINT32)sizeof(MODEM_ID_ENUM_UINT16)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    /* 调用被测函数 */
    ulRst = At_SetCardModePara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_OK, ulRst);
    ASSERT_STREQ((char *)aucExpectedStr, (char *)pgucAtSndCodeAddr);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCardModePara, Test_At_SetCardModePara_005)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    VOS_UINT8                           aucExpectedStr[]     = "^CARDMODE:0";
    AT_PAR_CMD_ELEMENT_STRU             stCmdElement         = {AT_CMD_CARDMODE,
                                                                At_SetCardModePara,       AT_NOT_SET_TIME,
                                                                VOS_NULL_PTR,             AT_NOT_SET_TIME,
                                                                VOS_NULL_PTR,             AT_NOT_SET_TIME,
                                                                VOS_NULL_PTR,             AT_NOT_SET_TIME,
                                                                AT_CME_INCORRECT_PARAMETERS, CMD_TBL_LIMITED_NULL,
                                                                (VOS_UINT8*)"^CARDMODE",  VOS_NULL_PTR};
    AT_MODEM_CTX_STRU                  *pstAtModemCtx = VOS_NULL_PTR;

    pstAtModemCtx = AT_GetModemCtxAddr(MODEM_ID_0);

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType      = AT_CMD_OPT_SET_CMD_NO_PARA;
    pstAtModemCtx->stAtUsimInfoCtx.enCardStatus = USIMM_CARD_SERVIC_AVAILABLE;
    pstAtModemCtx->stAtUsimInfoCtx.enCardType   = USIMM_CARD_ROM_SIM;

    ucIndex                                 = 0;
    g_stParseContext[ucIndex].pstCmdElement = &stCmdElement;

    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;

    /* 函数打桩 */
    MOCKER(AT_GetModemIdFromClient)
        .stubs()
        .with(any(),outBoundP((MODEM_ID_ENUM_UINT16 *)&enModemId, (VOS_UINT32)sizeof(MODEM_ID_ENUM_UINT16)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    /* 调用被测函数 */
    ulRst = At_SetCardModePara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_OK, ulRst);
    ASSERT_STREQ((char *)aucExpectedStr, (char *)pgucAtSndCodeAddr);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCardModePara, Test_At_SetCardModePara_006)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    VOS_UINT8                           aucExpectedStr[]     = "^CARDMODE:0";
    AT_PAR_CMD_ELEMENT_STRU             stCmdElement         = {AT_CMD_CARDMODE,
                                                                At_SetCardModePara,       AT_NOT_SET_TIME,
                                                                VOS_NULL_PTR,             AT_NOT_SET_TIME,
                                                                VOS_NULL_PTR,             AT_NOT_SET_TIME,
                                                                VOS_NULL_PTR,             AT_NOT_SET_TIME,
                                                                AT_CME_INCORRECT_PARAMETERS, CMD_TBL_LIMITED_NULL,
                                                                (VOS_UINT8*)"^CARDMODE",  VOS_NULL_PTR};
    AT_MODEM_CTX_STRU                  *pstAtModemCtx = VOS_NULL_PTR;

    pstAtModemCtx = AT_GetModemCtxAddr(MODEM_ID_0);

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType      = AT_CMD_OPT_SET_CMD_NO_PARA;
    pstAtModemCtx->stAtUsimInfoCtx.enCardStatus = USIMM_CARD_SERVIC_ABSENT;
    pstAtModemCtx->stAtUsimInfoCtx.enCardType   = USIMM_CARD_ROM_SIM;

    ucIndex                                 = 0;
    g_stParseContext[ucIndex].pstCmdElement = &stCmdElement;

    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;

    /* 函数打桩 */
    MOCKER(AT_GetModemIdFromClient)
        .stubs()
        .with(any(),outBoundP((MODEM_ID_ENUM_UINT16 *)&enModemId, (VOS_UINT32)sizeof(MODEM_ID_ENUM_UINT16)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    /* 调用被测函数 */
    ulRst = At_SetCardModePara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_OK, ulRst);
    ASSERT_STREQ((char *)aucExpectedStr, (char *)pgucAtSndCodeAddr);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCardModePara, Test_At_SetCardModePara_007)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    MODEM_ID_ENUM_UINT16                enModemId;
    AT_PAR_CMD_ELEMENT_STRU             stCmdElement         = {AT_CMD_CARDMODE,
                                                                At_SetCardModePara,       AT_NOT_SET_TIME,
                                                                VOS_NULL_PTR,             AT_NOT_SET_TIME,
                                                                VOS_NULL_PTR,             AT_NOT_SET_TIME,
                                                                VOS_NULL_PTR,             AT_NOT_SET_TIME,
                                                                AT_CME_INCORRECT_PARAMETERS, CMD_TBL_LIMITED_NULL,
                                                                (VOS_UINT8*)"^CARDMODE",  VOS_NULL_PTR};

    AT_MODEM_CTX_STRU                  *pstAtModemCtx = VOS_NULL_PTR;

    pstAtModemCtx = AT_GetModemCtxAddr(MODEM_ID_0);

    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType      = AT_CMD_OPT_SET_CMD_NO_PARA;
    pstAtModemCtx->stAtUsimInfoCtx.enCardStatus = USIMM_CARD_SERVIC_BUTT;
    pstAtModemCtx->stAtUsimInfoCtx.enCardType   = USIMM_CARD_ROM_SIM;

    ucIndex                                 = 0;
    g_stParseContext[ucIndex].pstCmdElement = &stCmdElement;

    enModemId = MODEM_ID_0;

    /* 函数打桩 */
    MOCKER(AT_GetModemIdFromClient)
        .stubs()
        .with(any(),outBoundP((MODEM_ID_ENUM_UINT16 *)&enModemId, (VOS_UINT32)sizeof(MODEM_ID_ENUM_UINT16)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    /* 调用被测函数 */
    ulRst = At_SetCardModePara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_CME_SIM_BUSY, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
class Test_At_SetSPNPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};



TEST_F(Test_At_SetSPNPara, Test_At_SetSPNPara_001)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex                       = 0;
    gucAtParaIndex                = 2;

    /* 函数打桩 */

    /* 调用被测函数 */
    ulRst = At_SetSPNPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetSPNPara, Test_At_SetSPNPara_002)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex                       = 0;
    gucAtParaIndex                = 1;
    gastAtParaList[0].ulParaValue = 2;

    /* 函数打桩 */

    /* 调用被测函数 */
    ulRst = At_SetSPNPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetSPNPara, Test_At_SetSPNPara_003)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex                       = 0;
    gucAtParaIndex                = 1;
    gastAtParaList[0].ulParaValue = 1;

    /* 函数打桩 */
    MOCKER(Taf_ParaQuery)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));


    /* 调用被测函数 */
    ulRst = At_SetSPNPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetSPNPara, Test_At_SetSPNPara_004)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex                       = 0;
    gucAtParaIndex                = 1;
    gastAtParaList[0].ulParaValue = 1;

    /* 函数打桩 */
    MOCKER(Taf_ParaQuery)
        .stubs()
        .with(any(), any(), eq((VOS_UINT8)ID_TAF_MMA_SPN_QRY_REQ), any())
        .will(returnValue((VOS_UINT32)VOS_OK));


    /* 调用被测函数 */
    ulRst = At_SetSPNPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ(AT_WAIT_ASYNC_RETURN, ulRst);
    ASSERT_EQ(AT_CMD_SPN_QUERY, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



#if(FEATURE_ON == FEATURE_CHARGE)
class Test_AT_SetApbatlvlPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetApbatlvlPara, Test_AT_SetApbatlvlPara_001)
{
    //// 变量声明
    //VOS_UINT32                          ulRet;

    ////参数初始化

    //// 初始化全局变量;
    ////gastAtClientTab[0].usClientId = 1;
    ////gastAtClientTab[0].opId = 1;

    //// MOCKER操作;
    //MOCKER(AT_FillAndSndAppReqMsg)
    //    .expects(exactly(1))
    //    .will(returnValue(1));

    //// 调用被测函数
    //ulRst = AT_SetApbatlvlPara(0);

    //// 执行检查
    //EXPECT_EQ(AT_ERROR, ulRet);

    //GlobalMockObject::verify();
}
#endif

#if(FEATURE_ON == FEATURE_CHARGE)

TEST_F(Test_AT_SetApbatlvlPara, Test_AT_SetApbatlvlPara_002)
{
    //// 变量声明
    //VOS_UINT32                          ulRet;

    ////参数初始化

    //// 初始化全局变量;

    //// MOCKER操作;
    //MOCKER(AT_FillAndSndAppReqMsg)
    //    .expects(exactly(1))
    //    .will(returnValue(0));

    //// 调用被测函数
    //ulRst = AT_SetApbatlvlPara(0);

    //// 执行检查
    //EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    //EXPECT_EQ(AT_CMD_APBATLVL_READ, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //GlobalMockObject::verify();
}
#endif


class Test_AT_SetGodloadPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetGodloadPara, Test_AT_SetGodloadPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_CHAR                           *pcLogStr;

    //参数初始化
    pcLogStr                            = "AT_SetGodloadPara: too many parameters.";

    // 初始化全局变量;
    gucAtParaIndex                      = 1;

    // MOCKER操作
    /*MOCKER(DIAG_LogReport)
        .expects(exactly(1))
        .with(any(), any(), any(), any(), any(),
              mirror((VOS_CHAR *)pcLogStr, (VOS_UINT32)(VOS_StrLen(pcLogStr) + 1)));*/

    // 调用被测函数
    ulRet = AT_SetGodloadPara(0);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetGodloadPara, Test_AT_SetGodloadPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_CHAR                           *pcLogStr;

    //参数初始化
    pcLogStr                            = "AT_SetApbatlvlPara: AT_FillAndSndAppReqMsg fail.";

    // 初始化全局变量;
    gucAtParaIndex                      = 0;

    // MOCKER操作
    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .with(any(), any(), eq((unsigned short)DRV_AGENT_GODLOAD_SET_REQ),
              any(), any(), eq(WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /*MOCKER(DIAG_LogReport)
        .expects(exactly(1))
        .with(any(), any(), any(), any(), any(),
              mirror((VOS_CHAR *)pcLogStr, (VOS_UINT32)(VOS_StrLen(pcLogStr) + 1)));*/

    // 调用被测函数
    ulRet = AT_SetGodloadPara(0);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetGodloadPara, Test_AT_SetGodloadPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    //参数初始化

    // 初始化全局变量;
    gucAtParaIndex                      = 0;

    // MOCKER操作
    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .with(any(), any(), eq((unsigned short)DRV_AGENT_GODLOAD_SET_REQ),
              any(), any(), eq(WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulRet = AT_SetGodloadPara(0);

    // 执行检查
    EXPECT_EQ(AT_CMD_GODLOAD_SET, gastAtClientTab[0].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


class Test_At_SetPfverPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetPfverPara, Test_At_SetPfverPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    //参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;

    // MOCKER操作

    // 调用被测函数
    ulRet = At_SetPfverPara(0);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetPfverPara, Test_At_SetPfverPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_CHAR                           *pcLogStr;

    //参数初始化
    pcLogStr                            = "At_SetPfverPara: AT_FillAndSndAppReqMsg fail.";

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_CMD_NO_PARA;

    // MOCKER操作
    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .with(any(), any(), eq((unsigned short)DRV_AGENT_PFVER_QRY_REQ),
              any(), any(), eq(WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /*MOCKER(DIAG_LogReport)
        .expects(exactly(1))
        .with(any(), any(), any(), any(), any(),
              mirror((VOS_CHAR *)pcLogStr, (VOS_UINT32)(VOS_StrLen(pcLogStr) + 1)));*/

    // 调用被测函数
    ulRet = At_SetPfverPara(0);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetPfverPara, Test_At_SetPfverPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    //参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_CMD_NO_PARA;

    // MOCKER操作
    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .with(any(), any(), eq((unsigned short)DRV_AGENT_PFVER_QRY_REQ),
              any(), any(), eq(WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulRet = At_SetPfverPara(0);

    // 执行检查
    EXPECT_EQ(AT_CMD_PFVER_READ, gastAtClientTab[0].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


class Test_At_SetTModePara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};

#if(FEATURE_LTE == FEATURE_ON)

TEST_F(Test_At_SetTModePara, Test_At_SetTModePara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    //参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = AT_TMODE_NORMAL;
    g_stAtDevCmdCtrl.ucDeviceRatMode    = AT_RAT_MODE_FDD_LTE;

    // MOCKER操作
    MOCKER(atSetTmodePara)
        .expects(never())
        .will(returnValue((VOS_UINT32)AT_WAIT_ASYNC_RETURN));

    // 调用被测函数
    ulRet = At_SetTModePara(0);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}
#endif


TEST_F(Test_At_SetTModePara, Test_At_SetTModePara_001_1)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    //参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = AT_TMODE_FTM;
    g_stAtDevCmdCtrl.ucCurrentTMode     = AT_TMODE_FTM;

    // MOCKER操作
    MOCKER(TAF_MMA_PhoneModeSetReq)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = At_SetTModePara(0);

    // 执行检查
    EXPECT_EQ(AT_TMODE_FTM,     g_stAtDevCmdCtrl.ucCurrentTMode);
    EXPECT_EQ(AT_CMD_SET_TMODE, gastAtClientTab[0].CmdCurrentOpt);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetTModePara, Test_At_SetTModePara_001_2)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    TAF_MMA_PHONE_MODE_PARA_STRU        stPhModeSet;
    VOS_UINT8                          *pucSystemAppConfig  = VOS_NULL_PTR;

    //参数初始化
    pucSystemAppConfig                  = AT_GetSystemAppConfigAddr();
    *pucSystemAppConfig                 = SYSTEM_APP_WEBUI;

    PS_MEM_SET(&stPhModeSet, 0x00, sizeof(TAF_PH_OP_MODE_STRU));
    stPhModeSet.PhMode                  = TAF_PH_MODE_POWEROFF;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = AT_TMODE_POWEROFF;
    g_stAtDevCmdCtrl.ucCurrentTMode     = AT_TMODE_FTM;

    // MOCKER操作
    MOCKER(TAF_MMA_PhoneModeSetReq)
        .stubs()
        .with(eq(WUEPS_PID_AT), any(), any(), mirror((TAF_MMA_PHONE_MODE_PARA_STRU *)&stPhModeSet, (VOS_UINT32)sizeof(stPhModeSet)))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = At_SetTModePara(0);

    // 执行检查
    EXPECT_EQ(AT_OK,     ulRet);

    GlobalMockObject::verify();
}




#if (FEATURE_ON != FEATURE_LTE)

TEST_F(Test_At_SetTModePara, Test_At_SetTModePara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucUpdateFlag;

    //参数初始化
    ucUpdateFlag                        = TRUE;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = AT_TMODE_UPGRADE;
    g_stAtDevCmdCtrl.ucDeviceRatMode    = AT_RAT_MODE_GSM;
    g_stAtDevCmdCtrl.ucCurrentTMode     = AT_TMODE_NORMAL;

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .with(any(), any(), eq(DRV_AGENT_TMODE_SET_REQ),
              mirror(&ucUpdateFlag, sizeof(ucUpdateFlag)),
              eq((VOS_UINT32)sizeof(ucUpdateFlag)), eq(WUEPS_PID_DRV_AGENT));

    // 调用被测函数
    ulRet = At_SetTModePara(0);

    // 执行检查
    EXPECT_EQ(AT_TMODE_UPGRADE, g_stAtDevCmdCtrl.ucCurrentTMode);
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetTModePara, Test_At_SetTModePara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucUpdateFlag;

    //参数初始化
    ucUpdateFlag                        = VOS_FALSE;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = AT_TMODE_RESET;
    g_stAtDevCmdCtrl.ucDeviceRatMode    = AT_RAT_MODE_GSM;
    g_stAtDevCmdCtrl.ucCurrentTMode     = AT_TMODE_NORMAL;

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .with(any(), any(), eq(DRV_AGENT_TMODE_SET_REQ),
              mirror(&ucUpdateFlag, sizeof(ucUpdateFlag)),
              eq((VOS_UINT32)sizeof(ucUpdateFlag)), eq(WUEPS_PID_DRV_AGENT));

    // 调用被测函数
    ulRet = At_SetTModePara(0);

    // 执行检查
    EXPECT_EQ(AT_TMODE_RESET, g_stAtDevCmdCtrl.ucCurrentTMode);
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}
#endif


TEST_F(Test_At_SetTModePara, Test_At_SetTModePara_005)
{
    /* 变量声明 */
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucUpdateFlag;
    TAF_MMA_PHONE_MODE_PARA_STRU        stPhoneModePara;

    /* 参数初始化 */
    ucUpdateFlag                        = VOS_FALSE;

    PS_MEM_SET(&stPhoneModePara, 0x00, sizeof(stPhoneModePara));
    stPhoneModePara.PhMode              = TAF_PH_MODE_FT;

    /* 初始化全局变量 */
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = AT_TMODE_SIGNALING ;
    g_stAtDevCmdCtrl.ucDeviceRatMode    = AT_RAT_MODE_GSM;
    g_stAtDevCmdCtrl.ucCurrentTMode     = AT_TMODE_NORMAL;

    /* MOCKER操作 */
    MOCKER(TAF_MMA_PhoneModeSetReq)
        .stubs()
        .with(eq(WUEPS_PID_AT), any(), eq((VOS_UINT8)0), mirror((TAF_MMA_PHONE_MODE_PARA_STRU *)&stPhoneModePara, (VOS_UINT32)sizeof(TAF_MMA_PHONE_MODE_PARA_STRU)))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    /* 调用被测函数 */
    ulRet = At_SetTModePara(0);

    /* 执行检查 */
    EXPECT_EQ(AT_TMODE_SIGNALING, g_stAtDevCmdCtrl.ucCurrentTMode);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetTModePara, Test_At_SetTModePara_006)
{
    /* 变量声明 */
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucUpdateFlag;
    TAF_MMA_PHONE_MODE_PARA_STRU        stPhoneModePara;

    /* 参数初始化 */
    ucUpdateFlag                        = VOS_FALSE;

    PS_MEM_SET(&stPhoneModePara, 0x00, sizeof(stPhoneModePara));
    stPhoneModePara.PhMode              = TAF_PH_MODE_FT;

    /* 初始化全局变量 */
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = AT_TMODE_SIGNALING ;
    g_stAtDevCmdCtrl.ucDeviceRatMode    = AT_RAT_MODE_GSM;
    g_stAtDevCmdCtrl.ucCurrentTMode     = AT_TMODE_UPGRADE;

    /* MOCKER操作 */
    MOCKER(TAF_MMA_PhoneModeSetReq)
        .expects(never());

    /* 调用被测函数 */
    ulRet = At_SetTModePara(0);

    /* 执行检查 */
    EXPECT_EQ(AT_TMODE_UPGRADE, g_stAtDevCmdCtrl.ucCurrentTMode);
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetTModePara, Test_At_SetTModePara_007)
{
    /* 变量声明 */
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucUpdateFlag;
    TAF_MMA_PHONE_MODE_PARA_STRU        stPhoneModePara;

    /* 参数初始化 */
    ucUpdateFlag                        = VOS_FALSE;

    PS_MEM_SET(&stPhoneModePara, 0x00, sizeof(stPhoneModePara));
    stPhoneModePara.PhMode              = TAF_PH_MODE_FT;

    /* 初始化全局变量 */
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = AT_TMODE_SIGNALING ;
    g_stAtDevCmdCtrl.ucDeviceRatMode    = AT_RAT_MODE_GSM;
    g_stAtDevCmdCtrl.ucCurrentTMode     = AT_TMODE_NORMAL;

    /* MOCKER操作 */
    MOCKER(TAF_MMA_PhoneModeSetReq)
        .stubs()
        .with(eq(WUEPS_PID_AT), any(), eq((VOS_UINT8)0), mirror((TAF_MMA_PHONE_MODE_PARA_STRU *)&stPhoneModePara, (VOS_UINT32)sizeof(TAF_MMA_PHONE_MODE_PARA_STRU)))
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    /* 调用被测函数 */
    ulRet = At_SetTModePara(0);

    /* 执行检查 */
    EXPECT_EQ(AT_TMODE_NORMAL, g_stAtDevCmdCtrl.ucCurrentTMode);
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetTModePara, Test_At_SetTModePara_008)
{
    /* 变量声明 */
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucUpdateFlag;
    TAF_MMA_PHONE_MODE_PARA_STRU        stPhoneModePara;

    /* 参数初始化 */
    ucUpdateFlag                        = VOS_FALSE;

    PS_MEM_SET(&stPhoneModePara, 0x00, sizeof(stPhoneModePara));
    stPhoneModePara.PhMode              = TAF_PH_MODE_FULL;

    /* 初始化全局变量 */
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = AT_TMODE_OFFLINE ;
    g_stAtDevCmdCtrl.ucDeviceRatMode    = AT_RAT_MODE_GSM;
    g_stAtDevCmdCtrl.ucCurrentTMode     = AT_TMODE_NORMAL;

    /* MOCKER操作 */
    MOCKER(TAF_MMA_PhoneModeSetReq)
        .stubs()
        .with(eq(WUEPS_PID_AT), any(), eq((VOS_UINT8)0), mirror((TAF_MMA_PHONE_MODE_PARA_STRU *)&stPhoneModePara, (VOS_UINT32)sizeof(TAF_MMA_PHONE_MODE_PARA_STRU)))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    /* 调用被测函数 */
    ulRet = At_SetTModePara(0);

    /* 执行检查 */
    EXPECT_EQ(AT_TMODE_OFFLINE, g_stAtDevCmdCtrl.ucCurrentTMode);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetTModePara, Test_At_SetTModePara_009)
{
    /* 变量声明 */
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucUpdateFlag;
    TAF_MMA_PHONE_MODE_PARA_STRU        stPhoneModePara;

    /* 参数初始化 */
    ucUpdateFlag                        = VOS_FALSE;

    PS_MEM_SET(&stPhoneModePara, 0x00, sizeof(stPhoneModePara));
    stPhoneModePara.PhMode              = TAF_PH_MODE_FULL;

    /* 初始化全局变量 */
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = AT_TMODE_OFFLINE ;
    g_stAtDevCmdCtrl.ucDeviceRatMode    = AT_RAT_MODE_GSM;
    g_stAtDevCmdCtrl.ucCurrentTMode     = AT_TMODE_NORMAL;

    /* MOCKER操作 */
    MOCKER(TAF_MMA_PhoneModeSetReq)
        .stubs()
        .with(eq(WUEPS_PID_AT), any(), eq((VOS_UINT8)0), mirror((TAF_MMA_PHONE_MODE_PARA_STRU *)&stPhoneModePara, (VOS_UINT32)sizeof(TAF_MMA_PHONE_MODE_PARA_STRU)))
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    /* 调用被测函数 */
    ulRet = At_SetTModePara(0);

    /* 执行检查 */
    EXPECT_EQ(AT_TMODE_NORMAL, g_stAtDevCmdCtrl.ucCurrentTMode);
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


class Test_At_SetDataLock: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetDataLock, Test_At_SetDataLock_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    g_bAtDataLocked                     = VOS_TRUE;
    gastAtParaList[0].usParaLen         = 8;
    PS_MEM_CPY(&gastAtParaList[0].aucPara, "12345678", TAF_PH_ME_PERSONALISATION_PWD_LEN_MAX);

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .with(any(), any(), eq((unsigned short)DRV_AGENT_DATALOCK_SET_REQ),
              any(), any(), eq(WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    // 调用被测函数
    ulRet = At_SetDataLock(0);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetDataLock, Test_At_SetDataLock_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    g_bAtDataLocked                     = VOS_TRUE;
    gastAtParaList[0].usParaLen         = 8;
    PS_MEM_CPY(&gastAtParaList[0].aucPara, "12345678", TAF_PH_ME_PERSONALISATION_PWD_LEN_MAX);

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .with(any(), any(), eq((unsigned short)DRV_AGENT_DATALOCK_SET_REQ),
              any(), any(), eq(WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulRet = At_SetDataLock(0);

    // 执行检查
    EXPECT_EQ(AT_CMD_DATALOCK_SET, gastAtClientTab[0].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


class Test_At_SetGPIOPL: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetGPIOPL, Test_At_SetGPIOPL_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_CHAR                           *pcParaStr;

    //参数初始化
    pcParaStr                           = "000A";

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].usParaLen         = 4;
    PS_MEM_CPY(&gastAtParaList[0].aucPara, pcParaStr, VOS_StrLen(pcParaStr));

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .with(any(), any(), eq((unsigned short)DRV_AGENT_GPIOPL_SET_REQ),
              any(), any(), eq(WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    // 调用被测函数
    ulRet = At_SetGPIOPL(0);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetGPIOPL, Test_At_SetGPIOPL_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_CHAR                           *pcParaStr;

    //参数初始化
    pcParaStr                           = "000A";

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].usParaLen         = 4;
    PS_MEM_CPY(&gastAtParaList[0].aucPara, pcParaStr, VOS_StrLen(pcParaStr));

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .with(any(), any(), eq((unsigned short)DRV_AGENT_GPIOPL_SET_REQ),
              any(), any(), eq(WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulRet = At_SetGPIOPL(0);

    // 执行检查
    EXPECT_EQ(AT_CMD_GPIOPL_SET, gastAtClientTab[0].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


class Test_At_SetFlnaPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};

#if(FEATURE_LTE == FEATURE_ON)

TEST_F(Test_At_SetFlnaPara, Test_At_SetFlnaPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    //参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    g_stAtDevCmdCtrl.ucCurrentTMode     = AT_TMODE_FTM;
    g_stAtDevCmdCtrl.bDspLoadFlag       = VOS_TRUE;
    g_stAtDevCmdCtrl.ucDeviceRatMode    = AT_RAT_MODE_FDD_LTE;

    // MOCKER操作;
    MOCKER(atSetFLNAPara)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_WAIT_ASYNC_RETURN));

    // 调用被测函数
    ulRet = At_SetFlnaPara(0);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}
#endif


class Test_AT_SetCgdcontPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetCgdcontPara, Test_AT_SetCgdcontPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex                             = 1;

    // 初始化全局变量;
    gastAtParaList[0].usParaLen         = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetCgdcontPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgdcontPara, Test_AT_SetCgdcontPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex                             = 1;

    // 初始化全局变量;
    gastAtParaList[0].usParaLen         = 1;
    gucAtParaIndex                      = 11;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetCgdcontPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgdcontPara, Test_AT_SetCgdcontPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex                             = 1;

    // 初始化全局变量;
    gastAtParaList[0].usParaLen         = 1;
    gucAtParaIndex                      = 1;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(I0_WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_SET_PRIM_PDP_CONTEXT_INFO_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_SET_PRIM_PDP_CONTEXT_INFO_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetCgdcontPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CMD_CGDCONT_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgdcontPara, Test_AT_SetCgdcontPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    TAF_PDP_PRIM_CONTEXT_EXT_STRU       stPdpCxtInfo;
    VOS_CHAR                           *pcAtPara2;      /* 第3个参数字符串 */
    VOS_CHAR                           *pcAtPara3;      /* 第4个参数字符串 */

    //参数初始化
    PS_MEM_SET(&stPdpCxtInfo, 0x00, sizeof(TAF_PDP_PRIM_CONTEXT_EXT_STRU));

    pcAtPara2                           = "ABCDEF";
    pcAtPara3                           = "200.1.1.80";

    ucIndex                             = 1;
    stPdpCxtInfo.ucCid                  = 1;
    stPdpCxtInfo.ucDefined              = VOS_TRUE;
    stPdpCxtInfo.bitOpPdpType           = VOS_TRUE;
    stPdpCxtInfo.enPdpType              = TAF_PDP_IPV4;
    stPdpCxtInfo.bitOpApn               = VOS_TRUE;
    PS_MEM_CPY((VOS_CHAR*)stPdpCxtInfo.aucApn, pcAtPara2, VOS_StrLen(pcAtPara2));
    stPdpCxtInfo.aucApn[VOS_StrLen(pcAtPara2)] = 0;
    stPdpCxtInfo.bitOpPdpAddr           = VOS_TRUE;
    stPdpCxtInfo.stPdpAddr.aucIpv4Addr[0] = 200;
    stPdpCxtInfo.stPdpAddr.aucIpv4Addr[1] = 1;
    stPdpCxtInfo.stPdpAddr.aucIpv4Addr[2] = 1;
    stPdpCxtInfo.stPdpAddr.aucIpv4Addr[3] = 80;
    stPdpCxtInfo.bitOpPdpDcomp          = VOS_TRUE;
    stPdpCxtInfo.enPdpDcomp             = 1;
    stPdpCxtInfo.bitOpPdpHcomp          = VOS_TRUE;
    stPdpCxtInfo.enPdpHcomp             = 2;
    stPdpCxtInfo.bitOpIpv4AddrAlloc     = VOS_TRUE;
    stPdpCxtInfo.enIpv4AddrAlloc        = 1;
    stPdpCxtInfo.bitOpEmergencyInd      = VOS_TRUE;
    stPdpCxtInfo.enEmergencyFlg         = 1;
    stPdpCxtInfo.bitOpImCnSignalFlg     = VOS_TRUE;
    stPdpCxtInfo.enImCnSignalFlg        = 1;
    stPdpCxtInfo.bitOpPcscfDiscovery    = VOS_TRUE;
    stPdpCxtInfo.enPcscfDiscovery       = 1;

    // 初始化全局变量;
    gucAtParaIndex                      = 8;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[1].usParaLen         = 4;
    gastAtParaList[1].ulParaValue       = TAF_PDP_IPV4 - 1;
    gastAtParaList[2].usParaLen         = (VOS_UINT16)VOS_StrLen(pcAtPara2);
    PS_MEM_CPY(gastAtParaList[2].aucPara, pcAtPara2, VOS_StrLen(pcAtPara2));
    gastAtParaList[3].usParaLen         = (VOS_UINT16)VOS_StrLen(pcAtPara3);
    PS_MEM_CPY(gastAtParaList[3].aucPara, pcAtPara3, VOS_StrLen(pcAtPara3));
    gastAtParaList[4].usParaLen         = 1;
    gastAtParaList[4].ulParaValue       = 1;
    gastAtParaList[5].usParaLen         = 1;
    gastAtParaList[5].ulParaValue       = 2;
    gastAtParaList[6].usParaLen         = 1;
    gastAtParaList[6].ulParaValue       = 1;
    gastAtParaList[7].usParaLen         = 1;
    gastAtParaList[7].ulParaValue       = 1;
    gastAtParaList[8].usParaLen         = 1;
    gastAtParaList[8].ulParaValue       = 1;
    gastAtParaList[9].usParaLen         = 1;
    gastAtParaList[9].ulParaValue       = 1;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(I0_WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_SET_PRIM_PDP_CONTEXT_INFO_REQ),
        any(), eq((VOS_UINT32)sizeof(TAF_PS_SET_PRIM_PDP_CONTEXT_INFO_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_ERR));


    // 调用被测函数
    ulRet = AT_SetCgdcontPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgdcontPara, Test_AT_SetCgdcontPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    VOS_CHAR                           *pcAtPara2;      /* 第3个参数字符串 */
    VOS_CHAR                           *pcAtPara3;      /* 第4个参数字符串 */

    //参数初始化
    pcAtPara2                           = "ABCDEF";
    pcAtPara3                           = "200.1.1.80";

    ucIndex                             = 1;

    // 初始化全局变量;
    gucAtParaIndex                      = 8;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[1].usParaLen         = 4;
    gastAtParaList[1].ulParaValue       = TAF_PDP_IPV4-1;
    gastAtParaList[2].usParaLen         = (VOS_UINT16)VOS_StrLen(pcAtPara2);
    PS_MEM_CPY(gastAtParaList[2].aucPara, pcAtPara2, VOS_StrLen(pcAtPara2));
    gastAtParaList[3].usParaLen         = (VOS_UINT16)VOS_StrLen(pcAtPara3);
    PS_MEM_CPY(gastAtParaList[3].aucPara, pcAtPara3, VOS_StrLen(pcAtPara3));
    gastAtParaList[4].usParaLen         = 1;
    gastAtParaList[4].ulParaValue       = 1;
    gastAtParaList[5].usParaLen         = 1;
    gastAtParaList[5].ulParaValue       = 2;
    gastAtParaList[6].usParaLen         = 1;
    gastAtParaList[6].ulParaValue       = 1;
    gastAtParaList[7].usParaLen         = 1;
    gastAtParaList[7].ulParaValue       = 1;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(I0_WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_SET_PRIM_PDP_CONTEXT_INFO_REQ),
        any(), eq((VOS_UINT32)sizeof(TAF_PS_SET_PRIM_PDP_CONTEXT_INFO_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_OK));


    // 调用被测函数
    ulRet = AT_SetCgdcontPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CMD_CGDCONT_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgdcontPara, Test_AT_SetCgdcontPara_006)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    VOS_CHAR                           *pcAtPara2;      /* 第3个参数字符串 */

    //参数初始化
    pcAtPara2                           = "ABCDEF";

    ucIndex                             = 1;

    // 初始化全局变量;
    gucAtParaIndex                      = 8;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[1].usParaLen         = 4;
    gastAtParaList[1].ulParaValue       = TAF_PDP_IPV4;
    gastAtParaList[2].usParaLen         = 100;
    PS_MEM_CPY(gastAtParaList[2].aucPara, pcAtPara2, VOS_StrLen(pcAtPara2));

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetCgdcontPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetCgdcontPara, Test_AT_SetCgdcontPara_007)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    VOS_CHAR                           *pcAtPara2;      /* 第3个参数字符串 */

    //参数初始化
    pcAtPara2                           = "ABCDEF";

    ucIndex                             = 1;

    // 初始化全局变量;
    gucAtParaIndex                      = 8;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[1].usParaLen         = 4;
    gastAtParaList[1].ulParaValue       = TAF_PDP_IPV4-1;
    gastAtParaList[2].usParaLen         = (VOS_UINT16)VOS_StrLen(pcAtPara2);
    PS_MEM_CPY(gastAtParaList[2].aucPara, pcAtPara2, VOS_StrLen(pcAtPara2));

    // MOCKER操作;
    MOCKER(AT_CheckApnFormat)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = AT_SetCgdcontPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetCgdcontPara, Test_AT_SetCgdcontPara_008)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    VOS_CHAR                           *pcAtPara2;      /* 第3个参数字符串 */
    VOS_CHAR                           *pcAtPara3;      /* 第4个参数字符串 */

    //参数初始化
    pcAtPara2                           = "ABCDEF";
    pcAtPara3                           = "200.1.1.80";

    ucIndex                             = 1;

    // 初始化全局变量;
    gucAtParaIndex                      = 8;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[1].usParaLen         = 4;
    gastAtParaList[1].ulParaValue       = TAF_PDP_IPV4;
    gastAtParaList[2].usParaLen         = (VOS_UINT16)VOS_StrLen(pcAtPara2);
    PS_MEM_CPY(gastAtParaList[2].aucPara, pcAtPara2, VOS_StrLen(pcAtPara2));
    gastAtParaList[3].usParaLen         = 16;           /* 最大长度为15 */
    PS_MEM_CPY(gastAtParaList[3].aucPara, pcAtPara3, VOS_StrLen(pcAtPara3));

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetCgdcontPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetCgdcontPara, Test_AT_SetCgdcontPara_009)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    VOS_CHAR                           *pcAtPara2;      /* 第3个参数字符串 */
    VOS_CHAR                           *pcAtPara3;      /* 第4个参数字符串 */

    //参数初始化
    pcAtPara2                           = "ABCDEF";
    pcAtPara3                           = "200.1.1.80";

    ucIndex                             = 1;

    // 初始化全局变量;
    gucAtParaIndex                      = 8;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[1].usParaLen         = 4;
    gastAtParaList[1].ulParaValue       = TAF_PDP_IPV4-1;
    gastAtParaList[2].usParaLen         = (VOS_UINT16)VOS_StrLen(pcAtPara2);
    PS_MEM_CPY(gastAtParaList[2].aucPara, pcAtPara2, VOS_StrLen(pcAtPara2));
    gastAtParaList[3].usParaLen         = (VOS_UINT16)VOS_StrLen(pcAtPara3);
    PS_MEM_CPY(gastAtParaList[3].aucPara, pcAtPara3, VOS_StrLen(pcAtPara3));

    // MOCKER操作;
    MOCKER(AT_Ipv4AddrAtoi)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = AT_SetCgdcontPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetCgdscontPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetCgdscontPara, Test_AT_SetCgdscontPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 1;

    // 初始化全局变量;
    gastAtParaList[0].usParaLen         = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetCgdscontPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgdscontPara, Test_AT_SetCgdscontPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 1;

    // 初始化全局变量;
    gastAtParaList[0].usParaLen         = 1;
    gucAtParaIndex                      = 8;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetCgdscontPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgdscontPara, Test_AT_SetCgdscontPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 1;
    // 初始化全局变量;
    gastAtParaList[0].usParaLen         = 1;
    gucAtParaIndex                      = 1;

    // MOCKER操作;
    MOCKER(TAF_PS_SetSecPdpContextInfo)
        .expects(exactly(1))
        .with(any(), any(), eq((VOS_UINT8)0), any())
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = AT_SetCgdscontPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgdscontPara, Test_AT_SetCgdscontPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 1;

    // 初始化全局变量;
    gucAtParaIndex                      = 4;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 2;
    gastAtParaList[1].usParaLen         = 1;
    gastAtParaList[1].ulParaValue       = 1;
    gastAtParaList[2].usParaLen         = 1;
    gastAtParaList[2].ulParaValue       = 1;
    gastAtParaList[3].usParaLen         = 1;
    gastAtParaList[3].ulParaValue       = 2;
    gastAtClientTab[ucIndex].usClientId = 1;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_SET_SEC_PDP_CONTEXT_INFO_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_SET_SEC_PDP_CONTEXT_INFO_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_OK));


    // 调用被测函数
    ulRet = AT_SetCgdscontPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CMD_CGDSCONT_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetCgeqreqPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {
        PS_MEM_SET(gastAtParaList, 0x00, sizeof(AT_PARSE_PARA_TYPE_STRU) * AT_MAX_PARA_NUMBER);
    }
};


TEST_F(Test_AT_SetCgeqreqPara, Test_AT_SetCgeqreqPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 1;

    // 初始化全局变量;
    gastAtParaList[0].usParaLen         = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetCgeqreqPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgeqreqPara, Test_AT_SetCgeqreqPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 1;

    // 初始化全局变量;
    gastAtParaList[0].usParaLen         = 1;
    gucAtParaIndex                      = 15;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetCgeqreqPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgeqreqPara, Test_AT_SetCgeqreqPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    TAF_UMTS_QOS_EXT_STRU               stUmtsQosInfo;
    AT_PAR_CMD_ELEMENT_STRU             stCmdInfo = {AT_CMD_CGEQMIN, AT_SetCgeqminPara,
                                                     AT_SET_PARA_TIME, At_QryCgeqminPara,
                                                     AT_QRY_PARA_TIME,  At_TestCgeqreqPara,
                                                     AT_NOT_SET_TIME,
                                                     VOS_NULL_PTR, AT_NOT_SET_TIME,
                                                     AT_CME_INCORRECT_PARAMETERS,
                                                     CMD_TBL_LIMITED_NULL, (VOS_UINT8*)"+CGEQMIN",
                                                     (VOS_UINT8*)CGEQMIN_CMD_PARA_STRING};

    // 参数初始化
    PS_MEM_SET(&stUmtsQosInfo, 0x00, sizeof(TAF_UMTS_QOS_EXT_STRU));

    ucIndex                             = 1;
    stUmtsQosInfo.ucCid                 = 1;

    // 初始化全局变量;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 1;
    g_stParseContext[ucIndex].pstCmdElement = &stCmdInfo;

    // MOCKER操作;
    MOCKER(TAF_PS_SetUmtsQosMinInfo)
        .expects(exactly(1))
        .with(any(), any(), eq((VOS_UINT8)0), mirror(&stUmtsQosInfo, sizeof(TAF_UMTS_QOS_EXT_STRU)))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = AT_SetCgeqreqPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgeqreqPara, Test_AT_SetCgeqreqPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    TAF_UMTS_QOS_EXT_STRU               stUmtsQosInfo;
    AT_PAR_CMD_ELEMENT_STRU             stCmdInfo = {AT_CMD_CGEQMIN, AT_SetCgeqminPara,
                                                     AT_SET_PARA_TIME, At_QryCgeqminPara,
                                                     AT_QRY_PARA_TIME,  At_TestCgeqreqPara,
                                                     AT_NOT_SET_TIME,
                                                     VOS_NULL_PTR, AT_NOT_SET_TIME,
                                                     AT_CME_INCORRECT_PARAMETERS,
                                                     CMD_TBL_LIMITED_NULL, (VOS_UINT8*)"+CGEQMIN",
                                                     (VOS_UINT8*)CGEQMIN_CMD_PARA_STRING};

    // 参数初始化
    ucIndex                             = 1;
    stUmtsQosInfo.ucCid                 = 1;

    // 初始化全局变量;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 1;
    g_stParseContext[ucIndex].pstCmdElement = &stCmdInfo;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_SET_UMTS_QOS_MIN_INFO_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_SET_UMTS_QOS_MIN_INFO_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetCgeqreqPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CMD_CGEQMIN_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgeqreqPara, Test_AT_SetCgeqreqPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    TAF_UMTS_QOS_EXT_STRU               stUmtsQosInfo;
    AT_PAR_CMD_ELEMENT_STRU             stCmdInfo = {AT_CMD_CGEQREQ, AT_SetCgeqreqPara,
                                                     AT_SET_PARA_TIME, AT_QryCgeqreqPara,
                                                     AT_QRY_PARA_TIME,  At_TestCgeqreqPara,
                                                     AT_NOT_SET_TIME,
                                                     VOS_NULL_PTR, AT_NOT_SET_TIME,
                                                     AT_CME_INCORRECT_PARAMETERS,
                                                     CMD_TBL_LIMITED_NULL, (VOS_UINT8*)"+CGEQREQ",
                                                     (VOS_UINT8*)CGEQREQ_CMD_PARA_STRING};

    // 参数初始化
    PS_MEM_SET(&stUmtsQosInfo, 0x00, sizeof(TAF_UMTS_QOS_EXT_STRU));

    ucIndex                             = 1;
    stUmtsQosInfo.ucCid                 = 1;
    stUmtsQosInfo.ucDefined             = VOS_TRUE;
    stUmtsQosInfo.bitOpTrafficClass     = VOS_TRUE;
    stUmtsQosInfo.ucTrafficClass        = 2;
    stUmtsQosInfo.bitOpMaxBitUl         = VOS_TRUE;
    stUmtsQosInfo.ulMaxBitUl            = 64;
    stUmtsQosInfo.bitOpMaxBitDl         = VOS_TRUE;
    stUmtsQosInfo.ulMaxBitDl            = 64;
    stUmtsQosInfo.bitOpGtdBitUl         = VOS_TRUE;
    stUmtsQosInfo.ulGtdBitUl            = 32;
    stUmtsQosInfo.bitOpGtdBitDl         = VOS_TRUE;
    stUmtsQosInfo.ulGtdBitDl            = 32;
    stUmtsQosInfo.bitOpDeliverOrder     = VOS_TRUE;
    stUmtsQosInfo.ucDeliverOrder        = 32;
    stUmtsQosInfo.bitOpMaxSduSize       = VOS_TRUE;
    stUmtsQosInfo.usMaxSduSize          = 320;
    stUmtsQosInfo.bitOpSduErrRatio      = VOS_TRUE;
    stUmtsQosInfo.ucSduErrRatio         = 1;
    stUmtsQosInfo.bitOpResidualBer      = VOS_TRUE;
    stUmtsQosInfo.ucResidualBer         = 2;
    stUmtsQosInfo.bitOpDeliverErrSdu    = VOS_TRUE;
    stUmtsQosInfo.ucDeliverErrSdu       = 1;
    stUmtsQosInfo.bitOpTransDelay       = VOS_TRUE;
    stUmtsQosInfo.usTransDelay          = 200;
    stUmtsQosInfo.bitOpTraffHandlePrior = VOS_TRUE;
    stUmtsQosInfo.ucTraffHandlePrior    = 1;

    // 初始化全局变量;
    gucAtParaIndex                      = 13;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[1].usParaLen         = 1;
    gastAtParaList[1].ulParaValue       = 2;
    gastAtParaList[2].usParaLen         = 2;
    gastAtParaList[2].ulParaValue       = 64;
    gastAtParaList[3].usParaLen         = 2;
    gastAtParaList[3].ulParaValue       = 64;
    gastAtParaList[4].usParaLen         = 2;
    gastAtParaList[4].ulParaValue       = 32;
    gastAtParaList[5].usParaLen         = 2;
    gastAtParaList[5].ulParaValue       = 32;
    gastAtParaList[6].usParaLen         = 1;
    gastAtParaList[6].ulParaValue       = 32;
    gastAtParaList[7].usParaLen         = 3;
    gastAtParaList[7].ulParaValue       = 320;
    gastAtParaList[8].usParaLen         = 3;
    gastAtParaList[8].ulParaValue       = 1;
    gastAtParaList[9].usParaLen         = 3;
    gastAtParaList[9].ulParaValue       = 2;
    gastAtParaList[10].usParaLen        = 1;
    gastAtParaList[10].ulParaValue      = 1;
    gastAtParaList[11].usParaLen        = 3;
    gastAtParaList[11].ulParaValue      = 200;
    gastAtParaList[12].usParaLen        = 1;
    gastAtParaList[12].ulParaValue      = 1;
    g_stParseContext[ucIndex].pstCmdElement = &stCmdInfo;

    // MOCKER操作;
    MOCKER(TAF_PS_SetUmtsQosInfo)
        .stubs()
        .with(any(), any(),any(), mirror((TAF_UMTS_QOS_EXT_STRU *)&stUmtsQosInfo, (VOS_UINT32)sizeof(TAF_UMTS_QOS_EXT_STRU)))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = AT_SetCgeqreqPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgeqreqPara, Test_AT_SetCgeqreqPara_006)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    AT_PAR_CMD_ELEMENT_STRU             stCmdInfo = {AT_CMD_CGEQREQ, AT_SetCgeqreqPara,
                                                     AT_SET_PARA_TIME, AT_QryCgeqreqPara,
                                                     AT_QRY_PARA_TIME,  At_TestCgeqreqPara,
                                                     AT_NOT_SET_TIME,
                                                     VOS_NULL_PTR,   AT_NOT_SET_TIME,
                                                     AT_CME_INCORRECT_PARAMETERS,
                                                     CMD_TBL_LIMITED_NULL, (VOS_UINT8*)"+CGEQREQ",
                                                     (VOS_UINT8*)CGEQREQ_CMD_PARA_STRING};

    // 参数初始化
    ucIndex                             = 1;

    // 初始化全局变量;
    gucAtParaIndex                      = 13;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 2;
    gastAtParaList[1].usParaLen         = 1;
    gastAtParaList[1].ulParaValue       = 2;
    gastAtParaList[2].usParaLen         = 2;
    gastAtParaList[2].ulParaValue       = 64;
    gastAtParaList[3].usParaLen         = 2;
    gastAtParaList[3].ulParaValue       = 64;
    gastAtParaList[4].usParaLen         = 2;
    gastAtParaList[4].ulParaValue       = 32;
    gastAtParaList[5].usParaLen         = 2;
    gastAtParaList[5].ulParaValue       = 32;
    gastAtParaList[6].usParaLen         = 1;
    gastAtParaList[6].ulParaValue       = 1;
    gastAtParaList[7].usParaLen         = 3;
    gastAtParaList[7].ulParaValue       = 320;
    gastAtParaList[8].usParaLen         = 3;
    gastAtParaList[8].ulParaValue       = 1;
    gastAtParaList[9].usParaLen         = 3;
    gastAtParaList[9].ulParaValue       = 2;
    gastAtParaList[10].usParaLen        = 1;
    gastAtParaList[10].ulParaValue      = 1;
    gastAtParaList[11].usParaLen        = 3;
    gastAtParaList[11].ulParaValue      = 200;
    gastAtParaList[12].usParaLen        = 1;
    gastAtParaList[12].ulParaValue      = 1;
    g_stParseContext[ucIndex].pstCmdElement = &stCmdInfo;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_SET_UMTS_QOS_INFO_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_SET_UMTS_QOS_INFO_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetCgeqreqPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CMD_CGEQREQ_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetCgeqminPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetCgeqminPara, Test_AT_SetCgeqminPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    // 参数初始化

    // 初始化全局变量;

    // MOCKER操作;
    MOCKER(AT_SetCgeqreqPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_WAIT_ASYNC_RETURN));

    // 调用被测函数
    ulRet = AT_SetCgeqminPara(1);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetCgpaddrPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetCgpaddrPara, Test_AT_SetCgpaddrPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = AT_SetCgpaddrPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgpaddrPara, Test_AT_SetCgpaddrPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetCgpaddrPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CMD_CGPADDR_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetCgcmodPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetCgcmodPara, Test_AT_SetCgcmodPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_CALL_MODIFY_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_CALL_MODIFY_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = AT_SetCgcmodPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgcmodPara, Test_AT_SetCgcmodPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_CALL_MODIFY_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_CALL_MODIFY_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetCgcmodPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CMD_CGCMOD_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetCgactPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetCgactPara, Test_AT_SetCgactPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 2;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[1].ulParaValue       = 1;
    gastAtParaList[1].usParaLen         = 1;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_SET_PDP_CONTEXT_STATE_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_SET_PDP_STATE_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    MOCKER(AT_CheckHsicUser)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    // 调用被测函数
    ulRet = AT_SetCgactPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgactPara, Test_AT_SetCgactPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 2;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[1].ulParaValue       = 1;
    gastAtParaList[1].usParaLen         = 1;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_SET_PDP_CONTEXT_STATE_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_SET_PDP_STATE_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(AT_CheckHsicUser)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    // 调用被测函数
    ulRet = AT_SetCgactPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CMD_CGACT_ORG_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgactPara, Test_AT_SetCgactPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    AT_MODEM_PS_CTX_STRU               *pstModemPsCtx;

    // 参数初始化
    ucIndex                             = 0;

    pstModemPsCtx = AT_GetModemPsCtxAddrFromClientId(ucIndex);

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 2;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[1].ulParaValue       = 1;
    gastAtParaList[1].usParaLen         = 1;

    gastAtClientTab[ucIndex].UserType   = AT_HSIC4_USER;
    pstModemPsCtx->astChannelCfg[1].ulUsed        = VOS_FALSE;
    pstModemPsCtx->astChannelCfg[1].ulRmNetId     = UDI_INVAL_DEV_ID;

    // MOCKER操作;
    MOCKER(TAF_PS_SetPdpContextState)
        .expects(never());

    MOCKER(AT_CheckHsicUser)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetCgactPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgactPara, Test_AT_SetCgactPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    AT_MODEM_PS_CTX_STRU               *pstModemPsCtx;

    // 参数初始化
    ucIndex                             = 0;

    pstModemPsCtx = AT_GetModemPsCtxAddrFromClientId(ucIndex);

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 2;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[1].ulParaValue       = 1;
    gastAtParaList[1].usParaLen         = 1;

    gastAtClientTab[ucIndex].UserType   = AT_HSIC4_USER;
    pstModemPsCtx->astChannelCfg[1].ulUsed         = VOS_TRUE;
    pstModemPsCtx->astChannelCfg[1].ulRmNetId      = UDI_ACM_HSIC_ACM1_ID;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_SET_PDP_CONTEXT_STATE_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_SET_PDP_STATE_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetCgactPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ(AT_CMD_CGACT_ORG_SET, gastAtClientTab[0].CmdCurrentOpt);


    GlobalMockObject::verify();
}



class Test_AT_SetCgansPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetCgansPara, Test_AT_SetCgansPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    AT_PAR_CMD_ELEMENT_STRU             stCmdElement = {AT_CMD_CGANS_EXT,
        AT_SetCgansPara,    AT_SET_PARA_TIME, VOS_NULL_PTR,      AT_NOT_SET_TIME,   At_TestCgansExtPara,   AT_NOT_SET_TIME,
        VOS_NULL_PTR,        AT_NOT_SET_TIME,
        AT_CME_INCORRECT_PARAMETERS, CMD_TBL_LIMITED_NULL,
        (VOS_UINT8*)"^CGANS",       (VOS_UINT8*)CGANS_EXT_CMD_PARA_STRING};

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;
    g_stParseContext[ucIndex].pstCmdElement = &stCmdElement;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_CALL_ANSWER_REQ),
                any(), eq((VOS_UINT32)sizeof(TAF_PS_CALL_ANSWER_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = AT_SetCgansPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgansPara, Test_AT_SetCgansPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    AT_PAR_CMD_ELEMENT_STRU             stElement =     {AT_CMD_CGANS,
        AT_SetCgansPara,    AT_SET_PARA_TIME, VOS_NULL_PTR,      AT_NOT_SET_TIME,   At_TestCgansPara,   AT_NOT_SET_TIME,
        VOS_NULL_PTR,        AT_NOT_SET_TIME,
        AT_CME_INCORRECT_PARAMETERS, CMD_TBL_LIMITED_NULL,
        (VOS_UINT8*)"+CGANS",       (VOS_UINT8*)CGANS_CMD_PARA_STRING};

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;
    g_stParseContext[ucIndex].pstCmdElement = &stElement;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_CALL_ANSWER_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_CALL_ANSWER_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetCgansPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CMD_CGANS_ANS_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}



TEST_F(Test_AT_SetCgansPara, Test_AT_SetCgansPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    AT_PAR_CMD_ELEMENT_STRU             stElement =     {AT_CMD_CGANS_EXT,
        AT_SetCgansPara,    AT_SET_PARA_TIME, VOS_NULL_PTR,      AT_NOT_SET_TIME,   At_TestCgansPara,   AT_NOT_SET_TIME,
        VOS_NULL_PTR,        AT_NOT_SET_TIME,
        AT_CME_INCORRECT_PARAMETERS, CMD_TBL_LIMITED_NULL,
        (VOS_UINT8*)"^CGANS",       (VOS_UINT8*)CGANS_CMD_PARA_STRING};

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;
    g_stParseContext[ucIndex].pstCmdElement = &stElement;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_CALL_ANSWER_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_CALL_ANSWER_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetCgansPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CMD_CGANS_ANS_EXT_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}



TEST_F(Test_AT_SetCgansPara, Test_AT_SetCgansPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    AT_PAR_CMD_ELEMENT_STRU             stCmdElement = {AT_CMD_CGANS_EXT,
        AT_SetCgansPara,    AT_SET_PARA_TIME, VOS_NULL_PTR,      AT_NOT_SET_TIME,   At_TestCgansExtPara,   AT_NOT_SET_TIME,
        VOS_NULL_PTR,        AT_NOT_SET_TIME,
        AT_CME_INCORRECT_PARAMETERS, CMD_TBL_LIMITED_NULL,
        (VOS_UINT8*)"^CGANS",       (VOS_UINT8*)CGANS_EXT_CMD_PARA_STRING};

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = 0;
    gastAtParaList[0].usParaLen         = 1;
    g_stParseContext[ucIndex].pstCmdElement = &stCmdElement;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_CALL_HANGUP_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_CALL_HANGUP_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = AT_SetCgansPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgansPara, Test_AT_SetCgansPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    AT_PAR_CMD_ELEMENT_STRU             stCmdElement = {AT_CMD_CGANS_EXT,
        AT_SetCgansPara,    AT_SET_PARA_TIME, VOS_NULL_PTR,      AT_NOT_SET_TIME,   At_TestCgansExtPara,   AT_NOT_SET_TIME,
        VOS_NULL_PTR,        AT_NOT_SET_TIME,
        AT_CME_INCORRECT_PARAMETERS, CMD_TBL_LIMITED_NULL,
        (VOS_UINT8*)"^CGANS",       (VOS_UINT8*)CGANS_EXT_CMD_PARA_STRING};

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = 0;
    gastAtParaList[0].usParaLen         = 1;
    g_stParseContext[ucIndex].pstCmdElement = &stCmdElement;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_CALL_HANGUP_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_CALL_HANGUP_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetCgansPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetCgauthPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetCgauthPara, Test_AT_SetCgauthPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    VOS_CHAR                           *pcParaStr2;
    VOS_CHAR                           *pcParaStr3;

    // 参数初始化
    ucIndex                             = 0;
    pcParaStr2                          = "ABCDE";
    pcParaStr3                          = "12345";

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 4;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[1].ulParaValue       = 1;
    gastAtParaList[1].usParaLen         = 1;
    gastAtParaList[2].usParaLen         = VOS_StrLen(pcParaStr2);
    gastAtParaList[3].usParaLen         = VOS_StrLen(pcParaStr3);
    PS_MEM_CPY(gastAtParaList[2].aucPara, pcParaStr2, VOS_StrLen(pcParaStr2));
    PS_MEM_CPY(gastAtParaList[3].aucPara, pcParaStr3, VOS_StrLen(pcParaStr3));

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_SET_PDP_AUTH_INFO_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_SET_PDP_AUTH_INFO_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = AT_SetCgauthPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgauthPara, Test_AT_SetCgauthPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    VOS_CHAR                           *pcParaStr2;
    VOS_CHAR                           *pcParaStr3;

    // 参数初始化
    ucIndex                             = 0;
    pcParaStr2                          = "ABCDE";
    pcParaStr3                          = "12345";

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 4;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[1].ulParaValue       = 1;
    gastAtParaList[1].usParaLen         = 1;
    gastAtParaList[2].usParaLen         = VOS_StrLen(pcParaStr2);
    gastAtParaList[3].usParaLen         = VOS_StrLen(pcParaStr3);
    PS_MEM_CPY(gastAtParaList[2].aucPara, pcParaStr2, VOS_StrLen(pcParaStr2));
    PS_MEM_CPY(gastAtParaList[3].aucPara, pcParaStr3, VOS_StrLen(pcParaStr3));

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_SET_PDP_AUTH_INFO_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_SET_PDP_AUTH_INFO_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetCgauthPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CMD_CGAUTH_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetCgdnsPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetCgdnsPara, Test_AT_SetCgdnsPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    VOS_CHAR                           *pcParaStr1;
    VOS_CHAR                           *pcParaStr2;

    // 参数初始化
    ucIndex                             = 0;
    pcParaStr1                          = "192.168.0.10";
    pcParaStr2                          = "192.168.0.200";

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 3;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[1].usParaLen         = VOS_StrLen(pcParaStr1);
    gastAtParaList[2].usParaLen         = VOS_StrLen(pcParaStr2);
    PS_MEM_CPY(gastAtParaList[1].aucPara, pcParaStr1, VOS_StrLen(pcParaStr1));
    PS_MEM_CPY(gastAtParaList[2].aucPara, pcParaStr2, VOS_StrLen(pcParaStr2));

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_SET_PDP_DNS_INFO_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_SET_PDP_DNS_INFO_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = AT_SetCgdnsPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgdnsPara, Test_AT_SetCgdnsPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    VOS_CHAR                           *pcParaStr1;
    VOS_CHAR                           *pcParaStr2;

    // 参数初始化
    ucIndex                             = 0;
    pcParaStr1                          = "192.168.0.10";
    pcParaStr2                          = "192.168.0.200";

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 3;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[1].usParaLen         = VOS_StrLen(pcParaStr1);
    gastAtParaList[2].usParaLen         = VOS_StrLen(pcParaStr2);
    PS_MEM_CPY(gastAtParaList[1].aucPara, pcParaStr1, VOS_StrLen(pcParaStr1));
    PS_MEM_CPY(gastAtParaList[2].aucPara, pcParaStr2, VOS_StrLen(pcParaStr2));

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_SET_PDP_DNS_INFO_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_SET_PDP_DNS_INFO_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetCgdnsPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CMD_CGDNS_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetCgautoPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetCgautoPara, Test_AT_SetCgautoPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_SET_ANSWER_MODE_INFO_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_SET_ANSWER_MODE_INFO_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = AT_SetCgautoPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgautoPara, Test_AT_SetCgautoPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_SET_ANSWER_MODE_INFO_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_SET_ANSWER_MODE_INFO_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetCgautoPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CMD_CGAUTO_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetCgeqnegPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetCgeqnegPara, Test_AT_SetCgeqnegPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 2;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[1].ulParaValue       = 2;
    gastAtParaList[1].usParaLen         = 1;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_GET_DYNAMIC_UMTS_QOS_INFO_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_GET_DYNAMIC_UMTS_QOS_INFO_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = AT_SetCgeqnegPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgeqnegPara, Test_AT_SetCgeqnegPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 2;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[1].ulParaValue       = 2;
    gastAtParaList[1].usParaLen         = 1;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_GET_DYNAMIC_UMTS_QOS_INFO_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_GET_DYNAMIC_UMTS_QOS_INFO_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetCgeqnegPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CMD_CGEQNEG_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCgeqnegPara, Test_AT_SetCgeqnegPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    gucAtParaIndex                      = 0;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_GET_DYNAMIC_UMTS_QOS_INFO_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_GET_DYNAMIC_UMTS_QOS_INFO_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetCgeqnegPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CMD_CGEQNEG_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


class Test_At_SetTrigPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetTrigPara, Test_At_SetTrigPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 5;
    gastAtParaList[0].ulParaValue       = 0;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[1].ulParaValue       = 5;
    gastAtParaList[1].usParaLen         = 1;
    gastAtParaList[2].ulParaValue       = 500;
    gastAtParaList[2].usParaLen         = 3;
    gastAtParaList[3].ulParaValue       = 1;
    gastAtParaList[3].usParaLen         = 1;
    gastAtParaList[4].ulParaValue       = 1000;
    gastAtParaList[4].usParaLen         = 4;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_TRIG_GPRS_DATA_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_TRIG_GPRS_DATA_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = At_SetTrigPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetTrigPara, Test_At_SetTrigPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 5;
    gastAtParaList[0].ulParaValue       = 0;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[1].ulParaValue       = 5;
    gastAtParaList[1].usParaLen         = 1;
    gastAtParaList[2].ulParaValue       = 500;
    gastAtParaList[2].usParaLen         = 3;
    gastAtParaList[3].ulParaValue       = 1;
    gastAtParaList[3].usParaLen         = 1;
    gastAtParaList[4].ulParaValue       = 1000;
    gastAtParaList[4].usParaLen         = 4;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_TRIG_GPRS_DATA_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_TRIG_GPRS_DATA_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = At_SetTrigPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetDsFlowClrPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetDsFlowClrPara, Test_AT_SetDsFlowClrPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_CMD_NO_PARA;
    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_CLEAR_DSFLOW_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_CLEAR_DSFLOW_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = AT_SetDsFlowClrPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetDsFlowClrPara, Test_AT_SetDsFlowClrPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_CMD_NO_PARA;
    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_CLEAR_DSFLOW_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_CLEAR_DSFLOW_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetDsFlowClrPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CMD_DSFLOWCLR_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetDsFlowClrPara, Test_AT_SetDsFlowClrPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetDsFlowClrPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetDsFlowQryPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetDsFlowQryPara, Test_AT_SetDsFlowQryPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_CMD_NO_PARA;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_GET_DSFLOW_INFO_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_GET_DSFLOW_INFO_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = AT_SetDsFlowQryPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetDsFlowQryPara, Test_AT_SetDsFlowQryPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_CMD_NO_PARA;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_GET_DSFLOW_INFO_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_GET_DSFLOW_INFO_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetDsFlowQryPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CMD_DSFLOWQRY_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetDsFlowRptPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetDsFlowRptPara, Test_AT_SetDsFlowRptPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_CONFIG_DSFLOW_RPT_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_CONFIG_DSFLOW_RPT_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = AT_SetDsFlowRptPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetDsFlowRptPara, Test_AT_SetDsFlowRptPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             = 0;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;

    // MOCKER操作;
    MOCKER(TAF_PS_SndMsg)
        .expects(exactly(1))
        .with(eq(WUEPS_PID_TAF), eq((VOS_UINT32)ID_MSG_TAF_PS_CONFIG_DSFLOW_RPT_REQ),
              any(), eq((VOS_UINT32)sizeof(TAF_PS_CONFIG_DSFLOW_RPT_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetDsFlowRptPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CMD_DSFLOWRPT_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}




class Test_AT_SetFTxonPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        g_stATParseCmd.ucCmdOptType      = AT_CMD_OPT_SET_PARA_CMD;
        gucAtParaIndex                   = 1;
        gastAtParaList[0].ulParaValue    = AT_DSP_RF_SWITCH_ON;
        g_stAtDevCmdCtrl.ucCurrentTMode  = AT_TMODE_FTM;
        g_stAtDevCmdCtrl.bDspLoadFlag    = VOS_TRUE;
    }
    void TearDown()
    {

    }
};
#if(FEATURE_LTE == FEATURE_ON)

TEST_F(Test_AT_SetFTxonPara, Test_AT_SetFTxonPara_001)
{
    /*变量定义*/
    VOS_UINT8                      ucIndex;
    VOS_UINT32                       ulRet;

    /*本地变量初始化*/
    ucIndex = 0;

    /*全局变量初始化*/
    g_stAtDevCmdCtrl.ucDeviceRatMode = AT_RAT_MODE_FDD_LTE;


    /*调用被测函数 */
    ulRet = At_SetFTxonPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_SUCCESS, ulRet);
    GlobalMockObject::verify();
}
#endif
TEST_F(Test_AT_SetFTxonPara, Test_At_SetFTxonPara_002)
{
    /*变量定义*/
    VOS_UINT8                             ucIndex;
    VOS_UINT32                           ulRet;
    VOS_UINT8                            ucSwitch;

    /*本地变量初始化*/
    ucIndex = 0;
    ucSwitch = (VOS_UINT8)gastAtParaList[0].ulParaValue;

    /*全局变量初始化*/
    g_stAtDevCmdCtrl.ucDeviceRatMode = AT_RAT_MODE_WCDMA;

    /*函数打桩*/
    MOCKER(At_SendTxOnOffToHPA)
        .stubs()
        .with(eq(ucSwitch))
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    /*调用被测函数 */
    ulRet = At_SetFTxonPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    GlobalMockObject::verify();
}



TEST_F(Test_AT_SetFTxonPara, Test_At_SetFTxonPara_003)
{
    /*变量定义*/
    VOS_UINT8                             ucIndex;
    VOS_UINT32                           ulRet;
    VOS_UINT8                            ucSwitch;

    /*本地变量初始化*/
    ucIndex = 0;
    ucSwitch = (VOS_UINT8)gastAtParaList[0].ulParaValue;

    /*全局变量初始化*/
    g_stAtDevCmdCtrl.ucDeviceRatMode = AT_RAT_MODE_GSM;

    /*函数打桩*/
    MOCKER(At_SendTxOnOffToGHPA)
        .stubs()
        .with(eq(ucIndex), eq(ucSwitch))
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    /*调用被测函数 */
    ulRet = At_SetFTxonPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    GlobalMockObject::verify();
}


class Test_AT_SetFDacPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
        gucAtParaIndex = 1;
        g_stAtDevCmdCtrl.ucCurrentTMode = AT_TMODE_FTM;
        g_stAtDevCmdCtrl.bDspLoadFlag = VOS_TRUE;
    }
    void TearDown()
    {

    }
};
#if(FEATURE_LTE == FEATURE_ON)

TEST_F(Test_AT_SetFDacPara, Test_AT_SetFDacPara_001)
{
    /*变量定义*/
    VOS_UINT8                      ucIndex;
    VOS_UINT32                       ulRet;

    /*本地变量初始化*/
    ucIndex = 0;

    /*全局变量初始化*/
    g_stAtDevCmdCtrl.ucDeviceRatMode = AT_RAT_MODE_FDD_LTE;

    /*调用被测函数 */
    ulRet = AT_SetFDac(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_CMD_NOT_SUPPORT, ulRet);
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetFDacPara, Test_AT_SetFDacPara_002)
{
    /*变量定义*/
    VOS_UINT8                      ucIndex;
    VOS_UINT32                       ulRet;

    /*本地变量初始化*/
    ucIndex = 0;

    /*全局变量初始化*/
    g_stAtDevCmdCtrl.ucDeviceRatMode = AT_RAT_MODE_TDD_LTE;

    /*调用被测函数 */
    ulRet = AT_SetFDac(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_CMD_NOT_SUPPORT, ulRet);
    GlobalMockObject::verify();
}
#endif
TEST_F(Test_AT_SetFDacPara, Test_AT_SetFDacPara_003)
{
    /*变量定义*/
    VOS_UINT8                      ucIndex;
    VOS_UINT32                       ulRet;
    VOS_UINT16                          usDAC;

    /*本地变量初始化*/
    ucIndex = 0;
    usDAC                               = 2046;

    /*全局变量初始化*/
    g_stAtDevCmdCtrl.ucDeviceRatMode = AT_RAT_MODE_WCDMA;

    /*调用被测函数 */
    ulRet = AT_SetFDac(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_OK, ulRet);
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetFDacPara, Test_AT_SetFDacPara_004)
{
    /*变量定义*/
    VOS_UINT8                             ucIndex;
    VOS_UINT32                           ulRet;
    VOS_UINT16                           usDAC;

    /*本地变量初始化*/
    ucIndex = 0;
    usDAC    = 1022;

    /*全局变量初始化*/
    g_stAtDevCmdCtrl.ucDeviceRatMode = AT_RAT_MODE_WCDMA;

    /*调用被测函数 */
    ulRet = AT_SetFDac(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_OK, ulRet);
    GlobalMockObject::verify();
}
class Test_AT_SetFRxonPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        g_stATParseCmd.ucCmdOptType      = AT_CMD_OPT_SET_PARA_CMD;
        gucAtParaIndex                   = 1;
        g_stAtDevCmdCtrl.ucCurrentTMode  = AT_TMODE_FTM;
        g_stAtDevCmdCtrl.bDspLoadFlag    = VOS_TRUE;

    }
    void TearDown()
    {

    }
};
#if(FEATURE_LTE == FEATURE_ON)

TEST_F(Test_AT_SetFRxonPara, Test_AT_SetFRxonPara_001)
{
    /*变量定义*/
    VOS_UINT8                      ucIndex;
    VOS_UINT32                       ulRet;

    /*本地变量初始化*/
    ucIndex = 0;

    /*全局变量初始化*/
    g_stAtDevCmdCtrl.ucDeviceRatMode = AT_RAT_MODE_FDD_LTE;


    /*调用被测函数 */
    ulRet = At_SetFRxonPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_SUCCESS, ulRet);
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetFRxonPara, Test_At_SetFRxonPara_002)
{
    /*变量定义*/
    VOS_UINT8                      ucIndex;
    VOS_UINT32                       ulRet;

    /*本地变量初始化*/
    ucIndex = 0;

    /*全局变量初始化*/
    g_stAtDevCmdCtrl.ucDeviceRatMode = AT_RAT_MODE_TDD_LTE;

    /*调用被测函数 */
    ulRet = At_SetFRxonPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_SUCCESS, ulRet);
    GlobalMockObject::verify();
}
#endif
TEST_F(Test_AT_SetFRxonPara, Test_At_SetFRxonPara_003)
{
    /*变量定义*/
    VOS_UINT8                             ucIndex;
    VOS_UINT32                           ulRet;
    VOS_UINT32                           ulSwitch;

    /*本地变量初始化*/
    ucIndex = 0;
    ulSwitch = (VOS_UINT8)gastAtParaList[0].ulParaValue;

    /*全局变量初始化*/
    g_stAtDevCmdCtrl.ucDeviceRatMode = AT_RAT_MODE_WCDMA;

    /*函数打桩*/
    MOCKER(At_SendRxOnOffToHPA)
        .stubs()
        .with(eq(ulSwitch))
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    /*调用被测函数 */
    ulRet = At_SetFRxonPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    GlobalMockObject::verify();
}





TEST_F(Test_AT_SetFRxonPara, Test_At_SetFRxonPara_004)
{
    /*变量定义*/
    VOS_UINT8                             ucIndex;
    VOS_UINT32                           ulRet;
    VOS_UINT32                           ulSwitch;

    /*本地变量初始化*/
    ucIndex = 0;
    ulSwitch = (VOS_UINT8)gastAtParaList[0].ulParaValue;

    /*全局变量初始化*/
    g_stAtDevCmdCtrl.ucDeviceRatMode = AT_RAT_MODE_GSM;

    /*函数打桩*/
    MOCKER(At_SendRxOnOffToGHPA)
        .stubs()
        .with(eq(ucIndex), eq(ulSwitch))
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    /*调用被测函数 */
    ulRet = At_SetFRxonPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    GlobalMockObject::verify();
}




class Test_At_SetFpaPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        g_stATParseCmd.ucCmdOptType      = AT_CMD_OPT_SET_PARA_CMD;
        gucAtParaIndex                   = 1;
        g_stAtDevCmdCtrl.ucCurrentTMode  = AT_TMODE_FTM;
        g_stAtDevCmdCtrl.bDspLoadFlag    = VOS_TRUE;

    }
    void TearDown()
    {

    }
};
#if(FEATURE_LTE == FEATURE_ON)

TEST_F(Test_At_SetFpaPara, Test_AT_SetFpaPara_001)
{
    /*变量定义*/
    VOS_UINT8                      ucIndex;
    VOS_UINT32                       ulRet;

    /*本地变量初始化*/
    ucIndex = 0;

    /*全局变量初始化*/
    g_stAtDevCmdCtrl.ucDeviceRatMode = AT_RAT_MODE_FDD_LTE;

    /*调用被测函数 */
    ulRet = At_SetFpaPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_CMD_NOT_SUPPORT, ulRet);
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetFpaPara, Test_At_SetFpaPara_002)
{
    /*变量定义*/
    VOS_UINT8                      ucIndex;
    VOS_UINT32                       ulRet;

    /*本地变量初始化*/
    ucIndex = 0;

    /*全局变量初始化*/
    g_stAtDevCmdCtrl.ucDeviceRatMode = AT_RAT_MODE_TDD_LTE;

    /*调用被测函数 */
    ulRet = At_SetFpaPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_CMD_NOT_SUPPORT, ulRet);
    GlobalMockObject::verify();
}
#endif
TEST_F(Test_At_SetFpaPara, Test_At_SetFpaPara_003)
{
    /*变量定义*/
    VOS_UINT8                      ucIndex;
    VOS_UINT32                       ulRet;

    /*本地变量初始化*/
    ucIndex = 0;

    /*全局变量初始化*/
    g_stAtDevCmdCtrl.ucDeviceRatMode = AT_RAT_MODE_WCDMA;

    /*调用被测函数 */
    ulRet = At_SetFpaPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_OK, ulRet);
    GlobalMockObject::verify();

}
class Test_At_SetFChanPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
        gucAtParaIndex = 3;
        g_stAtDevCmdCtrl.ucCurrentTMode = AT_TMODE_FTM;
    }
    void TearDown()
    {
    }
};
#if(FEATURE_LTE == FEATURE_ON)


TEST_F(Test_At_SetFChanPara, Test_At_SetFChanPara_001)
{
    /*变量定义*/
    VOS_UINT8                        ucIndex;
    VOS_UINT32                       ulRet;

    /*本地变量初始化*/
    ucIndex = 0;

    /*全局变量初始化*/
    gastAtParaList[0].ulParaValue = AT_RAT_MODE_FDD_LTE;


    /*函数打桩*/
    MOCKER(atSetFCHANPara)
        .expects(exactly(1))
        .with(eq(ucIndex))
        .will(returnValue((VOS_UINT32)AT_WAIT_ASYNC_RETURN));

    /*调用被测函数 */
    ulRet = At_SetFChanPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    GlobalMockObject::verify();
}
#endif

TEST_F(Test_At_SetFChanPara, Test_At_SetFChanPara_002)
{
    /*变量定义*/
    VOS_UINT8                            ucIndex;
    VOS_UINT32                             ulRet;
    DRV_AGENT_FCHAN_SET_REQ_STRU         stFchanSetReq;

    /*全局变量初始化*/
    gastAtParaList[0].ulParaValue    = AT_RAT_MODE_WCDMA;
    gastAtParaList[1].ulParaValue    = AT_BAND_2100M;
    gastAtParaList[2].ulParaValue    = 46009;
    g_stAtDevCmdCtrl.ucDeviceRatMode = AT_RAT_MODE_GSM;
    g_stAtDevCmdCtrl.bDspLoadFlag    = VOS_TRUE;


    /*函数打桩*/
    MOCKER(At_GetDspLoadMode)
        .stubs()
        .with(eq(AT_RAT_MODE_WCDMA))
        .will(returnValue((VOS_UINT8)VOS_RATMODE_WCDMA));

    MOCKER(At_GetDspLoadMode)
        .stubs()
        .with(eq(AT_RAT_MODE_GSM))
        .will(returnValue((VOS_UINT8)VOS_RATMODE_GSM));

    /*本地变量初始化*/
    ucIndex = 0;
    PS_MEM_SET(&stFchanSetReq, 0, sizeof(DRV_AGENT_FCHAN_SET_REQ_STRU));

    stFchanSetReq.ucLoadDspMode     = VOS_RATMODE_WCDMA;
    stFchanSetReq.ucCurrentDspMode  = VOS_RATMODE_GSM;
    stFchanSetReq.bDspLoadFlag      = g_stAtDevCmdCtrl.bDspLoadFlag;
    stFchanSetReq.ucDeviceRatMode   = (VOS_UINT8)gastAtParaList[0].ulParaValue;
    stFchanSetReq.ucDeviceAtBand    = (VOS_UINT8)gastAtParaList[1].ulParaValue;
    stFchanSetReq.usChannelNo       = (VOS_UINT16)gastAtParaList[2].ulParaValue;

    /*函数打桩*/
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(), any(), eq((unsigned short)DRV_AGENT_FCHAN_SET_REQ),
              mirror((void *)&stFchanSetReq, (VOS_UINT32)sizeof(DRV_AGENT_FCHAN_SET_REQ_STRU)),
              eq((VOS_UINT32)sizeof(DRV_AGENT_FCHAN_SET_REQ_STRU)), eq(WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    /*调用被测函数 */
    ulRet = At_SetFChanPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetFChanPara, Test_At_SetFChanPara_003)
{
    /*变量定义*/
    VOS_UINT8                            ucIndex;
    VOS_UINT32                             ulRet;
    DRV_AGENT_FCHAN_SET_REQ_STRU         stFchanSetReq;

    /*全局变量初始化*/
    gastAtParaList[0].ulParaValue    = AT_RAT_MODE_WCDMA;
    gastAtParaList[1].ulParaValue    = AT_BAND_2100M;
    gastAtParaList[2].ulParaValue    = 46009;
    g_stAtDevCmdCtrl.ucDeviceRatMode = AT_RAT_MODE_GSM;
    g_stAtDevCmdCtrl.bDspLoadFlag    = VOS_TRUE;


    /*函数打桩*/
    MOCKER(At_GetDspLoadMode)
        .stubs()
        .with(eq(AT_RAT_MODE_WCDMA))
        .will(returnValue((VOS_UINT8)VOS_RATMODE_WCDMA));

    MOCKER(At_GetDspLoadMode)
        .stubs()
        .with(eq(AT_RAT_MODE_GSM))
        .will(returnValue((VOS_UINT8)VOS_RATMODE_GSM));

    /*本地变量初始化*/
    ucIndex = 0;
    PS_MEM_SET(&stFchanSetReq, 0, sizeof(DRV_AGENT_FCHAN_SET_REQ_STRU));

    stFchanSetReq.ucLoadDspMode     = VOS_RATMODE_WCDMA;
    stFchanSetReq.ucCurrentDspMode  = VOS_RATMODE_GSM;
    stFchanSetReq.bDspLoadFlag      = g_stAtDevCmdCtrl.bDspLoadFlag;
    stFchanSetReq.ucDeviceRatMode   = (VOS_UINT8)gastAtParaList[0].ulParaValue;
    stFchanSetReq.ucDeviceAtBand    = (VOS_UINT8)gastAtParaList[1].ulParaValue;
    stFchanSetReq.usChannelNo       = (VOS_UINT16)gastAtParaList[2].ulParaValue;

    /*函数打桩*/
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(), any(), eq((unsigned short)DRV_AGENT_FCHAN_SET_REQ),
              mirror((void *)&stFchanSetReq, (VOS_UINT32)sizeof(DRV_AGENT_FCHAN_SET_REQ_STRU)),
              eq((VOS_UINT32)sizeof(DRV_AGENT_FCHAN_SET_REQ_STRU)), eq(WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /*调用被测函数 */
    ulRet = At_SetFChanPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_ERROR, ulRet);
    GlobalMockObject::verify();
}
class Test_AT_SetGlobalFchan: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetGlobalFchan, Test_AT_SetGlobalFchan_001)
{
    /*变量定义*/
    VOS_UINT8                              ucRATMode;
    VOS_UINT32                             ulRet;

    /*本地变量初始化*/
    ucRATMode = AT_RAT_MODE_FDD_LTE;

    /*调用被测函数 */
    ulRet = AT_SetGlobalFchan(ucRATMode);

    /* 结果验证*/
    EXPECT_EQ(VOS_OK, ulRet);
    ASSERT_EQ(AT_RAT_MODE_FDD_LTE, g_stAtDevCmdCtrl.ucDeviceRatMode);

    GlobalMockObject::verify();
}




class Test_AT_NdisDialUpProc: public ::testing::Test
{
public:
    VOS_UINT8                                  ucIndex;
    void SetUp()
	{
		UT_STUB_INIT();
        MOCKER(VOS_SmP)
            .defaults()
            .will(returnValue((VOS_UINT32)VOS_OK));

        MOCKER(VOS_SmV)
            .defaults()
            .will(returnValue((VOS_UINT32)VOS_OK));

        ucIndex                                             = AT_CLIENT_TAB_NDIS_INDEX;
        gastAtClientTab[ucIndex].UserType                   = AT_NDIS_USER;
        g_stATParseCmd.ucCmdOptType                         = AT_CMD_OPT_SET_PARA_CMD;
        // 拨号操作
        gastAtParaList[1].ulParaValue                       = 1;
    }
    void TearDown()
    {

    }
};

#if (FEATURE_ON == FEATURE_NDIS)

TEST_F(Test_AT_NdisDialUpProc,Test_AT_NdisDialUpProc_001)
{
    VOS_UINT32          ulRet;

    // 构建AT命令参数
    gucAtParaIndex                  = 5;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[2].ulParaValue   = TAF_PDP_IPV4;
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[2].usParaLen     = 2;
    gastAtParaList[3].usParaLen     = 2;
    gastAtParaList[4].usParaLen     = 2;


    MOCKER(AT_NidsCheckDialParam)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(AT_NdisCheckActingStateForDial)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(TAF_AGENT_GetPdpCidPara)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

#if(FEATURE_ON == FEATURE_IPV6)
    MOCKER(AT_CheckIpv6Capability)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));
#endif
    MOCKER(TAF_AGENT_SetPdpCidPara)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(TAF_PS_CallOrig)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    ulRet = AT_SetNdisdupPara(ucIndex);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ(gastAtParaList[0].ulParaValue, g_stAtNdisDhcpPara.ucIpv4Cid);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_NdisDialUpProc,Test_AT_NdisDialUpProc_002)
{
    VOS_UINT32          ulRet;

    // 构建AT命令参数
    gucAtParaIndex                  = 5;
    gastAtParaList[0].usParaLen     = 1;


    MOCKER(AT_NidsCheckDialParam)
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(AT_NdisCheckActingStateForDial)
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(AT_GetNdisDialParam)
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(TAF_AGENT_SetPdpCidPara)
        .will(returnValue((VOS_UINT32)VOS_ERR));

    ulRet = AT_SetNdisdupPara(ucIndex);

    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_NdisDialUpProc,Test_AT_NdisDialUpProc_003)
{
    VOS_UINT32          ulRet;

    gucAtParaIndex                  = 2;

    MOCKER(AT_NidsCheckDialParam)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(AT_NdisCheckActingStateForDial)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(TAF_AGENT_GetPdpCidPara)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    ulRet = AT_SetNdisdupPara(ucIndex);

    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_NdisDialUpProc,Test_AT_NdisDialUpProc_004)
{
    VOS_UINT32                          ulRet;
    TAF_PDP_PRIM_CONTEXT_STRU                    stPdpCidInfo;

    // 构建AT命令参数

    gucAtParaIndex                  = 5;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[2].ulParaValue   = TAF_PDP_IPV6;
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[2].usParaLen     = 2;
    gastAtParaList[3].usParaLen     = 2;
    gastAtParaList[4].usParaLen     = 2;
    stPdpCidInfo.stPdpAddr.enPdpType            = TAF_PDP_IPV6;


    MOCKER(AT_NidsCheckDialParam)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(AT_NdisCheckActingStateForDial)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(TAF_AGENT_GetPdpCidPara)
        .stubs()
        .with(outBoundP((TAF_PDP_PRIM_CONTEXT_STRU *)&stPdpCidInfo, (VOS_UINT32)sizeof(TAF_PDP_PRIM_CONTEXT_STRU)),any())
        .will(returnValue((VOS_UINT32)VOS_OK));

#if(FEATURE_ON == FEATURE_IPV6)
    MOCKER(AT_CheckIpv6Capability)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));
#endif
    MOCKER(TAF_AGENT_SetPdpCidPara)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(TAF_PS_CallOrig)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    ulRet = AT_SetNdisdupPara(ucIndex);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ(gastAtParaList[0].ulParaValue, g_stAtNdisDhcpPara.ucIpv6Cid);

    GlobalMockObject::verify();
}

TEST_F(Test_AT_NdisDialUpProc,Test_AT_NdisDialUpProc_005)
{
    VOS_UINT32                          ulRet;
    TAF_PDP_PRIM_CONTEXT_STRU                    stPdpCidInfo;

    // 构建AT命令参数
    gucAtParaIndex                  = 5;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[2].ulParaValue   = TAF_PDP_IPV4V6;
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[2].usParaLen     = 2;
    gastAtParaList[3].usParaLen     = 2;
    gastAtParaList[4].usParaLen     = 2;
    stPdpCidInfo.stPdpAddr.enPdpType            = TAF_PDP_IPV4V6;


    MOCKER(AT_NidsCheckDialParam)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(AT_NdisCheckActingStateForDial)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(TAF_AGENT_GetPdpCidPara)
        .stubs()
        .with((TAF_PDP_PRIM_CONTEXT_STRU *)&stPdpCidInfo, (VOS_UINT32)sizeof(TAF_PDP_PRIM_CONTEXT_STRU),any())
        .will(returnValue((VOS_UINT32)VOS_OK));

#if(FEATURE_ON == FEATURE_IPV6)
    MOCKER(AT_CheckIpv6Capability)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));
#endif
    MOCKER(TAF_AGENT_SetPdpCidPara)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(TAF_PS_CallOrig)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    ulRet = AT_SetNdisdupPara(ucIndex);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ(gastAtParaList[0].ulParaValue, g_stAtNdisDhcpPara.ucIpv4v6Cid);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_NdisDialUpProc,Test_AT_NdisDialUpProc_006)
{
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;

    ucIndex                             = AT_CLIENT_TAB_NDIS_INDEX;
    gastAtClientTab[ucIndex].ucUsed     = AT_CLIENT_USED;

    g_ulPcuiNdisStub = VOS_FALSE;

    MOCKER(AT_NdisCheckActingStateForDial)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ulRet = AT_NdisDialUpProc(ucIndex);

    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}

TEST_F(Test_AT_NdisDialUpProc,Test_AT_NdisDialUpProc_007)
{
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;

    ucIndex                             = AT_CLIENT_TAB_NDIS_INDEX;

    MOCKER(AT_NdisCheckActingStateForDial)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    ulRet = AT_NdisDialUpProc(ucIndex);

    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}

#endif


TEST_F(Test_AT_NdisDialUpProc,Test_AT_NdisDialUpProc_008)
{
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;
    AT_MODEM_PS_CTX_STRU               *pstModemPsCtx;

    ucIndex                             = AT_CLIENT_TAB_NDIS_INDEX;

    pstModemPsCtx = AT_GetModemPsCtxAddrFromClientId(ucIndex);

    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId = MODEM_ID_0;

    MOCKER(AT_NdisCheckActingStateForDial)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    ulRet = AT_NdisDialUpProc(ucIndex);

    EXPECT_EQ(AT_ERROR, ulRet);
    EXPECT_EQ(TAF_PS_CAUSE_UNKNOWN, pstModemPsCtx->enPsErrCause);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_NdisDialUpProc,Test_AT_NdisDialUpProc_009)
{
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;
    AT_MODEM_PS_CTX_STRU               *pstModemPsCtx;

    ucIndex                             = AT_CLIENT_TAB_NDIS_INDEX;

    pstModemPsCtx = AT_GetModemPsCtxAddrFromClientId(ucIndex);

    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId = MODEM_ID_0;

    MOCKER(AT_NdisCheckActingStateForDial)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));
    MOCKER(AT_GetNdisDialParam)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    ulRet = AT_NdisDialUpProc(ucIndex);

    EXPECT_EQ(AT_ERROR, ulRet);
    EXPECT_EQ(TAF_PS_CAUSE_UNKNOWN, pstModemPsCtx->enPsErrCause);

    GlobalMockObject::verify();
}


class Test_AT_AppDialUpProc: public ::testing::Test
{
public:
    VOS_UINT8                           ucIndex;
    AT_COMM_CTX_STRU                   *pstCommCtx;

    void SetUp()
	{
		UT_STUB_INIT();
        MOCKER(VOS_GetSlice)
            .defaults()
            .will(returnValue((VOS_UINT32)0));

        MOCKER(VOS_SmP)
            .defaults()
            .will(returnValue((VOS_UINT32)VOS_OK));

        MOCKER(VOS_SmV)
            .defaults()
            .will(returnValue((VOS_UINT32)VOS_OK));

        At_PidInit(VOS_IP_INITIAL);
        ucIndex                                             = 0;
        gastAtClientTab[ucIndex].UserType                   = AT_APP_USER;
        g_stATParseCmd.ucCmdOptType                         = AT_CMD_OPT_SET_PARA_CMD;
        // 拨号操作
        gastAtParaList[1].ulParaValue                       = 1;
        gastAtParaList[2].usParaLen                         = 2;
        gastAtParaList[6].usParaLen                         = 2;
        gucAtParaIndex                                      = 7;

        pstCommCtx = AT_GetCommCtxAddr();

        pstCommCtx->ucSystemAppConfigAddr = SYSTEM_APP_WEBUI;
    }
    void TearDown()
    {

    }
};

TEST_F(Test_AT_AppDialUpProc,Test_AT_AppDialUpProc_001)
{
    VOS_UINT32                          ulRet;
    TAF_PDP_PRIM_CONTEXT_STRU                    stPdpCidInfo;

    stPdpCidInfo.stPdpAddr.enPdpType                = TAF_PDP_IPV4;
    g_enHiLinkMode                      = AT_HILINK_NORMAL_MODE;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[1].usParaLen         = 1;
    gastAtParaList[2].usParaLen         = 1;
    gastAtParaList[3].usParaLen         = 1;
    gastAtParaList[4].usParaLen         = 1;
    gastAtParaList[6].usParaLen         = 0;

    MOCKER(AT_AppCheckDialParam)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(AT_AppCheckPdpStateForDial)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(TAF_AGENT_GetPdpCidPara)
        .stubs()
        .with(outBoundP((TAF_PDP_PRIM_CONTEXT_STRU *)&stPdpCidInfo, (VOS_UINT32)sizeof(TAF_PDP_PRIM_CONTEXT_STRU)),any())
        .will(returnValue((VOS_UINT32)VOS_OK));

#if(FEATURE_ON == FEATURE_IPV6)
    MOCKER(AT_CheckIpv6Capability)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));
#endif

    MOCKER(TAF_AGENT_SetPdpCidPara)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(TAF_PS_CallOrig)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    ulRet = AT_SetNdisdupPara(ucIndex);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ(TAF_PDP_IPV4, g_enAtAppFirstActPdpType);
    EXPECT_EQ(TAF_PDP_IPV4, g_enAtAppActPdpType);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_AppDialUpProc,Test_AT_AppDialUpProc_002)
{
    VOS_UINT32                          ulRet;
    TAF_PDP_PRIM_CONTEXT_STRU                    stPdpCidInfo;

    stPdpCidInfo.stPdpAddr.enPdpType                = TAF_PDP_IPV4;
    g_enHiLinkMode                      = AT_HILINK_NORMAL_MODE;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[1].usParaLen         = 1;
    gastAtParaList[2].usParaLen         = 1;
    gastAtParaList[3].usParaLen         = 1;
    gastAtParaList[4].usParaLen         = 1;
    gastAtParaList[6].usParaLen         = 0;

    MOCKER(AT_AppCheckDialParam)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(AT_AppCheckPdpStateForDial)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(AT_GetAppDialParam)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ulRet = AT_SetNdisdupPara(ucIndex);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();

}


TEST_F(Test_AT_AppDialUpProc,Test_AT_AppDialUpProc_003)
{
    VOS_UINT32                          ulRet;
    TAF_PDP_PRIM_CONTEXT_STRU                    stPdpCidInfo;

    stPdpCidInfo.stPdpAddr.enPdpType                = TAF_PDP_IPV4;
    g_enHiLinkMode                      = AT_HILINK_NORMAL_MODE;
    gucAtParaIndex                      = 8;

    MOCKER(AT_AppCheckDialParam)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(AT_AppCheckPdpStateForDial)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    ulRet = AT_SetNdisdupPara(ucIndex);

    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_AppDialUpProc,Test_AT_AppDialUpProc_004)
{
    VOS_UINT32                          ulRet;
    TAF_PDP_PRIM_CONTEXT_STRU                    stPdpCidInfo;

    stPdpCidInfo.stPdpAddr.enPdpType              = TAF_PDP_IPV6;
    g_enHiLinkMode                      = AT_HILINK_NORMAL_MODE;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[1].usParaLen         = 1;
    gastAtParaList[2].usParaLen         = 1;
    gastAtParaList[3].usParaLen         = 1;
    gastAtParaList[4].usParaLen         = 1;
    gastAtParaList[6].usParaLen         = 0;

    MOCKER(AT_AppCheckDialParam)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(AT_AppCheckPdpStateForDial)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(TAF_AGENT_GetPdpCidPara)
        .stubs()
        .with(outBoundP((TAF_PDP_PRIM_CONTEXT_STRU *)&stPdpCidInfo, (VOS_UINT32)sizeof(TAF_PDP_PRIM_CONTEXT_STRU)),any())
        .will(returnValue((VOS_UINT32)VOS_OK));

#if(FEATURE_ON == FEATURE_IPV6)
    MOCKER(AT_CheckIpv6Capability)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));
#endif

    MOCKER(TAF_AGENT_SetPdpCidPara)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(TAF_PS_CallOrig)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    ulRet = AT_SetNdisdupPara(ucIndex);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ(TAF_PDP_IPV6, g_enAtAppFirstActPdpType);
    EXPECT_EQ(TAF_PDP_IPV6, g_enAtAppActPdpType);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_AppDialUpProc,Test_AT_AppDialUpProc_005)
{
    VOS_UINT32                          ulRet;
    TAF_PDP_PRIM_CONTEXT_STRU                    stPdpCidInfo;

    stPdpCidInfo.stPdpAddr.enPdpType              = TAF_PDP_IPV4V6;
    g_enHiLinkMode                      = AT_HILINK_NORMAL_MODE;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[1].usParaLen         = 1;
    gastAtParaList[2].usParaLen         = 1;
    gastAtParaList[3].usParaLen         = 1;
    gastAtParaList[4].usParaLen         = 1;
    gastAtParaList[6].usParaLen         = 0;

    MOCKER(AT_AppCheckDialParam)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(AT_AppCheckPdpStateForDial)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(TAF_AGENT_GetPdpCidPara)
        .stubs()
        .with(outBoundP((TAF_PDP_PRIM_CONTEXT_STRU *)&stPdpCidInfo, (VOS_UINT32)sizeof(TAF_PDP_PRIM_CONTEXT_STRU)),any())
        .will(returnValue((VOS_UINT32)VOS_OK));

#if(FEATURE_ON == FEATURE_IPV6)
    MOCKER(AT_CheckIpv6Capability)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));
#endif

    MOCKER(TAF_AGENT_SetPdpCidPara)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(TAF_PS_CallOrig)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    ulRet = AT_SetNdisdupPara(ucIndex);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ(TAF_PDP_IPV4V6, g_enAtAppFirstActPdpType);
    EXPECT_EQ(TAF_PDP_IPV4V6, g_enAtAppActPdpType);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_AppDialUpProc,Test_AT_AppDialUpProc_006)
{
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;

    ucIndex = 0;

    MOCKER(AT_AppCheckPdpStateForDial)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(AT_AppReportPdpActiveState)
        .expects(exactly(1));

    ulRet= AT_AppDialUpProc(ucIndex);

    EXPECT_EQ(AT_SUCCESS, ulRet);

    GlobalMockObject::verify();
}

TEST_F(Test_AT_AppDialUpProc,Test_AT_AppDialUpProc_007)
{
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;

    ucIndex = 0;

    MOCKER(AT_AppCheckPdpStateForDial)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    ulRet= AT_AppDialUpProc(ucIndex);

    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_AppDialDownProc: public ::testing::Test
{
public:
    VOS_UINT8                                  ucIndex;
    void SetUp()
	{
		UT_STUB_INIT();

        MOCKER(VOS_SmP)
            .defaults()
            .will(returnValue((VOS_UINT32)VOS_OK));

        MOCKER(VOS_SmV)
            .defaults()
            .will(returnValue((VOS_UINT32)VOS_OK));
        ucIndex                                             = 0;
        gastAtClientTab[ucIndex].UserType                   = AT_APP_USER;
        g_stATParseCmd.ucCmdOptType                         = AT_CMD_OPT_SET_PARA_CMD;
        // 拨号操作
        gastAtParaList[0].ulParaValue                       = 1;
        gastAtParaList[2].usParaLen                         = 2;
        gastAtParaList[6].usParaLen                         = 2;
        gucAtParaIndex                                      = 7;
    }
    void TearDown()
    {

    }
};

TEST_F(Test_AT_AppDialDownProc,Test_AT_AppDialDownProc_001)
{
    //参数定义
    AT_PDP_ENTITY_STRU                 *pstAppPdpEntity;
    VOS_UINT32                          ulResult;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex                             = 1;

    //相关全局变量初始化
    pstAppPdpEntity                     = AT_APP_GetPdpEntInfoAddr();
    pstAppPdpEntity->ucIpv4Cid          = 0;
    pstAppPdpEntity->ucIpv6Cid          = 0;
    pstAppPdpEntity->enIpv4State        = AT_PDP_STATE_IDLE;
    pstAppPdpEntity->enIpv6State        = AT_PDP_STATE_IDLE;
    pstAppPdpEntity->enIpv4v6State      = AT_PDP_STATE_IDLE;

    //MOCKER操作

    //调用被测函数
    ulResult = AT_AppDialDownProc(ucIndex);

    //执行检查
    EXPECT_EQ(AT_OK, ulResult);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_AT_AppDialDownProc,Test_AT_AppDialDownProc_003)
{
    //参数定义
    AT_PDP_ENTITY_STRU                 *pstAppPdpEntity;
    VOS_UINT32                          ulResult;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex                             = 1;

    //相关全局变量初始化
    gastAtParaList[0].ulParaValue       = 1;
    pstAppPdpEntity                     = AT_APP_GetPdpEntInfoAddr();
    pstAppPdpEntity->ucIpv4Cid          = 0;
    pstAppPdpEntity->ucIpv6Cid          = 0;
    pstAppPdpEntity->ucIpv4v6Cid        = 1;
    pstAppPdpEntity->enIpv4State        = AT_PDP_STATE_IDLE;
    pstAppPdpEntity->enIpv6State        = AT_PDP_STATE_IDLE;
    pstAppPdpEntity->enIpv4v6State      = AT_PDP_STATE_ACTED;

    //MOCKER操作
    MOCKER(TAF_PS_CallEnd)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    //调用被测函数
    ulResult = AT_AppDialDownProc(ucIndex);

    //执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulResult);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();

}



class Test_AT_GetAppDialParam: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

        MOCKER(VOS_SmP)
            .defaults()
            .will(returnValue((VOS_UINT32)VOS_OK));

        MOCKER(VOS_SmV)
            .defaults()
            .will(returnValue((VOS_UINT32)VOS_OK));
    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_GetAppDialParam,Test_AT_GetAppDialParam_002)
{
    /*变量定义*/
    TAF_PS_DIAL_PARA_STRU               stDialParaInfo;
    VOS_UINT32                          ulRst;

    gastAtParaList[0].usParaLen     = 1;
    gucAtParaIndex                  = 4;


    /* 桩函数 */
    MOCKER(TAF_AGENT_GetPdpCidPara)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));


    /* 调用消息入口函数 */
    ulRst = AT_GetAppDialParam(&stDialParaInfo);

    /* 结果验证*/
    EXPECT_EQ(AT_FAILURE, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();

}
TEST_F(Test_AT_GetAppDialParam,Test_AT_GetAppDialParam_003)
{
    /*变量定义*/
    TAF_PS_DIAL_PARA_STRU               stDialParaInfo;
    VOS_UINT32                          ulRst;
    TAF_PDP_PRIM_CONTEXT_STRU                    stPdpCidInfo = {0};
    VOS_UINT8                           aucUserName[6] = {1,1,1,1,1,1};
    VOS_UINT8                           aucPassword[7] = {2,2,2,2,2,2,2};

    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[2].usParaLen     = 0;
    gastAtParaList[3].usParaLen     = 6;
    gastAtParaList[4].usParaLen     = 7;
    gastAtParaList[5].usParaLen     = 0;
    gastAtParaList[6].usParaLen     = 0;
    gucAtParaIndex                  = 5;

    memset(gastAtParaList[3].aucPara, 0, TAF_MAX_USERNAME_LEN);
    memset(gastAtParaList[4].aucPara, 0, TAF_MAX_PASSCODE_LEN);

    memcpy(gastAtParaList[3].aucPara, aucUserName, 6);
    memcpy(gastAtParaList[4].aucPara, aucPassword, 7);

    /* 桩函数 */
    stPdpCidInfo.stPdpAddr.enPdpType = TAF_PDP_IPV4;

    MOCKER(TAF_AGENT_GetPdpCidPara)
        .stubs()
        .with(outBoundP(&stPdpCidInfo, sizeof(stPdpCidInfo)), any())
        .will(returnValue((VOS_UINT32)VOS_OK));

#if(FEATURE_ON == FEATURE_IPV6)
    MOCKER(AT_CheckIpv6Capability)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));
#endif

    /* 调用消息入口函数 */
    ulRst = AT_GetAppDialParam(&stDialParaInfo);

    /* 结果验证*/
    EXPECT_EQ(AT_SUCCESS, ulRst);
    EXPECT_EQ(VOS_FALSE, stDialParaInfo.bitOpApn);
    EXPECT_EQ(VOS_TRUE, stDialParaInfo.bitOpUserName);
    EXPECT_EQ(1, stDialParaInfo.aucUserName[5]);
    EXPECT_EQ(0, stDialParaInfo.aucUserName[6]);
    EXPECT_EQ(VOS_TRUE, stDialParaInfo.bitOpPassWord);
    EXPECT_EQ(2, stDialParaInfo.aucPassWord[6]);
    EXPECT_EQ(0, stDialParaInfo.aucPassWord[7]);
    EXPECT_EQ(VOS_TRUE, stDialParaInfo.bitOpAuthType);
    EXPECT_EQ(PPP_CHAP_AUTH_TYPE, stDialParaInfo.enAuthType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();

}
class Test_AT_SetTmmiPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetTmmiPara,Test_AT_SetTmmiPara_01)
{
    gucAtParaIndex = 2;

    EXPECT_EQ(AT_TOO_MANY_PARA, AT_SetTmmiPara(0));


    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetTmmiPara,Test_AT_SetTmmiPara_02)
{
    gucAtParaIndex                  = 1;

    gastAtParaList[0].ulParaValue   = 1;

    MOCKER(NV_ReadEx)
          .expects(exactly(1))
          .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_WriteEx)
          .expects(exactly(1))
          .will(returnValue((VOS_UINT32)NV_OK));

    EXPECT_EQ(AT_OK, AT_SetTmmiPara(0));


    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

TEST_F(Test_AT_SetTmmiPara,Test_AT_SetTmmiPara_03)
{
    gucAtParaIndex                  = 1;

    gastAtParaList[0].ulParaValue   = 1;

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_WriteEx)
        .stubs()
        .will(returnValue(NV_WRITE_SECURE_FAIL));

    EXPECT_EQ(AT_ERROR, AT_SetTmmiPara(0));


    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}





class Test_AT_SetWifiPaRangePara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex = 0;

    }
    void TearDown()
    {

    }
protected:
    VOS_UINT8                   ucIndex;
};



TEST_F(Test_AT_SetWifiPaRangePara, Test_AT_SetWifiPaRangePara_001)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;

    /* 全局变量赋值 */
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 2;

    /* 桩函数 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue(BSP_MODULE_SUPPORT));

    MOCKER(wifi_get_pa_mode)
        .expects(exactly(1))
        .will(returnValue((int)AT_WIFI_MODE_ONLY_NOPA));

    /* 调用消息入口函数 */
    ulRst = AT_SetWifiPaRangePara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();

}


TEST_F(Test_AT_SetWifiPaRangePara, Test_AT_SetWifiPaRangePara_002)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;

    /* 全局变量赋值 */
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].aucPara[0]    = 'h';

    /* 桩函数 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue(BSP_MODULE_SUPPORT));

    MOCKER(wifi_get_pa_mode)
        .expects(exactly(1))
        .will(returnValue((int)AT_WIFI_MODE_ONLY_PA));

    MOCKER(wifi_set_pa_mode)
        .stubs()
        .will(returnValue(0));

    /* 调用消息入口函数 */
    ulRst = AT_SetWifiPaRangePara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();

}


TEST_F(Test_AT_SetWifiPaRangePara, Test_AT_SetWifiPaRangePara_003)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;

    /* 全局变量赋值 */
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].aucPara[0]    = 'h';

    /* 桩函数 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue(BSP_MODULE_SUPPORT));

    MOCKER(wifi_get_pa_mode)
        .expects(exactly(1))
        .will(returnValue((int)AT_WIFI_MODE_ONLY_NOPA));

    MOCKER(wifi_set_pa_mode)
        .expects(never());

    /* 调用消息入口函数 */
    ulRst = AT_SetWifiPaRangePara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_ERROR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();

}


TEST_F(Test_AT_SetWifiPaRangePara, Test_AT_SetWifiPaRangePara_004)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;

    /* 全局变量赋值 */
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].aucPara[0]    = 'h';

    /* 桩函数 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue(BSP_MODULE_SUPPORT));

    MOCKER(wifi_get_pa_mode)
        .expects(exactly(1))
        .will(returnValue((int)AT_WIFI_MODE_ONLY_PA));

    MOCKER(wifi_set_pa_mode)
        .expects(exactly(1))
        .will(returnValue(-1));

    /* 调用消息入口函数 */
    ulRst = AT_SetWifiPaRangePara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_ERROR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();

}


TEST_F(Test_AT_SetWifiPaRangePara, Test_AT_SetWifiPaRangePara_005)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;

    /* 全局变量赋值 */
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].aucPara[0]    = 'l';

    /* 桩函数 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue(BSP_MODULE_SUPPORT));

    MOCKER(wifi_get_pa_mode)
        .expects(exactly(1))
        .will(returnValue((int)AT_WIFI_MODE_ONLY_NOPA));

    MOCKER(wifi_set_pa_mode)
        .stubs()
        .will(returnValue(0));

    /* 调用消息入口函数 */
    ulRst = AT_SetWifiPaRangePara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();

}


TEST_F(Test_AT_SetWifiPaRangePara, Test_AT_SetWifiPaRangePara_006)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;

    /* 全局变量赋值 */
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].aucPara[0]    = 'l';

    /* 桩函数 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue(BSP_MODULE_SUPPORT));

    MOCKER(wifi_get_pa_mode)
        .expects(exactly(1))
        .will(returnValue((int)AT_WIFI_MODE_ONLY_PA));

    MOCKER(wifi_set_pa_mode)
        .expects(never());

    /* 调用消息入口函数 */
    ulRst = AT_SetWifiPaRangePara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_ERROR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();

}


TEST_F(Test_AT_SetWifiPaRangePara, Test_AT_SetWifiPaRangePara_007)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;

    /* 全局变量赋值 */
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].aucPara[0]    = 'h';

    /* 桩函数 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue(BSP_MODULE_SUPPORT));

    MOCKER(wifi_get_pa_mode)
        .expects(exactly(1))
        .will(returnValue((int)AT_WIFI_MODE_ONLY_NOPA));

    /* 调用消息入口函数 */
    ulRst = AT_SetWifiPaRangePara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_ERROR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();

}




class Test_AT_SetPcscInfo: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetPcscInfo, Test_AT_SetPcscInfo_001)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_READ_CMD;

    EXPECT_EQ(At_SetPcscInfo(0), AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPcscInfo, Test_AT_SetPcscInfo_002)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 2;

    EXPECT_EQ(At_SetPcscInfo(0), AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPcscInfo, Test_AT_SetPcscInfo_003)
{
    VOS_UINT8                           ucIndex;
    const char                          cWarning[] = "At_SetPcscInfo:Read NV31 failed!";

    MOCKER(DIAG_LogReport)
        .stubs()
        .with(any(), any(), any(), any(), any(), mirror(cWarning,strlen(cWarning) + 1));

    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[ucIndex].ulParaValue = 1;
    gucAtParaIndex = 1;

    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), eq(en_NV_Item_PID_Enable_Type), any(),any())
        .will(returnValue(NV_ID_NOT_EXIST));

    EXPECT_EQ(At_SetPcscInfo(ucIndex), AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPcscInfo, Test_AT_SetPcscInfo_004)
{
    VOS_UINT8                           ucIndex;
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    const char                          cWarning[] = "At_SetPcscInfo:PID is not enabled!";

    MOCKER(DIAG_LogReport)
        .stubs()
        .with(any(), any(), any(), any(), any(), mirror(cWarning,strlen(cWarning) + 1));

    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[ucIndex].ulParaValue = 1;
    gucAtParaIndex = 1;

    stStubPidEnableType.ulPidEnabled = VOS_FALSE;
    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), eq(en_NV_Item_PID_Enable_Type), outBoundP((void *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK));

    EXPECT_EQ(At_SetPcscInfo(ucIndex), AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPcscInfo, Test_AT_SetPcscInfo_005)
{
    VOS_UINT8                           ucIndex;
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    const char                          cWarning[] = "AT_OpenSpecificPort: Read NV fail!";

    MOCKER(DIAG_LogReport)
        .stubs()
        .with(any(), any(), any(), any(), any(), mirror(cWarning,strlen(cWarning) + 1));

    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[ucIndex].ulParaValue = 1;
    gucAtParaIndex = 1;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    PS_MEM_SET(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    stStubDynamicPidType.ulNvStatus = VOS_FALSE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_PID_Enable_Type), outBoundP((void *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK))
        .id("first");

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((void *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .after("first")
        .will(returnValue(NV_ID_NOT_EXIST));

    EXPECT_EQ(At_SetPcscInfo(ucIndex), AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPcscInfo, Test_AT_SetPcscInfo_006)
{
    VOS_UINT8                           ucIndex;
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    const char                          cWarning[] = "AT_OpenSpecificPort: en_NV_Item_Huawei_Dynamic_PID_Type is inactive!";

    MOCKER(DIAG_LogReport)
        .stubs()
        .with(any(), any(), any(), any(), any(), mirror(cWarning,strlen(cWarning) + 1));

    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[ucIndex].ulParaValue = 1;
    gucAtParaIndex = 1;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    PS_MEM_SET(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    stStubDynamicPidType.ulNvStatus = VOS_FALSE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_PID_Enable_Type), outBoundP((void *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK))
        .id("first");

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((void *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .after("first")
        .will(returnValue(NV_OK));

    EXPECT_EQ(At_SetPcscInfo(ucIndex), AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPcscInfo, Test_AT_SetPcscInfo_007)
{
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    VOS_UINT8   aucFirstPortStyle[]     = {0xA1, 0XA2};   /* 设备切换前端口形态*/
    VOS_UINT8   aucRewindPortStyle[]    = {0x2, 0x2, 0x01, 0x05, 0x05, 0x06, 0x16, 0x0a, 0x0d, 0x0e, 0xa1, 0xa2, 0X2, 0x2, 0x01, 0x05, 0x01};  /* 设备切换后端口形态*/
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[ucIndex].ulParaValue = 1;
    gucAtParaIndex = 1;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    PS_MEM_SET(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    PS_MEM_CPY(stStubDynamicPidType.aucFirstPortStyle, aucFirstPortStyle, sizeof(aucFirstPortStyle));
    PS_MEM_CPY(stStubDynamicPidType.aucRewindPortStyle, aucRewindPortStyle, sizeof(aucRewindPortStyle));
    stStubDynamicPidType.ulNvStatus = VOS_TRUE;

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_PID_Enable_Type), outBoundP((void *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK))
        .id("first");

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((void *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .after("first")
        .will(returnValue(NV_OK));

    MOCKER(NV_WriteEx)
        .expects(never());

    EXPECT_EQ(At_SetPcscInfo(ucIndex), AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPcscInfo, Test_AT_SetPcscInfo_008)
{
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    VOS_UINT8                           aucFirstPortStyle[]  = {0xA1, 0xA2};   /* 设备切换前端口形态*/
    VOS_UINT8                           aucRewindPortStyle[] = {0x2,  0x01, 0x03, 0x4};  /* 设备切换后端口形态*/
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[ucIndex].ulParaValue = 1;
    gucAtParaIndex = 1;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    PS_MEM_SET(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    PS_MEM_CPY(stStubDynamicPidType.aucFirstPortStyle, aucFirstPortStyle, sizeof(aucFirstPortStyle));
    PS_MEM_CPY(stStubDynamicPidType.aucRewindPortStyle, aucRewindPortStyle, sizeof(aucRewindPortStyle));
    stStubDynamicPidType.ulNvStatus = VOS_TRUE;

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_PID_Enable_Type), outBoundP((void *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK))
        .id("first");

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((void *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .after("first")
        .will(returnValue(NV_OK));

    MOCKER(NV_WriteEx)
        .expects(never());

    EXPECT_EQ(At_SetPcscInfo(ucIndex), AT_OK);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPcscInfo, Test_AT_SetPcscInfo_009)
{
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    VOS_UINT8                           aucFirstPortStyle[]  = {0xA1, 0XA2};   /* 设备切换前端口形态*/
    VOS_UINT8                           aucRewindPortStyle[] = {0X2,  0x01};  /* 设备切换后端口形态*/
    VOS_UINT32                          ulOffSet;
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[ucIndex].ulParaValue = 1;
    gucAtParaIndex = 1;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_PID_Enable_Type), outBoundP((void *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK));

    memset(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    memcpy(stStubDynamicPidType.aucFirstPortStyle, aucFirstPortStyle, sizeof(aucFirstPortStyle));
    memcpy(stStubDynamicPidType.aucRewindPortStyle, aucRewindPortStyle, sizeof(aucRewindPortStyle));
    stStubDynamicPidType.ulNvStatus = VOS_TRUE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((void *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .will(returnValue(NV_OK));

    ulOffSet = sizeof(aucRewindPortStyle);
    stStubDynamicPidType.aucRewindPortStyle[ulOffSet] = 0x04;
    MOCKER(NV_WriteEx)
        .stubs()
        .with(any(), eq(en_NV_Item_Huawei_Dynamic_PID_Type), mirror((void *)&stStubDynamicPidType, sizeof(stStubDynamicPidType)), any())
        .will(returnValue(NV_ID_NOT_EXIST));

    EXPECT_EQ(At_SetPcscInfo(ucIndex), AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPcscInfo, Test_AT_SetPcscInfo_010)
{
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    VOS_UINT8                           aucFirstPortStyle[]  = {0xA1, 0XA2};   /* 设备切换前端口形态*/
    VOS_UINT8                           aucRewindPortStyle[] = {0X2,  0x01};  /* 设备切换后端口形态*/
    VOS_UINT32                          ulOffSet;
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[ucIndex].ulParaValue = 1;
    gucAtParaIndex = 1;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    PS_MEM_SET(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    PS_MEM_CPY(stStubDynamicPidType.aucFirstPortStyle, aucFirstPortStyle, sizeof(aucFirstPortStyle));
    PS_MEM_CPY(stStubDynamicPidType.aucRewindPortStyle, aucRewindPortStyle, sizeof(aucRewindPortStyle));
    stStubDynamicPidType.ulNvStatus = VOS_TRUE;

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_PID_Enable_Type), outBoundP((void *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK))
        .id("first");

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((void *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .after("first")
        .will(returnValue(NV_OK));

    ulOffSet = sizeof(aucRewindPortStyle);
    stStubDynamicPidType.aucRewindPortStyle[ulOffSet] = 0x04;
    MOCKER(NV_WriteEx)
        .stubs()
        .with(any(), eq(en_NV_Item_Huawei_Dynamic_PID_Type), mirror(&stStubDynamicPidType, sizeof(stStubDynamicPidType)))
        .will(returnValue(NV_OK));

    EXPECT_EQ(At_SetPcscInfo(ucIndex), AT_OK);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_AT_SetPcscInfo, Test_AT_SetPcscInfo_011)
{
    VOS_UINT8                           ucIndex;
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    const char                          cWarning[] = "AT_CloseSpecificPort: Read NV fail!";

    MOCKER(DIAG_LogReport)
        .stubs()
        .with(any(), any(), any(), any(), any(), mirror(cWarning,strlen(cWarning) + 1));

    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[ucIndex].ulParaValue = 0;
    gucAtParaIndex = 1;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    PS_MEM_SET(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    stStubDynamicPidType.ulNvStatus = VOS_FALSE;

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_PID_Enable_Type), outBoundP((void *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK))
        .id("first");

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((void *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .after("first")
        .will(returnValue(NV_ID_NOT_EXIST));

    MOCKER(NV_WriteEx)
        .expects(never());

    EXPECT_EQ(At_SetPcscInfo(ucIndex), AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPcscInfo, Test_AT_SetPcscInfo_012)
{
    VOS_UINT8                           ucIndex;
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;

    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[ucIndex].ulParaValue = 0;
    gucAtParaIndex = 1;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    PS_MEM_SET(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    stStubDynamicPidType.ulNvStatus = VOS_FALSE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_PID_Enable_Type), outBoundP((void *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK))
        .id("first");

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((void *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .after("first")
        .will(returnValue(NV_OK));

    EXPECT_EQ(At_SetPcscInfo(ucIndex), AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPcscInfo, Test_AT_SetPcscInfo_013)
{
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    VOS_UINT8   aucFirstPortStyle[]     = {0xA1, 0XA2};   /* 设备切换前端口形态*/
    VOS_UINT8   aucRewindPortStyle[]    = {0x01, 0x03, 0x02};  /* 设备切换后端口形态*/
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[ucIndex].ulParaValue = 0;
    gucAtParaIndex = 1;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    PS_MEM_SET(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    PS_MEM_CPY(stStubDynamicPidType.aucFirstPortStyle, aucFirstPortStyle, sizeof(aucFirstPortStyle));
    PS_MEM_CPY(stStubDynamicPidType.aucRewindPortStyle, aucRewindPortStyle, sizeof(aucRewindPortStyle));
    stStubDynamicPidType.ulNvStatus = VOS_TRUE;

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_PID_Enable_Type), outBoundP((void *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK))
        .id("first");

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((void *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .after("first")
        .will(returnValue(NV_OK));

    MOCKER(NV_WriteEx)
        .expects(never());

    EXPECT_EQ(At_SetPcscInfo(ucIndex), AT_OK);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPcscInfo, Test_AT_SetPcscInfo_014)
{
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidTypeCmp;
    VOS_UINT8   aucFirstPortStyle[]     = {0xA1, 0XA2};   /* 设备切换前端口形态*/
    VOS_UINT8   aucRewindPortStyle[]    = {0x2, 0x03,0x4};  /* 设备切换后端口形态*/
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[ucIndex].ulParaValue = 0;
    gucAtParaIndex = 1;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_PID_Enable_Type), outBoundP((void *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK));

    memset(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    memcpy(stStubDynamicPidType.aucFirstPortStyle, aucFirstPortStyle, sizeof(aucFirstPortStyle));
    memcpy(stStubDynamicPidType.aucRewindPortStyle, aucRewindPortStyle, sizeof(aucRewindPortStyle));
    stStubDynamicPidType.ulNvStatus = VOS_TRUE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((void *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .will(returnValue(NV_OK));

    memcpy(&stStubDynamicPidTypeCmp, &stStubDynamicPidType, sizeof(stStubDynamicPidType));
    stStubDynamicPidTypeCmp.aucRewindPortStyle[2] = 0x00;
    MOCKER(NV_WriteEx)
        .stubs()
        .with(any(), eq(en_NV_Item_Huawei_Dynamic_PID_Type), mirror((void *)&stStubDynamicPidTypeCmp, (VOS_UINT32)sizeof(stStubDynamicPidTypeCmp)), any())
        .will(returnValue(NV_ID_NOT_EXIST));

    EXPECT_EQ(At_SetPcscInfo(ucIndex), AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPcscInfo, Test_AT_SetPcscInfo_015)
{
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    VOS_UINT8   aucFirstPortStyle[]     = {0xA1, 0XA2};   /* 设备切换前端口形态*/
    VOS_UINT8   aucRewindPortStyle[]    = {0x4, 0x2, 0x03};  /* 设备切换后端口形态*/
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[ucIndex].ulParaValue = 0;
    gucAtParaIndex = 1;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    PS_MEM_SET(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    PS_MEM_CPY(stStubDynamicPidType.aucFirstPortStyle, aucFirstPortStyle, sizeof(aucFirstPortStyle));
    PS_MEM_CPY(stStubDynamicPidType.aucRewindPortStyle, aucRewindPortStyle, sizeof(aucRewindPortStyle));
    stStubDynamicPidType.ulNvStatus = VOS_TRUE;

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_PID_Enable_Type), outBoundP((void *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK))
        .id("first");

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((void *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .after("first")
        .will(returnValue(NV_OK));

    stStubDynamicPidType.aucRewindPortStyle[0] = 0x2;
    stStubDynamicPidType.aucRewindPortStyle[1] = 0x3;
    stStubDynamicPidType.aucRewindPortStyle[2] = 0x00;
    MOCKER(NV_WriteEx)
        .stubs()
        .with(any(), eq(en_NV_Item_Huawei_Dynamic_PID_Type), mirror(&stStubDynamicPidType, sizeof(stStubDynamicPidType)))
        .will(returnValue(NV_OK));

    EXPECT_EQ(At_SetPcscInfo(ucIndex), AT_OK);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



TEST_F(Test_AT_SetPcscInfo, Test_AT_SetPcscInfo_016)
{
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidTypeCmp;
    VOS_UINT8   aucFirstPortStyle[]     = {0xA1, 0XA2};   /* 设备切换前端口形态*/
    VOS_UINT8   aucRewindPortStyle[]    = {0xA1, 0x2, 0x4};  /* 设备切换后端口形态*/
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[ucIndex].ulParaValue = 0;
    gucAtParaIndex = 1;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_PID_Enable_Type), outBoundP((void *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK));

    memset(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    memcpy(stStubDynamicPidType.aucFirstPortStyle, aucFirstPortStyle, sizeof(aucFirstPortStyle));
    memcpy(stStubDynamicPidType.aucRewindPortStyle, aucRewindPortStyle, sizeof(aucRewindPortStyle));
    stStubDynamicPidType.ulNvStatus = VOS_TRUE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq(en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((void *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .will(returnValue(NV_OK));

    memcpy(&stStubDynamicPidTypeCmp, &stStubDynamicPidType, sizeof(stStubDynamicPidType));
    stStubDynamicPidTypeCmp.aucRewindPortStyle[2] = 0x00;
    MOCKER(NV_WriteEx)
        .stubs()
        .with(any(), eq(en_NV_Item_Huawei_Dynamic_PID_Type), mirror((void *)&stStubDynamicPidTypeCmp, sizeof(stStubDynamicPidTypeCmp)), any())
        .will(returnValue(NV_ID_NOT_EXIST));

    EXPECT_EQ(At_SetPcscInfo(ucIndex), AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}





class Test_At_SetSimLockPlmnInfo: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex = 0;
        ulParaCnt = 4;

        pc = "2";
        PS_MEM_CPY(astParalist[1].aucPara, pc, 2);
        astParalist[1].usParaLen = 1;


        pc = "46012";

        PS_MEM_CPY(astParalist[2].aucPara, pc, 6);
        astParalist[2].usParaLen = 5;

        PS_MEM_CPY(astParalist[3].aucPara, pc, 6);
        astParalist[3].usParaLen = 5;



    }
    void TearDown()
    {
		UT_STUB_INIT();
    }
protected:
    VOS_UINT8                   ucIndex;
    AT_PARSE_PARA_TYPE_STRU     astParalist[4];
    VOS_UINT32                  ulParaCnt;
    VOS_CHAR                    *pc;
};

TEST_F(Test_At_SetSimLockPlmnInfo, Test_At_SetSimLockPlmnInfo_001)
{
    g_bAtDataLocked = VOS_TRUE;

    EXPECT_EQ(AT_ERROR, At_SetSimLockPlmnInfo(ucIndex,ulParaCnt,astParalist));

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetSimLockPlmnInfo, Test_At_SetSimLockPlmnInfo_002)
{
    g_bAtDataLocked = VOS_FALSE;

    ulParaCnt       = 62;

    EXPECT_EQ(AT_ERROR, At_SetSimLockPlmnInfo(ucIndex,ulParaCnt,astParalist));

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetSimLockPlmnInfo, Test_At_SetSimLockPlmnInfo_003)
{
    g_bAtDataLocked = VOS_FALSE;

    ulParaCnt       = 5;

    EXPECT_EQ(AT_ERROR, At_SetSimLockPlmnInfo(ucIndex,ulParaCnt,astParalist));

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetSimLockPlmnInfo, Test_At_SetSimLockPlmnInfo_004)
{

    TAF_CUSTOM_CARDLOCK_STATUS_STRU     stCardLockStatus;
    VOS_UINT32                          i,j;
    TAF_CUSTOM_SIM_LOCK_PLMN_INFO_STRU  stSimLockPlmnInfo;

    g_bAtDataLocked = VOS_FALSE;
    stCardLockStatus.ulStatus            = NV_ITEM_ACTIVE;
    stCardLockStatus.enCardlockStatus    = TAF_OPERATOR_LOCK_NEED_UNLOCK_CODE;

    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), eq(en_NV_Item_CardlockStatus),any(),eq((VOS_UINT32)sizeof(stCardLockStatus)))
		.will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_WriteEx)
        .stubs()
        .with(any(), eq(en_NV_Item_CardlockStatus),any(),eq((VOS_UINT32)sizeof(stCardLockStatus)))
		.will(returnValue((VOS_UINT32)NV_OK));


    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    stSimLockPlmnInfo.astSimLockPlmnRange[0].ucMncNum = AT_SIM_LOCK_MNC_NUM_DEFAULT_VAL;

    stSimLockPlmnInfo.astSimLockPlmnRange[0].aucRangeBegin[0]
                                                = 0x46;
    stSimLockPlmnInfo.astSimLockPlmnRange[0].aucRangeBegin[1]
                                                = 0x01;
    stSimLockPlmnInfo.astSimLockPlmnRange[0].aucRangeBegin[2]
                                                = 0x2f;
    stSimLockPlmnInfo.astSimLockPlmnRange[0].aucRangeBegin[2]
                                                = 0xff;
    stSimLockPlmnInfo.astSimLockPlmnRange[0].aucRangeBegin[2]
                                                = 0xff;
    stSimLockPlmnInfo.astSimLockPlmnRange[0].aucRangeBegin[2]
                                                = 0xff;
    stSimLockPlmnInfo.astSimLockPlmnRange[0].aucRangeBegin[2]
                                                = 0xff;
    stSimLockPlmnInfo.astSimLockPlmnRange[0].aucRangeBegin[2]
                                                = 0xff;

    PS_MEM_CPY(stSimLockPlmnInfo.astSimLockPlmnRange[0].aucRangeEnd,
                stSimLockPlmnInfo.astSimLockPlmnRange[0].aucRangeBegin,
                TAF_PH_SIMLOCK_PLMN_STR_LEN);

    for (i = 1 ; i < TAF_MAX_SIM_LOCK_RANGE_NUM; ++i)
    {
        for (j = 0; j < TAF_PH_SIMLOCK_PLMN_STR_LEN; ++j)
        {
            stSimLockPlmnInfo.astSimLockPlmnRange[i].aucRangeBegin[j] = AT_SIM_LOCK_PLMN_RANGE_DEFAULT_VAL;
            stSimLockPlmnInfo.astSimLockPlmnRange[i].aucRangeEnd[j] = AT_SIM_LOCK_PLMN_RANGE_DEFAULT_VAL;
        }
        stSimLockPlmnInfo.astSimLockPlmnRange[i].ucMncNum = AT_SIM_LOCK_MNC_NUM_DEFAULT_VAL;
    }

    MOCKER(NV_WriteEx)
        .stubs()
        .with(any(), eq(en_NV_Item_CustomizeSimLockPlmnInfo),mirror(&stSimLockPlmnInfo,sizeof(stSimLockPlmnInfo)),eq((VOS_UINT32)sizeof(stSimLockPlmnInfo)))
		.will(returnValue((VOS_UINT32)NV_OK));

    EXPECT_EQ(AT_OK, At_SetSimLockPlmnInfo(ucIndex,ulParaCnt,astParalist));

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}

#if (FEATURE_ON == FEATURE_CHARGE)
TEST_F(Test_At_SetCbcPara,参数检查不对)
{
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = (AT_CMD_OPT_TYPE)AT_CMD_OPT_SET_PARA_CMD;

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, At_SetCbcPara(ucIndex));

	GlobalMockObject::verify();
}


TEST_F(Test_At_SetCbcPara,调用接口失败)
{
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    MOCKER(BSP_CHG_GetCbcState)
		.stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    EXPECT_EQ(AT_ERROR, At_SetCbcPara(ucIndex));
	GlobalMockObject::verify();
}


TEST_F(Test_At_SetCbcPara,调用接口成功)
{
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    MOCKER(BSP_CHG_GetCbcState)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    EXPECT_EQ(AT_OK, At_SetCbcPara(ucIndex));

	GlobalMockObject::verify();
}

#endif


class Test_AT_SetDislogPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {
		UT_STUB_INIT();
    }
};


TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_001)
{
    gastAtParaList[0].usParaLen = 0;

    EXPECT_EQ(AT_SetDislogPara(0), (VOS_UINT32)AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_002)
{
    gastAtParaList[0].usParaLen = 0;

    EXPECT_EQ(AT_SetDislogPara(0), (VOS_UINT32)AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_003)
{
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    gastAtParaList[ucIndex].usParaLen = 5;
    gucAtParaIndex = 1;

    gastAtParaList[ucIndex].ulParaValue = AT_DISLOG_PCUI_TO_DIAG;

    /* 端口号不对 */
    gastAtClientTab[ucIndex].ucPortNo = AT_APP_PORT_NO;

    EXPECT_EQ(AT_SetDislogPara(ucIndex), (VOS_UINT32)AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_004)
{
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    gastAtParaList[ucIndex].usParaLen = 5;
    gucAtParaIndex = 1;

    gastAtParaList[ucIndex].ulParaValue = AT_DISLOG_PCUI_TO_DIAG;

    gastAtClientTab[ucIndex].ucPortNo = AT_USB_COM_PORT_NO;

    /* 已处于DIAG服务 */
    MOCKER(At_CheckDataState)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    EXPECT_EQ(AT_SetDislogPara(ucIndex), (VOS_UINT32)AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_005)
{
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    gastAtParaList[ucIndex].usParaLen = 5;
    gucAtParaIndex = 1;

    gucOmDiagIndex = ucIndex;

    gastAtParaList[0].ulParaValue = AT_DISLOG_PCUI_TO_DIAG;

    gastAtClientTab[ucIndex].ucPortNo = AT_USB_COM_PORT_NO;

    /* 已处于DIAG服务 */
    MOCKER(At_CheckDataState)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    MOCKER(CPM_NotifyChangePort)
        .stubs()
        .with(eq(AT_PCUI_PORT), eq((CPM_LOGIC_PORT_ENUM_UINT32)CPM_DIAG_COMM))
		.will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(At_SetMode)
        .stubs()
        .with(eq(gucOmDiagIndex), eq((AT_MODE_TYPE)AT_DATA_MODE), eq((VOS_UINT8)AT_DIAG_DATA_MODE));

    EXPECT_EQ(AT_SetDislogPara(ucIndex), AT_OK);
    EXPECT_EQ(gucOmDiagIndex, ucIndex);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_006)
{
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    gastAtParaList[ucIndex].usParaLen = 5;
    gucAtParaIndex = 1;

    gucOmDiagIndex = ucIndex;

    gastAtParaList[0].ulParaValue = AT_DISLOG_PCUI_TO_DIAG;

    gastAtClientTab[ucIndex].ucPortNo = AT_UART_PORT_NO;

    /* 已处于DIAG服务 */
    MOCKER(At_CheckDataState)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    MOCKER(CPM_NotifyChangePort)
        .stubs()
        .with(eq(AT_UART_PORT), eq((CPM_LOGIC_PORT_ENUM_UINT32)CPM_DIAG_COMM))
		.will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(At_SetMode)
        .stubs()
        .with(eq(gucOmDiagIndex), eq((AT_MODE_TYPE)AT_DATA_MODE), eq((VOS_UINT8)AT_DIAG_DATA_MODE));

    EXPECT_EQ(AT_SetDislogPara(ucIndex), (VOS_UINT32)AT_OK);
    EXPECT_EQ(gucOmDiagIndex, ucIndex);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_007)
{
    VOS_UINT8                           ucIndex;
    const char                          cWarning[] = "AT_SetDislogPara:Read NV failed!";

    MOCKER(DIAG_LogReport)
        .stubs()
        .with(any(), any(), any(), any(), any(), mirror(cWarning,strlen(cWarning) + 1));

    ucIndex = 0;

    gastAtParaList[ucIndex].usParaLen = 5;
    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = AT_DISLOG_DIAG_OPEN;

    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), eq((VOS_UINT16)en_NV_Item_PID_Enable_Type), any(),any())
        .will(returnValue((VOS_UINT32)NV_ID_NOT_EXIST));

    EXPECT_EQ(AT_SetDislogPara(ucIndex), (VOS_UINT32)AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_008)
{
    VOS_UINT8                           ucIndex;
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    const char                          cWarning[] = "AT_SetDislogPara:PID is not enabled";

    MOCKER(DIAG_LogReport)
        .stubs()
        .with(any(), any(), any(), any(), any(), mirror(cWarning,strlen(cWarning) + 1));

    ucIndex = 0;

    gastAtParaList[ucIndex].usParaLen = 5;
    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = AT_DISLOG_DIAG_OPEN;

    stStubPidEnableType.ulPidEnabled = VOS_FALSE;
    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), eq((VOS_UINT16)en_NV_Item_PID_Enable_Type), outBoundP((VOS_VOID *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue((VOS_UINT32)NV_OK));

    EXPECT_EQ(AT_SetDislogPara(ucIndex), (VOS_UINT32)AT_OK);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

#if (FEATURE_ON!=FEATURE_LTE)

TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_009)
{
    VOS_UINT8                           ucIndex;
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    const char                          cWarning[] = "AT_OpenDiagPort: Read NV fail!";

    MOCKER(DIAG_LogReport)
        .stubs()
        .with(any(), any(), any(), any(), any(), mirror(cWarning,strlen(cWarning) + 1));

    ucIndex = 0;

    gastAtParaList[ucIndex].usParaLen = 5;
    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = AT_DISLOG_DIAG_OPEN;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    PS_MEM_SET(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    stStubDynamicPidType.ulNvStatus = VOS_FALSE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_PID_Enable_Type), outBoundP((VOS_VOID *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK));

	MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((VOS_VOID *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .will(returnValue((VOS_UINT32)NV_ID_NOT_EXIST));

    EXPECT_EQ(AT_SetDislogPara(ucIndex), AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_010)
{
    VOS_UINT8                           ucIndex;
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    const char                          cWarning[] = "AT_OpenDiagPort: en_NV_Item_Huawei_Dynamic_PID_Type is inactive!";

    MOCKER(DIAG_LogReport)
        .stubs()
        .with(any(), any(), any(), any(), any(), mirror(cWarning,strlen(cWarning) + 1));

    ucIndex = 0;

    gastAtParaList[ucIndex].usParaLen = 5;
    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = AT_DISLOG_DIAG_OPEN;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    PS_MEM_SET(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    stStubDynamicPidType.ulNvStatus = VOS_FALSE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_PID_Enable_Type), outBoundP((VOS_VOID *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK));

	MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((VOS_VOID *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .will(returnValue(NV_OK));

    EXPECT_EQ(AT_SetDislogPara(ucIndex), AT_OK);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_011)
{
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    VOS_UINT8   aucFirstPortStyle[] = {0xA1, 0XA2};   /* 设备切换前端口形态 */
    VOS_UINT8   aucRewindPortStyle[]    = {0X2, 0x2, 0x01, 0x04, 0x05, 0x06, 0x16, 0x0a, 0x0d, 0x0e, 0xa1, 0xa2, 0X2, 0x2, 0x01, 0x04, 0x01};  /* 设备切换后端口形态 */
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    gastAtParaList[ucIndex].usParaLen = 5;
    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = AT_DISLOG_DIAG_OPEN;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    PS_MEM_SET(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    PS_MEM_CPY(stStubDynamicPidType.aucFirstPortStyle, aucFirstPortStyle, sizeof(aucFirstPortStyle));
    PS_MEM_CPY(stStubDynamicPidType.aucRewindPortStyle, aucRewindPortStyle, sizeof(aucRewindPortStyle));
    stStubDynamicPidType.ulNvStatus = VOS_TRUE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_PID_Enable_Type), outBoundP((VOS_VOID *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK));

	MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((VOS_VOID*)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .will(returnValue(NV_OK));

    MOCKER(NV_WriteEx)
        .expects(never());

    g_enATE5RightFlag = AT_E5_RIGHT_FLAG_YES;

    EXPECT_EQ(AT_SetDislogPara(ucIndex), AT_OK);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_012)
{
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    VOS_UINT8                           aucFirstPortStyle[]  = {0xA1, 0XA2};   /* 设备切换前端口形态 */
    VOS_UINT8                           aucRewindPortStyle[] = {0X2,  0x01, 0x03};  /* 设备切换后端口形态 */
    VOS_UINT32                          ulOffSet;
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    gastAtParaList[ucIndex].usParaLen = 5;
    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = AT_DISLOG_DIAG_OPEN;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    PS_MEM_SET(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    PS_MEM_CPY(stStubDynamicPidType.aucFirstPortStyle, aucFirstPortStyle, sizeof(aucFirstPortStyle));
    PS_MEM_CPY(stStubDynamicPidType.aucRewindPortStyle, aucRewindPortStyle, sizeof(aucRewindPortStyle));
    stStubDynamicPidType.ulNvStatus = VOS_TRUE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_PID_Enable_Type), outBoundP((VOS_VOID *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK));

	MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((VOS_VOID*)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .will(returnValue(NV_OK));

    ulOffSet = sizeof(aucRewindPortStyle);
    stStubDynamicPidType.aucRewindPortStyle[ulOffSet] = 0x03;
    MOCKER(NV_WriteEx)
        .expects(never());

    g_enATE5RightFlag = AT_E5_RIGHT_FLAG_NO;

    EXPECT_EQ(AT_SetDislogPara(ucIndex), AT_OK);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_013)
{
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    VOS_UINT8                           aucFirstPortStyle[]  = {0xA1, 0XA2};   /* 设备切换前端口形态 */
    VOS_UINT8                           aucRewindPortStyle[] = {0X2,  0x01, 0x03};  /* 设备切换后端口形态 */
    VOS_UINT32                          ulOffSet;
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    gastAtParaList[ucIndex].usParaLen = 5;
    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = AT_DISLOG_DIAG_OPEN;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    PS_MEM_SET(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    PS_MEM_CPY(stStubDynamicPidType.aucFirstPortStyle, aucFirstPortStyle, sizeof(aucFirstPortStyle));
    PS_MEM_CPY(stStubDynamicPidType.aucRewindPortStyle, aucRewindPortStyle, sizeof(aucRewindPortStyle));
    stStubDynamicPidType.ulNvStatus = VOS_TRUE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_PID_Enable_Type), outBoundP((VOS_VOID *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK));

	MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((VOS_VOID *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .will(returnValue(NV_OK));

    ulOffSet = sizeof(aucRewindPortStyle);
    stStubDynamicPidType.aucRewindPortStyle[ulOffSet] = 0x03;
    MOCKER(NV_WriteEx)
        .expects(never());

    g_enATE5RightFlag = AT_E5_RIGHT_FLAG_YES;

    EXPECT_EQ(AT_SetDislogPara(ucIndex), AT_OK);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_014)
{
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    VOS_UINT8                           aucFirstPortStyle[]  = {0xA1, 0XA2};   /* 设备切换前端口形态 */
    VOS_UINT8                           aucRewindPortStyle[] = {0X2,  0x01};  /* 设备切换后端口形态 */
    VOS_UINT32                          ulOffSet;
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    gastAtParaList[ucIndex].usParaLen = 5;
    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = AT_DISLOG_DIAG_OPEN;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_PID_Enable_Type), outBoundP((VOS_VOID *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK));

    memset(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    memcpy(stStubDynamicPidType.aucFirstPortStyle, aucFirstPortStyle, sizeof(aucFirstPortStyle));
    memcpy(stStubDynamicPidType.aucRewindPortStyle, aucRewindPortStyle, sizeof(aucRewindPortStyle));
    stStubDynamicPidType.ulNvStatus = VOS_TRUE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((VOS_VOID *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .will(returnValue(NV_OK));

    ulOffSet = sizeof(aucRewindPortStyle);
    stStubDynamicPidType.aucRewindPortStyle[ulOffSet] = 0x03;
    MOCKER(NV_WriteEx)
        .stubs()
        .with(any(), eq((VOS_UINT16)en_NV_Item_Huawei_Dynamic_PID_Type), mirror((VOS_VOID *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)), any())
        .will(returnValue(NV_ID_NOT_EXIST));

    g_enATE5RightFlag = AT_E5_RIGHT_FLAG_YES;

    EXPECT_EQ(AT_SetDislogPara(ucIndex), AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_015)
{
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    VOS_UINT8                           aucFirstPortStyle[]  = {0xA1, 0XA2};   /* 设备切换前端口形态 */
    VOS_UINT8                           aucRewindPortStyle[] = {0X2,  0x01};  /* 设备切换后端口形态 */
    VOS_UINT32                          ulOffSet;
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    gastAtParaList[ucIndex].usParaLen = 5;
    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = AT_DISLOG_DIAG_OPEN;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    PS_MEM_SET(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    PS_MEM_CPY(stStubDynamicPidType.aucFirstPortStyle, aucFirstPortStyle, sizeof(aucFirstPortStyle));
    PS_MEM_CPY(stStubDynamicPidType.aucRewindPortStyle, aucRewindPortStyle, sizeof(aucRewindPortStyle));
    stStubDynamicPidType.ulNvStatus = VOS_TRUE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_PID_Enable_Type), outBoundP((VOS_VOID *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK));

	MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((VOS_VOID *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .will(returnValue(NV_OK));

    ulOffSet = sizeof(aucRewindPortStyle);
    stStubDynamicPidType.aucRewindPortStyle[ulOffSet] = 0x03;
    MOCKER(NV_WriteEx)
        .stubs()
        .with(any(), eq((VOS_UINT16)en_NV_Item_Huawei_Dynamic_PID_Type), mirror((VOS_VOID *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)))
        .will(returnValue(NV_OK));

    g_enATE5RightFlag = AT_E5_RIGHT_FLAG_YES;

    EXPECT_EQ(AT_SetDislogPara(ucIndex), AT_OK);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_016)
{
    VOS_UINT8                           ucIndex;
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    const char                          cWarning[] = "AT_CloseDiagPort: Read NV fail!";

    MOCKER(DIAG_LogReport)
        .stubs()
        .with(any(), any(), any(), any(), any(), mirror(cWarning,strlen(cWarning) + 1));

    ucIndex = 0;

    gastAtParaList[ucIndex].usParaLen = 5;
    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = AT_DISLOG_DIAG_CLOSE;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    PS_MEM_SET(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    stStubDynamicPidType.ulNvStatus = VOS_FALSE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_PID_Enable_Type), outBoundP((VOS_VOID *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK));

	MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((VOS_VOID*)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .will(returnValue(NV_ID_NOT_EXIST));

    MOCKER(NV_WriteEx)
        .expects(never());

    EXPECT_EQ(AT_SetDislogPara(ucIndex), AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_017)
{
    VOS_UINT8                           ucIndex;
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;

    ucIndex = 0;

    gastAtParaList[ucIndex].usParaLen = 5;
    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = AT_DISLOG_DIAG_CLOSE;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    PS_MEM_SET(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    stStubDynamicPidType.ulNvStatus = VOS_FALSE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_PID_Enable_Type), outBoundP((VOS_VOID *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK));

	MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((VOS_VOID*)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .will(returnValue(NV_OK));

    EXPECT_EQ(AT_SetDislogPara(ucIndex), AT_OK);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_018)
{
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    VOS_UINT8   aucFirstPortStyle[]     = {0xA1, 0XA2};   /* 设备切换前端口形态 */
    VOS_UINT8   aucRewindPortStyle[]    = {0X2, 0x2, 0x01, 0x04, 0x05, 0x06, 0x16, 0x0a, 0x0d, 0x0e, 0xa1, 0xa2, 0X2, 0x2, 0x01, 0x04, 0x01};  /* 设备切换后端口形态 */
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    gastAtParaList[ucIndex].usParaLen = 5;
    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = AT_DISLOG_DIAG_CLOSE;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    PS_MEM_SET(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    PS_MEM_CPY(stStubDynamicPidType.aucFirstPortStyle, aucFirstPortStyle, sizeof(aucFirstPortStyle));
    PS_MEM_CPY(stStubDynamicPidType.aucRewindPortStyle, aucRewindPortStyle, sizeof(aucRewindPortStyle));
    stStubDynamicPidType.ulNvStatus = VOS_TRUE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_PID_Enable_Type), outBoundP((VOS_VOID *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK));

	MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((VOS_VOID *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .will(returnValue(NV_OK));

    MOCKER(NV_WriteEx)
        .expects(never());

    g_enATE5RightFlag = AT_E5_RIGHT_FLAG_NO;

    EXPECT_EQ(AT_SetDislogPara(ucIndex), AT_OK);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_019)
{
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    VOS_UINT8   aucFirstPortStyle[]     = {0xA1, 0XA2};   /* 设备切换前端口形态 */
    VOS_UINT8   aucRewindPortStyle[]    = {0X2, 0x2, 0x03};  /* 设备切换后端口形态 */
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    gastAtParaList[ucIndex].usParaLen = 5;
    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = AT_DISLOG_DIAG_CLOSE;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    PS_MEM_SET(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    PS_MEM_CPY(stStubDynamicPidType.aucFirstPortStyle, aucFirstPortStyle, sizeof(aucFirstPortStyle));
    PS_MEM_CPY(stStubDynamicPidType.aucRewindPortStyle, aucRewindPortStyle, sizeof(aucRewindPortStyle));
    stStubDynamicPidType.ulNvStatus = VOS_TRUE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_PID_Enable_Type), outBoundP((VOS_VOID *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK));

	MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((VOS_VOID *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .will(returnValue(NV_OK));

    MOCKER(NV_WriteEx)
        .expects(never());

    g_enATE5RightFlag = AT_E5_RIGHT_FLAG_NO;

    EXPECT_EQ(AT_SetDislogPara(ucIndex), AT_OK);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_020)
{
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidTypeCmp;
    VOS_UINT8   aucFirstPortStyle[]     = {0xA1, 0XA2};   /* 设备切换前端口形态 */
    VOS_UINT8   aucRewindPortStyle[]    = {0X2, 0x2, 0x03};  /* 设备切换后端口形态 */
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    gastAtParaList[ucIndex].usParaLen = 5;
    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = AT_DISLOG_DIAG_CLOSE;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_PID_Enable_Type), outBoundP((VOS_VOID *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK));

    memset(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    memcpy(stStubDynamicPidType.aucFirstPortStyle, aucFirstPortStyle, sizeof(aucFirstPortStyle));
    memcpy(stStubDynamicPidType.aucRewindPortStyle, aucRewindPortStyle, sizeof(aucRewindPortStyle));
    stStubDynamicPidType.ulNvStatus = VOS_TRUE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((VOS_VOID *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .will(returnValue(NV_OK));

    memcpy(&stStubDynamicPidTypeCmp, &stStubDynamicPidType, sizeof(stStubDynamicPidType));
    stStubDynamicPidTypeCmp.aucRewindPortStyle[2] = 0x00;
    MOCKER(NV_WriteEx)
        .stubs()
        .with(any(), eq((VOS_UINT16)en_NV_Item_Huawei_Dynamic_PID_Type), mirror((VOS_VOID *)&stStubDynamicPidTypeCmp, (VOS_UINT32)sizeof(stStubDynamicPidTypeCmp)), any())
        .will(returnValue(NV_ID_NOT_EXIST));

    g_enATE5RightFlag = AT_E5_RIGHT_FLAG_YES;

    EXPECT_EQ(AT_SetDislogPara(ucIndex), AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_021)
{
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    VOS_UINT8   aucFirstPortStyle[]     = {0xA1, 0XA2};   /* 设备切换前端口形态 */
    VOS_UINT8   aucRewindPortStyle[]    = {0X2, 0x2, 0x03};  /* 设备切换后端口形态 */
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    gastAtParaList[ucIndex].usParaLen = 5;
    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = AT_DISLOG_DIAG_CLOSE;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    PS_MEM_SET(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    PS_MEM_CPY(stStubDynamicPidType.aucFirstPortStyle, aucFirstPortStyle, sizeof(aucFirstPortStyle));
    PS_MEM_CPY(stStubDynamicPidType.aucRewindPortStyle, aucRewindPortStyle, sizeof(aucRewindPortStyle));
    stStubDynamicPidType.ulNvStatus = VOS_TRUE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_PID_Enable_Type), outBoundP((VOS_VOID *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK));

	MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((VOS_VOID *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .will(returnValue(NV_OK));

    stStubDynamicPidType.aucRewindPortStyle[2] = 0x00;
    MOCKER(NV_WriteEx)
        .stubs()
        .with(any(), eq((VOS_UINT16)en_NV_Item_Huawei_Dynamic_PID_Type), mirror((VOS_VOID *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)))
        .will(returnValue(NV_OK));

    g_enATE5RightFlag = AT_E5_RIGHT_FLAG_YES;

    EXPECT_EQ(AT_SetDislogPara(ucIndex), AT_OK);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_022)
{
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    gastAtParaList[ucIndex].usParaLen = 5;
    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = 33;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_PID_Enable_Type), outBoundP((VOS_VOID *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK));

    EXPECT_EQ(AT_SetDislogPara(ucIndex), AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_023)
{
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    VOS_UINT8   aucFirstPortStyle[]     = {0xA1, 0XA2};   /* 设备切换前端口形态 */
    VOS_UINT8   aucRewindPortStyle[]    = {0x10,0x05,0x16,0x13,0x12, 0x0A,0x03,0x14,0x15, 0xA1,0xA2, 0x00};  /* 设备切换后端口形态 */
    VOS_UINT8   aucCmpRewindPortStyle[] = {0x10,0x05,0x16,0x13,0x12, 0x0A,0x14,0x15, 0xA1,0xA2, 0x00};  /* 设备切换后端口形态 */
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    gastAtParaList[ucIndex].usParaLen = 5;
    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = AT_DISLOG_DIAG_CLOSE;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    PS_MEM_SET(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    PS_MEM_CPY(stStubDynamicPidType.aucFirstPortStyle, aucFirstPortStyle, sizeof(aucFirstPortStyle));
    PS_MEM_CPY(stStubDynamicPidType.aucRewindPortStyle, aucRewindPortStyle, sizeof(aucRewindPortStyle));
    stStubDynamicPidType.ulNvStatus = VOS_TRUE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_PID_Enable_Type), outBoundP((VOS_VOID *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK));

	MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((VOS_VOID*)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .will(returnValue(NV_OK));

    memcpy(stStubDynamicPidType.aucRewindPortStyle, aucCmpRewindPortStyle, sizeof(aucCmpRewindPortStyle));
    MOCKER(NV_WriteEx)
        .stubs()
        .with(any(), eq((VOS_UINT16)en_NV_Item_Huawei_Dynamic_PID_Type), mirror((VOS_VOID *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)))
        .will(returnValue(NV_OK));

    g_enATE5RightFlag = AT_E5_RIGHT_FLAG_YES;

    EXPECT_EQ(AT_SetDislogPara(ucIndex), AT_OK);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetDislogPara, Test_AT_SetDislogPara_024)
{
    AT_PID_ENABLE_TYPE_STRU             stStubPidEnableType;
    AT_DYNAMIC_PID_TYPE_STRU            stStubDynamicPidType;
    VOS_UINT8   aucFirstPortStyle[]     = {0xA1, 0XA2};   /* 设备切换前端口形态 */
    VOS_UINT8   aucRewindPortStyle[]    = {0x05,0x16,0x13,0x12, 0x0A,0x03,0x14,0x15, 0xA1,0xA2, 0x00};  /* 设备切换后端口形态 */
    VOS_UINT8   aucCmpRewindPortStyle[] = {0x05,0x16,0x13,0x12, 0x0A,0x14,0x15, 0xA1,0xA2, 0x00};  /* 设备切换后端口形态 */
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    gastAtParaList[ucIndex].usParaLen = 5;
    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = AT_DISLOG_DIAG_CLOSE;

    stStubPidEnableType.ulPidEnabled = VOS_TRUE;
    PS_MEM_SET(&stStubDynamicPidType, 0X00, sizeof(stStubDynamicPidType));
    PS_MEM_CPY(stStubDynamicPidType.aucFirstPortStyle, aucFirstPortStyle, sizeof(aucFirstPortStyle));
    PS_MEM_CPY(stStubDynamicPidType.aucRewindPortStyle, aucRewindPortStyle, sizeof(aucRewindPortStyle));
    stStubDynamicPidType.ulNvStatus = VOS_TRUE;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_PID_Enable_Type), outBoundP((VOS_VOID *)&stStubPidEnableType, (VOS_UINT32)sizeof(stStubPidEnableType)),any())
        .will(returnValue(NV_OK));

	MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_Huawei_Dynamic_PID_Type), outBoundP((VOS_VOID *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)),any())
        .will(returnValue(NV_OK));

    memcpy(stStubDynamicPidType.aucRewindPortStyle, aucCmpRewindPortStyle, sizeof(aucCmpRewindPortStyle));
    MOCKER(NV_WriteEx)
        .stubs()
        .with(any(), eq((VOS_UINT16)en_NV_Item_Huawei_Dynamic_PID_Type), mirror((VOS_VOID *)&stStubDynamicPidType, (VOS_UINT32)sizeof(stStubDynamicPidType)))
        .will(returnValue(NV_OK));

    g_enATE5RightFlag = AT_E5_RIGHT_FLAG_YES;

    EXPECT_EQ(AT_SetDislogPara(ucIndex), AT_OK);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#endif
class Test_AT_SetDnsQueryPara: public ::testing::Test
{
public:
    VOS_UINT8                           ucIndex;
    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex     = 0;
        gastAtClientTab[ucIndex].usClientId = 0;
        gastAtClientTab[ucIndex].opId       = 0;

    }
    void TearDown()
    {
		UT_STUB_INIT();
    }
};


TEST_F(Test_AT_SetDnsQueryPara, Test_AT_SetDnsQueryPara_001)
{
    /*变量定义*/
    VOS_UINT32                          ulRet;
    TAF_PS_GET_NEGOTIATION_DNS_REQ_STRU     stNegoDns;

    /*本地变量初始化*/
    PS_MEM_SET(&stNegoDns, 0x00, sizeof(TAF_PS_GET_NEGOTIATION_DNS_REQ_STRU));
    ulRet                               = TAF_FAILURE;
    stNegoDns.ucCid                     = 1;
    stNegoDns.stCtrl.ulModuleId         = WUEPS_PID_AT;
    stNegoDns.stCtrl.usClientId         = gastAtClientTab[ucIndex].usClientId;
    stNegoDns.stCtrl.ucOpId             = gastAtClientTab[ucIndex].opId;

    /*全局变量初始化*/
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 1;

    /*函数打桩*/
    MOCKER(TAF_PS_SndMsg)
        .stubs()
        .with(eq((VOS_UINT32)WUEPS_PID_TAF),
              eq((VOS_UINT32)ID_MSG_TAF_PS_GET_NEGOTIATION_DNS_REQ),
              mirror((VOS_VOID *)&stNegoDns, sizeof(TAF_PS_GET_NEGOTIATION_DNS_REQ_STRU)),
              eq((VOS_UINT32)sizeof(TAF_PS_GET_NEGOTIATION_DNS_REQ_STRU)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    /*调用被测函数 */
    ulRet = AT_SetDnsQueryPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ(AT_CMD_DNSQUERY_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetDnsQueryPara, Test_AT_SetDnsQueryPara_002)
{
    /*变量定义*/
    VOS_UINT32                          ulRet;
    TAF_PS_GET_NEGOTIATION_DNS_REQ_STRU     stNegoDns;

    /*本地变量初始化*/
    PS_MEM_SET(&stNegoDns, 0x00, sizeof(TAF_PS_GET_NEGOTIATION_DNS_REQ_STRU));
    ulRet                               = TAF_FAILURE;
    stNegoDns.ucCid                     = 1;
    stNegoDns.stCtrl.ulModuleId         = WUEPS_PID_AT;
    stNegoDns.stCtrl.usClientId         = gastAtClientTab[ucIndex].usClientId;
    stNegoDns.stCtrl.ucOpId             = gastAtClientTab[ucIndex].opId;

    /*全局变量初始化*/
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 1;

    /*函数打桩*/
    MOCKER(TAF_PS_SndMsg)
        .stubs()
        .with(eq((VOS_UINT32)WUEPS_PID_TAF),
              eq((VOS_UINT32)ID_MSG_TAF_PS_GET_NEGOTIATION_DNS_REQ),
              mirror((VOS_VOID *)&stNegoDns, sizeof(TAF_PS_GET_NEGOTIATION_DNS_REQ_STRU)),
              eq((VOS_UINT32)sizeof(TAF_PS_GET_NEGOTIATION_DNS_REQ_STRU)))
        .will(returnValue(VOS_ERR));

    /*调用被测函数 */
    ulRet = AT_SetDnsQueryPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRet);
    GlobalMockObject::verify();
}



TEST_F(Test_AT_SetDnsQueryPara, Test_AT_SetDnsQueryPara_003)
{
    /*变量定义*/
    VOS_UINT32                          ulRet;

    /*本地变量初始化*/
    ulRet                               = TAF_FAILURE;

    /*全局变量初始化*/
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_READ_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 1;

    /*函数打桩*/

    /*调用被测函数 */
    ulRet = AT_SetDnsQueryPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetDnsQueryPara, Test_AT_SetDnsQueryPara_004)
{
    /*变量定义*/
    VOS_UINT32                          ulRet;

    /*本地变量初始化*/
    ulRet                               = TAF_FAILURE;

    /*全局变量初始化*/
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 2;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 1;

    /*函数打桩*/

    /*调用被测函数 */
    ulRet = AT_SetDnsQueryPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetDnsQueryPara, Test_AT_SetDnsQueryPara_005)
{
    /*变量定义*/
    VOS_UINT32                          ulRet;

    /*本地变量初始化*/
    ulRet                               = TAF_FAILURE;

    /*全局变量初始化*/
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].usParaLen         = 0;
    gastAtParaList[0].ulParaValue       = 1;

    /*函数打桩*/

    /*调用被测函数 */
    ulRet = AT_SetDnsQueryPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);
    GlobalMockObject::verify();
}



class Test_AT_SetMemStatusPara: public ::testing::Test
{
public:
    VOS_UINT8                           ucIndex;
    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex     = 0;
        gastAtClientTab[ucIndex].usClientId = 0;
        gastAtClientTab[ucIndex].opId       = 0;

        gastAtClientTab[ucIndex].UserType   = AT_HSIC1_USER;

    }
    void TearDown()
    {
    	UT_STUB_INIT();
    }
};


TEST_F(Test_AT_SetMemStatusPara, Test_AT_SetMemStatusPara_001)
{
    /*变量定义*/
    VOS_UINT32                          ulRet;
    MN_MSG_SET_MEMSTATUS_PARM_STRU      stMemStatus;

    /*本地变量初始化*/
    PS_MEM_SET(&stMemStatus, 0x00, sizeof(MN_MSG_SET_MEMSTATUS_PARM_STRU));
    ulRet                   = TAF_FAILURE;
    stMemStatus.enMemFlag   = MN_MSG_MEM_FULL_SET;

    /*全局变量初始化*/
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 0;

    /*函数打桩*/
    MOCKER(MN_MSG_SetMemStatus)
        .stubs()
        .with(eq((MN_CLIENT_ID_T)gastAtClientTab[ucIndex].usClientId),
              eq((MN_OPERATION_ID_T)gastAtClientTab[ucIndex].opId),
              mirror((MN_MSG_SET_MEMSTATUS_PARM_STRU const*)&stMemStatus, (VOS_UINT32)sizeof(MN_MSG_SET_MEMSTATUS_PARM_STRU)))
        .will(returnValue((VOS_UINT32)MN_ERR_NO_ERROR));

    /*调用被测函数 */
    ulRet = AT_SetMemStatusPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CSASM_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetMemStatusPara, Test_AT_SetMemStatusPara_002)
{
    /*变量定义*/
    VOS_UINT32                          ulRet;
    MN_MSG_SET_MEMSTATUS_PARM_STRU      stMemStatus;

    /*本地变量初始化*/
    PS_MEM_SET(&stMemStatus, 0x00, sizeof(MN_MSG_SET_MEMSTATUS_PARM_STRU));
    ulRet                   = TAF_FAILURE;
    stMemStatus.enMemFlag   = MN_MSG_MEM_FULL_UNSET;

    /*全局变量初始化*/
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 1;

    /*函数打桩*/
    MOCKER(MN_MSG_SetMemStatus)
        .stubs()
        .with(eq((MN_CLIENT_ID_T)gastAtClientTab[ucIndex].usClientId),
              eq((MN_OPERATION_ID_T)gastAtClientTab[ucIndex].opId),
              mirror((MN_MSG_SET_MEMSTATUS_PARM_STRU const*)&stMemStatus, (VOS_UINT32)sizeof(MN_MSG_SET_MEMSTATUS_PARM_STRU)))
        .will(returnValue((VOS_UINT32)MN_ERR_INVALIDPARM));

    /*调用被测函数 */
    ulRet = AT_SetMemStatusPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRet);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetMemStatusPara, Test_AT_SetMemStatusPara_003)
{
    /*变量定义*/
    VOS_UINT32                          ulRet;

    /*本地变量初始化*/
    ulRet                   = TAF_FAILURE;

    /*全局变量初始化*/
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_READ_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 1;

    /*函数打桩*/

    /*调用被测函数 */
    ulRet = AT_SetMemStatusPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetMemStatusPara, Test_AT_SetMemStatusPara_004)
{
    /*变量定义*/
    VOS_UINT32                          ulRet;

    /*本地变量初始化*/
    ulRet                   = TAF_FAILURE;

    /*全局变量初始化*/
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 2;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 1;

    /*函数打桩*/

    /*调用被测函数 */
    ulRet = AT_SetMemStatusPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetMemStatusPara, Test_AT_SetMemStatusPara_005)
{
    /*变量定义*/
    VOS_UINT32                          ulRet;

    /*本地变量初始化*/
    ulRet                   = TAF_FAILURE;

    /*全局变量初始化*/
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].usParaLen         = 0;
    gastAtParaList[0].ulParaValue       = 1;

    /*函数打桩*/

    /*调用被测函数 */
    ulRet = AT_SetMemStatusPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);
    GlobalMockObject::verify();
}

#if 0

TEST_F(Test_AT_SetMemStatusPara, Test_AT_SetMemStatusPara_006)
{
    /*变量定义*/
    VOS_UINT32                          ulRet;

    /*本地变量初始化*/
    ulRet                   = TAF_FAILURE;

    /*全局变量初始化*/
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 2;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtClientTab[ucIndex].UserType   = AT_COM_USER;

    /*函数打桩*/
    MOCKER(AT_CheckHsicUser)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    /*调用被测函数 */
    ulRet = AT_SetMemStatusPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRet);
    GlobalMockObject::verify();
}
#endif


class Test_AT_SetApRptPortSelectPara: public ::testing::Test
{
public:
    VOS_UINT8                           ucIndex;
    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex     = 0;

        gastAtClientTab[ucIndex].UserType   = AT_HSIC1_USER;

        PS_MEM_SET(gastAtParaList, 0, sizeof(AT_PARSE_PARA_TYPE_STRU) * AT_MAX_PARA_NUMBER);

    }
    void TearDown()
    {
        PS_MEM_SET(gastAtParaList, 0, sizeof(AT_PARSE_PARA_TYPE_STRU) * AT_MAX_PARA_NUMBER);
    }
};


TEST_F(Test_AT_SetApRptPortSelectPara, Test_AT_SetApRptPortSelectPara_001)
{
    /*变量定义*/
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucClientIndex;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;

    /*本地变量初始化*/
    ulRet                               = TAF_FAILURE;

    /*全局变量初始化*/
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 2;
    gastAtParaList[0].usParaLen         = 1;
    PS_MEM_CPY(gastAtParaList[0].aucPara,"FFFFFFFF", 8);
    gastAtParaList[0].usParaLen = 8;

    gastAtParaList[1].usParaLen         = 1;
    PS_MEM_CPY(gastAtParaList[1].aucPara,"FFFFFFFF", 8);
    gastAtParaList[1].usParaLen = 8;

    for (ucClientIndex = 0; ucClientIndex < AT_CLIENT_BUTT ; ucClientIndex++)
    {
        pstAtClientCtx = AT_GetClientCtxAddr(ucClientIndex);

        pstAtClientCtx->stClientConfiguration.ucReportFlg = VOS_FALSE;
    }

    /*函数打桩*/
    MOCKER(AT_IsApPort)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    /*调用被测函数 */
    ulRet = AT_SetApRptPortSelectPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_OK, ulRet);

    for (ucClientIndex = 0; ucClientIndex < AT_CLIENT_BUTT ; ucClientIndex++)
    {
        pstAtClientCtx = AT_GetClientCtxAddr(ucClientIndex);

        EXPECT_EQ(VOS_TRUE, pstAtClientCtx->stClientConfiguration.ucReportFlg);
    }

    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].usParaLen         = 1;
    PS_MEM_CPY(gastAtParaList[0].aucPara,"1", 1);
    gastAtParaList[0].usParaLen = 1;

    gastAtParaList[1].usParaLen         = 1;
    PS_MEM_CPY(gastAtParaList[1].aucPara,"0", 1);
    gastAtParaList[1].usParaLen = 1;

    for (ucClientIndex = 0; ucClientIndex < AT_CLIENT_BUTT ; ucClientIndex++)
    {
        pstAtClientCtx = AT_GetClientCtxAddr(ucClientIndex);

        pstAtClientCtx->stClientConfiguration.ucReportFlg = VOS_FALSE;
    }

    /*函数打桩*/

    /*调用被测函数 */
    ulRet = AT_SetApRptPortSelectPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_OK, ulRet);

    pstAtClientCtx = AT_GetClientCtxAddr(AT_CLIENT_ID_PCUI);

    EXPECT_EQ((VOS_UINT8)VOS_TRUE, pstAtClientCtx->stClientConfiguration.ucReportFlg);

    for (ucClientIndex = 1; ucClientIndex < AT_CLIENT_BUTT ; ucClientIndex++)
    {
        pstAtClientCtx = AT_GetClientCtxAddr(ucClientIndex);

        EXPECT_EQ((VOS_UINT8)VOS_FALSE, pstAtClientCtx->stClientConfiguration.ucReportFlg);
    }

    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetApRptPortSelectPara, Test_AT_SetApRptPortSelectPara_002)
{
    /*变量定义*/
    VOS_UINT32                          ulRet;

    /*本地变量初始化*/
    ulRet                               = TAF_FAILURE;

    /*全局变量初始化*/
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_READ_CMD;
    gucAtParaIndex                      = 2;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 2;

    /*函数打桩*/
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    /*调用被测函数 */
    ulRet = AT_SetApRptPortSelectPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApRptPortSelectPara, Test_AT_SetApRptPortSelectPara_003)
{
    /*变量定义*/
    VOS_UINT32                          ulRet;

    /*本地变量初始化*/
    ulRet                               = TAF_FAILURE;

    /*全局变量初始化*/
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 3;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 2;

    /*函数打桩*/
    MOCKER(AT_IsApPort)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    /*调用被测函数 */
    ulRet = AT_SetApRptPortSelectPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApRptPortSelectPara, Test_AT_SetApRptPortSelectPara_004)
{
    /*变量定义*/
    VOS_UINT32                          ulRet;

    /*本地变量初始化*/
    ulRet                               = TAF_FAILURE;

    /*全局变量初始化*/
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 2;
    gastAtParaList[0].usParaLen         = 0;
    gastAtParaList[0].ulParaValue       = 2;

    /*函数打桩*/
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    /*调用被测函数 */
    ulRet = AT_SetApRptPortSelectPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApRptPortSelectPara, Test_AT_SetApRptPortSelectPara_005)
{
    /*变量定义*/
    VOS_UINT32                          ulRet;

    /*本地变量初始化*/
    ulRet                               = TAF_FAILURE;

    /*全局变量初始化*/
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 2;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 2;
    gastAtClientTab[ucIndex].UserType   = AT_COM_USER;

    /*函数打桩*/
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    /*调用被测函数 */
    ulRet = AT_SetApRptPortSelectPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRet);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApRptPortSelectPara, Test_AT_SetApRptPortSelectPara_006)
{
    /*变量定义*/
    VOS_UINT32                          ulRet;

    /*本地变量初始化*/
    ulRet                               = TAF_FAILURE;

    /*全局变量初始化*/
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 2;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 2;

    gastAtParaList[1].usParaLen         = 0;
    gastAtParaList[1].ulParaValue       = 2;


    /*函数打桩*/
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    /*调用被测函数 */
    ulRet = AT_SetApRptPortSelectPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);
    GlobalMockObject::verify();
}


class Test_At_SetGpioPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetGpioPara, Test_At_SetGpioPara_003)
{
    /* 变量初始化 */
    gastAtParaList[0].ulParaValue = 200;
    gastAtParaList[1].ulParaValue = 1;
    TAF_UINT8 ucIndex = 1;
    gucAtParaIndex = 4;

    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_SUPPORT));

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetGpioPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetGpioPara, Test_At_SetGpioPara_004)
{
    /* 变量初始化 */
    gastAtParaList[0].ulParaValue = 200;
    gastAtParaList[1].ulParaValue = 1;
    TAF_UINT8 ucIndex = 1;
    gucAtParaIndex = 3;

    /* 函数打桩 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_SUPPORT));

    MOCKER(USB_otg_switch_signal_set)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_ERROR, At_SetGpioPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetGpioPara, Test_At_SetGpioPara_005)
{
    /* 变量初始化 */
    gastAtParaList[0].ulParaValue = 200;
    gastAtParaList[1].ulParaValue = 1;
    TAF_UINT8 ucIndex = 1;
    gucAtParaIndex = 3;

    /* 函数打桩 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_SUPPORT));

    MOCKER(USB_otg_switch_signal_set)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

	MOCKER(VOS_TaskDelay)
		.stubs()
		.will(returnValue((VOS_UINT32)VOS_OK));

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_OK, At_SetGpioPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetGpioPara, Test_At_SetGpioPara_006)
{
    /* 变量初始化 */
    gastAtParaList[0].ulParaValue = 200;
    gastAtParaList[1].ulParaValue = 0;
    TAF_UINT8 ucIndex = 1;
    gucAtParaIndex = 3;

    /* 函数打桩 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_SUPPORT));

    MOCKER(USB_otg_switch_signal_set)
        .stubs()
        .will(returnObjectList((VOS_UINT32)VOS_OK, (VOS_UINT32)VOS_ERR));

	MOCKER(VOS_TaskDelay)
		.stubs()
		.will(returnValue((VOS_UINT32)VOS_OK));

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_ERROR, At_SetGpioPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetGpioPara, Test_At_SetGpioPara_007)
{
    /* 变量初始化 */
    gastAtParaList[0].ulParaValue = 200;
    gastAtParaList[1].ulParaValue = 0;
    TAF_UINT8 ucIndex = 1;
    gucAtParaIndex = 3;

    /* 函数打桩 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_UNSUPPORT));

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_ERROR, At_SetGpioPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
class Test_At_SetUsbSwitchPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};

TEST_F(Test_At_SetUsbSwitchPara, Test_At_SetUsbSwitchPara_001)
{
    /* 变量初始化 */
    TAF_UINT8 ucIndex = 1;
    gucAtParaIndex = 2;

	MOCKER(AT_IsApPort)
		.stubs()
		.will(returnValue((VOS_UINT32)VOS_TRUE));

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetUsbSwitchPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetUsbSwitchPara, Test_At_SetUsbSwitchPara_002)
{
    /* 变量初始化 */
    TAF_UINT8 ucIndex = 1;
    gucAtParaIndex = 1;
    gastAtParaList[0].ulParaValue = 1;

    /* 函数打桩 */
	MOCKER(AT_IsApPort)
		.stubs()
		.will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(USB_otg_switch_get)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    /* 调用被测函数并结果验证 */
    EXPECT_EQ(AT_ERROR, At_SetUsbSwitchPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetUsbSwitchPara, Test_At_SetUsbSwitchPara_003)
{
    /* 变量初始化 */
    TAF_UINT8 ucIndex = 1;
    TAF_UINT8 ucUsbStatus = USB_SWITCH_ON;
    gucAtParaIndex = 1;
    gastAtParaList[0].ulParaValue = 1;

    /* 函数打桩 */
	MOCKER(AT_IsApPort)
		.stubs()
		.will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(USB_otg_switch_get)
        .stubs()
        .with(outBoundP((VOS_UINT8*)&ucUsbStatus, (VOS_UINT32)sizeof(ucUsbStatus)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(USB_otg_switch_set)
        .expects(never());

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_OK, At_SetUsbSwitchPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetUsbSwitchPara, Test_At_SetUsbSwitchPara_004)
{
    /* 变量初始化 */
    TAF_UINT8 ucIndex = 1;
    TAF_UINT8 ucUsbStatus = USB_SWITCH_OFF;
    gucAtParaIndex = 1;
    gastAtParaList[0].ulParaValue = 1;

    /* 函数打桩 */
	MOCKER(AT_IsApPort)
		.stubs()
		.will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(USB_otg_switch_get)
        .stubs()
        .with(outBoundP((VOS_UINT8*)&ucUsbStatus, (VOS_UINT32)sizeof(ucUsbStatus)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(USB_otg_switch_set)
        .stubs()
        .with(eq((VOS_UINT8)USB_SWITCH_ON))
        .will(returnValue((VOS_UINT32)VOS_OK));

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_OK, At_SetUsbSwitchPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetUsbSwitchPara, Test_At_SetUsbSwitchPara_005)
{
    /* 变量初始化 */
    TAF_UINT8 ucIndex = 1;
    TAF_UINT8 ucUsbStatus = USB_SWITCH_ON;
    gucAtParaIndex = 1;
    gastAtParaList[0].ulParaValue = 2;

    /* 函数打桩 */
	MOCKER(AT_IsApPort)
		.stubs()
		.will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(USB_otg_switch_get)
        .stubs()
        .with(outBoundP((VOS_UINT8*)&ucUsbStatus, (VOS_UINT32)sizeof(ucUsbStatus)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(USB_otg_switch_set)
        .stubs()
        .with(eq((VOS_UINT8)USB_SWITCH_OFF))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    MOCKER(At_PortSwitchSndMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(AT_CheckHsicUser)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_ERROR, At_SetUsbSwitchPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetUsbSwitchPara, Test_At_SetUsbSwitchPara_006)
{
    /* 变量初始化 */
    TAF_UINT8 ucIndex = 1;
    TAF_UINT8 ucUsbStatus = USB_SWITCH_OFF;
    gucAtParaIndex = 1;
    gastAtParaList[0].ulParaValue = 2;

    /* 函数打桩 */
	MOCKER(AT_IsApPort)
		.stubs()
		.will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(USB_otg_switch_get)
        .stubs()
        .with(outBoundP((VOS_UINT8*)&ucUsbStatus, (VOS_UINT32)sizeof(ucUsbStatus)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(USB_otg_switch_set)
        .expects(never());

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_OK, At_SetUsbSwitchPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetUsbSwitchPara, Test_At_SetUsbSwitchPara_007)
{
    /* 变量初始化 */
    TAF_UINT8 ucIndex = 1;
    gucAtParaIndex = 1;
    gastAtParaList[0].ulParaValue = 0;

    /* 函数打桩 */
	MOCKER(AT_IsApPort)
		.stubs()
		.will(returnValue((VOS_UINT32)VOS_TRUE));

	 MOCKER(USB_otg_switch_get)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(USB_otg_switch_set)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetUsbSwitchPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
class Test_AT_GetNdisDialParam: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};



TEST_F(Test_AT_GetNdisDialParam,Test_AT_GetNdisDialParam_001)
{
    /*变量定义*/
    TAF_PS_DIAL_PARA_STRU               stDialParaInfo;
    VOS_UINT32                          ulRst;
    TAF_PDP_PRIM_CONTEXT_STRU           stPdpCidInfo = {0};
    VOS_UINT8                           aucUserName[6] = {1,1,1,1,1,1};
    VOS_UINT8                           aucPassword[7] = {2,2,2,2,2,2,2};

    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[2].usParaLen     = 0;
    gastAtParaList[3].usParaLen     = 6;
    gastAtParaList[4].usParaLen     = 7;
    gastAtParaList[5].usParaLen     = 0;
    gastAtParaList[6].usParaLen     = 0;
    gucAtParaIndex                  = 5;

    memset(gastAtParaList[3].aucPara, 0, TAF_MAX_GW_AUTH_USERNAME_LEN);
    memset(gastAtParaList[4].aucPara, 0, TAF_MAX_GW_AUTH_PASSWORD_LEN);
	memset(&stPdpCidInfo, 0x0, sizeof(stPdpCidInfo));

    memcpy(gastAtParaList[3].aucPara, aucUserName, 6);
    memcpy(gastAtParaList[4].aucPara, aucPassword, 7);

    /* 桩函数 */
    stPdpCidInfo.stPdpAddr.enPdpType = TAF_PDP_IPV4;

    MOCKER(TAF_AGENT_GetPdpCidPara)
        .stubs()
        .with(outBoundP(&stPdpCidInfo, (VOS_UINT32)sizeof(stPdpCidInfo)), any(), any())
        .will(returnValue((VOS_UINT32)VOS_OK));

#if(FEATURE_ON == FEATURE_IPV6)
    MOCKER(AT_CheckIpv6Capability)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));
#endif

    /* 调用消息入口函数 */
    ulRst = AT_GetNdisDialParam(&stDialParaInfo);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_FAILURE, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();

}
class Test_AT_SetFwavePara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        g_stAtDevCmdCtrl.ucDeviceRatMode = AT_RAT_MODE_GSM;

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetFwavePara, Test_AT_SetFwavePara_001)
{
    /* 变量初始化 */
    TAF_UINT8 ucIndex = 1;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_ERROR, AT_SetFwavePara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetFwavePara, Test_AT_SetFwavePara_002)
{
    /* 变量初始化 */
    TAF_UINT8 ucIndex = 1;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_ERROR, AT_SetFwavePara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetFwavePara, Test_AT_SetFwavePara_003)
{
    /* 变量初始化 */
    TAF_UINT8 ucIndex = 1;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].ulParaValue = 8;

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_ERROR, AT_SetFwavePara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetFwavePara, Test_AT_SetFwavePara_004)
{
    /* 变量初始化 */
    TAF_UINT8 ucIndex = 1;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].ulParaValue = 0;
    g_stAtDevCmdCtrl.ucCurrentTMode = AT_TMODE_UPGRADE;

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_ERROR, AT_SetFwavePara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetFwavePara, Test_AT_SetFwavePara_005)
{
    /* 变量初始化 */
    TAF_UINT8 ucIndex = 1;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].ulParaValue = 0;
    g_stAtDevCmdCtrl.ucCurrentTMode = AT_TMODE_FTM;
    g_stAtDevCmdCtrl.ucDeviceRatMode = AT_RAT_MODE_WIFI;

    MOCKER(wifi_get_status)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_ERROR, AT_SetFwavePara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetFwavePara, Test_AT_SetFwavePara_006)
{
    /* 变量初始化 */
    TAF_UINT8 ucIndex = 1;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].ulParaValue = 0;
    g_stAtDevCmdCtrl.ucCurrentTMode = AT_TMODE_FTM;
    g_stAtDevCmdCtrl.ucDeviceRatMode = AT_RAT_MODE_WIFI;

    MOCKER(wifi_get_status)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_OK, AT_SetFwavePara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetFwavePara, Test_AT_SetFwavePara_007)
{
    /* 变量初始化 */
    TAF_UINT8 ucIndex = 1;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].ulParaValue = 0;
    g_stAtDevCmdCtrl.ucCurrentTMode = AT_TMODE_FTM;
    g_stAtDevCmdCtrl.ucDeviceRatMode = AT_RAT_MODE_WCDMA;

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, AT_SetFwavePara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_AT_NidsCheckDialParam: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_NidsCheckDialParam, Test_AT_NidsCheckDialParam_001)
{
    /* 变量初始化 */
    gucAtParaIndex = 7;

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_TOO_MANY_PARA, AT_NidsCheckDialParam());

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_NidsCheckDialParam, Test_AT_NidsCheckDialParam_002)
{
    /* 变量初始化 */
    gucAtParaIndex              = 2;
    gastAtParaList[0].usParaLen = 0;

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, AT_NidsCheckDialParam());

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_NidsCheckDialParam, Test_AT_NidsCheckDialParam_003)
{
    /* 变量初始化 */
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 0;

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, AT_NidsCheckDialParam());

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_NidsCheckDialParam, Test_AT_NidsCheckDialParam_004)
{
    /* 变量初始化 */
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 0;

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, AT_NidsCheckDialParam());

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_NidsCheckDialParam, Test_AT_NidsCheckDialParam_005)
{
    /* 变量初始化 */
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 2;

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, AT_NidsCheckDialParam());

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_NidsCheckDialParam, Test_AT_NidsCheckDialParam_006)
{
    /* 变量初始化 */
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 1;
    gastAtParaList[2].usParaLen     = 4;

    MOCKER(AT_CheckApnFormat)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, AT_NidsCheckDialParam());

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_NidsCheckDialParam, Test_AT_NidsCheckDialParam_007)
{
    /* 变量初始化 */
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 1;
    gastAtParaList[2].usParaLen     = 4;

    MOCKER(AT_CheckApnFormat)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_SUCCESS, AT_NidsCheckDialParam());

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetSysCfgPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetSysCfgPara, Test_At_SetSysCfgPara_001)
{
    /* 变量初始化 */
    VOS_UINT32                      ulRst;
    VOS_UINT8                       ucIndex = 1;

    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId = MODEM_ID_0;

    gucAtParaIndex      = 4;

    ulRst = At_SetSysCfgPara(ucIndex);

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetSysCfgPara, Test_At_SetSysCfgPara_002)
{
    /* 变量初始化 */
    VOS_UINT32                      ulRst;
    VOS_UINT8                       ucIndex = 1;

    gucAtParaIndex              = 5;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 0;
    gastAtParaList[2].usParaLen = 1;
    gastAtParaList[3].usParaLen = 1;
    gastAtParaList[4].usParaLen = 1;
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId = MODEM_ID_0;

    ulRst = At_SetSysCfgPara(ucIndex);

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetSysCfgPara, Test_At_SetSysCfgPara_003)
{
    /* 变量初始化 */
    VOS_UINT32                      ulRst;
    VOS_UINT8                       ucIndex = 1;

    gucAtParaIndex              = 5;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 2;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 2;
    gastAtParaList[2].usParaLen = 1;
    gastAtParaList[2].ulParaValue = 0x3fffffff;
    gastAtParaList[3].usParaLen = 1;
    gastAtParaList[3].ulParaValue = 1;
    gastAtParaList[4].usParaLen = 1;
    gastAtParaList[4].ulParaValue = 2;
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId = MODEM_ID_0;

    /* 函数打桩 */
    MOCKER(AT_ConvertSysCfgRatOrderPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_ERROR));

    ulRst = At_SetSysCfgPara(ucIndex);

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetSysCfgPara, Test_At_SetSysCfgPara_004)
{
    /* 变量初始化 */
    VOS_UINT32                      ulRst;
    VOS_UINT8                       ucIndex = 1;

    gucAtParaIndex              = 5;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 2;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 2;
    gastAtParaList[2].usParaLen = 1;
    gastAtParaList[2].ulParaValue = 0x3fffffff;
    gastAtParaList[3].usParaLen = 1;
    gastAtParaList[3].ulParaValue = 1;
    gastAtParaList[4].usParaLen = 1;
    gastAtParaList[4].ulParaValue = 2;
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId = MODEM_ID_0;

    /* 函数打桩 */
    MOCKER(AT_ConvertSysCfgRatOrderPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(AT_ConvertSysCfgExBandPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_ERROR));

    ulRst = At_SetSysCfgPara(ucIndex);

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetSysCfgPara, Test_At_SetSysCfgPara_005)
{
    /* 变量初始化 */
    VOS_UINT32                      ulRst;
    VOS_UINT8                       ucIndex = 1;

    gucAtParaIndex              = 5;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 2;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 2;
    gastAtParaList[2].usParaLen = 1;
    gastAtParaList[2].ulParaValue = 0x3fffffff;
    gastAtParaList[3].usParaLen = 1;
    gastAtParaList[3].ulParaValue = 4;
    gastAtParaList[4].usParaLen = 1;
    gastAtParaList[4].ulParaValue = 2;
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId = MODEM_ID_0;

    AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucRoamFeature = AT_ROAM_FEATURE_OFF;

    /* 函数打桩 */
    MOCKER(AT_ConvertSysCfgRatOrderPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(AT_ConvertSysCfgExBandPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    ulRst = At_SetSysCfgPara(ucIndex);

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetSysCfgPara, Test_At_SetSysCfgPara_006)
{
    /* 变量初始化 */
    VOS_UINT32                      ulRst;
    VOS_UINT8                       ucIndex = 1;

    gucAtParaIndex              = 5;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 2;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 2;
    gastAtParaList[2].usParaLen = 1;
    gastAtParaList[2].ulParaValue = 0x3fffffff;
    gastAtParaList[3].usParaLen = 1;
    gastAtParaList[3].ulParaValue = 1;
    gastAtParaList[4].usParaLen = 1;
    gastAtParaList[4].ulParaValue = 2;
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId = MODEM_ID_0;

    AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucRoamFeature = AT_ROAM_FEATURE_OFF;

    /* 函数打桩 */
    MOCKER(AT_ConvertSysCfgRatOrderPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(AT_ConvertSysCfgExBandPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(TAF_MMA_QrySyscfgReq)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    ulRst = At_SetSysCfgPara(ucIndex);

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetSysCfgPara, Test_At_SetSysCfgPara_007)
{
    /* 变量初始化 */
    VOS_UINT32                      ulRst;
    VOS_UINT8                       ucIndex = 1;

    gucAtParaIndex              = 5;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 2;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 2;
    gastAtParaList[2].usParaLen = 1;
    gastAtParaList[2].ulParaValue = 0x3fffffff;
    gastAtParaList[3].usParaLen = 1;
    gastAtParaList[3].ulParaValue = 1;
    gastAtParaList[4].usParaLen = 1;
    gastAtParaList[4].ulParaValue = 2;
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId = MODEM_ID_0;

    AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucRoamFeature = AT_ROAM_FEATURE_OFF;

    /* 函数打桩 */
    MOCKER(AT_ConvertSysCfgRatOrderPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(AT_ConvertSysCfgExBandPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(TAF_MMA_SetSysCfgReq)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    ulRst = At_SetSysCfgPara(ucIndex);

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
class Test_At_SetAPara: public ::testing::Test
{
public:
    TAF_UINT8 ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex = 1;
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetAPara,Test_At_SetAPara_001)
{
    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetAPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAPara,Test_At_SetAPara_002)
{
    /* 变量初始化 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    MOCKER(TAF_AGENT_GetCallInfoReq)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_ERROR, At_SetAPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAPara,Test_At_SetAPara_003)
{
    /* 变量初始化 */
    VOS_UINT8                           ucNumOfCalls;

    ucNumOfCalls                = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    MOCKER(TAF_AGENT_GetCallInfoReq)
        .stubs()
        .with(any(), outBoundP(&ucNumOfCalls, (VOS_UINT32)sizeof(ucNumOfCalls), any()))
        .will(returnValue((VOS_UINT32)VOS_OK));

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_NO_CARRIER, At_SetAPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAPara,Test_At_SetAPara_004)
{
    /* 变量初始化 */
    VOS_UINT8                           ucNumOfCalls;
    TAFAGERNT_MN_CALL_INFO_STRU         astCallInfos[MN_CALL_MAX_NUM];

    PS_MEM_SET(&astCallInfos, 0, sizeof(astCallInfos));
    ucNumOfCalls                    = 1;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_CMD_NO_PARA;
    astCallInfos[0].enCallState     = MN_CALL_S_INCOMING;
    AT_GetModemCcCtxAddrFromClientId(ucIndex)->stS0TimeInfo.bTimerStart = TAF_FALSE;
    AT_GetModemCcCtxAddrFromClientId(ucIndex)->stS0TimeInfo.ucS0TimerLen    = 1;

    MOCKER(TAF_AGENT_GetCallInfoReq)
        .stubs()
        .with(any(), outBoundP(&ucNumOfCalls, (VOS_UINT32)sizeof(ucNumOfCalls)),outBoundP(astCallInfos, (VOS_UINT8)sizeof(astCallInfos)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_OK, At_SetAPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAPara,Test_At_SetAPara_005)
{
    /* 变量初始化 */
    VOS_UINT8                           ucNumOfCalls;
    TAFAGERNT_MN_CALL_INFO_STRU         astCallInfos[MN_CALL_MAX_NUM];

    PS_MEM_SET(&astCallInfos, 0, sizeof(astCallInfos));
    ucNumOfCalls                    = 1;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_CMD_NO_PARA;
    astCallInfos[0].enCallState     = MN_CALL_S_IDLE;
    AT_GetModemCcCtxAddrFromClientId(ucIndex)->stS0TimeInfo.bTimerStart = TAF_FALSE;
    AT_GetModemCcCtxAddrFromClientId(ucIndex)->stS0TimeInfo.ucS0TimerLen    = 1;

    MOCKER(TAF_AGENT_GetCallInfoReq)
        .stubs()
        .with(any(), outBoundP(&ucNumOfCalls, (VOS_UINT32)sizeof(ucNumOfCalls)),outBoundP(astCallInfos, (VOS_UINT8)sizeof(astCallInfos)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_NO_CARRIER, At_SetAPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAPara,Test_At_SetAPara_006)
{
    /* 变量初始化 */
    VOS_UINT8                           ucNumOfCalls;
    TAFAGERNT_MN_CALL_INFO_STRU         astCallInfos[MN_CALL_MAX_NUM];

    PS_MEM_SET(&astCallInfos, 0, sizeof(astCallInfos));
    ucNumOfCalls                    = 1;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_CMD_NO_PARA;
    astCallInfos[0].enCallState     = MN_CALL_S_IDLE;
    AT_GetModemCcCtxAddrFromClientId(ucIndex)->stS0TimeInfo.bTimerStart = TAF_TRUE;
    AT_GetModemCcCtxAddrFromClientId(ucIndex)->stS0TimeInfo.ucS0TimerLen    = 1;

    MOCKER(TAF_AGENT_GetCallInfoReq)
        .stubs()
        .with(any(), outBoundP(&ucNumOfCalls, (VOS_UINT32)sizeof(ucNumOfCalls)),outBoundP(astCallInfos, (VOS_UINT8)sizeof(astCallInfos)))
        .will(returnValue((VOS_UINT32)VOS_OK));
    MOCKER(MN_CALL_Sups)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, At_SetAPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetCpamPara: public ::testing::Test
{
public:
    TAF_UINT8 ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex = 1;
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCpamPara,Test_At_SetCpamPara_001)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_READ_CMD;

    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetCpamPara(ucIndex));

	GlobalMockObject::verify();
}


TEST_F(Test_At_SetCpamPara,Test_At_SetCpamPara_002)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 3;

    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetCpamPara(ucIndex));

	GlobalMockObject::verify();
}


TEST_F(Test_At_SetCpamPara,Test_At_SetCpamPara_003)
{


    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 0;

    gastAtParaList[0].usParaLen = 0;

    gastAtParaList[1].usParaLen = 0;

    MOCKER(TAF_MMA_QrySyscfgReq)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, At_SetCpamPara(ucIndex));

	GlobalMockObject::verify();
}



TEST_F(Test_At_SetCpamPara,Test_At_SetCpamPara_004)
{


    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 0;

    gastAtParaList[0].ulParaValue = MN_MMA_CPAM_RAT_TYPE_WCDMA;

    gastAtParaList[1].ulParaValue = MN_MMA_CPAM_RAT_PRIO_WCDMA;

    gastAtParaList[0].usParaLen = 1;

    gastAtParaList[1].usParaLen = 1;

    MOCKER(TAF_MMA_QrySyscfgReq)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, At_SetCpamPara(ucIndex));

	GlobalMockObject::verify();
}


class Test_AT_GetGuAccessPrioNvim: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {
    }
};



TEST_F(Test_AT_GetGuAccessPrioNvim,Test_AT_GetGuAccessPrioNvim_001)
{
    AT_SYSCFG_RAT_PRIO_ENUM_UINT8      enAcqorder = AT_SYSCFG_RAT_PRIO_BUTT;

	MOCKER(NV_GetLength)
		.stubs()
		.will(returnValue((VOS_UINT32)NV_OK));


    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue((VOS_UINT32)NV_ID_NOT_EXIST));

    AT_GetGuAccessPrioNvim(MODEM_ID_0, &enAcqorder);

    EXPECT_EQ((AT_SYSCFG_RAT_PRIO_ENUM_UINT8)AT_SYSCFG_RAT_PRIO_AUTO, enAcqorder);

	GlobalMockObject::verify();
}



TEST_F(Test_AT_GetGuAccessPrioNvim,Test_AT_GetGuAccessPrioNvim_002)
{
    AT_SYSCFG_RAT_PRIO_ENUM_UINT8      enAcqorder = AT_SYSCFG_RAT_PRIO_BUTT;
    NAS_MMA_NVIM_ACCESS_MODE_STRU      stAccessMode;

    stAccessMode.aucAccessMode[1] = AT_SYSCFG_RAT_PRIO_GSM;

	MOCKER(NV_GetLength)
		.stubs()
		.will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), eq((VOS_UINT16)en_NV_Item_MMA_AccessMode),outBoundP((VOS_VOID*)&stAccessMode,(VOS_UINT32)sizeof(stAccessMode)),any())
        .will(returnValue((VOS_UINT32)NV_OK));

    AT_GetGuAccessPrioNvim(MODEM_ID_0, &enAcqorder);

    EXPECT_EQ((AT_SYSCFG_RAT_PRIO_ENUM_UINT8)AT_SYSCFG_RAT_PRIO_GSM, enAcqorder);

	GlobalMockObject::verify();
}



class Test_AT_ConvertCpamRatOrderPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {
    }
};



TEST_F(Test_AT_ConvertCpamRatOrderPara,Test_AT_ConvertCpamRatOrderPara_001)
{
    MN_MMA_CPAM_RAT_TYPE_ENUM_UINT8     enMode;
    MN_MMA_CPAM_RAT_PRIO_ENUM_UINT8     enAcqorder;
    TAF_MMA_RAT_ORDER_STRU               stRatOrder;
    AT_SYSCFG_RAT_PRIO_ENUM_UINT8       enSyscfgRatPrio;
    AT_SYSCFG_RAT_PRIO_ENUM_UINT8       enNvimRatPrio;

    enAcqorder = MN_MMA_CPAM_RAT_PRIO_NO_CHANGE;
    enMode     = MN_MMA_CPAM_RAT_TYPE_WCDMA_GSM;
    enNvimRatPrio = AT_SYSCFG_RAT_PRIO_GSM;

    MOCKER(AT_GetGuAccessPrioNvim)
        .stubs()
        .with(any(),outBoundP((AT_SYSCFG_RAT_PRIO_ENUM_UINT8 *)&enNvimRatPrio, (VOS_UINT32)sizeof(enNvimRatPrio)));

    EXPECT_EQ((VOS_UINT32)AT_OK,AT_ConvertCpamRatOrderPara(AT_CLIENT_TAB_PCUI_INDEX, enMode, enAcqorder, &stRatOrder, &enSyscfgRatPrio));
    EXPECT_EQ((AT_SYSCFG_RAT_PRIO_ENUM_UINT8)AT_SYSCFG_RAT_PRIO_GSM,enSyscfgRatPrio);
    EXPECT_EQ((VOS_UINT8)TAF_PH_MAX_GU_RAT_NUM,stRatOrder.ucRatOrderNum);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, begin */
    EXPECT_EQ((TAF_MMA_RAT_TYPE_ENUM_UINT8)TAF_MMA_RAT_GSM,stRatOrder.aenRatOrder[0]);
    EXPECT_EQ((TAF_MMA_RAT_TYPE_ENUM_UINT8)TAF_MMA_RAT_WCDMA,stRatOrder.aenRatOrder[1]);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, end */

    GlobalMockObject::verify();
}



TEST_F(Test_AT_ConvertCpamRatOrderPara,Test_AT_ConvertCpamRatOrderPara_002)
{
    MN_MMA_CPAM_RAT_TYPE_ENUM_UINT8     enMode;
    MN_MMA_CPAM_RAT_PRIO_ENUM_UINT8     enAcqorder;
    TAF_MMA_RAT_ORDER_STRU               stRatOrder;
    AT_SYSCFG_RAT_PRIO_ENUM_UINT8       enSyscfgRatPrio;
    AT_SYSCFG_RAT_PRIO_ENUM_UINT8       enNvimRatPrio;

    enAcqorder = MN_MMA_CPAM_RAT_PRIO_NO_CHANGE;
    enMode     = MN_MMA_CPAM_RAT_TYPE_WCDMA_GSM;
    enNvimRatPrio = AT_SYSCFG_RAT_PRIO_AUTO;

    MOCKER(AT_GetGuAccessPrioNvim)
        .stubs()
        .with(any(),outBoundP((AT_SYSCFG_RAT_PRIO_ENUM_UINT8 *)&enNvimRatPrio, (VOS_UINT32)sizeof(enNvimRatPrio)));

    EXPECT_EQ(AT_OK,AT_ConvertCpamRatOrderPara(AT_CLIENT_TAB_PCUI_INDEX, enMode, enAcqorder, &stRatOrder, &enSyscfgRatPrio));
    EXPECT_EQ(AT_SYSCFG_RAT_PRIO_AUTO,enSyscfgRatPrio);
    EXPECT_EQ(TAF_PH_MAX_GU_RAT_NUM,stRatOrder.ucRatOrderNum);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, begin */
    EXPECT_EQ(TAF_MMA_RAT_GSM,stRatOrder.aenRatOrder[1]);
    EXPECT_EQ(TAF_MMA_RAT_WCDMA,stRatOrder.aenRatOrder[0]);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, end */

    GlobalMockObject::verify();
}



TEST_F(Test_AT_ConvertCpamRatOrderPara,Test_AT_ConvertCpamRatOrderPara_003)
{
    MN_MMA_CPAM_RAT_TYPE_ENUM_UINT8     enMode;
    MN_MMA_CPAM_RAT_PRIO_ENUM_UINT8     enAcqorder;
    TAF_MMA_RAT_ORDER_STRU               stRatOrder;
    AT_SYSCFG_RAT_PRIO_ENUM_UINT8       enSyscfgRatPrio;
    AT_SYSCFG_RAT_PRIO_ENUM_UINT8       enNvimRatPrio;

    enAcqorder = MN_MMA_CPAM_RAT_PRIO_WCDMA;
    enMode     = MN_MMA_CPAM_RAT_TYPE_GSM;
    enNvimRatPrio = AT_SYSCFG_RAT_PRIO_AUTO;

    MOCKER(AT_GetGuAccessPrioNvim)
        .stubs()
        .with(any(),outBoundP((AT_SYSCFG_RAT_PRIO_ENUM_UINT8 *)&enNvimRatPrio, (VOS_UINT32)sizeof(enNvimRatPrio)));

    EXPECT_EQ(AT_OK,AT_ConvertCpamRatOrderPara(AT_CLIENT_TAB_PCUI_INDEX, enMode, enAcqorder, &stRatOrder, &enSyscfgRatPrio));
    EXPECT_EQ(AT_SYSCFG_RAT_PRIO_WCDMA,enSyscfgRatPrio);
    EXPECT_EQ(1,stRatOrder.ucRatOrderNum);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, begin */
    EXPECT_EQ(TAF_MMA_RAT_GSM,stRatOrder.aenRatOrder[0]);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, end */

    GlobalMockObject::verify();
}



TEST_F(Test_AT_ConvertCpamRatOrderPara,Test_AT_ConvertCpamRatOrderPara_004)
{
    MN_MMA_CPAM_RAT_TYPE_ENUM_UINT8     enMode;
    MN_MMA_CPAM_RAT_PRIO_ENUM_UINT8     enAcqorder;
    TAF_MMA_RAT_ORDER_STRU               stRatOrder;
    AT_SYSCFG_RAT_PRIO_ENUM_UINT8       enSyscfgRatPrio;
    AT_SYSCFG_RAT_PRIO_ENUM_UINT8       enNvimRatPrio;

    enAcqorder = MN_MMA_CPAM_RAT_PRIO_WCDMA;
    enMode     = MN_MMA_CPAM_RAT_TYPE_WCDMA;
    enNvimRatPrio = AT_SYSCFG_RAT_PRIO_AUTO;

    MOCKER(AT_GetGuAccessPrioNvim)
        .stubs()
        .with(any(),outBoundP((AT_SYSCFG_RAT_PRIO_ENUM_UINT8 *)&enNvimRatPrio, (VOS_UINT32)sizeof(enNvimRatPrio)));

    EXPECT_EQ(AT_OK,AT_ConvertCpamRatOrderPara(AT_CLIENT_TAB_PCUI_INDEX, enMode, enAcqorder, &stRatOrder, &enSyscfgRatPrio));
    EXPECT_EQ(AT_SYSCFG_RAT_PRIO_WCDMA,enSyscfgRatPrio);
    EXPECT_EQ(1,stRatOrder.ucRatOrderNum);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, begin */
    EXPECT_EQ(TAF_MMA_RAT_WCDMA,stRatOrder.aenRatOrder[0]);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, end */

    GlobalMockObject::verify();
}


TEST_F(Test_AT_ConvertCpamRatOrderPara,Test_AT_ConvertCpamRatOrderPara_005)
{
    MN_MMA_CPAM_RAT_TYPE_ENUM_UINT8     enMode;
    MN_MMA_CPAM_RAT_PRIO_ENUM_UINT8     enAcqorder;
    TAF_MMA_RAT_ORDER_STRU               stRatOrder;
    AT_SYSCFG_RAT_PRIO_ENUM_UINT8       enSyscfgRatPrio;
    AT_MODEM_SPT_RAT_STRU              *pstSptRatList = VOS_NULL_PTR;

    pstSptRatList = AT_GetSptRatFromModemId(0);
    pstSptRatList->ucPlatformSptGsm = VOS_TRUE;
    pstSptRatList->ucPlatformSptLte = VOS_TRUE;
    pstSptRatList->ucPlatformSptWcdma = VOS_TRUE;

    enAcqorder = MN_MMA_CPAM_RAT_PRIO_WCDMA;
    enMode     = MN_MMA_CPAM_RAT_TYPE_NOCHANGE;

    EXPECT_EQ(AT_ERROR,AT_ConvertCpamRatOrderPara(AT_CLIENT_BUTT, enMode, enAcqorder, &stRatOrder, &enSyscfgRatPrio));

    GlobalMockObject::verify();
}


class Test_At_PortSwitchSndMsg: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_PortSwitchSndMsg,Test_At_PortSwitchSndMsg_001)
{
    TAF_UINT32                          ulSwitchMode;

    ulSwitchMode                        = OM_PORT_SWITCH_MODEM2AP;

    //mocker
    MOCKER(V_AllocMsg)
        .stubs()
        .will(returnValue((MsgBlock*)VOS_NULL_PTR));

    /* 调用被测函数并结果验证 */
    EXPECT_EQ(AT_ERROR, At_PortSwitchSndMsg(ulSwitchMode));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_PortSwitchSndMsg,Test_At_PortSwitchSndMsg_002)
{
    TAF_UINT32                          ulSwitchMode;
    OM_PORT_SWITCH_MSG_STRU             stMsg;

    ulSwitchMode                        = OM_PORT_SWITCH_MODEM2AP;

    //mocker
    MOCKER(V_AllocMsg)
        .stubs()
        .will(returnValue((MsgBlock*)&stMsg));

    MOCKER(V_SendMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    /* 调用被测函数并结果验证 */
    EXPECT_EQ(AT_ERROR, At_PortSwitchSndMsg(ulSwitchMode));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_PortSwitchSndMsg,Test_At_PortSwitchSndMsg_003)
{
    TAF_UINT32                          ulSwitchMode;
    OM_PORT_SWITCH_MSG_STRU             stMsg;

    ulSwitchMode                        = OM_PORT_SWITCH_MODEM2AP;

    //mocker
    MOCKER(V_AllocMsg)
        .stubs()
        .will(returnValue((MsgBlock*)&stMsg));

    MOCKER(V_SendMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    /* 调用被测函数并结果验证 */
    EXPECT_EQ(AT_OK, At_PortSwitchSndMsg(ulSwitchMode));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
class Test_AT_SetSARReduction: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
        g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_CMD_NO_PARA;
        gucAtParaIndex                  = 0;
        gastAtParaList[0].ulParaValue   = 0;
    }
    void TearDown()
    {
        g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_CMD_NO_PARA;
        gucAtParaIndex                  = 0;
        gastAtParaList[0].ulParaValue   = 0;
    }
};


TEST_F(Test_AT_SetSARReduction,Test_AT_SetSARReduction_001)
{
    TAF_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex=0;

    //设置全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    //调用被测函数
    ulRslt  = AT_SetSARReduction(ucIndex);

    /* 调用被测函数并结果验证 */
    EXPECT_EQ(AT_ERROR, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetSARReduction,Test_AT_SetSARReduction_002)
{
    TAF_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex=0;

    //设置全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 2;

    //调用被测函数
    ulRslt  = AT_SetSARReduction(ucIndex);

    /* 调用被测函数并结果验证 */
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetSARReduction,Test_AT_SetSARReduction_003)
{
    TAF_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex=0;

    //设置全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 1;

    //mocker
    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    //调用被测函数
    ulRslt  = AT_SetSARReduction(ucIndex);

    /* 调用被测函数并结果验证 */
    EXPECT_EQ(AT_ERROR, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetSARReduction,Test_AT_SetSARReduction_004)
{
    TAF_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex=0;
    VOS_UINT16                          usUETestMode=VOS_TRUE;

    //设置全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 1;

    //mocker
    MOCKER(NV_ReadEx)
        .stubs()
        //.with(any(),any(),outBoundP(&usUETestMode))
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(AT_GetModemIdFromClient)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    //调用被测函数
    ulRslt  = AT_SetSARReduction(ucIndex);

    /* 调用被测函数并结果验证 */
    EXPECT_EQ(AT_ERROR, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetSARReduction,Test_AT_SetSARReduction_005)
{
    TAF_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex=0;
    VOS_UINT16                          usUETestMode=VOS_FALSE;
	VOS_UINT16                          usAntState;

    //设置全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 1;
	usAntState					= AT_ANT_CONDUCTION_MODE;

    //mocker
    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), any(),outBoundP((VOS_VOID*)&usUETestMode, (VOS_UINT32)sizeof(usUETestMode)),any())
        .will(returnValue((VOS_UINT32)VOS_OK));

	MOCKER(AT_GetModemIdFromClient)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

	MOCKER(TAF_AGENT_GetAntState)
		.stubs()
		.with(any(), outBoundP((VOS_UINT16*)&usAntState, (VOS_UINT32)sizeof(usAntState)))
		.will(returnValue((VOS_UINT32)VOS_TRUE));

    //调用被测函数
    ulRslt  = AT_SetSARReduction(ucIndex);

    /* 调用被测函数并结果验证 */
    EXPECT_EQ(AT_ERROR, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetSARReduction,Test_AT_SetSARReduction_006)
{
    TAF_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex=0;
    VOS_UINT16                          usUETestMode=VOS_FALSE;
	VOS_UINT16                          usAntState;

    //设置全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 1;
	usAntState					= AT_ANT_AIRWIRE_MODE;

	//mocker
    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), any(),outBoundP((VOS_VOID*)&usUETestMode, (VOS_UINT32)sizeof(usUETestMode)),any())
        .will(returnValue((VOS_UINT32)VOS_OK));

	MOCKER(AT_GetModemIdFromClient)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

	MOCKER(TAF_AGENT_GetAntState)
		.stubs()
		.with(any(), outBoundP((VOS_UINT16*)&usAntState, (VOS_UINT32)sizeof(usAntState)))
		.will(returnValue((VOS_UINT32)VOS_TRUE));


    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    //调用被测函数
    ulRslt  = AT_SetSARReduction(ucIndex);

    /* 调用被测函数并结果验证 */
    EXPECT_EQ(AT_ERROR, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetSARReduction,Test_AT_SetSARReduction_007)
{
    TAF_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex=0;
    VOS_UINT16                          usUETestMode=VOS_FALSE;
	VOS_UINT16							usAntState;

    //设置全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 1;

    //mocker
    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), any(),outBoundP((VOS_VOID*)&usUETestMode, (VOS_UINT32)sizeof(usUETestMode)),any())
        .will(returnValue((VOS_UINT32)VOS_OK));

	usAntState = 0;

	MOCKER(AT_GetModemIdFromClient)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(TAF_AGENT_GetAntState)
        .stubs()
		.with(any(),outBoundP((VOS_UINT16*)&usAntState, sizeof(usAntState)))
		.will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    //调用被测函数
    ulRslt  = AT_SetSARReduction(ucIndex);

    /* 调用被测函数并结果验证 */
    EXPECT_EQ(AT_OK, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
class Test_At_CheckPBString: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};

#if 0 /* 内存重复拷贝会出问题 */

TEST_F(Test_At_CheckPBString,Test_At_CheckPBString_001)
{
    TAF_UINT32                          ulRslt;
    TAF_UINT8                           aucData[]={'(','0','7','5','5','-','2','8','5','6','0','0','?','!'};
    TAF_UINT16                          usLen=sizeof(aucData);

	//mocker

/*
    MOCKER(V_MemCpy)
        .stubs()
        .will(returnValue((VOS_VOID *)aucData));
*/
    /* 调用被测函数并结果验证 */
    ulRslt = At_CheckPBString((TAF_UINT8*)aucData, &usLen);

    EXPECT_EQ(AT_FAILURE, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_CheckPBString,Test_At_CheckPBString_002)
{
    TAF_UINT32                          ulRslt;
    TAF_UINT8                           aucData[]={'(',')','"','*','#','-','2','8','5','6','0','0','?',',','P','p'};
    TAF_UINT16                          usLen=sizeof(aucData);

	//mocker
/*
    MOCKER(V_MemCpy)
        .stubs()
        .will(returnValue((VOS_VOID *)aucData));
*/
    /* 调用被测函数并结果验证 */
    ulRslt = At_CheckPBString((TAF_UINT8*)aucData, &usLen);

    EXPECT_EQ(AT_SUCCESS, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#endif
class Test_At_SetMaxLockTimes: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {
    }
};


TEST_F(Test_At_SetMaxLockTimes, Test_At_SetMaxLockTimes_001)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_TEST_CMD;

    EXPECT_EQ(At_SetMaxLockTimes(0), AT_DEVICE_OTHER_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetMaxLockTimes, Test_At_SetMaxLockTimes_002)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 2;

    EXPECT_EQ(At_SetMaxLockTimes(0), AT_DEVICE_OTHER_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetMaxLockTimes, Test_At_SetMaxLockTimes_003)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 1;
    g_bAtDataLocked             = VOS_TRUE;

    EXPECT_EQ(At_SetMaxLockTimes(0), AT_DATA_UNLOCK_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetMaxLockTimes, Test_At_SetMaxLockTimes_004)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 1;
    g_bAtDataLocked             = VOS_FALSE;

    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    EXPECT_EQ(At_SetMaxLockTimes(0), AT_WAIT_ASYNC_RETURN);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetMaxLockTimes, Test_At_SetMaxLockTimes_005)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 1;
    g_bAtDataLocked             = VOS_FALSE;

    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    EXPECT_EQ(At_SetMaxLockTimes(0), AT_DEVICE_OTHER_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetCpbsPara: public ::testing::Test
{
public:
    VOS_UINT8       ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                     = 0;
        gucAtParaIndex              = 0;
        gastAtParaList[0].usParaLen = 0;
        g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_BUTT;
    }

    void TearDown()
    {
        ucIndex                     = 0;
        gucAtParaIndex              = 0;
        gastAtParaList[0].usParaLen =0;
        g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_BUTT;
    }
};


TEST_F(Test_At_SetCpbsPara,Test_At_SetCpbsPara_001)
{
    /* 变量初始化 */
    VOS_UINT32                          ulRslt;
    TAF_UINT8                           ucIndex;

    ucIndex                                           = 0;
    gastAtParaList[0].usParaLen                       = 0;

    /* 调用被测函数并结果验证 */
    ulRslt = At_SetCpbsPara(ucIndex);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCpbsPara,Test_At_SetCpbsPara_002)
{
    /* 变量初始化 */
    VOS_UINT32                          ulRslt;
    TAF_UINT8                           ucIndex;

    ucIndex                                           = 0;
    gastAtParaList[0].usParaLen                       = 2;
    gucAtParaIndex                                    = 3;

    /* 调用被测函数并结果验证 */
    ulRslt = At_SetCpbsPara(ucIndex);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetCpbsPara,Test_At_SetCpbsPara_003)
{
    /* 变量初始化 */
    VOS_UINT32                          ulRslt;
    TAF_UINT8                           ucIndex;

    ucIndex                                           = 0;
    gastAtParaList[0].usParaLen                       = 2;
    gucAtParaIndex                                    = 1;
    memcpy(gastAtParaList[0].aucPara, gastAtStringTab[AT_STRING_ON].pucText,4);
    /* 函数打桩 */
    MOCKER(SI_PB_Set)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    /* 调用被测函数并结果验证 */
    ulRslt = At_SetCpbsPara(ucIndex);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetCpbsPara,Test_At_SetCpbsPara_004)
{
    /* 变量初始化 */
    VOS_UINT32                          ulRslt;
    TAF_UINT8                           ucIndex;

    ucIndex                                           = 0;
    gastAtParaList[0].usParaLen                       = 2;
    gucAtParaIndex                                    = 1;
    memcpy(gastAtParaList[0].aucPara, gastAtStringTab[AT_STRING_SM].pucText,4);
    /* 函数打桩 */
    MOCKER(SI_PB_Set)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    /* 调用被测函数并结果验证 */
    ulRslt = At_SetCpbsPara(ucIndex);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCpbsPara,Test_At_SetCpbsPara_005)
{
    /* 变量初始化 */
    VOS_UINT32                          ulRslt;
    TAF_UINT8                           ucIndex;

    ucIndex                                           = 0;
    gastAtParaList[0].usParaLen                       = 2;
    gucAtParaIndex                                    = 1;
    memcpy(gastAtParaList[0].aucPara, gastAtStringTab[AT_STRING_FD].pucText,4);
    /* 函数打桩 */
    MOCKER(SI_PB_Set)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    /* 调用被测函数并结果验证 */
    ulRslt = At_SetCpbsPara(ucIndex);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCpbsPara,Test_At_SetCpbsPara_006)
{
    /* 变量初始化 */
    VOS_UINT32                          ulRslt;
    TAF_UINT8                           ucIndex;

    ucIndex                                           = 0;
    gastAtParaList[0].usParaLen                       = 2;
    gucAtParaIndex                                    = 1;
    memcpy(gastAtParaList[0].aucPara, gastAtStringTab[AT_STRING_EN].pucText,4);
    /* 函数打桩 */
    MOCKER(SI_PB_Set)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    /* 调用被测函数并结果验证 */
    ulRslt = At_SetCpbsPara(ucIndex);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCpbsPara,Test_At_SetCpbsPara_007)
{
    /* 变量初始化 */
    VOS_UINT32                          ulRslt;
    TAF_UINT8                           ucIndex;

    ucIndex                                           = 0;
    gastAtParaList[0].usParaLen                       = 2;
    gucAtParaIndex                                    = 1;
    memcpy(gastAtParaList[0].aucPara, gastAtStringTab[AT_STRING_BD].pucText,4);
    /* 函数打桩 */
    MOCKER(SI_PB_Set)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    /* 调用被测函数并结果验证 */
    ulRslt = At_SetCpbsPara(ucIndex);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCpbsPara,Test_At_SetCpbsPara_008)
{
    /* 变量初始化 */
    VOS_UINT32                          ulRslt;
    TAF_UINT8                           ucIndex;

    ucIndex                                           = 0;
    gastAtParaList[0].usParaLen                       = 2;
    gucAtParaIndex                                    = 1;
    memcpy(gastAtParaList[0].aucPara, gastAtStringTab[AT_STRING_BD].pucText,4);
    /* 函数打桩 */
    MOCKER(SI_PB_Set)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    /* 调用被测函数并结果验证 */
    ulRslt = At_SetCpbsPara(ucIndex);

    EXPECT_EQ(AT_ERROR, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCpbsPara,Test_At_SetCpbsPara_009)
{
    /* 变量初始化 */
    VOS_UINT32                          ulRslt;
    TAF_UINT8                           ucIndex;

    ucIndex                                           = 0;
    gastAtParaList[0].usParaLen                       = 2;
    gucAtParaIndex                                    = 1;
    memcpy(gastAtParaList[0].aucPara, gastAtStringTab[AT_STRING_IP].pucText,4);

    /* 调用被测函数并结果验证 */
    ulRslt = At_SetCpbsPara(ucIndex);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_CheckCpinPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_CheckCpinPara, Test_At_CheckCpinPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucSystemConfig;

    // 参数初始化
    ucSystemConfig              = SYSTEM_APP_MP;

    // 初始化全局变量;
    gastAtParaList[0].usParaLen = TAF_PH_PINCODELENMIN;
    gastAtParaList[1].usParaLen = TAF_PH_PINCODELENMIN;
    gucAtParaIndex              = 2;

    // MOCKER操作;
    MOCKER(AT_GetSystemAppConfigAddr)
        .stubs()
        .will(returnValue((VOS_UINT8 *)&ucSystemConfig));

    // 调用被测函数
    ulRet = At_CheckCpinPara();

    // 执行检查
    EXPECT_EQ(AT_SUCCESS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_CheckCpinPara, Test_At_CheckCpinPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucSystemConfig;

    // 参数初始化
    ucSystemConfig              = SYSTEM_APP_MP;

    // 初始化全局变量;
    gastAtParaList[0].usParaLen = 0;
    gastAtParaList[1].usParaLen = TAF_PH_PINCODELENMIN;
    gucAtParaIndex              = 2;

    // MOCKER操作;
    MOCKER(AT_GetSystemAppConfigAddr)
        .stubs()
        .will(returnValue((VOS_UINT8 *)&ucSystemConfig));

    // 调用被测函数
    ulRet = At_CheckCpinPara();

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_CheckCpinPara, Test_At_CheckCpinPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucSystemConfig;

    // 参数初始化
    ucSystemConfig              = SYSTEM_APP_MP;

    // 初始化全局变量;
    gastAtParaList[0].usParaLen = TAF_PH_PINCODELENMIN;
    gastAtParaList[1].usParaLen = TAF_PH_PINCODELENMIN;
    gucAtParaIndex              = 3;

    // MOCKER操作;
    MOCKER(AT_GetSystemAppConfigAddr)
        .stubs()
        .will(returnValue((VOS_UINT8 *)&ucSystemConfig));

    // 调用被测函数
    ulRet = At_CheckCpinPara();

    // 执行检查
    EXPECT_EQ(AT_TOO_MANY_PARA, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_CheckCpinPara, Test_At_CheckCpinPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucSystemConfig;

    // 参数初始化
    ucSystemConfig              = SYSTEM_APP_MP;

    // 初始化全局变量;
    gastAtParaList[0].usParaLen = TAF_PH_UNLOCKCODELEN;
    gastAtParaList[1].usParaLen = TAF_PH_PINCODELENMIN;
    gucAtParaIndex              = 1;

    // MOCKER操作;
    MOCKER(AT_GetSystemAppConfigAddr)
        .stubs()
        .will(returnValue((VOS_UINT8 *)&ucSystemConfig));

    // 调用被测函数
    ulRet = At_CheckCpinPara();

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_CheckCpinPara, Test_At_CheckCpinPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucSystemConfig;

    // 参数初始化
    ucSystemConfig              = SYSTEM_APP_MP;

    // 初始化全局变量;
    gastAtParaList[0].usParaLen = TAF_PH_PINCODELENMIN;
    gastAtParaList[1].usParaLen = TAF_PH_UNLOCKCODELEN;
    gucAtParaIndex              = 2;

    // MOCKER操作;
    MOCKER(AT_GetSystemAppConfigAddr)
        .stubs()
        .will(returnValue((VOS_UINT8 *)&ucSystemConfig));

    // 调用被测函数
    ulRet = At_CheckCpinPara();

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_CheckCpinPara, Test_At_CheckCpinPara_006)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucSystemConfig;

    // 参数初始化
    ucSystemConfig              = SYSTEM_APP_ANDROID;

    // 初始化全局变量;
    gastAtParaList[0].usParaLen = TAF_PH_UNLOCKCODELEN + 1;
    gucAtParaIndex              = 1;

    // MOCKER操作;
    MOCKER(AT_GetSystemAppConfigAddr)
        .stubs()
        .will(returnValue((VOS_UINT8 *)&ucSystemConfig));

    // 调用被测函数
    ulRet = At_CheckCpinPara();

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_CheckCpinPara, Test_At_CheckCpinPara_007)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucSystemConfig;

    // 参数初始化
    ucSystemConfig              = SYSTEM_APP_ANDROID;

    // 初始化全局变量;
    gastAtParaList[0].usParaLen = TAF_PH_PINCODELENMIN;
    gastAtParaList[1].usParaLen = TAF_PH_UNLOCKCODELEN;
    gucAtParaIndex              = 2;

    // MOCKER操作;
    MOCKER(AT_GetSystemAppConfigAddr)
        .stubs()
        .will(returnValue((VOS_UINT8 *)&ucSystemConfig));

    // 调用被测函数
    ulRet = At_CheckCpinPara();

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_CheckCpinPara, Test_At_CheckCpinPara_008)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucSystemConfig;

    // 参数初始化
    ucSystemConfig              = SYSTEM_APP_ANDROID;

    // 初始化全局变量;
    gastAtParaList[0].usParaLen = TAF_PH_UNLOCKCODELEN;
    gucAtParaIndex              = 1;

    // MOCKER操作;
    MOCKER(AT_GetSystemAppConfigAddr)
        .stubs()
        .will(returnValue((VOS_UINT8 *)&ucSystemConfig));

    // 调用被测函数
    ulRet = At_CheckCpinPara();

    // 执行检查
    EXPECT_EQ(AT_SUCCESS, ulRet);

    GlobalMockObject::verify();
}


VOS_VOID AT_InitSetCtx(VOS_VOID)
{
    VOS_UINT8                           ucIndex;
    VOS_UINT8                           ucLoop;

    PS_MEM_SET(gastAtClientTab, 0x00, (AT_MAX_CLIENT_NUM * sizeof(AT_CLIENT_MANAGE_STRU)));

    /* 初始化PCUI通道 */
    ucIndex = AT_CLIENT_TAB_PCUI_INDEX;

    /* 填写用户表项 */
    gastAtClientTab[ucIndex].usClientId      = AT_CLIENT_ID_PCUI;
    gastAtClientTab[ucIndex].ucPortNo        = AT_USB_COM_PORT_NO;
    gastAtClientTab[ucIndex].UserType        = AT_USBCOM_USER;
    gastAtClientTab[ucIndex].ucUsed          = AT_CLIENT_USED;

    gastAtClientTab[ucIndex].Mode            = AT_CMD_MODE;
    gastAtClientTab[ucIndex].IndMode         = AT_IND_MODE;
    gastAtClientTab[ucIndex].DataMode        = AT_DATA_BUTT_MODE;
    gastAtClientTab[ucIndex].DataState       = AT_DATA_STOP_STATE;
    gastAtClientTab[ucIndex].CmdCurrentOpt   = AT_CMD_CURRENT_OPT_BUTT;
    g_stParseContext[ucIndex].ucClientStatus = AT_FW_CLIENT_STATUS_READY;

#if (FEATURE_ON == FEATURE_AT_HSIC)
    /* 初始化HSIC通道 */
    for (ucLoop = 0; ucLoop < AT_HSIC_AT_CHANNEL_MAX; ucLoop++)
    {
        ucIndex = g_astAtHsicCtx[ucLoop].ucAtClientTabIdx;

        /* 填写用户表项 */
        gastAtClientTab[ucIndex].usClientId      = g_astAtHsicCtx[ucLoop].enAtClientId;
        gastAtClientTab[ucIndex].ucPortNo        = g_astAtHsicCtx[ucLoop].ucHsicPort;
        gastAtClientTab[ucIndex].UserType        = g_astAtHsicCtx[ucLoop].ucHsicUser;
        gastAtClientTab[ucIndex].ucUsed          = AT_CLIENT_USED;

        gastAtClientTab[ucIndex].Mode            = AT_CMD_MODE;
        gastAtClientTab[ucIndex].IndMode         = AT_IND_MODE;
        gastAtClientTab[ucIndex].DataMode        = AT_DATA_BUTT_MODE;
        gastAtClientTab[ucIndex].DataState       = AT_DATA_STOP_STATE;
        gastAtClientTab[ucIndex].CmdCurrentOpt   = AT_CMD_CURRENT_OPT_BUTT;
        g_stParseContext[ucIndex].ucClientStatus = AT_FW_CLIENT_STATUS_READY;

    }
#endif
    /* 初始化参数列表 */
    gucAtParaIndex                  = 0;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_CMD_NO_PARA;
    PS_MEM_SET(gastAtParaList, 0x00, (AT_MAX_PARA_NUMBER * sizeof(AT_PARSE_PARA_TYPE_STRU)));

    return;

}
class Test_AT_SetHukPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        AT_InitSetCtx();
    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetHukPara, Test_AT_SetHukPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_PCUI;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].aucPara[0]    = '1';

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    // 调用被测函数
    ulRet = AT_SetHukPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetHukPara, Test_AT_SetHukPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    gucAtParaIndex              = 0;

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetHukPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetHukPara, Test_AT_SetHukPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].aucPara[0]    = '1';
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 1;
    gastAtParaList[1].aucPara[0]    = '1';

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetHukPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_TOO_MANY_PARA, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetHukPara, Test_AT_SetHukPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 0;

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetHukPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetHukPara, Test_AT_SetHukPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 0;
    gastAtParaList[0].aucPara[0]    = '1';

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetHukPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetHukPara, Test_AT_SetHukPara_006)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    VOS_CHAR                           *pcHuk;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;
    pcHuk   = "11223344112233441122334411223344";

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = VOS_StrLen(pcHuk);
    PS_MEM_CPY(gastAtParaList[0].aucPara, pcHuk, (VOS_StrLen(pcHuk) + 1));

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq((MN_CLIENT_ID_T)gastAtClientTab[ucIndex].usClientId),
              eq((MN_OPERATION_ID_T)gastAtClientTab[ucIndex].opId),
              eq((VOS_UINT16)DRV_AGENT_HUK_SET_REQ),
              any(),
              eq((VOS_UINT32)sizeof(DRV_AGENT_HUK_SET_REQ_STRU)),
              eq((VOS_UINT32)WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetHukPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ(AT_CMD_HUK_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetHukPara, Test_AT_SetHukPara_007)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    VOS_CHAR                           *pcHuk;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;
    pcHuk   = "11223344112233441122334411223344";

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = VOS_StrLen(pcHuk);
    PS_MEM_CPY(gastAtParaList[0].aucPara, pcHuk, (VOS_StrLen(pcHuk) + 1));

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq((MN_CLIENT_ID_T)gastAtClientTab[ucIndex].usClientId),
              eq((MN_OPERATION_ID_T)gastAtClientTab[ucIndex].opId),
              eq((VOS_UINT16)DRV_AGENT_HUK_SET_REQ),
              any(),
              eq((VOS_UINT32)sizeof(DRV_AGENT_HUK_SET_REQ_STRU)),
              eq((VOS_UINT32)WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetHukPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetHukPara, Test_AT_SetHukPara_008)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    VOS_CHAR                           *pcHuk;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;
    pcHuk   = "1122334411223344112233441122334*";

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = VOS_StrLen(pcHuk);
    PS_MEM_CPY(gastAtParaList[0].aucPara, pcHuk, (VOS_StrLen(pcHuk) + 1));

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetHukPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetIdentifyStartPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        AT_InitSetCtx();
    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetIdentifyStartPara, Test_AT_SetIdentifyStartPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_PCUI;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    gucAtParaIndex              = 0;

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    // 调用被测函数
    ulRet = AT_SetIdentifyStartPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIdentifyStartPara, Test_AT_SetIdentifyStartPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].aucPara[0]    = '1';

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetIdentifyStartPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIdentifyStartPara, Test_AT_SetIdentifyStartPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_CMD_NO_PARA;
    gucAtParaIndex                  = 0;

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

	MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulRet = AT_SetIdentifyStartPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN,     ulRet);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_IDENTIFYSTART_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIdentifyStartPara, Test_AT_SetIdentifyStartPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_CMD_NO_PARA;
    gucAtParaIndex                  = 0;

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

	MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    // 调用被测函数
    ulRet = AT_SetIdentifyStartPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}



class Test_AT_SetIdentifyEndPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        AT_InitSetCtx();
    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetIdentifyEndPara, Test_AT_SetIdentifyEndPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_PCUI;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].aucPara[0]    = '1';

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    // 调用被测函数
    ulRet = AT_SetIdentifyEndPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIdentifyEndPara, Test_AT_SetIdentifyEndPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].aucPara[0]    = '1';
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 1;
    gastAtParaList[1].aucPara[0]    = '1';

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetIdentifyEndPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_TOO_MANY_PARA, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIdentifyEndPara, Test_AT_SetIdentifyEndPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_CMD_NO_PARA;
    gucAtParaIndex                  = 0;

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetIdentifyEndPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIdentifyEndPara, Test_AT_SetIdentifyEndPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].aucPara[0]    = '1';

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetIdentifyEndPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIdentifyEndPara, Test_AT_SetIdentifyEndPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex         = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = AT_RSA_CIPHERTEXT_PARA_LEN;
    PS_MEM_SET(gastAtParaList[0].aucPara, '1', AT_RSA_CIPHERTEXT_PARA_LEN);

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq(gastAtClientTab[ucIndex].usClientId),
              eq(gastAtClientTab[ucIndex].opId),
              eq((VOS_UINT16)DRV_AGENT_IDENTIFYEND_SET_REQ),
              any(),
              eq((VOS_UINT32)sizeof(DRV_AGENT_IDENTIFYEND_SET_REQ_STRU)),
              eq((VOS_UINT32)WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetIdentifyEndPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ(AT_CMD_IDENTIFYEND_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIdentifyEndPara, Test_AT_SetIdentifyEndPara_006)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex         = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = AT_RSA_CIPHERTEXT_PARA_LEN;
    PS_MEM_SET(gastAtParaList[0].aucPara, '1', AT_RSA_CIPHERTEXT_PARA_LEN);

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq(gastAtClientTab[ucIndex].usClientId),
              eq(gastAtClientTab[ucIndex].opId),
              eq((VOS_UINT16)DRV_AGENT_IDENTIFYEND_SET_REQ),
              any(),
              eq((VOS_UINT32)sizeof(DRV_AGENT_IDENTIFYEND_SET_REQ_STRU)),
              eq((VOS_UINT32)WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetIdentifyEndPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIdentifyEndPara, Test_AT_SetIdentifyEndPara_007)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = AT_RSA_CIPHERTEXT_PARA_LEN;
    PS_MEM_SET(gastAtParaList[0].aucPara, '1', AT_RSA_CIPHERTEXT_PARA_LEN);

    // MOCKER操作;
    MOCKER(At_AsciiNum2HexString)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetIdentifyEndPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetPhonePhynumPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        AT_InitSetCtx();
    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetPhonePhynumPara, Test_AT_SetPhonePhynumPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_PCUI;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 2;
    gastAtParaList[0].aucPara[0]    = 'S';
    gastAtParaList[0].aucPara[1]    = 'N';
    gastAtParaList[1].usParaLen     = DRV_AGENT_RSA_CIPHERTEXT_LEN;
    PS_MEM_SET(gastAtParaList[1].aucPara, '0', AT_RSA_CIPHERTEXT_PARA_LEN);

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    // 调用被测函数
    ulRet = AT_SetPhonePhynumPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPhonePhynumPara, Test_AT_SetPhonePhynumPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_CMD_NO_PARA;
    gucAtParaIndex                  = 0;

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPhonePhynumPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPhonePhynumPara, Test_AT_SetPhonePhynumPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 3;
    gastAtParaList[0].usParaLen     = 2;
    gastAtParaList[0].aucPara[0]    = 'S';
    gastAtParaList[0].aucPara[1]    = 'N';
    gastAtParaList[1].usParaLen     = DRV_AGENT_RSA_CIPHERTEXT_LEN;
    PS_MEM_SET(gastAtParaList[1].aucPara, '0', AT_RSA_CIPHERTEXT_PARA_LEN);
    gastAtParaList[2].usParaLen     = 1;
    gastAtParaList[2].aucPara[0]    = '1';

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPhonePhynumPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_TOO_MANY_PARA, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPhonePhynumPara, Test_AT_SetPhonePhynumPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 2;
    gastAtParaList[0].aucPara[0]    = 'S';
    gastAtParaList[0].aucPara[1]    = 'M';
    gastAtParaList[1].usParaLen     = DRV_AGENT_RSA_CIPHERTEXT_LEN;
    PS_MEM_SET(gastAtParaList[1].aucPara, '0', AT_RSA_CIPHERTEXT_PARA_LEN);

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPhonePhynumPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_PERSONALIZATION_PH_PHYNUM_TYPE_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPhonePhynumPara, Test_AT_SetPhonePhynumPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 2;
    gastAtParaList[0].aucPara[0]    = 'S';
    gastAtParaList[0].aucPara[1]    = 'N';
    gastAtParaList[1].usParaLen     = AT_RSA_CIPHERTEXT_PARA_LEN;
    PS_MEM_SET(gastAtParaList[1].aucPara, 0x01, AT_RSA_CIPHERTEXT_PARA_LEN);

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPhonePhynumPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPhonePhynumPara, Test_AT_SetPhonePhynumPara_006)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 2;
    gastAtParaList[0].aucPara[0]    = 'S';
    gastAtParaList[0].aucPara[1]    = 'N';
    gastAtParaList[1].usParaLen     = AT_RSA_CIPHERTEXT_PARA_LEN;
    PS_MEM_SET(gastAtParaList[1].aucPara, '1', AT_RSA_CIPHERTEXT_PARA_LEN);

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq(gastAtClientTab[ucIndex].usClientId),
              eq(gastAtClientTab[ucIndex].opId),
              eq((VOS_UINT16)DRV_AGENT_PHONEPHYNUM_SET_REQ),
              any(),
              eq((VOS_UINT32)sizeof(DRV_AGENT_PHONEPHYNUM_SET_REQ_STRU)),
              eq((VOS_UINT32)WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPhonePhynumPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ(AT_CMD_PHONEPHYNUM_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPhonePhynumPara, Test_AT_SetPhonePhynumPara_007)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 2;
    gastAtParaList[0].aucPara[0]    = 'S';
    gastAtParaList[0].aucPara[1]    = 'N';
    gastAtParaList[1].usParaLen     = AT_RSA_CIPHERTEXT_PARA_LEN;
    PS_MEM_SET(gastAtParaList[1].aucPara, '1', AT_RSA_CIPHERTEXT_PARA_LEN);

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq(gastAtClientTab[ucIndex].usClientId),
              eq(gastAtClientTab[ucIndex].opId),
              eq((VOS_UINT16)DRV_AGENT_PHONEPHYNUM_SET_REQ),
              any(),
              eq((VOS_UINT32)sizeof(DRV_AGENT_PHONEPHYNUM_SET_REQ_STRU)),
              eq((VOS_UINT32)WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPhonePhynumPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPhonePhynumPara, Test_AT_SetPhonePhynumPara_008)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 2;
    gastAtParaList[0].aucPara[0]    = 'S';
    gastAtParaList[0].aucPara[1]    = 'N';
    gastAtParaList[1].usParaLen     = DRV_AGENT_RSA_CIPHERTEXT_LEN;
    PS_MEM_SET(gastAtParaList[1].aucPara, '0', AT_RSA_CIPHERTEXT_PARA_LEN);

    // MOCKER操作;
    MOCKER(At_UpString)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPhonePhynumPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_PERSONALIZATION_PH_PHYNUM_TYPE_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPhonePhynumPara, Test_AT_SetPhonePhynumPara_009)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 2;
    gastAtParaList[0].aucPara[0]    = 'S';
    gastAtParaList[0].aucPara[1]    = 'N';
    gastAtParaList[1].usParaLen     = DRV_AGENT_RSA_CIPHERTEXT_LEN + 1;
    PS_MEM_SET(gastAtParaList[1].aucPara, '0', AT_RSA_CIPHERTEXT_PARA_LEN + 1);

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPhonePhynumPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPhonePhynumPara, Test_AT_SetPhonePhynumPara_010)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 4;
    gastAtParaList[0].aucPara[0]    = 'I';
    gastAtParaList[0].aucPara[1]    = 'M';
    gastAtParaList[0].aucPara[2]    = 'E';
    gastAtParaList[0].aucPara[3]    = 'I';
    gastAtParaList[1].usParaLen     = AT_RSA_CIPHERTEXT_PARA_LEN;
    PS_MEM_SET(gastAtParaList[1].aucPara, '1', AT_RSA_CIPHERTEXT_PARA_LEN);

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq(gastAtClientTab[ucIndex].usClientId),
              eq(gastAtClientTab[ucIndex].opId),
              eq((VOS_UINT16)DRV_AGENT_PHONEPHYNUM_SET_REQ),
              any(),
              eq((VOS_UINT32)sizeof(DRV_AGENT_PHONEPHYNUM_SET_REQ_STRU)),
              eq((VOS_UINT32)WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPhonePhynumPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ(AT_CMD_PHONEPHYNUM_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPhonePhynumPara, Test_AT_SetPhonePhynumPara_011)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_ID_APP;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 2;
    gastAtParaList[0].aucPara[0]    = 'S';
    gastAtParaList[0].aucPara[1]    = 'N';
    gastAtParaList[1].usParaLen     = DRV_AGENT_RSA_CIPHERTEXT_LEN;
    PS_MEM_SET(gastAtParaList[1].aucPara, '0', AT_RSA_CIPHERTEXT_PARA_LEN);
    gastAtParaList[2].usParaLen     = 1;
    gastAtParaList[2].aucPara[0]    = '1';

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPhonePhynumPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetPortCtrlTmpPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        AT_InitPort();
        ucIndex                     = AT_CLIENT_TAB_APP_INDEX;
        pucSystemAppConfig          = AT_GetSystemAppConfigAddr();
        *pucSystemAppConfig         = SYSTEM_APP_ANDROID;
        AT_InitSetCtx();
    }
    void TearDown()
    {

    }

    VOS_UINT8       ucIndex;
    VOS_UINT8      *pucSystemAppConfig;
};


TEST_F(Test_AT_SetPortCtrlTmpPara, Test_AT_SetPortCtrlTmpPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    // 参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 1;

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    // 调用被测函数
    ulRet = AT_SetPortCtrlTmpPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPortCtrlTmpPara, Test_AT_SetPortCtrlTmpPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    // 参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    gucAtParaIndex              = 0;

    // MOCKER操 作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPortCtrlTmpPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPortCtrlTmpPara, Test_AT_SetPortCtrlTmpPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    // 参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].aucPara[0]    = '1';
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].aucPara[0]    = '1';


    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPortCtrlTmpPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_TOO_MANY_PARA, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPortCtrlTmpPara, Test_AT_SetPortCtrlTmpPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_CHAR                           *pcPortCtrlTmp;

    // 参数初始化
    pcPortCtrlTmp   = "01234567890123456";

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = VOS_StrLen(pcPortCtrlTmp);
    PS_MEM_CPY(gastAtParaList[0].aucPara, pcPortCtrlTmp, VOS_StrLen(pcPortCtrlTmp));

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPortCtrlTmpPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPortCtrlTmpPara, Test_AT_SetPortCtrlTmpPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_CHAR                           *pcPortCtrlTmp;

    // 参数初始化
    pcPortCtrlTmp   = "0123456789012345";

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = VOS_StrLen(pcPortCtrlTmp);
    PS_MEM_CPY(gastAtParaList[0].aucPara, pcPortCtrlTmp, VOS_StrLen(pcPortCtrlTmp));

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq(gastAtClientTab[ucIndex].usClientId),
              eq(gastAtClientTab[ucIndex].opId),
              eq((VOS_UINT16)DRV_AGENT_PORTCTRLTMP_SET_REQ),
              any(),
              eq((VOS_UINT32)sizeof(DRV_AGENT_PORTCTRLTMP_SET_REQ_STRU)),
              eq((VOS_UINT32)WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPortCtrlTmpPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPortCtrlTmpPara, Test_AT_SetPortCtrlTmpPara_006)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_CHAR                           *pcPortCtrlTmp;

    // 参数初始化
    pcPortCtrlTmp   = "0123456789012345";

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = VOS_StrLen(pcPortCtrlTmp);
    PS_MEM_CPY(gastAtParaList[0].aucPara, pcPortCtrlTmp, VOS_StrLen(pcPortCtrlTmp));


    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq(gastAtClientTab[ucIndex].usClientId),
              eq(gastAtClientTab[ucIndex].opId),
              eq((VOS_UINT16)DRV_AGENT_PORTCTRLTMP_SET_REQ),
              any(),
              eq((VOS_UINT32)sizeof(DRV_AGENT_PORTCTRLTMP_SET_REQ_STRU)),
              eq((VOS_UINT32)WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPortCtrlTmpPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPortCtrlTmpPara, Test_AT_SetPortCtrlTmpPara_007)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_CHAR                           *pcPortCtrlTmp;

    // 参数初始化
    pcPortCtrlTmp   = "012345678901234A";

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = VOS_StrLen(pcPortCtrlTmp);
    PS_MEM_CPY(gastAtParaList[0].aucPara, pcPortCtrlTmp, VOS_StrLen(pcPortCtrlTmp));

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPortCtrlTmpPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetPortAttribSetPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        AT_InitPort();
        ucIndex                     = AT_CLIENT_TAB_APP_INDEX;
        pucSystemAppConfig          = AT_GetSystemAppConfigAddr();
        *pucSystemAppConfig         = SYSTEM_APP_ANDROID;
        AT_InitSetCtx();
    }
    void TearDown()
    {

    }

    VOS_UINT8       ucIndex;
    VOS_UINT8      *pucSystemAppConfig;
};


TEST_F(Test_AT_SetPortAttribSetPara, Test_AT_SetPortAttribSetPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    // 参数初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 1;

    // 初始化全局变量;

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    // 调用被测函数
    ulRet = AT_SetPortAttribSetPara(VOS_FALSE);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPortAttribSetPara, Test_AT_SetPortAttribSetPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    // 参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    gucAtParaIndex              = 0;

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPortAttribSetPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPortAttribSetPara, Test_AT_SetPortAttribSetPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    // 参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 3;

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPortAttribSetPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_TOO_MANY_PARA, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPortAttribSetPara, Test_AT_SetPortAttribSetPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    // 参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].ulParaValue   = 1;
    PS_MEM_SET(gastAtParaList[0].aucPara, '0', AT_PORTATTRIBSET_PARA_ONOFF_LEN);

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPortAttribSetPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPortAttribSetPara, Test_AT_SetPortAttribSetPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    // 参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = AT_PORTATTRIBSET_PARA_ONOFF_LEN;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[1].usParaLen     = AT_RSA_CIPHERTEXT_PARA_LEN + 1;
    PS_MEM_SET(gastAtParaList[1].aucPara, '0', AT_RSA_CIPHERTEXT_PARA_LEN + 1);

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPortAttribSetPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPortAttribSetPara, Test_AT_SetPortAttribSetPara_006)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    // 参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = AT_PORTATTRIBSET_PARA_ONOFF_LEN;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[1].usParaLen     = AT_RSA_CIPHERTEXT_PARA_LEN;
    PS_MEM_SET(gastAtParaList[1].aucPara, '0', AT_RSA_CIPHERTEXT_PARA_LEN);

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq(gastAtClientTab[ucIndex].usClientId),
              eq(gastAtClientTab[ucIndex].opId),
              eq((VOS_UINT16)DRV_AGENT_PORTATTRIBSET_SET_REQ),
              any(),
              eq((VOS_UINT32)sizeof(DRV_AGENT_PORTATTRIBSET_SET_REQ_STRU)),
              eq((VOS_UINT32)WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPortAttribSetPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetPortAttribSetPara, Test_AT_SetPortAttribSetPara_007)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    // 参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = AT_PORTATTRIBSET_PARA_ONOFF_LEN;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[1].usParaLen     = AT_RSA_CIPHERTEXT_PARA_LEN;
    PS_MEM_SET(gastAtParaList[1].aucPara, '0', AT_RSA_CIPHERTEXT_PARA_LEN);

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq(gastAtClientTab[ucIndex].usClientId),
              eq(gastAtClientTab[ucIndex].opId),
              eq((VOS_UINT16)DRV_AGENT_PORTATTRIBSET_SET_REQ),
              any(),
              eq((VOS_UINT32)sizeof(DRV_AGENT_PORTATTRIBSET_SET_REQ_STRU)),
              eq((VOS_UINT32)WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPortAttribSetPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}



TEST_F(Test_AT_SetPortAttribSetPara, Test_AT_SetPortAttribSetPara_008)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    // 参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = AT_PORTATTRIBSET_PARA_ONOFF_LEN;
    gastAtParaList[0].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = AT_RSA_CIPHERTEXT_PARA_LEN;
    PS_MEM_SET(gastAtParaList[1].aucPara, '0', AT_RSA_CIPHERTEXT_PARA_LEN);

    // MOCKER操作;
    MOCKER(At_AsciiNum2HexString)
        .stubs()
         .will(returnValue((VOS_UINT32)TAF_FAILURE));

    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetPortAttribSetPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetOpwordPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        AT_InitSetCtx();
        ucIndex = AT_HSIC1_USER;
        pucAtSystemAppConfigAddr   = AT_GetSystemAppConfigAddr();
        *pucAtSystemAppConfigAddr = SYSTEM_APP_ANDROID;
    }
    void TearDown()
    {

    }

    VOS_UINT8       ucIndex;
    VOS_UINT8       *pucAtSystemAppConfigAddr;

};


TEST_F(Test_AT_SetOpwordPara, Test_AT_SetOpwordPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    // 参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[0].usParaLen     = 0;
    gucAtParaIndex                  = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetOpwordPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetOpwordPara, Test_AT_SetOpwordPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    // 参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].aucPara[0]    = '1';
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].aucPara[0]    = '1';
    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetOpwordPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetOpwordPara, Test_AT_SetOpwordPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = DRV_AGENT_PORT_PASSWORD_LEN;
    PS_MEM_SET(gastAtParaList[0].aucPara, '0', DRV_AGENT_PORT_PASSWORD_LEN);
    g_enATE5RightFlag               = AT_E5_RIGHT_FLAG_YES;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetOpwordPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetOpwordPara, Test_AT_SetOpwordPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    // 参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = DRV_AGENT_PORT_PASSWORD_LEN - 1;
    PS_MEM_SET(gastAtParaList[0].aucPara, '0', DRV_AGENT_PORT_PASSWORD_LEN - 1);
    g_enATE5RightFlag               = AT_E5_RIGHT_FLAG_NO;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetOpwordPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetOpwordPara, Test_AT_SetOpwordPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_CHAR                           *pcOpword;

    // 参数初始化
    pcOpword                        = "0123456789abcdef";

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = VOS_StrLen(pcOpword);
    PS_MEM_CPY(gastAtParaList[0].aucPara, pcOpword, VOS_StrLen(pcOpword));
    g_enATE5RightFlag               = AT_E5_RIGHT_FLAG_NO;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetOpwordPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetOpwordPara, Test_AT_SetOpwordPara_006)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_CHAR                           *pcOpword;

    // 参数初始化
    pcOpword                        = "0123456789012345";

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = VOS_StrLen(pcOpword);
    PS_MEM_CPY(gastAtParaList[0].aucPara, pcOpword, VOS_StrLen(pcOpword));
    g_enATE5RightFlag               = AT_E5_RIGHT_FLAG_NO;

    // MOCKER操作;

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq(gastAtClientTab[ucIndex].usClientId),
              eq(gastAtClientTab[ucIndex].opId),
              eq((VOS_UINT16)DRV_AGENT_OPWORD_SET_REQ),
              any(),
              eq((VOS_UINT32)sizeof(DRV_AGENT_OPWORD_SET_REQ_STRU)),
              eq((VOS_UINT32)WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulRet = AT_SetOpwordPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetOpwordPara, Test_AT_SetOpwordPara_007)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_CHAR                           *pcOpword;

    // 参数初始化
    pcOpword                        = "0123456789012345";

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = VOS_StrLen(pcOpword);
    PS_MEM_CPY(gastAtParaList[0].aucPara, pcOpword, VOS_StrLen(pcOpword));
    g_enATE5RightFlag               = AT_E5_RIGHT_FLAG_NO;

    // MOCKER操作;

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq(gastAtClientTab[ucIndex].usClientId),
              eq(gastAtClientTab[ucIndex].opId),
              eq((VOS_UINT16)DRV_AGENT_OPWORD_SET_REQ),
              any(),
              eq((VOS_UINT32)sizeof(DRV_AGENT_OPWORD_SET_REQ_STRU)),
              eq((VOS_UINT32)WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    // 调用被测函数
    ulRet = AT_SetOpwordPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}

TEST_F(Test_AT_SetOpwordPara,Test_AT_SetOpwordPara_008)
{
    VOS_UINT8                           ucIndex;
    ucIndex = 0;
    gastAtParaList[0].usParaLen = 5;
    gucAtParaIndex = 1;
    g_enATE5RightFlag = AT_E5_RIGHT_FLAG_NO;
    *pucAtSystemAppConfigAddr       = SYSTEM_APP_WEBUI;

    /* 输入密码超长 */
    gastAtParaList[0].usParaLen = AT_DISLOG_PWD_LEN + 1;

    EXPECT_EQ(AT_SetOpwordPara(ucIndex), AT_ERROR);

	GlobalMockObject::verify();
}
TEST_F(Test_AT_SetOpwordPara,Test_AT_SetOpwordPara_009)
{
    VOS_UINT8                           ucIndex;

    ucIndex = 0;
    gastAtParaList[0].usParaLen = 5;
    gucAtParaIndex = 1;
    g_enATE5RightFlag = AT_E5_RIGHT_FLAG_NO;
    *pucAtSystemAppConfigAddr       = SYSTEM_APP_WEBUI;

    /* NV中密码为空 */
    g_acATOpwordPwd[0] = '\0';

    MOCKER(NV_WriteEx)
        .stubs()
        .will(returnValue((VOS_UINT32)NV_OK));

    EXPECT_EQ(AT_SetOpwordPara(ucIndex), AT_OK);
    EXPECT_EQ(g_enATE5RightFlag, (AT_E5_RIGHT_FLAG_ENUM_U32)AT_E5_RIGHT_FLAG_YES);

	GlobalMockObject::verify();
}
TEST_F(Test_AT_SetOpwordPara,Test_AT_SetOpwordPara_010)
{
    VOS_UINT8                           ucIndex;

    ucIndex = 0;
    gastAtParaList[0].usParaLen = 5;
    gucAtParaIndex = 1;
    g_enATE5RightFlag = AT_E5_RIGHT_FLAG_NO;
    *pucAtSystemAppConfigAddr       = SYSTEM_APP_WEBUI;

    /* 密码不一致 */
    VOS_StrCpy((VOS_CHAR *)g_acATOpwordPwd, "ABCD");
    VOS_StrCpy((VOS_CHAR *)gastAtParaList[0].aucPara, "1234");

    EXPECT_EQ(AT_SetOpwordPara(ucIndex), AT_ERROR);

	GlobalMockObject::verify();
}
TEST_F(Test_AT_SetOpwordPara,Test_AT_SetOpwordPara_011)
{
    VOS_UINT8                           ucIndex;

    ucIndex = 0;
    gastAtParaList[0].usParaLen = 5;
    gucAtParaIndex = 1;
    g_enATE5RightFlag = AT_E5_RIGHT_FLAG_NO;
    *pucAtSystemAppConfigAddr       = SYSTEM_APP_WEBUI;

    /* 密码一致 */
    VOS_StrCpy((VOS_CHAR *)g_acATOpwordPwd, "ABCD");
    VOS_StrCpy((VOS_CHAR *)gastAtParaList[0].aucPara, "ABCD");

    EXPECT_EQ(AT_SetOpwordPara(ucIndex), AT_OK);

	GlobalMockObject::verify();
}
class Test_At_CrsmFilePathCheck: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {
    }
};


TEST_F(Test_At_CrsmFilePathCheck, Test_At_CrsmFilePathCheck_001)
{
    TAF_UINT32                          ulResult;
    VOS_UINT16                          usEfId;
    TAF_UINT8                           aucFilePath[2*USIMM_MAX_PATH_LEN]={0x7F, 0xFF};
    VOS_UINT16                          usPathLen = 2;

    usEfId = 0x2F00;

    ulResult = At_CrsmFilePathCheck(usEfId, aucFilePath, &usPathLen);

    EXPECT_EQ(AT_SUCCESS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmFilePathCheck, Test_At_CrsmFilePathCheck_002)
{
    TAF_UINT32                          ulResult;
    VOS_UINT16                          usEfId;
    TAF_UINT8                           aucFilePath[2*USIMM_MAX_PATH_LEN]={0x3F, 0x00};
    VOS_UINT16                          usPathLen = 2;

    usEfId = 0x4F3A;

    ulResult = At_CrsmFilePathCheck(usEfId, aucFilePath, &usPathLen);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmFilePathCheck, Test_At_CrsmFilePathCheck_003)
{
    TAF_UINT32                          ulResult;
    VOS_UINT16                          usEfId;
    TAF_UINT8                           aucFilePath[2*USIMM_MAX_PATH_LEN]={0x3F, 0x00, 0x5F, 0x00, 0x5F, 0x00};
    VOS_UINT16                          usPathLen = 6;

    usEfId = 0x4F3A;

    ulResult = At_CrsmFilePathCheck(usEfId, aucFilePath, &usPathLen);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmFilePathCheck, Test_At_CrsmFilePathCheck_004)
{
    TAF_UINT32                          ulResult;
    VOS_UINT16                          usEfId;
    TAF_UINT8                           aucFilePath[2*USIMM_MAX_PATH_LEN]={0x7F, 0x00, 0x7F, 0x00};
    VOS_UINT16                          usPathLen = 4;

    usEfId = 0x4F3A;

    ulResult = At_CrsmFilePathCheck(usEfId, aucFilePath, &usPathLen);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmFilePathCheck, Test_At_CrsmFilePathCheck_005)
{
    TAF_UINT32                          ulResult;
    VOS_UINT16                          usEfId;
    TAF_UINT8                           aucFilePath[2*USIMM_MAX_PATH_LEN]={0x3F, 0x00, 0x7F, 0x00, 0x7F, 0x00};
    VOS_UINT16                          usPathLen = 6;

    usEfId = 0x6F07;

    ulResult = At_CrsmFilePathCheck(usEfId, aucFilePath, &usPathLen);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmFilePathCheck, Test_At_CrsmFilePathCheck_006)
{
    TAF_UINT32                          ulResult;
    VOS_UINT16                          usEfId;
    TAF_UINT8                           aucFilePath[2*USIMM_MAX_PATH_LEN]={0x3F, 0x00, 0x5F, 0x00};
    VOS_UINT16                          usPathLen = 4;

    usEfId = 0x6F07;

    ulResult = At_CrsmFilePathCheck(usEfId, aucFilePath, &usPathLen);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmFilePathCheck, Test_At_CrsmFilePathCheck_007)
{
    TAF_UINT32                          ulResult;
    VOS_UINT16                          usEfId;
    TAF_UINT8                           aucFilePath[2*USIMM_MAX_PATH_LEN]={0x3F, 0x00, 0x5F, 0x00};
    VOS_UINT16                          usPathLen = 4;

    usEfId = 0x5F3A;

    ulResult = At_CrsmFilePathCheck(usEfId, aucFilePath, &usPathLen);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



class Test_At_CrsmApduParaCheck: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {
    }
};


TEST_F(Test_At_CrsmApduParaCheck, Test_At_CrsmApduParaCheck_001)
{
    TAF_UINT32                          ulResult;

    gastAtParaList[0].usParaLen = 0;

    ulResult = At_CrsmApduParaCheck();

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmApduParaCheck, Test_At_CrsmApduParaCheck_002)
{
    TAF_UINT32                          ulResult;

    gastAtParaList[0].usParaLen     = 3;
    gastAtParaList[0].ulParaValue   = USIMM_UPDATE_RECORD;
    gastAtParaList[1].ulParaValue   = 0;

    ulResult = At_CrsmApduParaCheck();

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmApduParaCheck, Test_At_CrsmApduParaCheck_003)
{
    TAF_UINT32                          ulResult;

    gastAtParaList[0].usParaLen     = 3;
    gastAtParaList[0].ulParaValue   = USIMM_UPDATE_RECORD;
    gastAtParaList[1].ulParaValue   = 0x3F00;

    ulResult = At_CrsmApduParaCheck();

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmApduParaCheck, Test_At_CrsmApduParaCheck_004)
{
    TAF_UINT32                          ulResult;

    gastAtParaList[0].usParaLen     = 3;
    gastAtParaList[0].ulParaValue   = USIMM_UPDATE_RECORD;
    gastAtParaList[1].ulParaValue   = 0x7F10;

    ulResult = At_CrsmApduParaCheck();

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmApduParaCheck, Test_At_CrsmApduParaCheck_005)
{
    TAF_UINT32                          ulResult;

    gastAtParaList[0].usParaLen     = 3;
    gastAtParaList[0].ulParaValue   = USIMM_UPDATE_RECORD;
    gastAtParaList[1].ulParaValue   = 0x5F3A;

    ulResult = At_CrsmApduParaCheck();

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmApduParaCheck, Test_At_CrsmApduParaCheck_006)
{
    TAF_UINT32                          ulResult;

    gastAtParaList[0].usParaLen     = 3;
    gastAtParaList[0].ulParaValue   = USIMM_UPDATE_RECORD;
    gastAtParaList[1].ulParaValue   = 0x4F3A;

    gastAtParaList[2].usParaLen     = 0;
    gastAtParaList[3].usParaLen     = 0;
    gastAtParaList[4].usParaLen     = 0;

    ulResult = At_CrsmApduParaCheck();

    EXPECT_EQ(AT_SUCCESS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmApduParaCheck, Test_At_CrsmApduParaCheck_007)
{
    TAF_UINT32                          ulResult;

    gastAtParaList[0].usParaLen     = 3;
    gastAtParaList[0].ulParaValue   = USIMM_UPDATE_RECORD;
    gastAtParaList[1].ulParaValue   = 0x4F3A;

    gastAtParaList[2].usParaLen     = 1;
    gastAtParaList[3].usParaLen     = 1;
    gastAtParaList[4].usParaLen     = 1;

    ulResult = At_CrsmApduParaCheck();

    EXPECT_EQ(AT_SUCCESS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmApduParaCheck, Test_At_CrsmApduParaCheck_008)
{
    TAF_UINT32                          ulResult;

    gastAtParaList[0].usParaLen     = 3;
    gastAtParaList[0].ulParaValue   = USIMM_UPDATE_RECORD;
    gastAtParaList[1].ulParaValue   = 0x4F3A;

    gastAtParaList[2].usParaLen     = 1;
    gastAtParaList[3].usParaLen     = 1;
    gastAtParaList[4].usParaLen     = 0;

    ulResult = At_CrsmApduParaCheck();

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_CrsmFilePathParse: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {
    }
};


TEST_F(Test_At_CrsmFilePathParse, Test_At_CrsmFilePathParse_001)
{
    TAF_UINT32                          ulResult;
    TAF_SIM_RESTRIC_ACCESS_STRU         stCommand;

    gastAtParaList[6].usParaLen     = 0;

    ulResult = At_CrsmFilePathParse(&stCommand);

    EXPECT_EQ(AT_SUCCESS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmFilePathParse, Test_At_CrsmFilePathParse_002)
{
    TAF_UINT32                          ulResult;
    TAF_SIM_RESTRIC_ACCESS_STRU         stCommand;

    gastAtParaList[6].usParaLen     = 3;

    ulResult = At_CrsmFilePathParse(&stCommand);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmFilePathParse, Test_At_CrsmFilePathParse_003)
{
    TAF_UINT32                          ulResult;
    TAF_SIM_RESTRIC_ACCESS_STRU         stCommand;

    gastAtParaList[6].usParaLen     = 4;

    //mocker
    MOCKER(At_AsciiNum2HexString)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    ulResult = At_CrsmFilePathParse(&stCommand);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmFilePathParse, Test_At_CrsmFilePathParse_004)
{
    TAF_UINT32                          ulResult;
    TAF_SIM_RESTRIC_ACCESS_STRU         stCommand;

    gastAtParaList[6].usParaLen     = 4;

    //mocker
    MOCKER(At_AsciiNum2HexString)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(At_CrsmFilePathCheck)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS));

    ulResult = At_CrsmFilePathParse(&stCommand);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmFilePathParse, Test_At_CrsmFilePathParse_005)
{
    TAF_UINT32                          ulResult;
    TAF_SIM_RESTRIC_ACCESS_STRU         stCommand;

    gastAtParaList[6].usParaLen     = 4;

    //mocker
    MOCKER(At_AsciiNum2HexString)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(At_CrsmFilePathCheck)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ulResult = At_CrsmFilePathParse(&stCommand);

    EXPECT_EQ(AT_SUCCESS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_CrsmParaStatusCheck: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {
    }
};


TEST_F(Test_At_CrsmParaStatusCheck, Test_At_CrsmParaStatusCheck_001)
{
    TAF_UINT32                          ulResult;
    TAF_SIM_RESTRIC_ACCESS_STRU         stCommand;

    gastAtParaList[1].ulParaValue   = 0;

    MOCKER(At_CrsmFilePathParse)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ulResult = At_CrsmParaStatusCheck(&stCommand);

    EXPECT_EQ(AT_SUCCESS, ulResult);
    EXPECT_EQ(VOS_NULL_WORD, stCommand.usEfId);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmParaStatusCheck, Test_At_CrsmParaStatusCheck_002)
{
    TAF_UINT32                          ulResult;
    TAF_SIM_RESTRIC_ACCESS_STRU         stCommand;

    gastAtParaList[1].ulParaValue   = 0x4F3A;

    MOCKER(At_CrsmFilePathParse)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ulResult = At_CrsmParaStatusCheck(&stCommand);

    EXPECT_EQ(AT_SUCCESS, ulResult);
    EXPECT_EQ(0x4F3A, stCommand.usEfId);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



class Test_At_CrsmParaReadBinaryCheck: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {
    }
};


TEST_F(Test_At_CrsmParaReadBinaryCheck, Test_At_CrsmParaReadBinaryCheck_001)
{
    TAF_UINT32                          ulResult;
    TAF_SIM_RESTRIC_ACCESS_STRU         stCommand;

    MOCKER(At_CrsmFilePathParse)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ulResult = At_CrsmParaReadBinaryCheck(&stCommand);

    EXPECT_EQ(AT_SUCCESS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_CrsmParaReadRecordCheck: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {
    }
};


TEST_F(Test_At_CrsmParaReadRecordCheck, Test_At_CrsmParaReadRecordCheck_001)
{
    TAF_UINT32                          ulResult;
    TAF_SIM_RESTRIC_ACCESS_STRU         stCommand;

    MOCKER(At_CrsmFilePathParse)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ulResult = At_CrsmParaReadRecordCheck(&stCommand);

    EXPECT_EQ(AT_SUCCESS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_CrsmParaGetRspCheck: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {
    }
};


TEST_F(Test_At_CrsmParaGetRspCheck, Test_At_CrsmParaGetRspCheck_001)
{
    TAF_UINT32                          ulResult;
    TAF_SIM_RESTRIC_ACCESS_STRU         stCommand;

    gucAtParaIndex      = 1;

    ulResult = At_CrsmParaGetRspCheck(&stCommand);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmParaGetRspCheck, Test_At_CrsmParaGetRspCheck_002)
{
    TAF_UINT32                          ulResult;
    TAF_SIM_RESTRIC_ACCESS_STRU         stCommand;

    gucAtParaIndex      = 7;

    MOCKER(At_CrsmFilePathParse)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ulResult = At_CrsmParaGetRspCheck(&stCommand);

    EXPECT_EQ(AT_SUCCESS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_CrsmParaUpdateBinaryCheck: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {
    }
};


TEST_F(Test_At_CrsmParaUpdateBinaryCheck, Test_At_CrsmParaUpdateBinaryCheck_001)
{
    TAF_UINT32                          ulResult;
    TAF_SIM_RESTRIC_ACCESS_STRU         stCommand;

    gucAtParaIndex      = 1;

    ulResult = At_CrsmParaUpdateBinaryCheck(&stCommand);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmParaUpdateBinaryCheck, Test_At_CrsmParaUpdateBinaryCheck_002)
{
    TAF_UINT32                          ulResult;
    TAF_SIM_RESTRIC_ACCESS_STRU         stCommand;

    gucAtParaIndex      = 6;

    gastAtParaList[5].usParaLen     = 0;

    ulResult = At_CrsmParaUpdateBinaryCheck(&stCommand);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmParaUpdateBinaryCheck, Test_At_CrsmParaUpdateBinaryCheck_003)
{
    TAF_UINT32                          ulResult;
    TAF_SIM_RESTRIC_ACCESS_STRU         stCommand;

    gucAtParaIndex      = 6;

    gastAtParaList[5].usParaLen     = 3;

    ulResult = At_CrsmParaUpdateBinaryCheck(&stCommand);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmParaUpdateBinaryCheck, Test_At_CrsmParaUpdateBinaryCheck_004)
{
    TAF_UINT32                          ulResult;
    TAF_SIM_RESTRIC_ACCESS_STRU         stCommand;

    gucAtParaIndex      = 6;

    gastAtParaList[5].usParaLen     = 10;

    MOCKER(At_AsciiNum2HexString)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    ulResult = At_CrsmParaUpdateBinaryCheck(&stCommand);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmParaUpdateBinaryCheck, Test_At_CrsmParaUpdateBinaryCheck_005)
{
    TAF_UINT32                          ulResult;
    TAF_SIM_RESTRIC_ACCESS_STRU         stCommand;

    gucAtParaIndex      = 6;

    gastAtParaList[5].usParaLen     = 10;

    MOCKER(At_AsciiNum2HexString)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(At_CrsmFilePathParse)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ulResult = At_CrsmParaUpdateBinaryCheck(&stCommand);

    EXPECT_EQ(AT_SUCCESS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_CrsmParaUpdateRecordCheck: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {
    }
};


TEST_F(Test_At_CrsmParaUpdateRecordCheck, Test_At_CrsmParaUpdateRecordCheck_001)
{
    TAF_UINT32                          ulResult;
    TAF_SIM_RESTRIC_ACCESS_STRU         stCommand;

    gucAtParaIndex      = 1;

    ulResult = At_CrsmParaUpdateRecordCheck(&stCommand);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmParaUpdateRecordCheck, Test_At_CrsmParaUpdateRecordCheck_002)
{
    TAF_UINT32                          ulResult;
    TAF_SIM_RESTRIC_ACCESS_STRU         stCommand;

    gucAtParaIndex      = 6;

    gastAtParaList[5].usParaLen     = 0;

    ulResult = At_CrsmParaUpdateRecordCheck(&stCommand);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmParaUpdateRecordCheck, Test_At_CrsmParaUpdateRecordCheck_003)
{
    TAF_UINT32                          ulResult;
    TAF_SIM_RESTRIC_ACCESS_STRU         stCommand;

    gucAtParaIndex      = 6;

    gastAtParaList[5].usParaLen     = 3;

    ulResult = At_CrsmParaUpdateRecordCheck(&stCommand);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmParaUpdateRecordCheck, Test_At_CrsmParaUpdateRecordCheck_004)
{
    TAF_UINT32                          ulResult;
    TAF_SIM_RESTRIC_ACCESS_STRU         stCommand;

    gucAtParaIndex      = 6;

    gastAtParaList[5].usParaLen     = 10;

    MOCKER(At_AsciiNum2HexString)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    ulResult = At_CrsmParaUpdateRecordCheck(&stCommand);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CrsmParaUpdateRecordCheck, Test_At_CrsmParaUpdateRecordCheck_005)
{
    TAF_UINT32                          ulResult;
    TAF_SIM_RESTRIC_ACCESS_STRU         stCommand;

    gucAtParaIndex      = 6;

    gastAtParaList[5].usParaLen     = 10;

    MOCKER(At_AsciiNum2HexString)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(At_CrsmFilePathParse)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ulResult = At_CrsmParaUpdateRecordCheck(&stCommand);

    EXPECT_EQ(AT_SUCCESS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetCrsmPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {
    }
};


TEST_F(Test_At_SetCrsmPara, Test_At_SetCrsmPara_001)
{
    TAF_UINT32                          ulResult;
    TAF_UINT8                           ucIndex;

    ucIndex             = 0;
    gucAtParaIndex      = 8;

    ulResult = At_SetCrsmPara(ucIndex);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCrsmPara, Test_At_SetCrsmPara_002)
{
    TAF_UINT32                          ulResult;
    TAF_UINT8                           ucIndex;

    ucIndex             = 0;
    gucAtParaIndex      = 6;

    MOCKER(At_CrsmApduParaCheck)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS));

    ulResult = At_SetCrsmPara(ucIndex);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCrsmPara, Test_At_SetCrsmPara_003)
{
    TAF_UINT32                          ulResult;
    TAF_UINT8                           ucIndex;

    ucIndex             = 0;
    gucAtParaIndex      = 6;

    gastAtParaList[0].ulParaValue   = USIMM_STATUS;

    MOCKER(At_CrsmApduParaCheck)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(At_CrsmParaStatusCheck)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS));

    ulResult = At_SetCrsmPara(ucIndex);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCrsmPara, Test_At_SetCrsmPara_004)
{
    TAF_UINT32                          ulResult;
    TAF_UINT8                           ucIndex;

    ucIndex             = 0;
    gucAtParaIndex      = 6;

    gastAtParaList[0].ulParaValue   = USIMM_READ_BINARY;

    MOCKER(At_CrsmApduParaCheck)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(At_CrsmParaReadBinaryCheck)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(Taf_UsimRestrictedAccessCommand)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    ulResult = At_SetCrsmPara(ucIndex);

    EXPECT_EQ(AT_ERROR, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCrsmPara, Test_At_SetCrsmPara_005)
{
    TAF_UINT32                          ulResult;
    TAF_UINT8                           ucIndex;

    ucIndex             = 0;
    gucAtParaIndex      = 6;

    gastAtParaList[0].ulParaValue   = USIMM_READ_RECORD;

    MOCKER(At_CrsmApduParaCheck)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(At_CrsmParaReadRecordCheck)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(Taf_UsimRestrictedAccessCommand)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ulResult = At_SetCrsmPara(ucIndex);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCrsmPara, Test_At_SetCrsmPara_006)
{
    TAF_UINT32                          ulResult;
    TAF_UINT8                           ucIndex;

    ucIndex             = 0;
    gucAtParaIndex      = 6;

    gastAtParaList[0].ulParaValue   = USIMM_GET_RESPONSE;

    MOCKER(At_CrsmApduParaCheck)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(At_CrsmParaGetRspCheck)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(Taf_UsimRestrictedAccessCommand)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ulResult = At_SetCrsmPara(ucIndex);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCrsmPara, Test_At_SetCrsmPara_007)
{
    TAF_UINT32                          ulResult;
    TAF_UINT8                           ucIndex;

    ucIndex             = 0;
    gucAtParaIndex      = 6;

    gastAtParaList[0].ulParaValue   = USIMM_UPDATE_BINARY;

    MOCKER(At_CrsmApduParaCheck)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(At_CrsmParaUpdateBinaryCheck)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(Taf_UsimRestrictedAccessCommand)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ulResult = At_SetCrsmPara(ucIndex);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCrsmPara, Test_At_SetCrsmPara_008)
{
    TAF_UINT32                          ulResult;
    TAF_UINT8                           ucIndex;

    ucIndex             = 0;
    gucAtParaIndex      = 6;

    gastAtParaList[0].ulParaValue   = USIMM_UPDATE_RECORD;

    MOCKER(At_CrsmApduParaCheck)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(At_CrsmParaUpdateRecordCheck)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(Taf_UsimRestrictedAccessCommand)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ulResult = At_SetCrsmPara(ucIndex);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCrsmPara, Test_At_SetCrsmPara_009)
{
    TAF_UINT32                          ulResult;
    TAF_UINT8                           ucIndex;

    ucIndex             = 0;
    gucAtParaIndex      = 6;

    gastAtParaList[0].ulParaValue   = 0x100;

    MOCKER(At_CrsmApduParaCheck)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ulResult = At_SetCrsmPara(ucIndex);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



class Test_At_SetU2DiagPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex = 0;
        PS_MEM_SET(&gstAtSendData, 0, sizeof(gstAtSendData));
        g_stParseContext[0].pstCmdElement = &gstU2diagCmdInfo;
    }
    void TearDown()
    {
    }

protected:
    VOS_UINT8 ucIndex;
};


TEST_F(Test_At_SetU2DiagPara, Test_At_SetU2DiagPara_001)
{
    AT_PID_ENABLE_TYPE_STRU             stPidEnableType;
    VOS_UINT32                          ulResult;

    ucIndex             = 0;
    gucAtParaIndex      = 1;
    gastAtParaList[ucIndex].usParaLen = 3;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    stPidEnableType.ulPidEnabled = VOS_FALSE;
    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), eq((VOS_UINT16)en_NV_Item_PID_Enable_Type), outBoundP((VOS_VOID *)&stPidEnableType, (VOS_UINT32)sizeof(stPidEnableType)), any())
        .will(returnValue((VOS_UINT32)NV_ID_NOT_EXIST));

    ulResult = At_QryU2DiagPara(ucIndex);

    EXPECT_EQ(ulResult, AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetU2DiagPara, Test_At_SetU2DiagPara_002)
{
    AT_PID_ENABLE_TYPE_STRU             stPidEnableType;
    VOS_UINT32                          ulResult;

    ucIndex             = 0;
    gucAtParaIndex      = 1;
    gastAtParaList[ucIndex].usParaLen = 3;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    stPidEnableType.ulPidEnabled = VOS_TRUE;
    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), eq((VOS_UINT16)en_NV_Item_PID_Enable_Type), outBoundP((VOS_VOID *)&stPidEnableType, (VOS_UINT32)sizeof(stPidEnableType)), any())
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(UdiagValueCheck)
        .stubs()
        .will(returnValue((VOS_UINT)VOS_OK));

    ulResult = At_QryU2DiagPara(ucIndex);

    EXPECT_EQ(ulResult, AT_ERROR);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetU2DiagPara, Test_At_SetU2DiagPara_003)
{
    AT_PID_ENABLE_TYPE_STRU             stPidEnableType;
    AT_USB_ENUM_STATUS_STRU             stUsbEnumStatus;
    VOS_UINT32                          ulResult;

    ucIndex             = 0;
    gucAtParaIndex      = 1;
    gastAtParaList[ucIndex].usParaLen = 3;
    gastAtParaList[ucIndex].ulParaValue = 118;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    stPidEnableType.ulPidEnabled = VOS_FALSE;
    stUsbEnumStatus.ulStatus = VOS_TRUE;
    stUsbEnumStatus.ulValue = 118;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_PID_Enable_Type), outBoundP((VOS_VOID *)&stPidEnableType, (VOS_UINT32)sizeof(stPidEnableType)), any())
		.will(returnValue((VOS_UINT32)NV_OK))
		.id("first");


    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_USB_Enum_Status), outBoundP((VOS_VOID *)&stUsbEnumStatus, (VOS_UINT32)sizeof(stUsbEnumStatus)), any())
        .after("first")
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(UdiagValueCheck)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    ulResult = At_QryU2DiagPara(ucIndex);

    EXPECT_EQ(ulResult, AT_OK);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_CheckNameUCS2Code: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {
    }
};


TEST_F(Test_At_CheckNameUCS2Code, Test_At_CheckNameUCS2Code_001)
{
    TAF_UINT8                           aucIndex[4] = {0x80, 0x35, 0xe5, 0x36};
    TAF_UINT16                          usLen = sizeof(aucIndex);

    EXPECT_EQ(AT_FAILURE, At_CheckNameUCS2Code(aucIndex, &usLen));

    EXPECT_EQ((VOS_UINT16)sizeof(aucIndex), usLen);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CheckNameUCS2Code, Test_At_CheckNameUCS2Code_002)
{
    TAF_UINT8                           aucIndex[5] = {0x80, 0x35, 0xe5, 0x36, 0x57};
    TAF_UINT16                          usLen = sizeof(aucIndex);

    EXPECT_EQ(AT_SUCCESS, At_CheckNameUCS2Code(aucIndex, &usLen));

    EXPECT_EQ((VOS_UINT16)sizeof(aucIndex), usLen);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CheckNameUCS2Code, Test_At_CheckNameUCS2Code_003)
{
    TAF_UINT8                           aucIndex[] = {0x81, 0x01, 0x13, 0xe5, 0x36};
    TAF_UINT16                          usLen = sizeof(aucIndex);

    EXPECT_EQ(AT_SUCCESS, At_CheckNameUCS2Code(aucIndex, &usLen));

    EXPECT_EQ(4, usLen);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CheckNameUCS2Code, Test_At_CheckNameUCS2Code_004)
{
    TAF_UINT8                           aucIndex[] = {0x82, 0x01, 0x13, 0x35, 0xe5, 0x36};
    TAF_UINT16                          usLen = sizeof(aucIndex);

    EXPECT_EQ(AT_SUCCESS, At_CheckNameUCS2Code(aucIndex, &usLen));

    EXPECT_EQ(5, usLen);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetCsinPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        g_stATParseCmd.ucCmdOptType =   AT_CMD_OPT_SET_CMD_NO_PARA;
    }
    void TearDown()
    {
        g_stATParseCmd.ucCmdOptType =   AT_CMD_OPT_SET_CMD_NO_PARA;
    }
};


TEST_F(Test_At_SetCsinPara, Test_At_SetCsinPara_001)
{
    TAF_UINT32                          ulResult;
    TAF_UINT8                           ucIndex;

    /* 初始化局部变量 */
    ucIndex             = 0;

    g_stATParseCmd.ucCmdOptType =   AT_CMD_OPT_SET_PARA_CMD;

    /* 调用被测函数 */
    ulResult = At_SetCsinPara(ucIndex);

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCsinPara, Test_At_SetCsinPara_002)
{
    TAF_UINT32                          ulResult;
    TAF_UINT8                           ucIndex;
    VOS_UINT8                           ucSystemType;

    /* 初始化局部变量 */
    ucIndex             = 0;
    ucSystemType        = SYSTEM_APP_MP;

    /* 设置全局变量 */

    /* 函数打桩 */
    MOCKER(AT_GetSystemAppConfigAddr)
        .stubs()
        .will(returnValue((VOS_UINT8 *)&ucSystemType));

    /* 调用被测函数 */
    ulResult = At_SetCsinPara(ucIndex);

    EXPECT_EQ(AT_ERROR, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCsinPara, Test_At_SetCsinPara_003)
{
    TAF_UINT32                          ulResult;
    TAF_UINT8                           ucIndex;
    VOS_UINT8                           ucSystemType;

    /* 初始化局部变量 */
    ucIndex             = 0;
    ucSystemType        = SYSTEM_APP_ANDROID;

    /* 设置全局变量 */

    /* 函数打桩 */
    MOCKER(AT_GetSystemAppConfigAddr)
        .stubs()
        .will(returnValue((VOS_UINT8 *)&ucSystemType));

    MOCKER(SI_STK_GetSTKCommand)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    /* 调用被测函数 */
    ulResult = At_SetCsinPara(ucIndex);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCsinPara, Test_At_SetCsinPara_004)
{
    TAF_UINT32                          ulResult;
    TAF_UINT8                           ucIndex;
    VOS_UINT8                           ucSystemType;

    /* 初始化局部变量 */
    ucIndex             = 0;
    ucSystemType        = SYSTEM_APP_ANDROID;

    /* 设置全局变量 */

    /* 函数打桩 */
    MOCKER(AT_GetSystemAppConfigAddr)
        .stubs()
        .will(returnValue((VOS_UINT8 *)&ucSystemType));

    MOCKER(SI_STK_GetSTKCommand)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    /* 调用被测函数 */
    ulResult = At_SetCsinPara(ucIndex);

    EXPECT_EQ(AT_ERROR, ulResult);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetCsndPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCsndPara, Test_At_SetCsndPara_001)
{
    //参数定义
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    gucAtParaIndex                  = 2;
    gastAtParaList[0].ulParaValue   = 5;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 10;
    gastAtParaList[1].usParaLen     = 0;

    //MOCKER

    //调用被测函数.
    ulRslt = At_SetCsndPara(ucIndex);

    //执行检查

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCsndPara, Test_At_SetCsndPara_002)
{
    //参数定义
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    gucAtParaIndex                  = 3;
    gastAtParaList[0].ulParaValue   = 5;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 10;
    gastAtParaList[1].usParaLen     = 1;

    //MOCKER

    //调用被测函数.
    ulRslt = At_SetCsndPara(ucIndex);

    //执行检查

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCsndPara, Test_At_SetCsndPara_003)
{
    //参数定义
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    gucAtParaIndex                  = 2;
    gastAtParaList[0].ulParaValue   = 4;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 10;
    gastAtParaList[1].usParaLen     = 1;

    //MOCKER

    //调用被测函数.
    ulRslt = At_SetCsndPara(ucIndex);

    //执行检查

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCsndPara, Test_At_SetCsndPara_004)
{
    //参数定义
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;
    VOS_UINT8                           aucData[150] = {0};

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    gucAtParaIndex                  = 2;
    gastAtParaList[0].ulParaValue   = 5;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 100;
    gastAtParaList[1].usParaLen     = 3;

    //MOCKER
    MOCKER(IMM_ZcStaticAlloc_Debug)
        .stubs()
        .will(returnValue((IMM_ZC_STRU *)aucData));

    MOCKER(IMM_ZcPut_Debug)
        .stubs()
        .will(returnValue((VOS_UINT8 *)VOS_NULL_PTR));

    MOCKER(kfree_skb)
        .expects(exactly(1));

    //调用被测函数.
    ulRslt = At_SetCsndPara(ucIndex);

    //执行检查

    EXPECT_EQ(AT_ERROR, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCsndPara, Test_At_SetCsndPara_005)
{
    //参数定义
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;
    VOS_UINT8                           aucData[150] = {0};

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    gucAtParaIndex                  = 2;
    gastAtParaList[0].ulParaValue   = 5;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 100;
    gastAtParaList[1].usParaLen     = 3;

    //MOCKER
    MOCKER(IMM_ZcStaticAlloc_Debug)
        .stubs()
        .will(returnValue((IMM_ZC_STRU *)aucData));

    MOCKER(AT_GetModemIdFromClient)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

	MOCKER(IMM_ZcPut_Debug)
		.stubs()
		.will(returnValue((VOS_UINT8*)VOS_NULL_PTR));

    MOCKER(kfree_skb)
        .expects(exactly(1));

    //调用被测函数.
    ulRslt = At_SetCsndPara(ucIndex);

    //执行检查

    EXPECT_EQ(AT_ERROR, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCsndPara, Test_At_SetCsndPara_006)
{
    //参数定义
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;
    VOS_UINT8                           aucData[150] = {0};
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    VOS_UINT8                           ucRabId;

    //参数初始化
    ucIndex = 0;
    ucRabId = 5 | AT_PS_RABID_MODEM_1_MASK;

    //相关全局变量初始化
    gucAtParaIndex                  = 2;
    gastAtParaList[0].ulParaValue   = 5;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 100;
    gastAtParaList[1].usParaLen     = 3;

    //MOCKER
    MOCKER(IMM_ZcStaticAlloc_Debug)
        .stubs()
        .will(returnValue((IMM_ZC_STRU *)aucData));

    MOCKER(AT_GetModemIdFromClient)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

	MOCKER(IMM_ZcPut_Debug)
		.stubs()
		.will(returnValue((VOS_UINT8*)aucData));

    MOCKER(kfree_skb)
        .expects(exactly(1));

    MOCKER(ADS_UL_SendPacket)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    //调用被测函数.
    ulRslt = At_SetCsndPara(ucIndex);

    //执行检查

    EXPECT_EQ(AT_ERROR, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



class Test_AT_SetApSimStPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetApSimStPara, Test_AT_SetApSimStPara_001)
{
    //参数定义
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化

    //MOCKER
    MOCKER(AT_CheckHsicUser)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    //调用被测函数.
    ulRslt = AT_SetApSimStPara(ucIndex);

    //执行检查

    EXPECT_EQ(AT_ERROR, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApSimStPara, Test_AT_SetApSimStPara_002)
{
    //参数定义
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_CMD_NO_PARA;

    //MOCKER
    MOCKER(AT_CheckHsicUser)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    //调用被测函数.
    ulRslt = AT_SetApSimStPara(ucIndex);

    //执行检查

    EXPECT_EQ(AT_ERROR, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApSimStPara, Test_AT_SetApSimStPara_003)
{
    //参数定义
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;

    //MOCKER
    MOCKER(AT_CheckHsicUser)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    //调用被测函数.
    ulRslt = AT_SetApSimStPara(ucIndex);

    //执行检查

    EXPECT_EQ(AT_ERROR, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApSimStPara, Test_AT_SetApSimStPara_004)
{
    //参数定义
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 0;

    //MOCKER
    MOCKER(AT_CheckHsicUser)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    //调用被测函数.
    ulRslt = AT_SetApSimStPara(ucIndex);

    //执行检查

    EXPECT_EQ(AT_ERROR, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApSimStPara, Test_AT_SetApSimStPara_005)
{
    //参数定义
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 0;

    //MOCKER
    MOCKER(AT_CheckHsicUser)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    //调用被测函数.
    ulRslt = AT_SetApSimStPara(ucIndex);

    //执行检查

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApSimStPara, Test_AT_SetApSimStPara_006)
{
    //参数定义
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;

    //MOCKER
    MOCKER(AT_CheckHsicUser)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    //调用被测函数.
    ulRslt = AT_SetApSimStPara(ucIndex);

    //执行检查

    EXPECT_EQ(AT_ERROR, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_AT_AppReportPdpActiveState: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_AppReportPdpActiveState, Test_AT_AppReportPdpActiveState_001)
{
    //参数定义
    VOS_UINT8                           ucIndex;
    AT_PDP_ENTITY_STRU                  stAppPdpEntity;

    //参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    //相关全局变量初始化
    stAppPdpEntity.enIpv4v6State    = AT_PDP_STATE_ACTED;
    g_stAtAppRaInfo.bitOpPrefixAddr = VOS_FALSE;

    //MOCKER
    MOCKER(At_FormatResultData)
        .expects(exactly(1));

    /*MOCKER(At_sprintf)
        .expects(exactly(1))
        .will(returnValue(10));*/

    //MOCKER(At_SendResultData)
    //  .expects(never())
    //  .with(eq(AT_CLIENT_TAB_PCUI_INDEX),any(),any());

    //调用被测函数.
    AT_AppReportPdpActiveState(ucIndex, &stAppPdpEntity);

    //执行检查

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_AppReportPdpActiveState, Test_AT_AppReportPdpActiveState_002)
{
    //参数定义
    VOS_UINT8                           ucIndex;
    AT_PDP_ENTITY_STRU                  stAppPdpEntity;

    //参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    //相关全局变量初始化
    stAppPdpEntity.enIpv4v6State    = AT_PDP_STATE_ACTED;
    g_stAtAppRaInfo.bitOpPrefixAddr = VOS_TRUE;

    //MOCKER
    MOCKER(At_FormatResultData)
        .expects(exactly(1));

    /*MOCKER(At_sprintf)
        .expects(exactly(2))
        .will(returnValue(10));*/

    //MOCKER(At_SendResultData)
    //  .expects(exactly(1))
    //  .with(eq(AT_CLIENT_TAB_PCUI_INDEX),any(),any());

    //调用被测函数.
    AT_AppReportPdpActiveState(ucIndex, &stAppPdpEntity);

    //执行检查

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_AppReportPdpActiveState, Test_AT_AppReportPdpActiveState_003)
{
    //参数定义
    VOS_UINT8                           ucIndex;
    AT_PDP_ENTITY_STRU                  stAppPdpEntity;

    //参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    //相关全局变量初始化
    stAppPdpEntity.enIpv4v6State    = AT_PDP_STATE_IDLE;
    stAppPdpEntity.enIpv4State      = AT_PDP_STATE_ACTED;
    stAppPdpEntity.enIpv6State      = AT_PDP_STATE_ACTED;
    g_stAtAppRaInfo.bitOpPrefixAddr = VOS_FALSE;

    //MOCKER
    MOCKER(At_FormatResultData)
        .expects(exactly(1));

    /*MOCKER(At_sprintf)
        .expects(exactly(1))
        .will(returnValue(10));*/

    //MOCKER(At_SendResultData)
    //  .expects(exactly(1))
    //  .with(eq(AT_CLIENT_TAB_PCUI_INDEX),any(),any());

    //调用被测函数.
    AT_AppReportPdpActiveState(ucIndex, &stAppPdpEntity);

    //执行检查

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_AppReportPdpActiveState, Test_AT_AppReportPdpActiveState_004)
{
    //参数定义
    VOS_UINT8                           ucIndex;
    AT_PDP_ENTITY_STRU                  stAppPdpEntity;

    //参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    //相关全局变量初始化
    stAppPdpEntity.enIpv4v6State    = AT_PDP_STATE_IDLE;
    stAppPdpEntity.enIpv4State      = AT_PDP_STATE_ACTED;
    stAppPdpEntity.enIpv6State      = AT_PDP_STATE_ACTED;
    g_stAtAppRaInfo.bitOpPrefixAddr = VOS_TRUE;

    //MOCKER
    MOCKER(At_FormatResultData)
        .expects(exactly(1));

    /*MOCKER(At_sprintf)
        .expects(exactly(2))
        .will(returnValue(10));*/

    //MOCKER(At_SendResultData)
    //  //.expects(exactly(2))
    //  .with(eq(AT_CLIENT_TAB_PCUI_INDEX),any(),any());

    //调用被测函数.
    AT_AppReportPdpActiveState(ucIndex, &stAppPdpEntity);

    //执行检查

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_AppReportPdpActiveState, Test_AT_AppReportPdpActiveState_005)
{
    //参数定义
    VOS_UINT8                           ucIndex;
    AT_PDP_ENTITY_STRU                  stAppPdpEntity;

    //参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    //相关全局变量初始化
    stAppPdpEntity.enIpv4v6State    = AT_PDP_STATE_IDLE;
    stAppPdpEntity.enIpv4State      = AT_PDP_STATE_IDLE;
    stAppPdpEntity.enIpv6State      = AT_PDP_STATE_ACTED;
    g_stAtAppRaInfo.bitOpPrefixAddr = VOS_FALSE;

    //MOCKER
    MOCKER(At_FormatResultData)
        .expects(exactly(1));

    /*MOCKER(At_sprintf)
        .expects(never())
        .will(returnValue(10));*/

    MOCKER(At_SendResultData)
        .expects(never());

    //调用被测函数.
    AT_AppReportPdpActiveState(ucIndex, &stAppPdpEntity);

    //执行检查

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_AppReportPdpActiveState, Test_AT_AppReportPdpActiveState_006)
{
    //参数定义
    VOS_UINT8                           ucIndex;
    AT_PDP_ENTITY_STRU                  stAppPdpEntity;

    //参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    //相关全局变量初始化
    stAppPdpEntity.enIpv4v6State    = AT_PDP_STATE_IDLE;
    stAppPdpEntity.enIpv4State      = AT_PDP_STATE_IDLE;
    stAppPdpEntity.enIpv6State      = AT_PDP_STATE_ACTED;
    g_stAtAppRaInfo.bitOpPrefixAddr = VOS_TRUE;

    //MOCKER
    MOCKER(At_FormatResultData)
        .expects(exactly(1));

    /*MOCKER(At_sprintf)
        .expects(exactly(1))
        .will(returnValue(10));*/

    //MOCKER(At_SendResultData)
    //  //.expects(exactly(1))
    //  .with(eq(AT_CLIENT_TAB_PCUI_INDEX),any(),any());

    //调用被测函数.
    AT_AppReportPdpActiveState(ucIndex, &stAppPdpEntity);

    //执行检查

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_AppReportPdpActiveState, Test_AT_AppReportPdpActiveState_007)
{
    //参数定义
    AT_PDP_ENTITY_STRU                  stAppPdpEntity;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    //相关全局变量初始化
    stAppPdpEntity.enIpv4v6State    = AT_PDP_STATE_IDLE;
    stAppPdpEntity.enIpv4State      = AT_PDP_STATE_ACTED;
    stAppPdpEntity.enIpv6State      = AT_PDP_STATE_IDLE;
    g_stAtAppRaInfo.bitOpPrefixAddr = VOS_FALSE;

    //MOCKER
    MOCKER(At_FormatResultData)
        .expects(exactly(1));

    /*MOCKER(At_sprintf)
        .expects(exactly(1))
        .will(returnValue(10));*/

    //MOCKER(At_SendResultData)
    //  //.expects(exactly(1))
    //  .with(eq(AT_CLIENT_TAB_PCUI_INDEX),any(),any());

    //调用被测函数.
    AT_AppReportPdpActiveState(ucIndex, &stAppPdpEntity);

    //执行检查

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_AppReportPdpActiveState, Test_AT_AppReportPdpActiveState_008)
{
    //参数定义
    VOS_UINT8                           ucIndex;
    AT_PDP_ENTITY_STRU                  stAppPdpEntity;

    //参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    //相关全局变量初始化
    stAppPdpEntity.enIpv4v6State    = AT_PDP_STATE_ACTING;
    stAppPdpEntity.enIpv4State      = AT_PDP_STATE_ACTING;
    stAppPdpEntity.enIpv6State      = AT_PDP_STATE_ACTING;
    g_stAtAppRaInfo.bitOpPrefixAddr = VOS_FALSE;

    //MOCKER
    MOCKER(At_FormatResultData)
        .expects(exactly(1));

    //调用被测函数.
    AT_AppReportPdpActiveState(ucIndex, &stAppPdpEntity);

    //执行检查

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_AT_SetCposPara: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                     = AT_CLIENT_TAB_APP_INDEX;
        g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    }

    void TearDown()
    {

    }

    VOS_UINT8                           ucIndex;

};


TEST_F(Test_AT_SetCposPara, Test_AT_SetCposPara_001)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    // 初始化全局变量;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetCposPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}



TEST_F(Test_AT_SetCposPara, Test_AT_SetCposPara_002)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetCposPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCposPara, Test_AT_SetCposPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    // 参数初始化

    // 初始化全局变量;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetCposPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_WAIT_XML_INPUT, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCposPara, Test_AT_SetCposPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    // 参数初始化

    // 初始化全局变量;

    // MOCKER操作;
    MOCKER(V_MemAlloc)
        .expects(exactly(1))
        .will(returnValue((VOS_VOID*)VOS_NULL_PTR));

    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetCposPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetCposrPara: public ::testing::Test
{
public:
     void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                         = AT_CLIENT_TAB_APP_INDEX;
        g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    }

    void TearDown()
    {

    }

    VOS_UINT8                           ucIndex;
};


TEST_F(Test_AT_SetCposrPara, Test_AT_SetCposrPara_001)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    // 初始化全局变量;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetCposrPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}



TEST_F(Test_AT_SetCposrPara, Test_AT_SetCposrPara_002)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetCposrPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCposrPara, Test_AT_SetCposrPara_003)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex = 2;
    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetCposrPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCposrPara, Test_AT_SetCposrPara_004)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex = 1;
    gastAtParaList[0].ulParaValue = AT_CPOSR_DISABLE;

    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetCposrPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetXcposrPara: public ::testing::Test
{
public:
     void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                         = AT_CLIENT_TAB_APP_INDEX;
        g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    }

    void TearDown()
    {

    }

    VOS_UINT8                           ucIndex;
};


TEST_F(Test_AT_SetXcposrPara, Test_AT_SetXcposrPara_001)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    // 初始化全局变量;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetXcposrPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();

}



TEST_F(Test_AT_SetXcposrPara, Test_AT_SetXcposrPara_002)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetXcposrPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetXcposrPara, Test_AT_SetXcposrPara_003)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex = 2;
    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetXcposrPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();}


TEST_F(Test_AT_SetXcposrPara, Test_AT_SetXcposrPara_004)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].ulParaValue       = AT_XCPOSR_DISABLE;
    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetXcposrPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetCgpsClockPara: public ::testing::Test
{
public:
   void SetUp()
	{
		UT_STUB_INIT();

        AT_InitSetCtx();
        ucIndex                         = AT_CLIENT_TAB_APP_INDEX;
        g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    }

    void TearDown()
    {

    }

    VOS_UINT8                           ucIndex;
};


TEST_F(Test_AT_SetCgpsClockPara, Test_AT_SetCgpsClockPara_001)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    // 初始化全局变量;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetCgpsClockPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}



TEST_F(Test_AT_SetCgpsClockPara, Test_AT_SetCgpsClockPara_002)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetCgpsClockPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();

}


TEST_F(Test_AT_SetCgpsClockPara, Test_AT_SetCgpsClockPara_003)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex = 2;
    // MOCKER操作;
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetCgpsClockPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

}



class Test_AT_SetGpsInfoPara: public ::testing::Test
{
public:
   void SetUp()
	{
		UT_STUB_INIT();

    }

    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetGpsInfoPara, Test_AT_SetGpsInfoPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                             =   0;

    // 初始化全局变量;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetGpsInfoPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


#if 0

TEST_F(Test_At_NdisDupProc,NDISDUP发起拨号)
{
    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 1;
    gastAtParaList[2].usParaLen = 0;
    gastAtParaList[3].usParaLen = 0;
    gastAtParaList[4].usParaLen = 0;
    gastAtParaList[5].usParaLen = 0;

    //MOCKER
    MOCKER(At_NdisDialup)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    //调用被测函数

    //执行检查
    EXPECT_EQ(AT_OK, At_NdisDupProc(0));
    EXPECT_EQ(1, gucAtNdisDialFlg);
    EXPECT_EQ(0, g_SmPdpRejCause);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_NdisConnProc,NDISCONN发起拨号)
{
    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 1;
    gastAtParaList[2].usParaLen = 0;
    gastAtParaList[3].usParaLen = 0;
    gastAtParaList[4].usParaLen = 0;
    gastAtParaList[5].usParaLen = 0;

    //MOCKER
    MOCKER(At_NdisDialup)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    //调用被测函数

    //执行检查
    EXPECT_EQ(AT_OK, At_NdisConnProc(0));
    EXPECT_EQ(1, gucAtNdisDialFlg);
    EXPECT_EQ(0, g_SmPdpRejCause);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#endif


class Test_At_NdisDupProc: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        //初始化用户输出缓存
        gstAtSendData.usBufLen = 0;
        PS_MEM_SET(gstAtSendData.aucBuffer, 0, sizeof(gstAtSendData.aucBuffer));
    }
    void TearDown()
    {
        AT_PS_SetPsCallErrCause(0,TAF_PS_CAUSE_SUCCESS);
    }

};


TEST_F(Test_At_NdisDupProc, Test_At_NdisDupProc_001)
{
    //参数定义
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    //MOCKER操作

    //调用被测函数
    ulRslt = At_NdisDupProc(ucIndex);

    //执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRslt);
    EXPECT_EQ((TAF_PS_CAUSE_ENUM_UINT32)TAF_PS_CAUSE_INVALID_PARAMETER, AT_PS_GetPsCallErrCause(ucIndex));

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_NdisDupProc, Test_At_NdisDupProc_002)
{
    //参数定义
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    //MOCKER操作
    MOCKER(AT_NidsCheckDialParam)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS));

    //调用被测函数
    ulRslt = At_NdisDupProc(ucIndex);

    //执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRslt);
    EXPECT_EQ((TAF_PS_CAUSE_ENUM_UINT32)TAF_PS_CAUSE_INVALID_PARAMETER, AT_PS_GetPsCallErrCause(ucIndex));

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_AT_DialProc_I: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        //初始化用户输出缓存
        gstAtSendData.usBufLen = 0;
        PS_MEM_SET(gstAtSendData.aucBuffer, 0, sizeof(gstAtSendData.aucBuffer));
    }
    void TearDown()
    {
        AT_PS_SetPsCallErrCause(0,TAF_PS_CAUSE_SUCCESS);
    }

};


TEST_F(Test_AT_DialProc_I, Test_AT_DialProc_I_001)
{
    //参数定义
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    //MOCKER操作

    //调用被测函数
    ulRslt = AT_DialProc(ucIndex);

    //执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRslt);
    EXPECT_EQ((TAF_PS_CAUSE_ENUM_UINT32)TAF_PS_CAUSE_INVALID_PARAMETER, AT_PS_GetPsCallErrCause(ucIndex));

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_DialProc_I, Test_AT_DialProc_I_002)
{
    //参数定义
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    //MOCKER操作
    MOCKER(AT_AppCheckDialParam)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS));

    //调用被测函数
    ulRslt = AT_DialProc(ucIndex);

    //执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRslt);
    EXPECT_EQ((TAF_PS_CAUSE_ENUM_UINT32)TAF_PS_CAUSE_INVALID_PARAMETER, AT_PS_GetPsCallErrCause(ucIndex));

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_DialProc_I, Test_AT_DialProc_I_003)
{
    //参数定义
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 1;
    g_enHiLinkMode = AT_HILINK_GATEWAY_MODE;

    //MOCKER操作
    MOCKER(AT_AppCheckDialParam)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    //调用被测函数
    ulRslt = AT_DialProc(ucIndex);

    //执行检查
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRslt);
    EXPECT_EQ((TAF_PS_CAUSE_ENUM_UINT32)TAF_PS_CAUSE_UNKNOWN, AT_PS_GetPsCallErrCause(ucIndex));

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_AT_AppCheckDialParam: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {
    }
};


TEST_F(Test_AT_AppCheckDialParam, AT_AppCheckDialParam_001)
{
    //参数定义
    VOS_UINT32                          ulRslt;

    //参数初始化

    //相关全局变量初始化
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 2;

    //MOCKER操作

    //调用被测函数
    ulRslt = AT_AppCheckDialParam();

    //执行检查
    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRslt);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_AppCheckDialParam, AT_AppCheckDialParam_002)
{
    //参数定义
    VOS_UINT32                          ulRslt;

    //参数初始化

    //相关全局变量初始化
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 1;
    gastAtParaList[3].usParaLen = 256;

    //MOCKER操作

    //调用被测函数
    ulRslt = AT_AppCheckDialParam();

    //执行检查
    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRslt);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_AppCheckDialParam, AT_AppCheckDialParam_003)
{
    //参数定义
    VOS_UINT32                          ulRslt;

    //参数初始化

    //相关全局变量初始化
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 1;
    gastAtParaList[3].usParaLen = 255;
    gastAtParaList[4].usParaLen = 256;

    //MOCKER操作

    //调用被测函数
    ulRslt = AT_AppCheckDialParam();

    //执行检查
    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRslt);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_AppCheckDialParam, AT_AppCheckDialParam_004)
{
    //参数定义
    VOS_UINT32                          ulRslt;

    //参数初始化

    //相关全局变量初始化
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 1;
    gastAtParaList[3].usParaLen = 255;
    gastAtParaList[4].usParaLen = 255;
    gastAtParaList[6].usParaLen = 16;

    //MOCKER操作

    //调用被测函数
    ulRslt = AT_AppCheckDialParam();

    //执行检查
    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRslt);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_AppCheckDialParam, AT_AppCheckDialParam_005)
{
    //参数定义
    VOS_UINT32                          ulRslt;

    //参数初始化

    //相关全局变量初始化
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 1;
    gastAtParaList[3].usParaLen = 255;
    gastAtParaList[4].usParaLen = 255;
    gastAtParaList[6].usParaLen = 15;

    //MOCKER操作
    MOCKER(AT_Ipv4AddrAtoi)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    //调用被测函数
    ulRslt = AT_AppCheckDialParam();

    //执行检查
    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRslt);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_AT_SetApSecPara: public ::testing::Test
{
public:
    VOS_UINT8                           ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex     = AT_CLIENT_TAB_APP_INDEX;

    }

    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetApSecPara, Test_AT_SetApSecPara_001)
{
    // 变量声明
    VOS_CHAR                           *pcApsecPara;
    VOS_UINT16                          usLen;
    VOS_UINT32                          ulResult;

    // 参数初始化
    pcApsecPara = "00D090781000000102030405060708090A0B0C0D0E0";
    usLen       = (VOS_UINT16)VOS_StrLen(pcApsecPara);

    // 初始化全局变量

    // MOCKER操作

    // 调用被测函数
    ulResult    = AT_SetApSecPara(ucIndex, (VOS_UINT8 *)pcApsecPara, usLen);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApSecPara, Test_AT_SetApSecPara_002)
{
    // 变量声明
    VOS_CHAR                           *pcApsecPara;
    VOS_UINT16                          usLen;
    VOS_UINT32                          ulResult;
    AT_MTA_APSEC_REQ_STRU               stApSecSetReq;
    VOS_UINT8                           aucData[] = {0x00, 0xD0, 0x90, 0x78,
                                                     0x10, 0x00, 0x01, 0x02,
                                                     0x03, 0x04, 0x05, 0x06,
                                                     0x07, 0x08, 0x09, 0x0A,
                                                     0x0B, 0x0C, 0x0D, 0x0E,
                                                     0x0F, 0x00};
    VOS_UINT8                           aucPara[AT_APSEC_CMD_MAX_LEN];

    // 参数初始化
    pcApsecPara = "00D0907810000102030405060708090A0B0C0D0E0F00";
    usLen       = (VOS_UINT16)VOS_StrLen(pcApsecPara);
    memset(&stApSecSetReq, 0, sizeof(AT_MTA_APSEC_REQ_STRU));
    memset(aucPara, 0, AT_APSEC_CMD_MAX_LEN);
    memcpy(aucPara, pcApsecPara, usLen + 1);
    stApSecSetReq.ulSPLen   = sizeof(aucData);
    memcpy(stApSecSetReq.aucSecPacket, aucData, sizeof(aucData));

    // 初始化全局变量
    gastAtClientTab[ucIndex].usClientId = AT_CLIENT_TAB_APP_INDEX;
    gastAtClientTab[ucIndex].opId       = 0;

    // MOCKER操作
    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .with(eq(gastAtClientTab[ucIndex].usClientId),
              eq(gastAtClientTab[ucIndex].opId),
              eq((VOS_UINT16)ID_AT_MTA_APSEC_SET_REQ),
              mirror((VOS_VOID *)&stApSecSetReq, (VOS_UINT32)sizeof(AT_MTA_APSEC_REQ_STRU)),
              eq((VOS_UINT32)sizeof(AT_MTA_APSEC_REQ_STRU)),
              eq((VOS_UINT32)UEPS_PID_MTA))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    // 调用被测函数
    ulResult    = AT_SetApSecPara(ucIndex, aucPara, usLen);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulResult);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApSecPara, Test_AT_SetApSecPara_003)
{
    // 变量声明
    VOS_CHAR                           *pcApsecPara;
    VOS_UINT16                          usLen;
    VOS_UINT32                          ulResult;
    AT_MTA_APSEC_REQ_STRU               stApSecSetReq;
    VOS_UINT8                           aucData[] = {0x00, 0xD0, 0x90, 0x78,
                                                     0x10, 0x00, 0x01, 0x02,
                                                     0x03, 0x04, 0x05, 0x06,
                                                     0x07, 0x08, 0x09, 0x0A,
                                                     0x0B, 0x0C, 0x0D, 0x0E,
                                                     0x0F, 0x00};
    VOS_UINT8                           aucPara[AT_APSEC_CMD_MAX_LEN];

    // 参数初始化
    pcApsecPara = "00D0907810000102030405060708090A0B0C0D0E0F00";
    usLen       = (VOS_UINT16)VOS_StrLen(pcApsecPara);
    memset(&stApSecSetReq, 0, sizeof(AT_MTA_APSEC_REQ_STRU));
    memset(aucPara, 0, AT_APSEC_CMD_MAX_LEN);
    memcpy(aucPara, pcApsecPara, usLen + 1);
    stApSecSetReq.ulSPLen   = sizeof(aucData);
    memcpy(stApSecSetReq.aucSecPacket, aucData, sizeof(aucData));

    // 初始化全局变量
    gastAtClientTab[ucIndex].usClientId = AT_CLIENT_TAB_APP_INDEX;
    gastAtClientTab[ucIndex].opId       = 0;

    // MOCKER操作
    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .with(eq(gastAtClientTab[ucIndex].usClientId),
              eq(gastAtClientTab[ucIndex].opId),
              eq((VOS_UINT16)ID_AT_MTA_APSEC_SET_REQ),
        	mirror((VOS_VOID *)&stApSecSetReq, (VOS_UINT32)sizeof(AT_MTA_APSEC_REQ_STRU)),
              eq((VOS_UINT32)sizeof(AT_MTA_APSEC_REQ_STRU)),
              eq((VOS_UINT32)UEPS_PID_MTA))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulResult    = AT_SetApSecPara(ucIndex, aucPara, usLen);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulResult);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_APSEC_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    GlobalMockObject::verify();
}


class Test_AT_SetCISAPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetCISAPara, Test_AT_SetCISAPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulLengthValue;
    VOS_CHAR                           *pcCmdPara;
    VOS_UINT8                           aucCommand[SI_APDU_MAX_LEN * 2];
    VOS_UINT16                          usCommandLength;

    //参数初始化
    ucIndex         = AT_CLIENT_TAB_APP_INDEX;
    pcCmdPara       = "000102030405060708090A0B0C0D0E0F";
    ulLengthValue   = VOS_StrLen(pcCmdPara);
    memset(aucCommand, 0, SI_APDU_MAX_LEN * 2);
    memcpy(aucCommand, pcCmdPara, ulLengthValue);
    usCommandLength = ulLengthValue - 1;

    // 初始化全局变量;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetCISAPara(ucIndex, ulLengthValue, aucCommand, usCommandLength);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCISAPara, Test_AT_SetCISAPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulLengthValue;
    VOS_CHAR                           *pcCmdPara;
    VOS_UINT8                           aucCommand[SI_APDU_MAX_LEN * 2];
    VOS_UINT16                          usCommandLength;

    //参数初始化
    ucIndex         = AT_CLIENT_TAB_APP_INDEX;
    pcCmdPara       = "000102030405060708090A0B0C0D0E0R";
    ulLengthValue   = VOS_StrLen(pcCmdPara);
    memset(aucCommand, 0, SI_APDU_MAX_LEN * 2);
    memcpy(aucCommand, pcCmdPara, ulLengthValue);
    usCommandLength = ulLengthValue;

    // 初始化全局变量;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetCISAPara(ucIndex, ulLengthValue, aucCommand, usCommandLength);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCISAPara, Test_AT_SetCISAPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulLengthValue;
    VOS_CHAR                           *pcCmdPara;
    VOS_UINT8                           aucCommand[SI_APDU_MAX_LEN * 2];
    VOS_UINT16                          usCommandLength;

    //参数初始化
    ucIndex         = AT_CLIENT_TAB_APP_INDEX;
    pcCmdPara       = "000102030405060708090A0B0C0D0E0F";
    ulLengthValue   = VOS_StrLen(pcCmdPara);
    memset(aucCommand, 0, SI_APDU_MAX_LEN * 2);
    memcpy(aucCommand, pcCmdPara, ulLengthValue);
    usCommandLength = ulLengthValue;

    // 初始化全局变量

    // MOCKER操作
    MOCKER(SI_PIH_IsdbAccessReq)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    // 调用被测函数
    ulRet = AT_SetCISAPara(ucIndex, ulLengthValue, aucCommand, usCommandLength);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCISAPara, Test_AT_SetCISAPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulLengthValue;
    VOS_CHAR                           *pcCmdPara;
    VOS_UINT8                           aucCommand[SI_APDU_MAX_LEN * 2];
    VOS_UINT16                          usCommandLength;

    //参数初始化
    ucIndex         = AT_CLIENT_TAB_APP_INDEX;
    pcCmdPara       = "000102030405060708090A0B0C0D0E0F";
    ulLengthValue   = VOS_StrLen(pcCmdPara);
    memset(aucCommand, 0, SI_APDU_MAX_LEN * 2);
    memcpy(aucCommand, pcCmdPara, ulLengthValue);
    usCommandLength = ulLengthValue;

    // 初始化全局变量

    // MOCKER操作
    MOCKER(SI_PIH_IsdbAccessReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRet = AT_SetCISAPara(ucIndex, ulLengthValue, aucCommand, usCommandLength);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}



class Test_AT_SetCmutPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        //初始化用户输出缓存
        gstAtSendData.usBufLen = 0;
        PS_MEM_SET(gstAtSendData.aucBuffer, 0, sizeof(gstAtSendData.aucBuffer));
    }
    void TearDown()
    {
    }

};


TEST_F(Test_AT_SetCmutPara, Test_AT_SetCmutPara_001)
{
    //参数定义
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;
    AT_PAR_CMD_ELEMENT_STRU             stCmdElement    = {AT_CMD_CMUT,
                                                           AT_SetCmutPara, AT_SET_PARA_TIME,
                                                           AT_QryCmutPara, AT_QRY_PARA_TIME,
                                                           AT_TestCmutPara, AT_NOT_SET_TIME,
                                                           VOS_NULL_PTR ,    AT_NOT_SET_TIME,
                                                           AT_CME_INCORRECT_PARAMETERS, CMD_TBL_PIN_IS_LOCKED,
                                                           (VOS_UINT8 *)"+CMUT", (VOS_UINT8 *)"(0,1)"};


    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stParseContext[ucIndex].pstCmdElement = &stCmdElement;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    //MOCKER操作

    //调用被测函数
    ulRslt = AT_SetCmutPara(ucIndex);

    //执行检查
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRslt);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCmutPara, Test_AT_SetCmutPara_002)
{
    //参数定义
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;
    AT_PAR_CMD_ELEMENT_STRU             stCmdElement    = {AT_CMD_CMUT,
                                                           AT_SetCmutPara, AT_SET_PARA_TIME,
                                                           AT_QryCmutPara, AT_QRY_PARA_TIME,
                                                           AT_TestCmutPara, AT_NOT_SET_TIME,
                                                           VOS_NULL_PTR ,    AT_NOT_SET_TIME,
                                                           AT_CME_INCORRECT_PARAMETERS, CMD_TBL_PIN_IS_LOCKED,
                                                           (VOS_UINT8 *)"+CMUT", (VOS_UINT8 *)"(0,1)"};


    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stParseContext[ucIndex].pstCmdElement = &stCmdElement;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;

    //MOCKER操作

    //调用被测函数
    ulRslt = AT_SetCmutPara(ucIndex);

    //执行检查
    ASSERT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRslt);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCmutPara, Test_AT_SetCmutPara_003)
{
    //参数定义
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;
    AT_PAR_CMD_ELEMENT_STRU             stCmdElement    = {AT_CMD_CMUT,
                                                           AT_SetCmutPara, AT_SET_PARA_TIME,
                                                           AT_QryCmutPara, AT_QRY_PARA_TIME,
                                                           AT_TestCmutPara, AT_NOT_SET_TIME,
                                                           VOS_NULL_PTR ,    AT_NOT_SET_TIME,
                                                           AT_CME_INCORRECT_PARAMETERS, CMD_TBL_PIN_IS_LOCKED,
                                                           (VOS_UINT8 *)"+CMUT", (VOS_UINT8 *)"(0,1)"};


    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stParseContext[ucIndex].pstCmdElement = &stCmdElement;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;

    //MOCKER操作
    MOCKER(APP_VC_SetMuteStatus)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    //调用被测函数
    ulRslt = AT_SetCmutPara(ucIndex);

    //执行检查
    ASSERT_EQ(AT_ERROR, ulRslt);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCmutPara, Test_AT_SetCmutPara_004)
{
    //参数定义
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;
    AT_PAR_CMD_ELEMENT_STRU             stCmdElement    = {AT_CMD_CMUT,
                                                           AT_SetCmutPara, AT_SET_PARA_TIME,
                                                           AT_QryCmutPara, AT_QRY_PARA_TIME,
                                                           AT_TestCmutPara, AT_NOT_SET_TIME,
                                                           VOS_NULL_PTR ,    AT_NOT_SET_TIME,
                                                           AT_CME_INCORRECT_PARAMETERS, CMD_TBL_PIN_IS_LOCKED,
                                                           (VOS_UINT8 *)"+CMUT", (VOS_UINT8 *)"(0,1)"};


    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stParseContext[ucIndex].pstCmdElement = &stCmdElement;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;

    //MOCKER操作

    //调用被测函数
    ulRslt = AT_SetCmutPara(ucIndex);

    //执行检查
    ASSERT_EQ(AT_CMD_CMUT_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    ASSERT_EQ(AT_WAIT_ASYNC_RETURN, ulRslt);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_WriteWifiNVToDefault: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {

    }
protected:
};


TEST_F(Test_At_WriteWifiNVToDefault, Test_At_WriteWifiNVToDefault_001)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    AT_CUSTOMIZE_ITEM_DFLT_ENUM_UINT8   enCustomizeItemStub;

    /* 初始化变量 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_UNSUPPORT));

    enCustomizeItemStub = AT_CUSTOMIZE_ITEM_DEFAULT_VALUE_FROM_CFGFILE;

    /* 全局变量赋值 */

    /* 调用消息入口函数 */
    ulRst = At_WriteWifiNVToDefault(enCustomizeItemStub);

    /* 结果验证*/
    EXPECT_EQ(VOS_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_At_WriteWifiNVToDefault, Test_At_WriteWifiNVToDefault_002)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    AT_CUSTOMIZE_ITEM_DFLT_ENUM_UINT8   enCustomizeItemStub;

    /* 初始化变量 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_SUPPORT));

    MOCKER(NV_WriteEx)
        .stubs()
        .will(returnValue((VOS_UINT32)NV_OK ));

    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue((VOS_UINT32)NV_OK ));

    enCustomizeItemStub = AT_CUSTOMIZE_ITEM_DEFAULT_VALUE_FROM_CFGFILE;

    /* 全局变量赋值 */

    /* 调用消息入口函数 */
    ulRst = At_WriteWifiNVToDefault(enCustomizeItemStub);

    /* 结果验证*/
    EXPECT_EQ(VOS_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


class Test_AT_SetWiFiLogPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {

    }
protected:
};


TEST_F(Test_AT_SetWiFiLogPara, Test_AT_SetWiFiLogPara_001)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_UINT8                           ucIndex = 0;

    /* 初始化变量 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_UNSUPPORT));


    /* 全局变量赋值 */

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiLogPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_ERROR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetWiFiLogPara, Test_AT_SetWiFiLogPara_002)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_UINT8                           ucIndex = 0;

    /* 初始化变量 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_SUPPORT));


    /* 全局变量赋值 */
    gucAtParaIndex = 3;

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiLogPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_TOO_MANY_PARA, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetWiFiLogPara, Test_AT_SetWiFiLogPara_003)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_UINT8                           ucIndex = 0;

    /* 初始化变量 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_SUPPORT));


    /* 全局变量赋值 */
    gucAtParaIndex = 2;
    gastAtParaList[0].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 1;

    memset(gastAtParaList[1].aucPara, 0, sizeof(gastAtParaList[1].aucPara));
    gastAtParaList[1].aucPara[0]    = 1;

    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(NV_WriteEx)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiLogPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetWiFiLogPara, Test_AT_SetWiFiLogPara_004)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_UINT8                           ucIndex = 0;

    /* 初始化变量 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_SUPPORT));


    /* 全局变量赋值 */
    gucAtParaIndex = 2;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[1].usParaLen     = 1;

    memset(gastAtParaList[1].aucPara, 0, sizeof(gastAtParaList[1].aucPara));
    gastAtParaList[1].aucPara[0]    = 1;

    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(NV_WriteEx)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiLogPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


class Test_AT_SetWiFiSsidPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {

    }
protected:
};


TEST_F(Test_AT_SetWiFiSsidPara, Test_AT_SetWiFiSsidPara_001)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_UINT8                           ucIndex = 0;

    /* 初始化变量 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_UNSUPPORT));


    /* 全局变量赋值 */

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiSsidPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_ERROR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetWiFiSsidPara, Test_AT_SetWiFiSsidPara_002)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_UINT8                           ucIndex = 0;

    /* 初始化变量 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_SUPPORT));


    /* 全局变量赋值 */
    gucAtParaIndex = 3;

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiSsidPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_TOO_MANY_PARA, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetWiFiSsidPara, Test_AT_SetWiFiSsidPara_003)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_UINT8                           ucIndex = 0;

    /* 初始化变量 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_SUPPORT));


    /* 全局变量赋值 */
    gucAtParaIndex = 2;

    gastAtParaList[1].usParaLen = AT_WIFI_SSID_LEN_MAX + 1;

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiSsidPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetWiFiSsidPara, Test_AT_SetWiFiSsidPara_004)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_UINT8                           ucIndex = 0;

    /* 初始化变量 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_SUPPORT));

    /* 全局变量赋值 */
    g_bAtDataLocked = PS_FALSE;

    gucAtParaIndex = 2;

    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = AT_WIFI_MAX_SSID_NUM;

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiSsidPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetWiFiSsidPara, Test_AT_SetWiFiSsidPara_005)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_UINT8                           ucIndex = 0;

    /* 初始化变量 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_SUPPORT));


    /* 全局变量赋值 */
    gucAtParaIndex = 2;

    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 0;

    g_bAtDataLocked = PS_TRUE;

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiSsidPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_ERROR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetWiFiSsidPara, Test_AT_SetWiFiSsidPara_006)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_UINT8                           ucIndex = 0;

    /* 初始化变量 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_SUPPORT));

    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_WriteEx)
        .stubs()
        .will(returnValue((VOS_UINT32)NV_OK));

    /* 全局变量赋值 */
    gucAtParaIndex = 2;

    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 0;

    g_bAtDataLocked = PS_FALSE;

    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_WriteEx)
        .stubs()
        .will(returnValue((VOS_UINT32)NV_OK));

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiSsidPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


class Test_AT_SetWiFiKeyPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {

    }
protected:
};


TEST_F(Test_AT_SetWiFiKeyPara, Test_AT_SetWiFiKeyPara_001)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_UINT8                           ucIndex = 0;

    /* 初始化变量 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_UNSUPPORT));


    /* 全局变量赋值 */

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiKeyPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_ERROR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetWiFiKeyPara, Test_AT_SetWiFiKeyPara_002)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_UINT8                           ucIndex = 0;

    /* 初始化变量 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_SUPPORT));


    /* 全局变量赋值 */
    gucAtParaIndex = 3;

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiKeyPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_TOO_MANY_PARA, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetWiFiKeyPara, Test_AT_SetWiFiKeyPara_003)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_UINT8                           ucIndex = 0;

    /* 初始化变量 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_SUPPORT));


    /* 全局变量赋值 */
    gucAtParaIndex = 2;
    g_bAtDataLocked = PS_FALSE;
    gastAtParaList[1].usParaLen = AT_WIFI_WLWPAPSK_LEN + 1;

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiKeyPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetWiFiKeyPara, Test_AT_SetWiFiKeyPara_004)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_UINT8                           ucIndex = 0;

    /* 初始化变量 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_SUPPORT));


    /* 全局变量赋值 */
    gucAtParaIndex = 2;

    g_bAtDataLocked = PS_FALSE;

    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = AT_WIFI_MAX_SSID_NUM;

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiKeyPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetWiFiKeyPara, Test_AT_SetWiFiKeyPara_005)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_UINT8                           ucIndex = 0;

    /* 初始化变量 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_SUPPORT));


    /* 全局变量赋值 */
    gucAtParaIndex = 2;

    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 0;

    g_bAtDataLocked = PS_TRUE;

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiKeyPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_ERROR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetWiFiKeyPara, Test_AT_SetWiFiKeyPara_006)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_UINT8                           ucIndex = 0;

    /* 初始化变量 */
    MOCKER(mdrv_misc_support_check)
        .stubs()
        .will(returnValue((BSP_MODULE_SUPPORT_E)BSP_MODULE_SUPPORT));


    /* 全局变量赋值 */
    gucAtParaIndex = 2;

    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 0;

    g_bAtDataLocked = PS_FALSE;

    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue(NV_OK));

    MOCKER(NV_WriteEx)
        .stubs()
        .will(returnValue(NV_OK));

    /* 调用消息入口函数 */
    ulRst = AT_SetWiFiKeyPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


class Test_At_SetCurcPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCurcPara, Test_At_SetCurcPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 0;

    // MOCKER操作

    // 调用被测函数
    ulRet = At_SetCurcPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCurcPara, Test_At_SetCurcPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 3;

    // MOCKER操作

    // 调用被测函数
    ulRet = At_SetCurcPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCurcPara, Test_At_SetCurcPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 2;
    gastAtParaList[1].usParaLen     = AT_CURC_RPT_CFG_PARA_LEN - 1;
    PS_MEM_SET(gastAtParaList[1].aucPara, '0', AT_CURC_RPT_CFG_PARA_LEN - 1);

    // MOCKER操作

    // 调用被测函数
    ulRet = At_SetCurcPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCurcPara, Test_At_SetCurcPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           aucData[AT_CURC_RPT_CFG_MAX_SIZE];
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;
    PS_MEM_SET(aucData, 0xFF, AT_CURC_RPT_CFG_MAX_SIZE);

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 2;
    gastAtParaList[1].usParaLen     = AT_CURC_RPT_CFG_PARA_LEN;
    PS_MEM_SET(gastAtParaList[1].aucPara, '0', AT_CURC_RPT_CFG_PARA_LEN);
    gastAtParaList[1].aucPara[AT_CURC_RPT_CFG_PARA_LEN - 1] = 'G';

    // MOCKER操作

    // 调用被测函数
    ulRet = At_SetCurcPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCurcPara, Test_At_SetCurcPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           aucData[AT_CURC_RPT_CFG_MAX_SIZE];
    VOS_UINT8                           ucIndex;
    AT_MTA_CURC_SET_NOTIFY_STRU         stAtCmd;
    MN_OPERATION_ID_T                   ucOpId;
    VOS_UINT16                          usMsgType;
    VOS_UINT32                          ulRcvPid;
#if  (FEATURE_ON == FEATURE_LTE)
    L4A_IND_CFG_STRU                    stL4AIndCfgReq;
#endif

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;
    PS_MEM_SET(aucData, 0xFF, AT_CURC_RPT_CFG_MAX_SIZE);

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 2;
    gastAtParaList[1].usParaLen     = AT_CURC_RPT_CFG_PARA_LEN;
    ucOpId                          = 0;
    usMsgType                       = ID_AT_MTA_CURC_SET_NOTIFY;
    ulRcvPid                        = I0_UEPS_PID_MTA;
    PS_MEM_SET(gastAtParaList[1].aucPara, '0', AT_CURC_RPT_CFG_PARA_LEN);

    // MOCKER操作
    PS_MEM_SET(aucData, 0x00, AT_CURC_RPT_CFG_MAX_SIZE);
    PS_MEM_SET(&stAtCmd, 0x00, sizeof(stAtCmd));
    stAtCmd.enCurcRptType = (AT_MTA_RPT_GENERAL_CTRL_TYPE_ENUM_UINT8)gastAtParaList[0].ulParaValue;

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq(gastAtClientTab[ucIndex].usClientId),
                eq(ucOpId),
                eq(usMsgType),
                mirror((VOS_VOID*)&stAtCmd, (VOS_UINT32)sizeof(stAtCmd)),
                eq((VOS_UINT32)sizeof(stAtCmd)),
                eq(ulRcvPid))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

#if  (FEATURE_ON == FEATURE_LTE)
    PS_MEM_SET(&stL4AIndCfgReq, 0x00, sizeof(stL4AIndCfgReq));
    stL4AIndCfgReq.curc_bit_valid  = 1;

    MOCKER(AT_SetLIndCfgReq)
        .stubs()
        .with(any(),mirror(&stL4AIndCfgReq, (VOS_UINT32)sizeof(stL4AIndCfgReq)))
        .will(returnValue((VOS_UINT32)AT_OK));
#endif

    // 调用被测函数
    ulRet = At_SetCurcPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCurcPara, Test_At_SetCurcPara_006)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    AT_MTA_CURC_SET_NOTIFY_STRU         stAtCmd;
    MN_OPERATION_ID_T                   ucOpId;
    VOS_UINT16                          usMsgType;
    VOS_UINT32                          ulRcvPid;
#if  (FEATURE_ON == FEATURE_LTE)
    L4A_IND_CFG_STRU                stL4AIndCfgReq;
#endif

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 0;
    ucOpId                          = 0;
    usMsgType                       = ID_AT_MTA_CURC_SET_NOTIFY;
    ulRcvPid                        = I0_UEPS_PID_MTA;

    // MOCKER操作
    PS_MEM_SET(&stAtCmd, 0x00, sizeof(stAtCmd));
    stAtCmd.enCurcRptType = (AT_MTA_RPT_GENERAL_CTRL_TYPE_ENUM_UINT8)gastAtParaList[0].ulParaValue;

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq(gastAtClientTab[ucIndex].usClientId),
                eq(ucOpId),
                eq(usMsgType),
                mirror((VOS_VOID *)&stAtCmd, (VOS_UINT32)sizeof(stAtCmd)),
                eq((VOS_UINT32)sizeof(stAtCmd)),
                eq(ulRcvPid))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

#if  (FEATURE_ON == FEATURE_LTE)
    PS_MEM_SET(&stL4AIndCfgReq, 0x00, sizeof(stL4AIndCfgReq));
    stL4AIndCfgReq.curc_bit_valid  = 1;

    MOCKER(AT_SetLIndCfgReq)
        .stubs()
        .with(any(),mirror(&stL4AIndCfgReq, (VOS_UINT32)sizeof(stL4AIndCfgReq)))
        .will(returnValue((VOS_UINT32)AT_OK));
#endif

    // 调用被测函数
    ulRet = At_SetCurcPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCurcPara, Test_At_SetCurcPara_007)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    AT_MTA_CURC_SET_NOTIFY_STRU         stAtCmd;
    MN_OPERATION_ID_T                   ucOpId;
    VOS_UINT16                          usMsgType;
    VOS_UINT32                          ulRcvPid;
#if  (FEATURE_ON == FEATURE_LTE)
    L4A_IND_CFG_STRU                stL4AIndCfgReq;
#endif

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;
    ucOpId                          = 0;
    usMsgType                       = ID_AT_MTA_CURC_SET_NOTIFY;
    ulRcvPid                        = I0_UEPS_PID_MTA;

    // MOCKER操作
    PS_MEM_SET(&stAtCmd, 0x00, sizeof(stAtCmd));
    stAtCmd.enCurcRptType = (AT_MTA_RPT_GENERAL_CTRL_TYPE_ENUM_UINT8)gastAtParaList[0].ulParaValue;
    PS_MEM_SET(stAtCmd.aucRptCfg, 0xFF, sizeof(stAtCmd.aucRptCfg));

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq(gastAtClientTab[ucIndex].usClientId),
                eq(ucOpId),
                eq(usMsgType),
                mirror((VOS_VOID *)&stAtCmd, (VOS_UINT32)sizeof(stAtCmd)),
                eq((VOS_UINT32)sizeof(stAtCmd)),
                eq(ulRcvPid))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

#if  (FEATURE_ON == FEATURE_LTE)
    PS_MEM_SET(&stL4AIndCfgReq, 0x00, sizeof(stL4AIndCfgReq));
    stL4AIndCfgReq.curc_bit_valid  = 1;
    PS_MEM_SET(stL4AIndCfgReq.aucCurcCfgReq, 0xFF, sizeof(stL4AIndCfgReq.aucCurcCfgReq));

    MOCKER(AT_SetLIndCfgReq)
        .stubs()
        .with(any(), mirror(&stL4AIndCfgReq, (VOS_UINT32)sizeof(stL4AIndCfgReq)))
        .will(returnValue((VOS_UINT32)AT_OK));
#endif

    // 调用被测函数
    ulRet = At_SetCurcPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCurcPara, Test_At_SetCurcPara_008)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    AT_MTA_CURC_SET_NOTIFY_STRU         stAtCmd;
    MN_OPERATION_ID_T                   ucOpId;
    VOS_UINT16                          usMsgType;
    VOS_UINT32                          ulRcvPid;
#if  (FEATURE_ON == FEATURE_LTE)
    L4A_IND_CFG_REQ_STRU                stL4AIndCfgReq;
#endif

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;
    ucOpId                          = 0;
    usMsgType                       = ID_AT_MTA_CURC_SET_NOTIFY;
    ulRcvPid                        = I0_UEPS_PID_MTA;

    // MOCKER操作
    PS_MEM_SET(&stAtCmd, 0x00, sizeof(stAtCmd));
    stAtCmd.enCurcRptType = (AT_MTA_RPT_GENERAL_CTRL_TYPE_ENUM_UINT8)gastAtParaList[0].ulParaValue;
    PS_MEM_SET(stAtCmd.aucRptCfg, 0xFF, sizeof(stAtCmd.aucRptCfg));

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq(gastAtClientTab[ucIndex].usClientId),
                eq(ucOpId),
                eq(usMsgType),
                mirror((VOS_VOID *)&stAtCmd, (VOS_UINT32)sizeof(stAtCmd)),
                eq((VOS_UINT32)sizeof(stAtCmd)),
                eq(ulRcvPid))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

#if  (FEATURE_ON == FEATURE_LTE)
    MOCKER(AT_SetLIndCfgReq)
        .expects(never());
#endif

    // 调用被测函数
    ulRet = At_SetCurcPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetSimlockUnlockPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetSimlockUnlockPara, Test_AT_SetSimlockUnlockPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 0;

    // MOCKER操作
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    // 调用被测函数
    ulRet = AT_SetSimlockUnlockPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetSimlockUnlockPara, Test_AT_SetSimlockUnlockPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_APP_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 0;

    // MOCKER操作
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetSimlockUnlockPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetSimlockUnlockPara, Test_AT_SetSimlockUnlockPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_APP_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 3;
    gastAtParaList[0].ulParaValue   = 4;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "NET", VOS_StrLen("NET") + 1);
    gastAtParaList[1].usParaLen     = AT_SIMLOCKUNLOCK_PWD_PARA_LEN;
    gastAtParaList[1].ulParaValue   = 0;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "1111111111111111", AT_SIMLOCKUNLOCK_PWD_PARA_LEN + 1);

    // MOCKER操作
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetSimlockUnlockPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetSimlockUnlockPara, Test_AT_SetSimlockUnlockPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_APP_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 3;
    gastAtParaList[0].ulParaValue   = 0;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "NET", VOS_StrLen("NET") + 1);
    gastAtParaList[1].usParaLen     = AT_SIMLOCKUNLOCK_PWD_PARA_LEN;
    gastAtParaList[1].ulParaValue   = 0;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "11111111111111F1", AT_SIMLOCKUNLOCK_PWD_PARA_LEN + 1);

    // MOCKER操作
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    // 调用被测函数
    ulRet = AT_SetSimlockUnlockPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetSimlockUnlockPara, Test_AT_SetSimlockUnlockPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    VOS_UINT8                           ucClientId;
    VOS_UINT8                           ucOptionId;
    VOS_UINT8                           ucPId;
    VOS_UINT32                          ulMsgType;
    AT_MTA_SIMLOCKUNLOCK_REQ_STRU       stSimlockUnlockSetReq;

    // 参数初始化
    ucClientId      = AT_CLIENT_ID_APP;
    ucIndex         = AT_CLIENT_TAB_APP_INDEX;
    ucOptionId      = 0;
    ucPId           = UEPS_PID_MTA;
    ulMsgType       = ID_AT_MTA_SIMLOCKUNLOCK_SET_REQ;

    PS_MEM_SET(&stSimlockUnlockSetReq, 0, sizeof(AT_MTA_SIMLOCKUNLOCK_REQ_STRU));
    stSimlockUnlockSetReq.enCategory    = AT_MTA_PERS_CATEGORY_NETWORK;
    PS_MEM_SET(stSimlockUnlockSetReq.aucPassword, 0x01, MTA_SIMLOCK_PASSWORD_LEN);

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 3;
    gastAtParaList[0].ulParaValue   = 0;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "NET", VOS_StrLen("NET") + 1);
    gastAtParaList[1].usParaLen     = AT_SIMLOCKUNLOCK_PWD_PARA_LEN;
    gastAtParaList[1].ulParaValue   = 0;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "1111111111111111", AT_SIMLOCKUNLOCK_PWD_PARA_LEN + 1);

    gastAtClientTab[ucIndex].usClientId = AT_CLIENT_ID_APP;
    gastAtClientTab[ucIndex].opId       = 0;

    // MOCKER操作
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq((MN_CLIENT_ID_T)ucClientId),
              eq((MN_OPERATION_ID_T)ucOptionId),
              eq((VOS_UINT16)ulMsgType),
              mirror((VOS_VOID *)&stSimlockUnlockSetReq, (VOS_UINT32)sizeof(AT_MTA_SIMLOCKUNLOCK_REQ_STRU)),
              eq((VOS_UINT32)sizeof(AT_MTA_SIMLOCKUNLOCK_REQ_STRU)),
              eq((VOS_UINT32)ucPId))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    // 调用被测函数
    ulRet = AT_SetSimlockUnlockPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetSimlockUnlockPara, Test_AT_SetSimlockUnlockPara_006)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    VOS_UINT8                           ucClientId;
    VOS_UINT8                           ucOptionId;
    VOS_UINT32                          ulMsgType;
    AT_MTA_SIMLOCKUNLOCK_REQ_STRU       stSimlockUnlockSetReq;

    // 参数初始化
    ucClientId      = AT_CLIENT_ID_APP;
    ucIndex         = AT_CLIENT_TAB_APP_INDEX;
    ucOptionId      = 0;
    ulMsgType       = ID_AT_MTA_SIMLOCKUNLOCK_SET_REQ;

    PS_MEM_SET(&stSimlockUnlockSetReq, 0, sizeof(AT_MTA_SIMLOCKUNLOCK_REQ_STRU));
    stSimlockUnlockSetReq.enCategory    = AT_MTA_PERS_CATEGORY_NETWORK;
    PS_MEM_SET(stSimlockUnlockSetReq.aucPassword, 0x01, MTA_SIMLOCK_PASSWORD_LEN);

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 3;
    gastAtParaList[0].ulParaValue   = 0;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "NET", VOS_StrLen("NET") + 1);
    gastAtParaList[1].usParaLen     = AT_SIMLOCKUNLOCK_PWD_PARA_LEN;
    gastAtParaList[1].ulParaValue   = 0;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "1111111111111111", AT_SIMLOCKUNLOCK_PWD_PARA_LEN + 1);

    gastAtClientTab[ucIndex].usClientId = AT_CLIENT_ID_APP;
    gastAtClientTab[ucIndex].opId       = 0;

    gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_INVALID;

    // MOCKER操作
    MOCKER(AT_IsApPort)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .with(eq((MN_CLIENT_ID_T)ucClientId),
              eq((MN_OPERATION_ID_T)ucOptionId),
              eq((VOS_UINT16)ulMsgType),
              mirror((VOS_VOID*)&stSimlockUnlockSetReq, (VOS_UINT32)sizeof(AT_MTA_SIMLOCKUNLOCK_REQ_STRU)),
              eq((VOS_UINT32)sizeof(AT_MTA_SIMLOCKUNLOCK_REQ_STRU)),
              eq((VOS_UINT32)UEPS_PID_MTA))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulRet = AT_SetSimlockUnlockPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_SIMLOCKUNLOCK_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    GlobalMockObject::verify();
}



class Test_At_SetCstcPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        gucAtParaIndex = 0;
        VOS_MemSet(gastAtParaList, 0, sizeof(gastAtParaList));
    }

    void TearDown()
    {
        gucAtParaIndex = 0;
        VOS_MemSet(gastAtParaList, 0, sizeof(gastAtParaList));
    }
};


TEST_F(Test_At_SetCstcPara,Test_At_SetCstcPara_001)
{
    //参数定义
    TAF_UINT8 ucIndex = 0;

    //参数初始化



    //相关全局变量初始化
    gucAtParaIndex = 2;

    // MOCKER操作

    //执行检查

    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetCstcPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCstcPara,Test_At_SetCstcPara_002)
{
    //参数定义
    TAF_UINT8 ucIndex = 0;

    //参数初始化



    //相关全局变量初始化
    gucAtParaIndex = 1;
    gastAtParaList[0].ulParaValue = 0;

    // MOCKER操作
    MOCKER(SI_STK_SetUpCallConfirm)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    //执行检查

    EXPECT_EQ((VOS_UINT32)AT_OK, At_SetCstcPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCstcPara,Test_At_SetCstcPara_003)
{
    //参数定义
    TAF_UINT8 ucIndex = 0;

    //参数初始化


    //相关全局变量初始化
    gucAtParaIndex = 1;
    gastAtParaList[0].ulParaValue = 3;

    // MOCKER操作
    MOCKER(SI_STK_SetUpCallConfirm)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    //执行检查

    EXPECT_EQ(AT_ERROR, At_SetCstcPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SendTxOnOffToGHPA: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SendTxOnOffToGHPA, Test_At_SendTxOnOffToGHPA_001)
{
    VOS_UINT8                           ucIndex;
    VOS_UINT8                           ucSwitch;
    VOS_UINT32                          ulRslt;

    ucIndex = AT_CLIENT_ID_APP;
    ucSwitch = AT_DSP_RF_SWITCH_ON;
    g_stAtDevCmdCtrl.bFdacFlag = VOS_TRUE;

    MOCKER(AT_GetDestPid)
        .expects(exactly(1))
        .with(eq((MN_CLIENT_ID_T)ucIndex), eq((VOS_UINT32)I0_DSP_PID_GPHY))
		.will(returnValue((VOS_UINT32)I0_DSP_PID_GPHY));

    ulRslt = At_SendTxOnOffToGHPA(ucIndex, ucSwitch);

    EXPECT_EQ(AT_SUCCESS, ulRslt);

    GlobalMockObject::verify();
}


class Test_At_SendRxOnOffToGHPA: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SendRxOnOffToGHPA, Test_At_SendRxOnOffToGHPA_001)
{
    VOS_UINT8                           ucIndex;
    VOS_UINT8                           ucRxSwitch;
    VOS_UINT32                          ulRslt;

    ucIndex = AT_CLIENT_ID_APP;
    ucRxSwitch = 0;

    MOCKER(AT_GetDestPid)
        .expects(exactly(1))
        .with(eq((MN_CLIENT_ID_T)ucIndex), eq((VOS_UINT32)I0_DSP_PID_GPHY))
		.will(returnValue((VOS_UINT32)I0_DSP_PID_GPHY));

    ulRslt = At_SendRxOnOffToGHPA(ucIndex, ucRxSwitch);

    EXPECT_EQ(AT_SUCCESS, ulRslt);

    GlobalMockObject::verify();
}

#if ( VOS_WIN32 == VOS_OS_VER )

class Test_AT_SetSTKParaStub: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetSTKParaStub, Test_AT_SetSTKParaStub_001)
{
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt;

    ucIndex = AT_CLIENT_ID_APP;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;
    gucAtParaIndex = 1;

    MOCKER(At_AsciiNum2HexString)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(AT_GetDestPid)
        .expects(exactly(1))
        .with(eq((MN_CLIENT_ID_T)ucIndex), eq((VOS_UINT32)I0_WUEPS_PID_MMC))
		.will(returnValue((VOS_UINT32)I0_WUEPS_PID_MMC));

    ulRslt = AT_SetSTKParaStub(ucIndex);

    EXPECT_EQ(AT_OK, ulRslt);

    GlobalMockObject::verify();
}


class Test_AT_RefreshUSIMPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_RefreshUSIMPara, Test_AT_RefreshUSIMPara_001)
{
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt;

    ucIndex = AT_CLIENT_ID_APP;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;
    gucAtParaIndex = 1;

    MOCKER(At_AsciiNum2HexString)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(AT_GetDestPid)
        .expects(exactly(1))
        .with(eq((MN_CLIENT_ID_T)ucIndex), eq((VOS_UINT32)I0_WUEPS_PID_MMC))
		.will(returnValue((VOS_UINT32)I0_WUEPS_PID_MMC));

    MOCKER(AT_GetDestPid)
        .expects(exactly(1))
        .with(eq((MN_CLIENT_ID_T)ucIndex), eq((VOS_UINT32)I0_WUEPS_PID_MMA))
        .will(returnValue((VOS_UINT32)I0_WUEPS_PID_MMA));

    ulRslt = AT_RefreshUSIMPara(ucIndex);

    EXPECT_EQ(AT_OK, ulRslt);

    GlobalMockObject::verify();
}

#endif

#if 0

class Test_At_SetDialNumPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex    = 0;
        ucCallType = MN_CALL_TYPE_VOICE;
    }
    void TearDown()
    {

    }

    VOS_UINT8                           ucIndex;
    MN_CALL_TYPE_ENUM_U8                ucCallType;
};

TEST_F(Test_At_SetDialNumPara, Test_At_SetDialNumPara_001)
{
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gastAtParaList[1].usParaLen  = MN_CALL_MAX_CALLED_ASCII_NUM_LEN + 2;
    gastAtParaList[1].aucPara[0] = '+';

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetDialNumPara(ucIndex, ucCallType);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}



TEST_F(Test_At_SetDialNumPara, Test_At_SetDialNumPara_002)
{
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gastAtParaList[1].usParaLen = (MN_CALL_MAX_BCD_NUM_LEN * 2);
    memcpy(gastAtParaList[1].aucPara,
           "12354548125698415189ADFHQRG",
           gastAtParaList[1].usParaLen);

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetDialNumPara(ucIndex, ucCallType);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}



TEST_F(Test_At_SetDialNumPara, Test_At_SetDialNumPara_003)
{
    VOS_UINT32  ulRet;
    VOS_UINT8   aucDialNum[] = "123545481";

    // 参数初始化

    // 初始化全局变量;
    gastAtParaList[1].usParaLen = MN_CALL_MAX_CALLED_ASCII_NUM_LEN;
    memcpy(gastAtParaList[1].aucPara,
           aucDialNum,
           sizeof(aucDialNum));

    // MOCKER操作;
    MOCKER(MN_CALL_Orig)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = At_SetDialNumPara(ucIndex, ucCallType);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetDialNumPara, Test_At_SetDialNumPara_004)
{
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gastAtParaList[1].usParaLen  = MN_CALL_MAX_CALLED_ASCII_NUM_LEN + 1;
    gastAtParaList[1].aucPara[0] = '0';

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetDialNumPara(ucIndex, ucCallType);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}

#endif


class Test_AT_GetRatOrderNvim: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_GetRatOrderNvim,Test_AT_GetRatOrderNvim_001)
{
    MODEM_ID_ENUM_UINT16                enModemId;
    TAF_MMA_RAT_ORDER_STRU              *pstSysCfgRatOrder;
    VOS_UINT8                           ucUserSptLteFlag;

    enModemId = MODEM_ID_0;
    pstSysCfgRatOrder = (TAF_MMA_RAT_ORDER_STRU*)malloc(sizeof(TAF_MMA_RAT_ORDER_STRU));
    ucUserSptLteFlag = VOS_TRUE;

    MOCKER(NV_ReadEx).stubs().will(returnValue((VOS_UINT32)NV_ID_NOT_EXIST));
    MOCKER(AT_SetDefaultRatPrioList).expects(exactly(1));

    AT_GetRatOrderNvim(enModemId, pstSysCfgRatOrder, ucUserSptLteFlag);
    free(pstSysCfgRatOrder);
    GlobalMockObject::verify();
}

#if(FEATURE_ON == FEATURE_LTE)

TEST_F(Test_AT_GetRatOrderNvim,Test_AT_GetRatOrderNvim_002)
{
    MODEM_ID_ENUM_UINT16                enModemId;
    TAF_MMA_RAT_ORDER_STRU              *pstSysCfgRatOrder;
    VOS_UINT8                           ucUserSptLteFlag;
    TAF_MMA_RAT_ORDER_STRU               stPrioRatList;
    AT_MODEM_SPT_RAT_STRU              *pstSptRatList = VOS_NULL_PTR;

    enModemId = MODEM_ID_0;
    pstSysCfgRatOrder = (TAF_MMA_RAT_ORDER_STRU*)malloc(sizeof(TAF_MMA_RAT_ORDER_STRU));
    ucUserSptLteFlag = VOS_TRUE;
    stPrioRatList.ucRatOrderNum = 0;
    pstSptRatList = AT_GetSptRatFromModemId(enModemId);
    pstSptRatList->ucPlatformSptGsm=  VOS_TRUE;
    pstSptRatList->ucPlatformSptWcdma =  VOS_TRUE;
    pstSptRatList->ucPlatformSptLte =  VOS_TRUE;

    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(),any(),outBoundP((VOS_VOID *)&stPrioRatList, (VOS_UINT32)sizeof(stPrioRatList)),any())
        .will(returnValue((VOS_UINT32)NV_OK));

    AT_GetRatOrderNvim(enModemId, pstSysCfgRatOrder, ucUserSptLteFlag);

    EXPECT_EQ(TAF_PH_MAX_GUL_RAT_NUM, pstSysCfgRatOrder->ucRatOrderNum);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, begin */
    EXPECT_EQ(TAF_MMA_RAT_LTE, pstSysCfgRatOrder->aenRatOrder[0]);
    EXPECT_EQ(TAF_MMA_RAT_WCDMA, pstSysCfgRatOrder->aenRatOrder[1]);
    EXPECT_EQ(TAF_MMA_RAT_GSM, pstSysCfgRatOrder->aenRatOrder[2]);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, end */
    free(pstSysCfgRatOrder);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_GetRatOrderNvim,Test_AT_GetRatOrderNvim_003)
{
    MODEM_ID_ENUM_UINT16                enModemId;
    TAF_MMA_RAT_ORDER_STRU              *pstSysCfgRatOrder;
    VOS_UINT8                           ucUserSptLteFlag;
    TAF_MMA_RAT_ORDER_STRU               stPrioRatList;

    enModemId = MODEM_ID_0;
    pstSysCfgRatOrder = (TAF_MMA_RAT_ORDER_STRU*)malloc(sizeof(TAF_MMA_RAT_ORDER_STRU));
    ucUserSptLteFlag = VOS_TRUE;
    stPrioRatList.ucRatOrderNum = TAF_PH_MAX_GUL_RAT_NUM;
	/* Modified by h00313353 for Iteration 13, 2015-4-10, begin */
    stPrioRatList.aenRatOrder[0] = TAF_MMA_RAT_GSM;
    stPrioRatList.aenRatOrder[1] = TAF_MMA_RAT_WCDMA;
    stPrioRatList.aenRatOrder[2] = TAF_MMA_RAT_LTE;
	/* Modified by h00313353 for Iteration 13, 2015-4-10, end */

    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(),any(),outBoundP((VOS_VOID *)&stPrioRatList, (VOS_UINT32)sizeof(stPrioRatList)),any())
        .will(returnValue((VOS_UINT32)NV_OK));

    AT_GetRatOrderNvim(enModemId, pstSysCfgRatOrder, ucUserSptLteFlag);

	/* Modified by h00313353 for Iteration 13, 2015-4-10, begin */
    EXPECT_EQ(TAF_MMA_RAT_GSM, pstSysCfgRatOrder->aenRatOrder[0]);
    EXPECT_EQ(TAF_MMA_RAT_WCDMA, pstSysCfgRatOrder->aenRatOrder[1]);
    EXPECT_EQ(TAF_MMA_RAT_LTE, pstSysCfgRatOrder->aenRatOrder[2]);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, end */
    free(pstSysCfgRatOrder);
    GlobalMockObject::verify();
}

#else


TEST_F(Test_AT_GetRatOrderNvim,Test_AT_GetRatOrderNvim_004)
{
    MODEM_ID_ENUM_UINT16                enModemId;
    TAF_MMA_RAT_ORDER_STRU              *pstSysCfgRatOrder;
    VOS_UINT8                           ucUserSptLteFlag;
    TAF_MMA_RAT_ORDER_STRU               stPrioRatList;
    AT_MODEM_SPT_RAT_STRU              *pstSptRatList = VOS_NULL_PTR;

    enModemId = MODEM_ID_0;
    pstSysCfgRatOrder = (TAF_MMA_RAT_ORDER_STRU*)malloc(sizeof(TAF_MMA_RAT_ORDER_STRU));
    ucUserSptLteFlag = VOS_TRUE;
    stPrioRatList.ucRatOrderNum = 0;

    pstSptRatList = AT_GetSptRatFromModemId(enModemId);
    pstSptRatList->ucPlatformSptGsm=  VOS_TRUE;
    pstSptRatList->ucPlatformSptWcdma =  VOS_TRUE;
    pstSptRatList->ucPlatformSptLte =  VOS_TRUE;

    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(),any(),outBoundP((VOS_VOID *)&stPrioRatList, (VOS_UINT32)sizeof(stPrioRatList)),any())
        .will(returnValue((VOS_UINT32)NV_OK));

    AT_GetRatOrderNvim(enModemId, pstSysCfgRatOrder, ucUserSptLteFlag);

    EXPECT_EQ(TAF_PH_MAX_GU_RAT_NUM, pstSysCfgRatOrder->ucRatOrderNum);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, begin */
    EXPECT_EQ(TAF_MMA_RAT_WCDMA, pstSysCfgRatOrder->aenRatOrder[0]);
    EXPECT_EQ(TAF_MMA_RAT_GSM, pstSysCfgRatOrder->aenRatOrder[1]);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, end */

    free(pstSysCfgRatOrder);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_GetRatOrderNvim,Test_AT_GetRatOrderNvim_005)
{

    MODEM_ID_ENUM_UINT16                enModemId;
    TAF_MMA_RAT_ORDER_STRU              *pstSysCfgRatOrder;
    VOS_UINT8                           ucUserSptLteFlag;
    TAF_MMA_RAT_ORDER_STRU               stPrioRatList;

    enModemId = MODEM_ID_0;
    pstSysCfgRatOrder = (TAF_MMA_RAT_ORDER_STRU*)malloc(sizeof(TAF_MMA_RAT_ORDER_STRU));
    ucUserSptLteFlag = VOS_TRUE;
    stPrioRatList.ucRatOrderNum = TAF_PH_MAX_GU_RAT_NUM;
	/* Modified by h00313353 for Iteration 13, 2015-4-10, begin */
    stPrioRatList.aenRatOrder[0] = TAF_MMA_RAT_GSM;
    stPrioRatList.aenRatOrder[1] = TAF_MMA_RAT_WCDMA;
	/* Modified by h00313353 for Iteration 13, 2015-4-10, end */

    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(),any(),outBoundP((VOS_VOID *)&stPrioRatList, (VOS_UINT32)sizeof(stPrioRatList)),any())
        .will(returnValue((VOS_UINT32)NV_OK));

    AT_GetRatOrderNvim(enModemId, pstSysCfgRatOrder, ucUserSptLteFlag);

	/* Modified by h00313353 for Iteration 13, 2015-4-10, begin */
    EXPECT_EQ(TAF_MMA_RAT_GSM, pstSysCfgRatOrder->aenRatOrder[0]);
    EXPECT_EQ(TAF_MMA_RAT_WCDMA, pstSysCfgRatOrder->aenRatOrder[1]);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, end */
    free(pstSysCfgRatOrder);
    GlobalMockObject::verify();
}

#endif


class Test_AT_SetDefaultRatPrioList: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};

#if(FEATURE_ON == FEATURE_LTE)

TEST_F(Test_AT_SetDefaultRatPrioList,Test_AT_SetDefaultRatPrioList_001)
{
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    TAF_MMA_RAT_ORDER_STRU              *pstSysCfgRatOrder;
    VOS_UINT8                           ucUserSptLteFlag = VOS_TRUE;

    pstSysCfgRatOrder = (TAF_MMA_RAT_ORDER_STRU*)malloc(sizeof(TAF_MMA_RAT_ORDER_STRU));

    MOCKER(AT_IsModemSupportRat)
        .expects(exactly(3))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    AT_SetDefaultRatPrioList(enModemId, pstSysCfgRatOrder, ucUserSptLteFlag);

    EXPECT_EQ(3, pstSysCfgRatOrder->ucRatOrderNum);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, begin */
    EXPECT_EQ(TAF_MMA_RAT_LTE, pstSysCfgRatOrder->aenRatOrder[0]);
    EXPECT_EQ(TAF_MMA_RAT_WCDMA, pstSysCfgRatOrder->aenRatOrder[1]);
    EXPECT_EQ(TAF_MMA_RAT_GSM, pstSysCfgRatOrder->aenRatOrder[2]);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, end */
    free(pstSysCfgRatOrder);
    GlobalMockObject::verify();
}
#endif

#if(FEATURE_OFF == FEATURE_LTE)

TEST_F(Test_AT_SetDefaultRatPrioList,Test_AT_SetDefaultRatPrioList_002)
{
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    TAF_MMA_RAT_ORDER_STRU              *pstSysCfgRatOrder;
    VOS_UINT8                           ucUserSptLteFlag = VOS_TRUE;

    pstSysCfgRatOrder = (TAF_MMA_RAT_ORDER_STRU*)malloc(sizeof(TAF_MMA_RAT_ORDER_STRU));

    MOCKER(AT_IsModemSupportRat)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(AT_IsModemSupportRat)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    AT_SetDefaultRatPrioList(enModemId, pstSysCfgRatOrder, ucUserSptLteFlag);

    EXPECT_EQ(2, pstSysCfgRatOrder->ucRatOrderNum);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, begin */
    EXPECT_EQ(TAF_MMA_RAT_WCDMA, pstSysCfgRatOrder->aenRatOrder[0]);
    EXPECT_EQ(TAF_MMA_RAT_GSM, pstSysCfgRatOrder->aenRatOrder[1]);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, end */
    free(pstSysCfgRatOrder);
    GlobalMockObject::verify();
}
#endif


class Test_AT_ConvertSysCfgRatOrderPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_ConvertSysCfgRatOrderPara, Test_AT_ConvertSysCfgRatOrderPara_001)
{
    VOS_UINT8                           ucClientId;
    AT_SYSCFG_RAT_TYPE_ENUM_UINT8       enRatMode;
    AT_SYSCFG_RAT_PRIO_ENUM_UINT8       enAcqorder;
    TAF_MMA_RAT_ORDER_STRU               *pstSysCfgRatOrder;
    VOS_UINT32                          ulRst;
    AT_MODEM_SPT_RAT_STRU              *pstSptRatList = VOS_NULL_PTR;

    pstSptRatList = AT_GetSptRatFromModemId(MODEM_ID_0);
    pstSptRatList->ucPlatformSptLte = VOS_TRUE;
    pstSptRatList->ucPlatformSptWcdma = VOS_TRUE;
    pstSptRatList->ucPlatformSptGsm = VOS_TRUE;

    ucClientId = AT_CLIENT_BUTT;
    enRatMode = AT_SYSCFG_RAT_AUTO;
    enAcqorder = AT_SYSCFG_RAT_PRIO_AUTO;
    pstSysCfgRatOrder = (TAF_MMA_RAT_ORDER_STRU*)malloc(sizeof(TAF_MMA_RAT_ORDER_STRU));

    ulRst = AT_ConvertSysCfgRatOrderPara(ucClientId, enRatMode, enAcqorder, pstSysCfgRatOrder);

    EXPECT_EQ(AT_ERROR,ulRst);
    free(pstSysCfgRatOrder);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_ConvertSysCfgRatOrderPara, Test_AT_ConvertSysCfgRatOrderPara_002)
{
    VOS_UINT8                           ucClientId;
    AT_SYSCFG_RAT_TYPE_ENUM_UINT8       enRatMode;
    AT_SYSCFG_RAT_PRIO_ENUM_UINT8       enAcqorder;
    TAF_MMA_RAT_ORDER_STRU               *pstSysCfgRatOrder;
    VOS_UINT32                          ulRst;
    TAF_MMA_RAT_ORDER_STRU               stPrioRatList;

    ucClientId = AT_CLIENT_TAB_APP_INDEX;
    enRatMode = AT_SYSCFG_RAT_NO_CHANGE;
    enAcqorder = AT_SYSCFG_RAT_PRIO_AUTO;
    pstSysCfgRatOrder = (TAF_MMA_RAT_ORDER_STRU*)malloc(sizeof(TAF_MMA_RAT_ORDER_STRU));

    stPrioRatList.ucRatOrderNum = TAF_PH_MAX_GUL_RAT_NUM;
	/* Modified by h00313353 for Iteration 13, 2015-4-10, begin */
    stPrioRatList.aenRatOrder[0] = TAF_MMA_RAT_LTE;
    stPrioRatList.aenRatOrder[1] = TAF_MMA_RAT_WCDMA;
    stPrioRatList.aenRatOrder[2] = TAF_MMA_RAT_GSM;
	/* Modified by h00313353 for Iteration 13, 2015-4-10, end */

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(),any(),outBoundP((VOS_VOID *)&stPrioRatList, (VOS_UINT32)sizeof(stPrioRatList)),any())
        .will(returnValue((VOS_UINT32)NV_OK));

    ulRst = AT_ConvertSysCfgRatOrderPara(ucClientId, enRatMode, enAcqorder, pstSysCfgRatOrder);

    EXPECT_EQ(AT_OK,ulRst);
    EXPECT_EQ(TAF_PH_MAX_GU_RAT_NUM, pstSysCfgRatOrder->ucRatOrderNum);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, begin */
    EXPECT_EQ(TAF_MMA_RAT_WCDMA, pstSysCfgRatOrder->aenRatOrder[0]);
    EXPECT_EQ(TAF_MMA_RAT_GSM, pstSysCfgRatOrder->aenRatOrder[1]);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, end */
    free(pstSysCfgRatOrder);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_ConvertSysCfgRatOrderPara, Test_AT_ConvertSysCfgRatOrderPara_003)
{
    VOS_UINT8                           ucClientId;
    AT_SYSCFG_RAT_TYPE_ENUM_UINT8       enRatMode;
    AT_SYSCFG_RAT_PRIO_ENUM_UINT8       enAcqorder;
    TAF_MMA_RAT_ORDER_STRU               stSysCfgRatOrder;
    VOS_UINT32                          ulRst;
    VOS_UINT8                           aucAccessMode[2] = {0};

    ucClientId = AT_CLIENT_TAB_APP_INDEX;
    enRatMode = AT_SYSCFG_RAT_AUTO;
    enAcqorder = AT_SYSCFG_RAT_PRIO_NO_CHANGE;

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(),any(),outBoundP((VOS_VOID *)&enRatMode, (VOS_UINT32)sizeof(enRatMode)),any())
        .will(returnValue((VOS_UINT32)NV_OK));

    ulRst = AT_ConvertSysCfgRatOrderPara(ucClientId, enRatMode, enAcqorder, &stSysCfgRatOrder);

    EXPECT_EQ(AT_OK,ulRst);

    GlobalMockObject::verify();
}


class Test_At_CheckAtDPin: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_CheckAtDPin, Test_At_CheckAtDPin_001)
{
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    MOCKER(AT_GetModemIdFromClient)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    At_CheckAtDPin(ucIndex);

    GlobalMockObject::verify();
}



class Test_At_SetCnmrPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCnmrPara, Test_At_SetCnmrPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    gucAtParaIndex = 2;

    // MOCKER操作

    // 调用被测函数
    ulRet = At_SetCnmrPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCnmrPara, Test_At_SetCnmrPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 2;

    // MOCKER操作

    // 调用被测函数
    ulRet = At_SetCnmrPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCnmrPara, Test_At_SetCnmrPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    gucAtParaIndex                = 1;
    gastAtParaList[0].usParaLen   = 1;
    gastAtParaList[0].ulParaValue = 1;

    // MOCKER操作
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRet = At_SetCnmrPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ(gastAtClientTab[ucIndex].CmdCurrentOpt, (AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CNMR_QUERY);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCnmrPara, Test_At_SetCnmrPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    gucAtParaIndex                = 1;
    gastAtParaList[0].usParaLen   = 1;
    gastAtParaList[0].ulParaValue = 2;

    // MOCKER操作
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    // 调用被测函数
    ulRet = At_SetCnmrPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);


    GlobalMockObject::verify();
}
#if (FEATURE_ON == FEATURE_LTE)

TEST_F(Test_At_SetCnmrPara, Test_At_SetCnmrPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    gucAtParaIndex                = 1;
    gastAtParaList[0].usParaLen   = 1;
    gastAtParaList[0].ulParaValue = 3;

    // MOCKER操作
    MOCKER(At_QryCnmrPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_WAIT_ASYNC_RETURN));

    // 调用被测函数
    ulRet = At_SetCnmrPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);


    GlobalMockObject::verify();
}
#endif





class Test_AT_SetCLteRoamAllowPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetCLteRoamAllowPara, Test_AT_SetCLteRoamAllowPara_001)
{
    VOS_UINT8                           ucIndex;

    ucIndex = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_READ_CMD;

    EXPECT_EQ(AT_ERROR, AT_SetCLteRoamAllowPara(ucIndex));

	GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCLteRoamAllowPara, Test_AT_SetCLteRoamAllowPara_002)
{
    VOS_UINT8                           ucIndex;

    ucIndex = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 0;

    EXPECT_EQ(AT_ERROR, AT_SetCLteRoamAllowPara(ucIndex));

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCLteRoamAllowPara, Test_AT_SetCLteRoamAllowPara_003)
{
    VOS_UINT8                           ucIndex;

    ucIndex = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = VOS_TRUE;

	MOCKER(NV_WriteEx)
		.stubs()
		.will(returnValue(NV_ID_NOT_EXIST));

    EXPECT_EQ(AT_ERROR, AT_SetCLteRoamAllowPara(ucIndex));

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCLteRoamAllowPara, Test_AT_SetCLteRoamAllowPara_004)
{
    VOS_UINT8                           ucIndex;
    ucIndex = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = VOS_TRUE;

	MOCKER(NV_WriteEx)
		.expects(exactly(1))
		.will(returnValue((VOS_UINT32)NV_OK));

    EXPECT_EQ(AT_OK, AT_SetCLteRoamAllowPara(ucIndex));

	GlobalMockObject::verify();

}



class Test_AT_SetCbgPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }

    void TearDown()
    {

    }

    VOS_UINT8                           ucIndex;
};


TEST_F(Test_AT_SetCbgPara, Test_AT_SetCbgPara_001)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    // MOCKER操作

    // 调用被测函数
    ulRslt = AT_SetCbgPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRslt);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCbgPara, Test_AT_SetCbgPara_002)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;

    // MOCKER操作

    // 调用被测函数
    ulRslt = AT_SetCbgPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRslt);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCbgPara, Test_AT_SetCbgPara_003)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;

    // MOCKER操作
	MOCKER(V_AllocMsg)
		.stubs()
		.will(returnValue((MsgBlock*)VOS_NULL_PTR));

    // 调用被测函数
    ulRslt = AT_SetCbgPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRslt);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCbgPara, Test_AT_SetCbgPara_004)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;

    // MOCKER操作
	MOCKER(Ps_SendMsg)
		.expects(exactly(1))
		.will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRslt = AT_SetCbgPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRslt);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCbgPara, Test_AT_SetCbgPara_005)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt;
    VOS_UINT16                          usMsgType;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;
    usMsgType = APP_VC_MSG_SET_FOREGROUND_REQ;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].ulParaValue = 0;

    // MOCKER操作
	MOCKER(AT_FillAndSndAppReqMsg)
		.stubs()
		.with(any(), any(), eq((unsigned short)usMsgType), any(), any(), any())
		.will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulRslt = AT_SetCbgPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CMD_CBG_SET, gastAtClientTab[AT_CLIENT_TAB_APP_INDEX].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRslt);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCbgPara, Test_AT_SetCbgPara_006)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt;
    VOS_UINT16                          usMsgType;
    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;
    usMsgType = APP_VC_MSG_SET_BACKGROUND_REQ;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].ulParaValue = 1;

	// MOCKER操作
	MOCKER(AT_FillAndSndAppReqMsg)
		.stubs()
		.with(any(), any(), eq((unsigned short)usMsgType), any(), any(), any())
		.will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulRslt = AT_SetCbgPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CMD_CBG_SET, gastAtClientTab[AT_CLIENT_TAB_APP_INDEX].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRslt);

    GlobalMockObject::verify();
}


class Test_AT_SetUSIMPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetUSIMPara,Test_AT_SetUSIMPara_001)
{
    // 变量声明
    USIMM_SET_FILE_INFO_STRU            stSetFileInfo;
    TAF_UINT32                          ulRslt;
    VOS_UINT32                          ulLen;

    //参数初始化
    gucAtParaIndex = 2;

    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].usParaLen     = 2;
    gastAtParaList[1].aucPara[0]    = '1';
    gastAtParaList[1].aucPara[1]    = '1';
    gastAtParaList[0].ulParaValue   = USIMM_ATT_RAT_BALANCING_FID;

    stSetFileInfo.enAppType     = USIMM_ATT_APP;
    stSetFileInfo.usEfId        = 0x4F36;
    stSetFileInfo.ucRecordNum   = 0;
    stSetFileInfo.ulEfLen       = 2;
    stSetFileInfo.pucEfContent  = gastAtParaList[1].aucPara;
    stSetFileInfo.ucRsv         = 0;
    ulLen                       = sizeof(stSetFileInfo) - sizeof(stSetFileInfo.pucEfContent);

    // MOCKER操作;
	MOCKER(At_AsciiNum2HexString)
		.stubs()
		.will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(USIMM_SetFileReq)
        .stubs()
        //.with(eq((VOS_UINT32)WUEPS_PID_AT),eq((VOS_UINT32)0),mirror((void *)&stSetFileInfo, sizeof(stSetFileInfo)))
	    .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRslt = AT_SetUSIMPara(0);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRslt);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetUSIMPara,Test_AT_SetUSIMPara_002)
{
    // 变量声明
    USIMM_SET_FILE_INFO_STRU            stSetFileInfo;
    TAF_UINT32                          ulRslt;

    //参数初始化
    gucAtParaIndex = 2;

    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].usParaLen     = 2;
    gastAtParaList[1].aucPara[0]    = '1';
    gastAtParaList[1].aucPara[1]    = '1';
    gastAtParaList[0].ulParaValue   = 0x6F07;

    stSetFileInfo.enAppType     = USIMM_UNLIMIT_APP;
    stSetFileInfo.usEfId        = 0x6F07;
    stSetFileInfo.ucRecordNum   = 0;
    stSetFileInfo.ulEfLen       = 2;
    stSetFileInfo.pucEfContent  = gastAtParaList[1].aucPara;
    stSetFileInfo.ucRsv         = 0;

    // MOCKER操作;
	MOCKER(At_AsciiNum2HexString)
		.stubs()
		.will(returnValue((VOS_UINT32)AT_SUCCESS));

	MOCKER(USIMM_SetFileReq)
		.stubs()
		//.with(eq(WUEPS_PID_AT),eq(0),mirror((void *)&stSetFileInfo, (VOS_UINT32)sizeof(stSetFileInfo)))
		.will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(USIMM_ResetReq)
        .stubs()
        .with(eq(WUEPS_PID_AT),any(),any())
		.will(returnValue((VOS_UINT32)VOS_OK));


    // 调用被测函数
    ulRslt = AT_SetUSIMPara(0);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRslt);

    GlobalMockObject::verify();
}


class Test_AT_SetBodySarOnPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }

    void TearDown()
    {

    }

    VOS_UINT8                           ucIndex;
};


TEST_F(Test_AT_SetBodySarOnPara, Test_AT_SetBodySarOnPara_001)
{
    VOS_UINT32                          ulRet;

    // 参数初始化
    ucIndex = 0;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetBodySarOnPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetBodySarOnPara, Test_AT_SetBodySarOnPara_002)
{
    VOS_UINT32                          ulRet;

    // 参数初始化
    ucIndex = 0;

    // 初始化全局变量;
    gucAtParaIndex              = 2;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetBodySarOnPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetBodySarOnPara, Test_AT_SetBodySarOnPara_003)
{
    VOS_UINT32                          ulRet;

    // 参数初始化
    ucIndex = 0;

    // 初始化全局变量;
    gucAtParaIndex                  = 1;
    g_enAtBodySarState              = MTA_BODY_SAR_ON;
    gastAtParaList[0].ulParaValue   = MTA_BODY_SAR_ON;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetBodySarOnPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetBodySarOnPara, Test_AT_SetBodySarOnPara_004)
{
    VOS_UINT32                          ulRet;

    // 参数初始化
    ucIndex = 0;

    // 初始化全局变量;
    gucAtParaIndex                  = 1;
    g_enAtBodySarState              = MTA_BODY_SAR_OFF;
    gastAtParaList[0].ulParaValue   = MTA_BODY_SAR_ON;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;

    // MOCKER操作;
    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue(NV_ID_NOT_EXIST));

    // 调用被测函数
    ulRet = AT_SetBodySarOnPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetBodySarOnPara, Test_AT_SetBodySarOnPara_005)
{
    VOS_UINT32                          ulRet;
    MTA_BODY_SAR_PARA_STRU              stBodySarPara;
    AT_MTA_BODY_SAR_SET_REQ_STRU        stBodySarSetReq;

    // 参数初始化
    ucIndex = 0;

    PS_MEM_SET(&stBodySarPara, 0, sizeof(stBodySarPara));
    stBodySarPara.usWBandNum = 2;
    stBodySarPara.astWBandPara[0].sPower = 18;
    stBodySarPara.astWBandPara[1].sPower = 20;
    stBodySarPara.astWBandPara[0].enBand = MTA_WCDMA_I_2100;
    stBodySarPara.astWBandPara[1].enBand = MTA_WCDMA_II_1900;

    PS_MEM_SET(&stBodySarSetReq, 0, sizeof(stBodySarSetReq));
    stBodySarSetReq.enState         = MTA_BODY_SAR_ON;
    stBodySarSetReq.stBodySARPara   = stBodySarPara;

    // 初始化全局变量;
    gucAtParaIndex                  = 1;
    g_enAtBodySarState              = MTA_BODY_SAR_OFF;
    gastAtParaList[0].ulParaValue   = MTA_BODY_SAR_ON;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;

    // MOCKER操作;
    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue(NV_OK));

    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .with(any(),any(),eq((VOS_UINT16)ID_AT_MTA_BODY_SAR_SET_REQ),any(),eq((VOS_UINT32)sizeof(stBodySarSetReq)),eq((VOS_UINT32)UEPS_PID_MTA))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulRet = AT_SetBodySarOnPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetBodySarOnPara, Test_AT_SetBodySarOnPara_006)
{
    VOS_UINT32                          ulRet;
    MTA_BODY_SAR_PARA_STRU              stBodySarPara;
    AT_MTA_BODY_SAR_SET_REQ_STRU        stBodySarSetReq;

    // 参数初始化
    ucIndex = 0;

    PS_MEM_SET(&stBodySarPara, 0, sizeof(stBodySarPara));
    stBodySarPara.usWBandNum = 2;
    stBodySarPara.astWBandPara[0].sPower = 18;
    stBodySarPara.astWBandPara[1].sPower = 20;
    stBodySarPara.astWBandPara[0].enBand = MTA_WCDMA_I_2100;
    stBodySarPara.astWBandPara[1].enBand = MTA_WCDMA_II_1900;

    PS_MEM_SET(&stBodySarSetReq, 0, sizeof(stBodySarSetReq));
    stBodySarSetReq.enState         = MTA_BODY_SAR_ON;
    stBodySarSetReq.stBodySARPara   = stBodySarPara;

    // 初始化全局变量;
    gucAtParaIndex                  = 1;
    g_enAtBodySarState              = MTA_BODY_SAR_OFF;
    gastAtParaList[0].ulParaValue   = MTA_BODY_SAR_ON;
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;

    // MOCKER操作;
    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue(NV_OK));

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    // 调用被测函数
    ulRet = AT_SetBodySarOnPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_CheckBodySarWcdmaPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_CheckBodySarWcdmaPara, Test_AT_CheckBodySarWcdmaPara_001)
{
    // 变量声明
    AT_BODYSARWCDMA_SET_PARA_STRU       stBodySarWcdmaPara;
    VOS_UINT32                          ulRet;

    // 参数初始化
    PS_MEM_SET(&stBodySarWcdmaPara, 0, sizeof(stBodySarWcdmaPara));

    // 初始化全局变量
    gucAtParaIndex                  = 0;

    // MOCKER操作

    // 调用被测函数
    ulRet = AT_CheckBodySarWcdmaPara(&stBodySarWcdmaPara);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_CheckBodySarWcdmaPara, Test_AT_CheckBodySarWcdmaPara_002)
{
    // 变量声明
    AT_BODYSARWCDMA_SET_PARA_STRU       stBodySarWcdmaPara;
    AT_NV_WG_RF_MAIN_BAND_STRU          stWGBand;
    VOS_UINT32                          ulRet;

    // 参数初始化
    PS_MEM_SET(&stBodySarWcdmaPara, 0, sizeof(stBodySarWcdmaPara));
    PS_MEM_SET(&stWGBand, 0, sizeof(stWGBand));

    stWGBand.unWcdmaBand.ulBand                     = 0x0000000F;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_I_2100   = 1;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_II_1900  = 1;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_III_1800 = 1;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_IV_1700  = 1;

    // 初始化全局变量
    gucAtParaIndex                  = 1;

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), eq((VOS_UINT16)en_NV_Item_WG_RF_MAIN_BAND),outBoundP((void *)&stWGBand, (VOS_UINT32)sizeof(AT_NV_WG_RF_MAIN_BAND_STRU)),eq((VOS_UINT32)sizeof(AT_NV_WG_RF_MAIN_BAND_STRU)))
        .will(returnValue((VOS_UINT32)NV_OK));

    // 调用被测函数
    ulRet = AT_CheckBodySarWcdmaPara(&stBodySarWcdmaPara);

    // 执行检查
    EXPECT_EQ(0x0F, gastAtParaList[1].ulParaValue);
    EXPECT_EQ(2, gucAtParaIndex);
    EXPECT_EQ(AT_SUCCESS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_CheckBodySarWcdmaPara, Test_AT_CheckBodySarWcdmaPara_003)
{
    // 变量声明
    AT_BODYSARWCDMA_SET_PARA_STRU       stBodySarWcdmaPara;
    VOS_UINT32                          ulRet;

    // 参数初始化
    PS_MEM_SET(&stBodySarWcdmaPara, 0, sizeof(stBodySarWcdmaPara));

    // 初始化全局变量
    gucAtParaIndex                  = 3;

    // MOCKER操作

    // 调用被测函数
    ulRet = AT_CheckBodySarWcdmaPara(&stBodySarWcdmaPara);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_CheckBodySarWcdmaPara, Test_AT_CheckBodySarWcdmaPara_004)
{
    // 变量声明
    AT_BODYSARWCDMA_SET_PARA_STRU       stBodySarWcdmaPara;
    VOS_UINT32                          ulRet;

    // 参数初始化
    PS_MEM_SET(&stBodySarWcdmaPara, 0, sizeof(stBodySarWcdmaPara));

    // 初始化全局变量
    gucAtParaIndex                  = 2;

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue(NV_ID_NOT_EXIST));

    // 调用被测函数
    ulRet = AT_CheckBodySarWcdmaPara(&stBodySarWcdmaPara);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_CheckBodySarWcdmaPara, Test_AT_CheckBodySarWcdmaPara_005)
{
    // 变量声明
    AT_BODYSARWCDMA_SET_PARA_STRU       stBodySarWcdmaPara;
    VOS_UINT32                          ulRet;

    // 参数初始化
    PS_MEM_SET(&stBodySarWcdmaPara, 0, sizeof(stBodySarWcdmaPara));

    // 初始化全局变量
    gucAtParaIndex                  = 2;

    // MOCKER操作
    MOCKER(At_String2Hex)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    // 调用被测函数
    ulRet = AT_CheckBodySarWcdmaPara(&stBodySarWcdmaPara);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_CheckBodySarWcdmaPara, Test_AT_CheckBodySarWcdmaPara_006)
{
    // 变量声明
    AT_BODYSARWCDMA_SET_PARA_STRU       stBodySarWcdmaPara;
    AT_NV_WG_RF_MAIN_BAND_STRU          stWGBand;
    VOS_UINT32                          ulRet;

    // 参数初始化
    PS_MEM_SET(&stBodySarWcdmaPara, 0, sizeof(stBodySarWcdmaPara));
    PS_MEM_SET(&stWGBand, 0, sizeof(stWGBand));

    stWGBand.unWcdmaBand.ulBand                     = 0x05;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_I_2100   = 1;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_III_1800 = 1;

    // 初始化全局变量
    gucAtParaIndex                  = 4;

    gastAtParaList[0].ulParaValue   = 20;
    gastAtParaList[0].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "20", gastAtParaList[0].usParaLen);
    gastAtParaList[0].aucPara[gastAtParaList[0].usParaLen] = '\0';

    gastAtParaList[1].ulParaValue   = 0x01;
    gastAtParaList[1].usParaLen     = 8;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "00000001", gastAtParaList[1].usParaLen);
    gastAtParaList[1].aucPara[gastAtParaList[1].usParaLen] = '\0';

    gastAtParaList[2].ulParaValue   = 21;
    gastAtParaList[2].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[2].aucPara, "21", gastAtParaList[2].usParaLen);
    gastAtParaList[2].aucPara[gastAtParaList[2].usParaLen] = '\0';

    gastAtParaList[3].ulParaValue   = 0x00000002;
    gastAtParaList[3].usParaLen     = 8;
    PS_MEM_CPY(gastAtParaList[3].aucPara, "00000002", gastAtParaList[3].usParaLen);
    gastAtParaList[3].aucPara[gastAtParaList[3].usParaLen] = '\0';

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), eq((VOS_UINT16)en_NV_Item_WG_RF_MAIN_BAND),outBoundP((void *)&stWGBand, (VOS_UINT32)sizeof(stWGBand)),eq((VOS_UINT32)sizeof(stWGBand)))
        .will(returnValue((VOS_UINT32)NV_OK));

    // 调用被测函数
    ulRet = AT_CheckBodySarWcdmaPara(&stBodySarWcdmaPara);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_CheckBodySarWcdmaPara, Test_AT_CheckBodySarWcdmaPara_007)
{
    // 变量声明
    AT_BODYSARWCDMA_SET_PARA_STRU       stBodySarWcdmaPara;
    AT_NV_WG_RF_MAIN_BAND_STRU          stWGBand;
    VOS_UINT32                          ulRet;

    // 参数初始化
    PS_MEM_SET(&stBodySarWcdmaPara, 0, sizeof(stBodySarWcdmaPara));
    PS_MEM_SET(&stWGBand, 0, sizeof(stWGBand));

    stWGBand.unWcdmaBand.ulBand                     = 0x05;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_I_2100   = 1;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_III_1800 = 1;

    // 初始化全局变量
    gucAtParaIndex                  = 4;

    gastAtParaList[0].ulParaValue   = 20;
    gastAtParaList[0].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "20", gastAtParaList[0].usParaLen);
    gastAtParaList[0].aucPara[gastAtParaList[0].usParaLen] = '\0';

    gastAtParaList[1].ulParaValue   = 0x01;
    gastAtParaList[1].usParaLen     = 8;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "00000001", gastAtParaList[1].usParaLen);
    gastAtParaList[1].aucPara[gastAtParaList[1].usParaLen] = '\0';

    gastAtParaList[2].ulParaValue   = 21;
    gastAtParaList[2].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[2].aucPara, "21", gastAtParaList[2].usParaLen);
    gastAtParaList[2].aucPara[gastAtParaList[2].usParaLen] = '\0';

    gastAtParaList[3].ulParaValue   = 0x00000004;
    gastAtParaList[3].usParaLen     = 8;
    PS_MEM_CPY(gastAtParaList[3].aucPara, "00000004", gastAtParaList[3].usParaLen);
    gastAtParaList[3].aucPara[gastAtParaList[3].usParaLen] = '\0';

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), eq((VOS_UINT16)en_NV_Item_WG_RF_MAIN_BAND),outBoundP((void *)&stWGBand, (VOS_UINT32)sizeof(stWGBand)),eq((VOS_UINT32)sizeof(stWGBand)))
        .will(returnValue((VOS_UINT32)NV_OK));

    // 调用被测函数
    ulRet = AT_CheckBodySarWcdmaPara(&stBodySarWcdmaPara);

    // 执行检查
    EXPECT_EQ(AT_SUCCESS, ulRet);
    EXPECT_EQ(2, stBodySarWcdmaPara.ucParaNum);
    EXPECT_EQ(20, stBodySarWcdmaPara.asPower[0]);
    EXPECT_EQ(0x01, stBodySarWcdmaPara.aulBand[0]);
    EXPECT_EQ(21, stBodySarWcdmaPara.asPower[1]);
    EXPECT_EQ(0x04, stBodySarWcdmaPara.aulBand[1]);

    GlobalMockObject::verify();
}


class Test_AT_FillBodySarWcdmaPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_FillBodySarWcdmaPara, Test_AT_FillBodySarWcdmaPara_001)
{
    // 变量声明
    AT_BODYSARWCDMA_SET_PARA_STRU       stBodySarWcdmaPara;
    MTA_BODY_SAR_PARA_STRU              stBodySarPara;
    VOS_UINT32                          ulRet;

    // 参数初始化
    PS_MEM_SET(&stBodySarWcdmaPara, 0, sizeof(stBodySarWcdmaPara));
    PS_MEM_SET(&stBodySarPara, 0, sizeof(stBodySarPara));

    stBodySarWcdmaPara.ucParaNum    = 1;
    stBodySarWcdmaPara.asPower[0]   = 20;
    stBodySarWcdmaPara.aulBand[0]   = 0x00000005;

    // 调用被测函数
    ulRet = AT_FillBodySarWcdmaPara(&stBodySarWcdmaPara, &stBodySarPara);

    // 执行检查
    EXPECT_EQ(VOS_OK, ulRet);
    EXPECT_EQ(2, stBodySarPara.usWBandNum);
    EXPECT_EQ(20, stBodySarPara.astWBandPara[0].sPower);
    EXPECT_EQ(MTA_WCDMA_I_2100, stBodySarPara.astWBandPara[0].enBand);
    EXPECT_EQ(20, stBodySarPara.astWBandPara[1].sPower);
    EXPECT_EQ(MTA_WCDMA_III_1800, stBodySarPara.astWBandPara[1].enBand);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_FillBodySarWcdmaPara, Test_AT_FillBodySarWcdmaPara_002)
{
    // 变量声明
    AT_BODYSARWCDMA_SET_PARA_STRU       stBodySarWcdmaPara;
    MTA_BODY_SAR_PARA_STRU              stBodySarPara;
    VOS_UINT32                          ulRet;

    // 参数初始化
    PS_MEM_SET(&stBodySarWcdmaPara, 0, sizeof(stBodySarWcdmaPara));
    PS_MEM_SET(&stBodySarPara, 0, sizeof(stBodySarPara));

    stBodySarWcdmaPara.ucParaNum    = 3;
    stBodySarWcdmaPara.asPower[0]   = 20;
    stBodySarWcdmaPara.aulBand[0]   = 0x00000005;
    stBodySarWcdmaPara.asPower[1]   = 21;
    stBodySarWcdmaPara.aulBand[1]   = 0x00000003;
    stBodySarWcdmaPara.asPower[2]   = 22;
    stBodySarWcdmaPara.aulBand[2]   = 0x00000006;

    // 调用被测函数
    ulRet = AT_FillBodySarWcdmaPara(&stBodySarWcdmaPara, &stBodySarPara);

    // 执行检查
    EXPECT_EQ(VOS_OK, ulRet);
    EXPECT_EQ(3, stBodySarPara.usWBandNum);
    EXPECT_EQ(21, stBodySarPara.astWBandPara[0].sPower);
    EXPECT_EQ(MTA_WCDMA_I_2100, stBodySarPara.astWBandPara[0].enBand);
    EXPECT_EQ(22, stBodySarPara.astWBandPara[1].sPower);
    EXPECT_EQ(MTA_WCDMA_III_1800, stBodySarPara.astWBandPara[1].enBand);
    EXPECT_EQ(22, stBodySarPara.astWBandPara[2].sPower);
    EXPECT_EQ(MTA_WCDMA_II_1900, stBodySarPara.astWBandPara[2].enBand);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_FillBodySarWcdmaPara, Test_AT_FillBodySarWcdmaPara_003)
{
    // 变量声明
    AT_BODYSARWCDMA_SET_PARA_STRU       stBodySarWcdmaPara;
    MTA_BODY_SAR_PARA_STRU              stBodySarPara;
    VOS_UINT32                          ulRet;

    // 参数初始化
    PS_MEM_SET(&stBodySarWcdmaPara, 0, sizeof(stBodySarWcdmaPara));
    PS_MEM_SET(&stBodySarPara, 0, sizeof(stBodySarPara));

    stBodySarWcdmaPara.ucParaNum    = 1;
    stBodySarWcdmaPara.asPower[0]   = 20;
    stBodySarWcdmaPara.aulBand[0]   = 0x000000FF;

    // 调用被测函数
    ulRet = AT_FillBodySarWcdmaPara(&stBodySarWcdmaPara, &stBodySarPara);

    // 执行检查
    EXPECT_EQ(VOS_ERR, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetUserCfgOPlmnPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        AT_ResetParseVariable();
    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetUserCfgOPlmnPara, Test_AT_SetUserCfgOPlmnPara_001)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_READ_CMD;
    gucAtParaIndex                  = 4;

    gastAtParaList[0].ulParaValue   = 123456;
    gastAtParaList[0].usParaLen     = 6;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "123456", gastAtParaList[0].usParaLen);
    gastAtParaList[0].aucPara[gastAtParaList[0].usParaLen] = '\0';

    gastAtParaList[1].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 1;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "0", gastAtParaList[1].usParaLen);
    gastAtParaList[1].aucPara[gastAtParaList[1].usParaLen] = '\0';

    gastAtParaList[2].ulParaValue   = 10;
    gastAtParaList[2].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[2].aucPara, "10", gastAtParaList[2].usParaLen);
    gastAtParaList[2].aucPara[gastAtParaList[2].usParaLen] = '\0';

    gastAtParaList[3].ulParaValue   = 0x64F0208080;
    gastAtParaList[3].usParaLen     = 10;
    PS_MEM_CPY(gastAtParaList[3].aucPara, "64F0208080", gastAtParaList[3].usParaLen);
    gastAtParaList[3].aucPara[gastAtParaList[3].usParaLen] = '\0';

    // MOCKER操作

    // 调用被测函数
    ulRet = AT_SetUserCfgOPlmnPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetUserCfgOPlmnPara, Test_AT_SetUserCfgOPlmnPara_002)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 3;

    gastAtParaList[0].ulParaValue   = 123456;
    gastAtParaList[0].usParaLen     = 6;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "123456", gastAtParaList[0].usParaLen);
    gastAtParaList[0].aucPara[gastAtParaList[0].usParaLen] = '\0';

    gastAtParaList[1].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 1;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "0", gastAtParaList[1].usParaLen);
    gastAtParaList[1].aucPara[gastAtParaList[1].usParaLen] = '\0';

    gastAtParaList[2].ulParaValue   = 10;
    gastAtParaList[2].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[2].aucPara, "10", gastAtParaList[2].usParaLen);
    gastAtParaList[2].aucPara[gastAtParaList[2].usParaLen] = '\0';

    // MOCKER操作

    // 调用被测函数
    ulRet = AT_SetUserCfgOPlmnPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetUserCfgOPlmnPara, Test_AT_SetUserCfgOPlmnPara_003)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 4;

    gastAtParaList[0].ulParaValue   = 12345678;
    gastAtParaList[0].usParaLen     = 8;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "12345678", gastAtParaList[0].usParaLen);
    gastAtParaList[0].aucPara[gastAtParaList[0].usParaLen] = '\0';

    gastAtParaList[1].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 1;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "0", gastAtParaList[1].usParaLen);
    gastAtParaList[1].aucPara[gastAtParaList[1].usParaLen] = '\0';

    gastAtParaList[2].ulParaValue   = 10;
    gastAtParaList[2].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[2].aucPara, "10", gastAtParaList[2].usParaLen);
    gastAtParaList[2].aucPara[gastAtParaList[2].usParaLen] = '\0';

    gastAtParaList[3].ulParaValue   = 0x64F0208080;
    gastAtParaList[3].usParaLen     = 10;
    PS_MEM_CPY(gastAtParaList[3].aucPara, "64F0208080", gastAtParaList[3].usParaLen);
    gastAtParaList[3].aucPara[gastAtParaList[3].usParaLen] = '\0';


    // MOCKER操作

    // 调用被测函数
    ulRet = AT_SetUserCfgOPlmnPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetUserCfgOPlmnPara, Test_AT_SetUserCfgOPlmnPara_004)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 4;

    gastAtParaList[0].ulParaValue   = 123456;
    gastAtParaList[0].usParaLen     = 6;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "123456", gastAtParaList[0].usParaLen);
    gastAtParaList[0].aucPara[gastAtParaList[0].usParaLen] = '\0';

    gastAtParaList[1].ulParaValue   = 6;
    gastAtParaList[1].usParaLen     = 1;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "6", gastAtParaList[1].usParaLen);
    gastAtParaList[1].aucPara[gastAtParaList[1].usParaLen] = '\0';

    gastAtParaList[2].ulParaValue   = 10;
    gastAtParaList[2].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[2].aucPara, "10", gastAtParaList[2].usParaLen);
    gastAtParaList[2].aucPara[gastAtParaList[2].usParaLen] = '\0';

    gastAtParaList[3].ulParaValue   = 0x64F0208080;
    gastAtParaList[3].usParaLen     = 10;
    PS_MEM_CPY(gastAtParaList[3].aucPara, "64F0208080", gastAtParaList[3].usParaLen);
    gastAtParaList[3].aucPara[gastAtParaList[3].usParaLen] = '\0';


    // MOCKER操作

    // 调用被测函数
    ulRet = AT_SetUserCfgOPlmnPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetUserCfgOPlmnPara, Test_AT_SetUserCfgOPlmnPara_005)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 4;

    gastAtParaList[0].ulParaValue   = 123456;
    gastAtParaList[0].usParaLen     = 6;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "123456", gastAtParaList[0].usParaLen);
    gastAtParaList[0].aucPara[gastAtParaList[0].usParaLen] = '\0';

    gastAtParaList[1].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 1;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "0", gastAtParaList[1].usParaLen);
    gastAtParaList[1].aucPara[gastAtParaList[1].usParaLen] = '\0';

    gastAtParaList[2].ulParaValue   = 510;
    gastAtParaList[2].usParaLen     = 3;
    PS_MEM_CPY(gastAtParaList[2].aucPara, "510", gastAtParaList[2].usParaLen);
    gastAtParaList[2].aucPara[gastAtParaList[2].usParaLen] = '\0';

    gastAtParaList[3].ulParaValue   = 0x64F0208080;
    gastAtParaList[3].usParaLen     = 10;
    PS_MEM_CPY(gastAtParaList[3].aucPara, "64F0208080", gastAtParaList[3].usParaLen);
    gastAtParaList[3].aucPara[gastAtParaList[3].usParaLen] = '\0';


    // MOCKER操作

    // 调用被测函数
    ulRet = AT_SetUserCfgOPlmnPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetUserCfgOPlmnPara, Test_AT_SetUserCfgOPlmnPara_006)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 4;

    gastAtParaList[0].ulParaValue   = 123456;
    gastAtParaList[0].usParaLen     = 6;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "123456", gastAtParaList[0].usParaLen);
    gastAtParaList[0].aucPara[gastAtParaList[0].usParaLen] = '\0';

    gastAtParaList[1].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 1;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "0", gastAtParaList[1].usParaLen);
    gastAtParaList[1].aucPara[gastAtParaList[1].usParaLen] = '\0';

    gastAtParaList[2].ulParaValue   = 12;
    gastAtParaList[2].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[2].aucPara, "12", gastAtParaList[2].usParaLen);
    gastAtParaList[2].aucPara[gastAtParaList[2].usParaLen] = '\0';

    gastAtParaList[3].ulParaValue   = 0x64F0208080;
    gastAtParaList[3].usParaLen     = 10;
    PS_MEM_CPY(gastAtParaList[3].aucPara, "64F0208080", gastAtParaList[3].usParaLen);
    gastAtParaList[3].aucPara[gastAtParaList[3].usParaLen] = '\0';


    // MOCKER操作

    // 调用被测函数
    ulRet = AT_SetUserCfgOPlmnPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetUserCfgOPlmnPara, Test_AT_SetUserCfgOPlmnPara_007)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 4;

    gastAtParaList[0].ulParaValue   = 123456;
    gastAtParaList[0].usParaLen     = 6;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "123456", gastAtParaList[0].usParaLen);
    gastAtParaList[0].aucPara[gastAtParaList[0].usParaLen] = '\0';

    gastAtParaList[1].ulParaValue   = 5;
    gastAtParaList[1].usParaLen     = 1;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "5", gastAtParaList[1].usParaLen);
    gastAtParaList[1].aucPara[gastAtParaList[1].usParaLen] = '\0';

    gastAtParaList[2].ulParaValue   = 70;
    gastAtParaList[2].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[2].aucPara, "70", gastAtParaList[2].usParaLen);
    gastAtParaList[2].aucPara[gastAtParaList[2].usParaLen] = '\0';

    gastAtParaList[3].ulParaValue   = 0x64F0208080;
    gastAtParaList[3].usParaLen     = 70;
    PS_MEM_CPY(gastAtParaList[3].aucPara, "64F020808064F020808064F020808064F020808064F020808064F020808064F0208080", gastAtParaList[3].usParaLen);
    gastAtParaList[3].aucPara[gastAtParaList[3].usParaLen] = '\0';


    // MOCKER操作

    // 调用被测函数
    ulRet = AT_SetUserCfgOPlmnPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetUserCfgOPlmnPara, Test_AT_SetUserCfgOPlmnPara_008)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 4;

    gastAtParaList[0].ulParaValue   = 123456;
    gastAtParaList[0].usParaLen     = 6;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "123456", gastAtParaList[0].usParaLen);
    gastAtParaList[0].aucPara[gastAtParaList[0].usParaLen] = '\0';

    gastAtParaList[1].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 1;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "0", gastAtParaList[1].usParaLen);
    gastAtParaList[1].aucPara[gastAtParaList[1].usParaLen] = '\0';

    gastAtParaList[2].ulParaValue   = 20;
    gastAtParaList[2].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[2].aucPara, "20", gastAtParaList[2].usParaLen);
    gastAtParaList[2].aucPara[gastAtParaList[2].usParaLen] = '\0';

    gastAtParaList[3].ulParaValue   = 0x64F0208080;
    gastAtParaList[3].usParaLen     = 10;
    PS_MEM_CPY(gastAtParaList[3].aucPara, "64F0208080", gastAtParaList[3].usParaLen);
    gastAtParaList[3].aucPara[gastAtParaList[3].usParaLen] = '\0';


    // MOCKER操作

    // 调用被测函数
    ulRet = AT_SetUserCfgOPlmnPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetUserCfgOPlmnPara, Test_AT_SetUserCfgOPlmnPara_009)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 4;

    gastAtParaList[0].ulParaValue   = 123456;
    gastAtParaList[0].usParaLen     = 6;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "123456", gastAtParaList[0].usParaLen);
    gastAtParaList[0].aucPara[gastAtParaList[0].usParaLen] = '\0';

    gastAtParaList[1].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 1;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "0", gastAtParaList[1].usParaLen);
    gastAtParaList[1].aucPara[gastAtParaList[1].usParaLen] = '\0';

    gastAtParaList[2].ulParaValue   = 10;
    gastAtParaList[2].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[2].aucPara, "10", gastAtParaList[2].usParaLen);
    gastAtParaList[2].aucPara[gastAtParaList[2].usParaLen] = '\0';

    gastAtParaList[3].ulParaValue   = 0x64F0208080;
    gastAtParaList[3].usParaLen     = 10;
    PS_MEM_CPY(gastAtParaList[3].aucPara, "64F0=08080", gastAtParaList[3].usParaLen);
    gastAtParaList[3].aucPara[gastAtParaList[3].usParaLen] = '\0';


    // MOCKER操作

    // 调用被测函数
    ulRet = AT_SetUserCfgOPlmnPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetUserCfgOPlmnPara, Test_AT_SetUserCfgOPlmnPara_010)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;
    TAF_MMA_EOPLMN_SET_REQ_STRU         stMsg;
    VOS_UINT32                          ulReceiverPid;
    VOS_UINT32                          ulSenderPid;

    TAF_MMA_SET_EOPLMN_LIST_STRU        stEOPlmnSetPara;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 4;

    gastAtParaList[0].ulParaValue   = 123456;
    gastAtParaList[0].usParaLen     = 6;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "123456", gastAtParaList[0].usParaLen);
    gastAtParaList[0].aucPara[gastAtParaList[0].usParaLen] = '\0';

    gastAtParaList[1].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 1;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "0", gastAtParaList[1].usParaLen);
    gastAtParaList[1].aucPara[gastAtParaList[1].usParaLen] = '\0';

    gastAtParaList[2].ulParaValue   = 10;
    gastAtParaList[2].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[2].aucPara, "10", gastAtParaList[2].usParaLen);
    gastAtParaList[2].aucPara[gastAtParaList[2].usParaLen] = '\0';

    gastAtParaList[3].ulParaValue   = 0x64F0208080;
    gastAtParaList[3].usParaLen     = 10;
    PS_MEM_CPY(gastAtParaList[3].aucPara, "64F0208080", gastAtParaList[3].usParaLen);
    gastAtParaList[3].aucPara[gastAtParaList[3].usParaLen] = '\0';


    PS_MEM_SET(&stEOPlmnSetPara, 0, sizeof(TAF_MMA_SET_EOPLMN_LIST_STRU));


    /* 将设置的AT参数封装成TAF_MMA_SET_EOPLMN_LIST_STRU的形式 */
    PS_MEM_CPY(stEOPlmnSetPara.aucVersion,
               gastAtParaList[0].aucPara,
               TAF_MAX_USER_CFG_OPLMN_VERSION_LEN);

    PS_MEM_CPY(stEOPlmnSetPara.aucOPlmnWithRat,
               gastAtParaList[3].aucPara,
               gastAtParaList[3].usParaLen);

    stEOPlmnSetPara.ucIndex      = (VOS_UINT8)gastAtParaList[1].ulParaValue;
    stEOPlmnSetPara.ucOPlmnCount = (VOS_UINT8)(gastAtParaList[2].ulParaValue / TAF_AT_PLMN_WITH_RAT_LEN);

    PS_MEM_SET( ((VOS_UINT8 *)&stMsg + VOS_MSG_HEAD_LENGTH), 0X00,
                (sizeof(TAF_MMA_EOPLMN_SET_REQ_STRU) - VOS_MSG_HEAD_LENGTH) );

#if (OSA_CPU_ACPU == VOS_OSA_CPU)
    ulReceiverPid = AT_GetDestPid(usClientId, WUEPS_PID_MMA);
    ulSenderPid   = AT_GetDestPid(usClientId, WUEPS_PID_TAF);
#else
    ulReceiverPid = WUEPS_PID_MMA;
    ulSenderPid   = WUEPS_PID_TAF;
#endif
    stMsg.ulSenderCpuId       = VOS_LOCAL_CPUID;
    stMsg.ulReceiverCpuId     = VOS_LOCAL_CPUID;
    stMsg.ulReceiverPid       = ulReceiverPid;
    stMsg.ulSenderPid         = ulSenderPid;
    stMsg.ulMsgName           = ID_TAF_MMA_AC_INFO_QRY_REQ;
    stMsg.stCtrl.ulModuleId   = WUEPS_PID_AT;
    stMsg.stCtrl.usClientId   = gastAtClientTab[ulIndex].usClientId;
    stMsg.stCtrl.ucOpId       = 0;
    stMsg.ulLength            = sizeof(TAF_MMA_EOPLMN_SET_REQ_STRU) - VOS_MSG_HEAD_LENGTH;
    PS_MEM_CPY(&(stMsg.stEOPlmnSetPara), &stEOPlmnSetPara, sizeof(TAF_MMA_SET_EOPLMN_LIST_STRU));

    MOCKER(Ps_SendMsg)
        .with(any(), any(),eq(WUEPS_PID_TAF), mirror(&stMsg, sizeof(stMsg)))
        .will(returnValue(VOS_OK));

    // 调用被测函数
    ulRet = AT_SetUserCfgOPlmnPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}
class Test_AT_SetBodySarWcdmaPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        AT_ResetParseVariable();
    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetBodySarWcdmaPara, Test_AT_SetBodySarWcdmaPara_001)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;
    AT_NV_WG_RF_MAIN_BAND_STRU          stWGBand;

    // 参数初始化
    ucIndex = 0;

    PS_MEM_SET(&stWGBand, 0, sizeof(stWGBand));
    stWGBand.unWcdmaBand.ulBand                     = 0x03;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_I_2100   = 1;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_II_1900  = 1;

    // 初始化全局变量
    gucAtParaIndex                  = 4;

    gastAtParaList[0].ulParaValue   = 20;
    gastAtParaList[0].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "20", gastAtParaList[0].usParaLen);
    gastAtParaList[0].aucPara[gastAtParaList[0].usParaLen] = '\0';

    gastAtParaList[1].ulParaValue   = 0x01;
    gastAtParaList[1].usParaLen     = 8;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "00000001", gastAtParaList[1].usParaLen);
    gastAtParaList[1].aucPara[gastAtParaList[1].usParaLen] = '\0';

    gastAtParaList[2].ulParaValue   = 21;
    gastAtParaList[2].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[2].aucPara, "21", gastAtParaList[2].usParaLen);
    gastAtParaList[2].aucPara[gastAtParaList[2].usParaLen] = '\0';

    gastAtParaList[3].ulParaValue   = 0x0000000F;
    gastAtParaList[3].usParaLen     = 8;
    PS_MEM_CPY(gastAtParaList[3].aucPara, "0000000F", gastAtParaList[3].usParaLen);
    gastAtParaList[3].aucPara[gastAtParaList[3].usParaLen] = '\0';

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), eq((VOS_UINT16)en_NV_Item_WG_RF_MAIN_BAND), outBoundP((void *)&stWGBand, (VOS_UINT32)sizeof(stWGBand)), eq((VOS_UINT32)sizeof(stWGBand)))
        .will(returnValue((VOS_UINT32)NV_OK));

    // 调用被测函数
    ulRet = AT_SetBodySarWcdmaPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetBodySarWcdmaPara, Test_AT_SetBodySarWcdmaPara_002)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;

    // 参数初始化
    ucIndex = 0;

    // MOCKER操作
    MOCKER(AT_CheckBodySarWcdmaPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue((VOS_UINT32)NV_ID_NOT_EXIST));

    // 调用被测函数
    ulRet = AT_SetBodySarWcdmaPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetBodySarWcdmaPara, Test_AT_SetBodySarWcdmaPara_003)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;
    AT_NV_WG_RF_MAIN_BAND_STRU          stWGBand;
    MTA_BODY_SAR_PARA_STRU              stBodySarPara;

    // 参数初始化
    ucIndex = 0;
    PS_MEM_SET(&stBodySarPara, 0, sizeof(stBodySarPara));
    stBodySarPara.usWBandNum = 5;
    stBodySarPara.astWBandPara[0].sPower = 18;
    stBodySarPara.astWBandPara[1].sPower = 18;
    stBodySarPara.astWBandPara[2].sPower = 18;
    stBodySarPara.astWBandPara[3].sPower = 18;
    stBodySarPara.astWBandPara[4].sPower = 18;

    stBodySarPara.astWBandPara[0].enBand = MTA_WCDMA_I_2100;
    stBodySarPara.astWBandPara[1].enBand = MTA_WCDMA_II_1900;
    stBodySarPara.astWBandPara[2].enBand = MTA_WCDMA_III_1800;
    stBodySarPara.astWBandPara[3].enBand = MTA_WCDMA_IV_1700;
    stBodySarPara.astWBandPara[4].enBand = MTA_WCDMA_V_850;

    PS_MEM_SET(&stWGBand, 0, sizeof(stWGBand));
    stWGBand.unWcdmaBand.ulBand                     = 0x0000003F;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_I_2100   = 1;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_II_1900  = 1;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_III_1800 = 1;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_IV_1700  = 1;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_V_850    = 1;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_VI_800   = 1;

    // 初始化全局变量
    gucAtParaIndex                  = 2;

    gastAtParaList[0].ulParaValue   = 20;
    gastAtParaList[0].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "20", gastAtParaList[0].usParaLen);
    gastAtParaList[0].aucPara[gastAtParaList[0].usParaLen] = '\0';

    gastAtParaList[1].ulParaValue   = 0x00000020;
    gastAtParaList[1].usParaLen     = 8;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "00000020", gastAtParaList[1].usParaLen);
    gastAtParaList[1].aucPara[gastAtParaList[1].usParaLen] = '\0';

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_WG_RF_MAIN_BAND),outBoundP((void *)&stWGBand, (VOS_UINT32)sizeof(stWGBand)),eq((VOS_UINT32)sizeof(stWGBand)))
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_BODY_SAR_PARA),outBoundP((void *)&stBodySarPara, (VOS_UINT32)sizeof(stBodySarPara)),eq((VOS_UINT32)sizeof(stBodySarPara)))
        .will(returnValue((VOS_UINT32)NV_OK));

    // 调用被测函数
    ulRet = AT_SetBodySarWcdmaPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetBodySarWcdmaPara, Test_AT_SetBodySarWcdmaPara_004)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;
    AT_NV_WG_RF_MAIN_BAND_STRU          stWGBand;
    MTA_BODY_SAR_PARA_STRU              stBodySarPara;

    // 参数初始化
    ucIndex = 0;
    PS_MEM_SET(&stBodySarPara, 0, sizeof(stBodySarPara));
    stBodySarPara.usWBandNum = 2;
    stBodySarPara.astWBandPara[0].sPower = 18;
    stBodySarPara.astWBandPara[1].sPower = 18;

    stBodySarPara.astWBandPara[0].enBand = MTA_WCDMA_I_2100;
    stBodySarPara.astWBandPara[1].enBand = MTA_WCDMA_II_1900;

    PS_MEM_SET(&stWGBand, 0, sizeof(stWGBand));
    stWGBand.unWcdmaBand.ulBand                     = 0x0000003F;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_I_2100   = 1;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_II_1900  = 1;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_III_1800 = 1;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_IV_1700  = 1;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_V_850    = 1;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_VI_800   = 1;

    // 初始化全局变量
    gucAtParaIndex                  = 2;

    gastAtParaList[0].ulParaValue   = 20;
    gastAtParaList[0].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "20", gastAtParaList[0].usParaLen);
    gastAtParaList[0].aucPara[gastAtParaList[0].usParaLen] = '\0';

    gastAtParaList[1].ulParaValue   = 0x00000002;
    gastAtParaList[1].usParaLen     = 8;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "00000002", gastAtParaList[1].usParaLen);
    gastAtParaList[1].aucPara[gastAtParaList[1].usParaLen] = '\0';

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_WG_RF_MAIN_BAND),outBoundP((void *)&stWGBand, (VOS_UINT32)sizeof(stWGBand)),eq((VOS_UINT32)sizeof(stWGBand)))
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_BODY_SAR_PARA),outBoundP((void *)&stBodySarPara, (VOS_UINT32)sizeof(stBodySarPara)),eq((VOS_UINT32)sizeof(stBodySarPara)))
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_WriteEx)
        .stubs()
        .will(returnValue((VOS_UINT32)NV_WRITE_UNABLE));

    // 调用被测函数
    ulRet = AT_SetBodySarWcdmaPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetBodySarWcdmaPara, Test_AT_SetBodySarWcdmaPara_005)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;
    AT_NV_WG_RF_MAIN_BAND_STRU          stWGBand;
    MTA_BODY_SAR_PARA_STRU              stBodySarPara;
    MTA_BODY_SAR_PARA_STRU              stBodySarParaExpect;

    // 参数初始化
    ucIndex = 0;
    PS_MEM_SET(&stWGBand, 0, sizeof(stWGBand));
    PS_MEM_SET(&stBodySarPara, 0, sizeof(stBodySarPara));
    PS_MEM_SET(&stBodySarParaExpect, 0, sizeof(stBodySarParaExpect));

    stBodySarPara.usWBandNum                    = 2;
    stBodySarPara.astWBandPara[0].sPower        = 18;
    stBodySarPara.astWBandPara[0].enBand        = MTA_WCDMA_I_2100;
    stBodySarPara.astWBandPara[1].sPower        = 18;
    stBodySarPara.astWBandPara[1].enBand        = MTA_WCDMA_II_1900;
    stBodySarParaExpect.usWBandNum              = 2;
    stBodySarParaExpect.astWBandPara[0].sPower  = 18;
    stBodySarParaExpect.astWBandPara[0].enBand  = MTA_WCDMA_I_2100;
    stBodySarParaExpect.astWBandPara[1].sPower  = 20;
    stBodySarParaExpect.astWBandPara[1].enBand  = MTA_WCDMA_II_1900;

    stWGBand.unWcdmaBand.ulBand                     = 0x0000000F;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_I_2100   = 1;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_II_1900  = 1;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_III_1800 = 1;
    stWGBand.unWcdmaBand.BitBand.BandWCDMA_IV_1700  = 1;

    // 初始化全局变量
    g_enAtBodySarState              = MTA_BODY_SAR_ON;
    gucAtParaIndex                  = 2;

    gastAtParaList[0].ulParaValue   = 20;
    gastAtParaList[0].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "20", gastAtParaList[0].usParaLen);
    gastAtParaList[0].aucPara[gastAtParaList[0].usParaLen] = '\0';

    gastAtParaList[1].usParaLen     = 8;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "00000002", gastAtParaList[1].usParaLen);
    gastAtParaList[1].aucPara[gastAtParaList[1].usParaLen] = '\0';

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_WG_RF_MAIN_BAND),outBoundP((void *)&stWGBand, (VOS_UINT32)sizeof(stWGBand)),any())
        .will(returnValue(NV_OK));

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_BODY_SAR_PARA),outBoundP((void *)&stBodySarPara, (VOS_UINT32)sizeof(stBodySarPara)),any())
        .will(returnValue((VOS_UINT32)NV_OK));


    MOCKER(NV_WriteEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_BODY_SAR_PARA),mirror((void *)&stBodySarParaExpect, (VOS_UINT32)sizeof(stBodySarParaExpect)),any())
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(AT_SndMtaBodySarPara)
        .expects(exactly(1))
        .with(eq((VOS_UINT8)ucIndex),eq((VOS_UINT16)g_enAtBodySarState),mirror((MTA_BODY_SAR_PARA_STRU *)&stBodySarParaExpect,(VOS_UINT32)sizeof(stBodySarParaExpect)))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = AT_SetBodySarWcdmaPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetBodySarGsmPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetBodySarGsmPara, Test_AT_SetBodySarGsmPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 0;

    // MOCKER操作
    MOCKER(AT_CheckBodySarGsmPara)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS));

    // 调用被测函数
    ulRet = AT_SetBodySarGsmPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetBodySarGsmPara, Test_AT_SetBodySarGsmPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    AT_NV_WG_RF_MAIN_BAND_STRU          stWGBand = {0};

    // 参数初始化
    ucIndex                     = AT_CLIENT_TAB_PCUI_INDEX;
    stWGBand.unGsmBand.ulBand   = 0xDC;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].ulParaValue   = 20;
    gastAtParaList[0].usParaLen     = 2;

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_WG_RF_MAIN_BAND), outBoundP((void *)&stWGBand, (VOS_UINT32)sizeof(stWGBand)), any())
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_BODY_SAR_PARA), any(), any())
        .will(returnValue((VOS_UINT32)NV_INIT_FAIL));

    // 调用被测函数
    ulRet = AT_SetBodySarGsmPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetBodySarGsmPara, Test_AT_SetBodySarGsmPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex             = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].ulParaValue   = 20;
    gastAtParaList[0].usParaLen     = 2;

    // MOCKER操作
    MOCKER(NV_WriteEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_BODY_SAR_PARA), any(), any())
        .will(returnValue(NV_INIT_FAIL));

    MOCKER(AT_FillBodySarGsmPara)
        .expects(exactly(1));

    // 调用被测函数
    ulRet = AT_SetBodySarGsmPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetBodySarGsmPara, Test_AT_SetBodySarGsmPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    MTA_BODY_SAR_PARA_STRU              stBodySarPara = {0};

    // 参数初始化
    ucIndex                     = AT_CLIENT_TAB_PCUI_INDEX;
    stBodySarPara.ulGBandMask   = 0x000F000F;
    stBodySarPara.astGBandPara[MTA_GSM_850].sGPRSPower  = 15;
    stBodySarPara.astGBandPara[MTA_GSM_850].sEDGEPower  = 16;
    stBodySarPara.astGBandPara[MTA_GSM_900].sGPRSPower  = 17;
    stBodySarPara.astGBandPara[MTA_GSM_900].sEDGEPower  = 18;
    stBodySarPara.astGBandPara[MTA_GSM_1800].sGPRSPower = 19;
    stBodySarPara.astGBandPara[MTA_GSM_1800].sEDGEPower = 20;
    stBodySarPara.astGBandPara[MTA_GSM_1900].sGPRSPower = 21;
    stBodySarPara.astGBandPara[MTA_GSM_1900].sEDGEPower = 22;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].ulParaValue   = 20;
    gastAtParaList[0].usParaLen     = 2;
    g_enAtBodySarState              = MTA_BODY_SAR_ON;

    // MOCKER操作
    MOCKER(AT_FillBodySarGsmPara)
        .expects(exactly(1))
        .with(any(), outBoundP((MTA_BODY_SAR_PARA_STRU *)&stBodySarPara, (VOS_UINT32)sizeof(stBodySarPara)));

    MOCKER(AT_SndMtaBodySarPara)
        .expects(exactly(1))
        .with(eq((VOS_UINT8)ucIndex), eq((VOS_UINT16)g_enAtBodySarState), mirror((MTA_BODY_SAR_PARA_STRU *)&stBodySarPara, (VOS_UINT32)sizeof(stBodySarPara)))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = AT_SetBodySarGsmPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetBodySarGsmPara, Test_AT_SetBodySarGsmPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    MTA_BODY_SAR_PARA_STRU              stBodySarPara       = {0};
    MTA_BODY_SAR_PARA_STRU              stBodySarParaExpect = {0};
    VOS_UINT32                          ulLen;
    AT_NV_WG_RF_MAIN_BAND_STRU          stWGBand = {0};

    // 参数初始化
    stWGBand.unGsmBand.ulBand = 0xDC;
    ulLen = VOS_StrLen(AT_RF_BAND_ANY_STR);
    ucIndex                     = AT_CLIENT_TAB_PCUI_INDEX;
    stBodySarPara.ulGBandMask   = 0x000F000F;
    stBodySarPara.astGBandPara[MTA_GSM_850].sGPRSPower  = 15;
    stBodySarPara.astGBandPara[MTA_GSM_850].sEDGEPower  = 16;
    stBodySarPara.astGBandPara[MTA_GSM_900].sGPRSPower  = 17;
    stBodySarPara.astGBandPara[MTA_GSM_900].sEDGEPower  = 18;
    stBodySarPara.astGBandPara[MTA_GSM_1800].sGPRSPower = 19;
    stBodySarPara.astGBandPara[MTA_GSM_1800].sEDGEPower = 20;
    stBodySarPara.astGBandPara[MTA_GSM_1900].sGPRSPower = 21;
    stBodySarPara.astGBandPara[MTA_GSM_1900].sEDGEPower = 22;
    stBodySarParaExpect.ulGBandMask                     = 0x000F000F;
    stBodySarParaExpect.astGBandPara[MTA_GSM_850].sGPRSPower  = 20;
    stBodySarParaExpect.astGBandPara[MTA_GSM_850].sEDGEPower  = 20;
    stBodySarParaExpect.astGBandPara[MTA_GSM_900].sGPRSPower  = 20;
    stBodySarParaExpect.astGBandPara[MTA_GSM_900].sEDGEPower  = 20;
    stBodySarParaExpect.astGBandPara[MTA_GSM_1800].sGPRSPower = 17;
    stBodySarParaExpect.astGBandPara[MTA_GSM_1800].sEDGEPower = 17;
    stBodySarParaExpect.astGBandPara[MTA_GSM_1900].sGPRSPower = 20;
    stBodySarParaExpect.astGBandPara[MTA_GSM_1900].sEDGEPower = 20;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 4;
    gastAtParaList[0].aucPara[0]    = 2;
    gastAtParaList[0].aucPara[1]    = 0;
    gastAtParaList[0].ulParaValue   = 20;
    gastAtParaList[0].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[1].aucPara,
               AT_RF_BAND_ANY_STR,
               ulLen);
    gastAtParaList[1].usParaLen     = (VOS_UINT16)ulLen;
    gastAtParaList[2].aucPara[0]    = 1;
    gastAtParaList[2].aucPara[1]    = 7;
    gastAtParaList[2].ulParaValue   = 17;
    gastAtParaList[2].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[3].aucPara,
               "00040004",
               ulLen);
    gastAtParaList[3].usParaLen     = (VOS_UINT16)ulLen;
    g_enAtBodySarState              = MTA_BODY_SAR_OFF;

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_WG_RF_MAIN_BAND), outBoundP((void *)&stWGBand, (VOS_UINT32)sizeof(stWGBand)), any())
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_BODY_SAR_PARA), outBoundP((void *)&stBodySarPara, (VOS_UINT32)sizeof(stBodySarPara)), any())
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_WriteEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_BODY_SAR_PARA),
              mirror((void *)&stBodySarParaExpect, (VOS_UINT32)sizeof(stBodySarParaExpect)),
              any())
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(AT_SndMtaBodySarPara)
        .expects(never());

    // 调用被测函数
    ulRet = AT_SetBodySarGsmPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetBodySarGsmPara, Test_AT_SetBodySarGsmPara_006)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    AT_NV_WG_RF_MAIN_BAND_STRU          stWGBand = {0};

    // 参数初始化
    ucIndex                     = AT_CLIENT_TAB_PCUI_INDEX;
    stWGBand.unGsmBand.ulBand   = 0xDC;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].ulParaValue   = 20;
    gastAtParaList[0].usParaLen     = 2;

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_WG_RF_MAIN_BAND), outBoundP((void *)&stWGBand, (VOS_UINT32)sizeof(stWGBand)), any())
        .will(returnValue((VOS_UINT32)NV_INIT_FAIL));

    // 调用被测函数
    ulRet = AT_SetBodySarGsmPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_GetGsmBandCapa: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_GetGsmBandCapa, Test_AT_GetGsmBandCapa_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT32                          ulGBand = 0;

    // 参数初始化

    // 初始化全局变量

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_WG_RF_MAIN_BAND), any(), any())
        .will(returnValue((VOS_UINT32)NV_INIT_FAIL));

    // 调用被测函数
    ulRet = AT_GetGsmBandCapa(&ulGBand);

    // 执行检查
    EXPECT_EQ(VOS_ERR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_GetGsmBandCapa, Test_AT_GetGsmBandCapa_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT32                          ulGBand = 0;
    AT_NV_WG_RF_MAIN_BAND_STRU          stWGBand = {0};

    // 参数初始化
    stWGBand.unGsmBand.ulBand = 0xDC;

    // 初始化全局变量

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(), eq((VOS_UINT16)en_NV_Item_WG_RF_MAIN_BAND), outBoundP((void *)&stWGBand, (VOS_UINT32)sizeof(stWGBand)), any())
        .will(returnValue((VOS_UINT32)NV_OK));

    // 调用被测函数
    ulRet = AT_GetGsmBandCapa(&ulGBand);

    // 执行检查
    EXPECT_EQ(VOS_OK, ulRet);
    EXPECT_EQ(0x000F000F, ulGBand);

    GlobalMockObject::verify();
}


class Test_AT_CheckBodySarGsmPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        AT_ResetParseVariable();
    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_CheckBodySarGsmPara, Test_AT_CheckBodySarGsmPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    AT_BODYSARGSM_SET_PARA_STRU         stBodySarGsmPara = {0};

    // 参数初始化

    // 初始化全局变量
    gucAtParaIndex = AT_BODYSARGSM_MAX_PARA_NUM + 1;

    // MOCKER操作

    // 调用被测函数
    ulRet = AT_CheckBodySarGsmPara(&stBodySarGsmPara);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_CheckBodySarGsmPara, Test_AT_CheckBodySarGsmPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    AT_BODYSARGSM_SET_PARA_STRU         stBodySarGsmPara = {0};

    // 参数初始化

    // 初始化全局变量
    gucAtParaIndex = AT_BODYSARGSM_MAX_PARA_NUM - 1;

    // MOCKER操作

    // 调用被测函数
    ulRet = AT_CheckBodySarGsmPara(&stBodySarGsmPara);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_CheckBodySarGsmPara, Test_AT_CheckBodySarGsmPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    AT_BODYSARGSM_SET_PARA_STRU         stBodySarGsmPara = {0};
    VOS_UINT32                          ulLen;

    // 参数初始化
    ulLen = VOS_StrLen(AT_RF_BAND_ANY_STR);

    // 初始化全局变量
    gucAtParaIndex = 4;
    gastAtParaList[0].aucPara[0]    = 2;
    gastAtParaList[0].aucPara[1]    = 0;
    gastAtParaList[0].ulParaValue   = 20;
    gastAtParaList[0].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[1].aucPara,
               AT_RF_BAND_ANY_STR,
               ulLen);
    gastAtParaList[1].usParaLen     = (VOS_UINT16)ulLen;
    gastAtParaList[2].aucPara[0]    = 1;
    gastAtParaList[2].aucPara[1]    = 7;
    gastAtParaList[2].ulParaValue   = 17;
    gastAtParaList[2].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[3].aucPara,
               "000000G0",
               ulLen);
    gastAtParaList[3].usParaLen     = (VOS_UINT16)ulLen;

    // MOCKER操作

    // 调用被测函数
    ulRet = AT_CheckBodySarGsmPara(&stBodySarGsmPara);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_CheckBodySarGsmPara, Test_AT_CheckBodySarGsmPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    AT_BODYSARGSM_SET_PARA_STRU         stBodySarGsmPara = {0};
    VOS_UINT32                          ulLen;

    // 参数初始化
    ulLen = VOS_StrLen(AT_RF_BAND_ANY_STR);

    // 初始化全局变量
    gucAtParaIndex = 4;
    gastAtParaList[0].aucPara[0]    = 2;
    gastAtParaList[0].aucPara[1]    = 0;
    gastAtParaList[0].ulParaValue   = 20;
    gastAtParaList[0].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[1].aucPara,
               AT_RF_BAND_ANY_STR,
               ulLen);
    gastAtParaList[1].usParaLen     = (VOS_UINT16)ulLen;
    gastAtParaList[2].aucPara[0]    = 1;
    gastAtParaList[2].aucPara[1]    = 7;
    gastAtParaList[2].ulParaValue   = 17;
    gastAtParaList[2].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[3].aucPara,
               "000000F0",
               ulLen);
    gastAtParaList[3].usParaLen     = (VOS_UINT16)ulLen;

    // MOCKER操作

    // 调用被测函数
    ulRet = AT_CheckBodySarGsmPara(&stBodySarGsmPara);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_CheckBodySarGsmPara, Test_AT_CheckBodySarGsmPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    AT_BODYSARGSM_SET_PARA_STRU         stBodySarGsmPara        = {0};
    AT_BODYSARGSM_SET_PARA_STRU         stBodySarGsmParaExpect  = {0};
    VOS_UINT32                          ulLen;
    VOS_UINT32                          ulGBand;

    // 参数初始化
    ulLen   = VOS_StrLen(AT_RF_BAND_ANY_STR);
    ulGBand = 0x000F000F;
    stBodySarGsmParaExpect.ucParaNum = 2;
    stBodySarGsmParaExpect.asPower[0] = 20;
    stBodySarGsmParaExpect.aulBand[0] = 0x000F000F;
    stBodySarGsmParaExpect.asPower[1] = 17;
    stBodySarGsmParaExpect.aulBand[1] = 0x00040004;


    // 初始化全局变量
    gucAtParaIndex = 4;
    gastAtParaList[0].aucPara[0]    = 2;
    gastAtParaList[0].aucPara[1]    = 0;
    gastAtParaList[0].ulParaValue   = 20;
    gastAtParaList[0].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[1].aucPara,
               AT_RF_BAND_ANY_STR,
               ulLen);
    gastAtParaList[1].usParaLen     = (VOS_UINT16)ulLen;
    gastAtParaList[2].aucPara[0]    = 1;
    gastAtParaList[2].aucPara[1]    = 7;
    gastAtParaList[2].ulParaValue   = 17;
    gastAtParaList[2].usParaLen     = 2;
    PS_MEM_CPY(gastAtParaList[3].aucPara,
               "00040004",
               ulLen);
    gastAtParaList[3].usParaLen     = (VOS_UINT16)ulLen;

    // MOCKER操作
    MOCKER(AT_GetGsmBandCapa)
        .stubs()
        .with(outBoundP((VOS_UINT32 *)&ulGBand, (VOS_UINT32)sizeof(ulGBand)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_CheckBodySarGsmPara(&stBodySarGsmPara);

    // 执行检查
    EXPECT_EQ(AT_SUCCESS, ulRet);
    EXPECT_EQ(0, VOS_MemCmp(&stBodySarGsmParaExpect, &stBodySarGsmPara, sizeof(stBodySarGsmPara)));

    GlobalMockObject::verify();
}



class Test_At_SetS0Para: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetS0Para, Test_At_SetS0Para_001)
{
    VOS_UINT8                           ucIndex = 0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = MODEM_ID_0;


    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    /* 桩函数 */
    MOCKER(AT_GetModemIdFromClient).stubs().will(returnValue((VOS_UINT32)VOS_ERR));

    /* 调用函数 */
    ulRst = At_SetS0Para(ucIndex);

    /* 检查结果 */
    EXPECT_EQ(AT_ERROR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetS0Para, Test_At_SetS0Para_002)
{
    VOS_UINT8                           ucIndex = 0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = MODEM_ID_0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_READ_CMD;
    /* 调用函数 */
    ulRst = At_SetS0Para(ucIndex);

    /* 检查结果 */
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetS0Para, Test_At_SetS0Para_003)
{
    VOS_UINT8                           ucIndex = 0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = MODEM_ID_0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetS0Para(ucIndex);

    /* 检查结果 */
    EXPECT_EQ(AT_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetS0Para, Test_At_SetS0Para_004)
{
    VOS_UINT8                           ucIndex = 0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    TAF_CCA_TELE_PARA_STRU              stTimeInfo;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    gastAtParaList[0].ulParaValue = 5;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    memset(&stTimeInfo, 0 ,sizeof(TAF_CCA_TELE_PARA_STRU));
    stTimeInfo.ucS0TimerLen = 5;

    /* 桩函数 */
    MOCKER(NV_ReadEx)
        .stubs()
        .with(eq((VOS_UINT16)enModemId), eq((VOS_UINT16)en_NV_Item_CCA_TelePara), outBoundP((void *)&stTimeInfo,(VOS_UINT32)sizeof(stTimeInfo)),any())
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_WriteEx).expects(never());

    /* 调用函数 */
    ulRst = At_SetS0Para(ucIndex);

    /* 检查结果 */
    EXPECT_EQ(AT_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetS0Para, Test_At_SetS0Para_005)
{
    VOS_UINT8                           ucIndex = 0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    TAF_CCA_TELE_PARA_STRU              stTimeInfo;
    TAF_CCA_TELE_PARA_STRU              stTimeInfoWrite;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    gastAtParaList[0].ulParaValue = 5;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    memset(&stTimeInfo, 0 ,sizeof(TAF_CCA_TELE_PARA_STRU));
    stTimeInfo.ucS0TimerLen = 6;

    memset(&stTimeInfoWrite, 0 ,sizeof(TAF_CCA_TELE_PARA_STRU));
    stTimeInfoWrite.ucS0TimerLen = 5;

    /* 桩函数 */
    MOCKER(NV_ReadEx)
        .stubs()
        .with(eq((VOS_UINT16)enModemId), eq((VOS_UINT16)en_NV_Item_CCA_TelePara), outBoundP((void *)&stTimeInfo,(VOS_UINT32)sizeof(stTimeInfo)),any())
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_WriteEx)
        .stubs()
        .with(eq((VOS_UINT16)enModemId), eq((VOS_UINT16)en_NV_Item_CCA_TelePara), outBoundP((void *)&stTimeInfoWrite,(VOS_UINT32)sizeof(stTimeInfoWrite)),any())
        .will(returnValue((VOS_UINT32)NV_ID_NOT_EXIST));

    /* 调用函数 */
    ulRst = At_SetS0Para(ucIndex);

    /* 检查结果 */
    EXPECT_EQ(AT_ERROR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetS0Para, Test_At_SetS0Para_006)
{
    VOS_UINT8                           ucIndex = 0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    TAF_CCA_TELE_PARA_STRU              stTimeInfo;
    TAF_CCA_TELE_PARA_STRU              stTimeInfoWrite;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    gastAtParaList[0].ulParaValue = 5;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    memset(&stTimeInfo, 0 ,sizeof(TAF_CCA_TELE_PARA_STRU));
    stTimeInfo.ucS0TimerLen = 6;

    memset(&stTimeInfoWrite, 0 ,sizeof(TAF_CCA_TELE_PARA_STRU));
    stTimeInfoWrite.ucS0TimerLen = 5;

    /* 桩函数 */
    MOCKER(NV_ReadEx)
        .stubs()
        .with(eq((VOS_UINT16)enModemId), eq((VOS_UINT16)en_NV_Item_CCA_TelePara), outBoundP((void *)&stTimeInfo,(VOS_UINT32)sizeof(stTimeInfo)),any())
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_WriteEx)
        .stubs()
        .with(eq((VOS_UINT16)enModemId), eq((VOS_UINT16)en_NV_Item_CCA_TelePara), outBoundP((void *)&stTimeInfoWrite,(VOS_UINT32)sizeof(stTimeInfoWrite)),any())
        .will(returnValue((VOS_UINT32)NV_OK));

    /* 调用函数 */
    ulRst = At_SetS0Para(ucIndex);

    /* 检查结果 */
    EXPECT_EQ(AT_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
#if(FEATURE_ON == FEATURE_MULTI_MODEM)

TEST_F(Test_At_SetS0Para, Test_At_SetS0Para_007)
{
    VOS_UINT8                           ucIndex = 0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    TAF_CCA_TELE_PARA_STRU              stTimeInfo;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    gastAtParaList[0].ulParaValue = 5;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    memset(&stTimeInfo, 0 ,sizeof(TAF_CCA_TELE_PARA_STRU));
    stTimeInfo.ucS0TimerLen = 5;

    /* 桩函数 */
    MOCKER(NV_ReadEx)
        .stubs()
        .with(eq((VOS_UINT16)enModemId), eq((VOS_UINT16)en_NV_Item_CCA_TelePara), outBoundP((void *)&stTimeInfo, (VOS_UINT32)sizeof(stTimeInfo)),any())
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_WriteEx).expects(never());

    /* 调用函数 */
    ulRst = At_SetS0Para(ucIndex);

    /* 检查结果 */
    EXPECT_EQ(AT_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetS0Para, Test_At_SetS0Para_008)
{
    VOS_UINT8                           ucIndex = 0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    TAF_CCA_TELE_PARA_STRU              stTimeInfo;
    TAF_CCA_TELE_PARA_STRU              stTimeInfoWrite;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    gastAtParaList[0].ulParaValue = 5;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    memset(&stTimeInfo, 0 ,sizeof(TAF_CCA_TELE_PARA_STRU));
    stTimeInfo.ucS0TimerLen = 6;

    memset(&stTimeInfoWrite, 0 ,sizeof(TAF_CCA_TELE_PARA_STRU));
    stTimeInfoWrite.ucS0TimerLen = 5;

    /* 桩函数 */
    MOCKER(NV_ReadEx)
        .stubs()
        .with(eq((VOS_UINT16)enModemId), eq((VOS_UINT16)en_NV_Item_CCA_TelePara), outBoundP((void *)&stTimeInfo, (VOS_UINT32)sizeof(stTimeInfo)),any())
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_WriteEx)
        .stubs()
        .with(eq((VOS_UINT16)enModemId), eq((VOS_UINT16)en_NV_Item_CCA_TelePara), outBoundP((void *)&stTimeInfoWrite, (VOS_UINT32)sizeof(stTimeInfoWrite)),any())
        .will(returnValue((VOS_UINT32)NV_ID_NOT_EXIST));

    /* 调用函数 */
    ulRst = At_SetS0Para(ucIndex);

    /* 检查结果 */
    EXPECT_EQ(AT_ERROR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetS0Para, Test_At_SetS0Para_009)
{
    VOS_UINT8                           ucIndex = 0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    TAF_CCA_TELE_PARA_STRU              stTimeInfo;
    TAF_CCA_TELE_PARA_STRU              stTimeInfoWrite;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    gastAtParaList[0].ulParaValue = 5;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    memset(&stTimeInfo, 0 ,sizeof(TAF_CCA_TELE_PARA_STRU));
    stTimeInfo.ucS0TimerLen = 6;

    memset(&stTimeInfoWrite, 0 ,sizeof(TAF_CCA_TELE_PARA_STRU));
    stTimeInfoWrite.ucS0TimerLen = 5;

    /* 桩函数 */
    MOCKER(NV_ReadEx)
        .stubs()
        .with(eq((VOS_UINT16)enModemId), eq((VOS_UINT16)en_NV_Item_CCA_TelePara), outBoundP((void *)&stTimeInfo,(VOS_UINT32)sizeof(stTimeInfo)),any())
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_WriteEx)
        .stubs()
        .with(eq((VOS_UINT16)enModemId), eq((VOS_UINT16)en_NV_Item_CCA_TelePara), outBoundP((void *)&stTimeInfoWrite, (VOS_UINT32)sizeof(stTimeInfoWrite)),any())
        .will(returnValue((VOS_UINT32)NV_OK));

    /* 调用函数 */
    ulRst = At_SetS0Para(ucIndex);

    /* 检查结果 */
    EXPECT_EQ(AT_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
#endif


class Test_At_SetCmodPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
        gucAtParaIndex = 1;
    }
    void TearDown()
    {
        gucAtParaIndex = 0;
    }
};


TEST_F(Test_At_SetCmodPara, Test_At_SetCmodPara_001)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].ulParaValue = 1;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetCmodPara(ucIndex);

    /* 检查 */
    EXPECT_EQ(AT_OK, ulRst);
    EXPECT_EQ(1, pstSsCtx->enCModType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}

#if(FEATURE_ON == FEATURE_MULTI_MODEM)
TEST_F(Test_At_SetCmodPara, Test_At_SetCmodPara_002)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].ulParaValue = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetCmodPara(ucIndex);

    /* 检查 */
    EXPECT_EQ(AT_OK, ulRst);
    EXPECT_EQ(0, pstSsCtx->enCModType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
#endif
class Test_At_SetTimePara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {
    }

};


TEST_F(Test_At_SetTimePara,Test_At_SetTimePara_001)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetTimePara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetTimePara,Test_At_SetTimePara_002)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 2;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetTimePara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ(AT_TOO_MANY_PARA, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetTimePara,Test_At_SetTimePara_003)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetTimePara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetTimePara,Test_At_SetTimePara_004)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    AT_MODEM_NET_CTX_STRU              *pstNetCtx = VOS_NULL_PTR;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetTimePara(ucIndex);

    /* 结果验证 */
    pstNetCtx = AT_GetModemNetCtxAddrFromClientId(ucIndex);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetTimePara,Test_At_SetTimePara_005)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    MN_CLIENT_ID_T                      usClientId;
    MN_OPERATION_ID_T                   ucOpId;
    VOS_UINT16                          usMsgType;
    VOS_UINT32                          ulParaLen;
    VOS_UINT32                          ulRcvPid;
    AT_MTA_UNSOLICITED_RPT_SET_REQ_STRU stAtCmd;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    usClientId  = gastAtClientTab[ucIndex].usClientId;
    ucOpId      = gastAtClientTab[ucIndex].opId;
    usMsgType   = ID_AT_MTA_UNSOLICITED_RPT_SET_REQ;
    ulParaLen   = sizeof(AT_MTA_UNSOLICITED_RPT_SET_REQ_STRU);
    ulRcvPid    = I0_UEPS_PID_MTA;
    PS_MEM_SET(&stAtCmd, 0x00, sizeof(stAtCmd));
    stAtCmd.enReqType       = AT_MTA_SET_TIME_RPT_TYPE;
    stAtCmd.u.ucCregRptFlg  = gastAtParaList[0].ulParaValue;

    /* MOCKER操作; */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(),
                any(),
                eq((VOS_UINT16)usMsgType),
                mirror((void *)&stAtCmd, (VOS_UINT32)sizeof(stAtCmd)),
                eq((VOS_UINT32)ulParaLen),
                eq((VOS_UINT32)ulRcvPid))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /* 调用被测函数 */
    ulRst = At_SetTimePara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ(AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetCtzrPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {
    }

};


TEST_F(Test_At_SetCtzrPara,Test_At_SetCtzrPara_001)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetCtzrPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCtzrPara,Test_At_SetCtzrPara_002)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 2;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetCtzrPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ(AT_TOO_MANY_PARA, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCtzrPara,Test_At_SetCtzrPara_003)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetCtzrPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCtzrPara,Test_At_SetCtzrPara_004)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    AT_MODEM_NET_CTX_STRU              *pstNetCtx = VOS_NULL_PTR;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetCtzrPara(ucIndex);

    /* 结果验证 */
    pstNetCtx = AT_GetModemNetCtxAddrFromClientId(ucIndex);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCtzrPara,Test_At_SetCtzrPara_005)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    MN_CLIENT_ID_T                      usClientId;
    MN_OPERATION_ID_T                   ucOpId;
    VOS_UINT16                          usMsgType;
    VOS_UINT32                          ulParaLen;
    VOS_UINT32                          ulRcvPid;
    AT_MTA_UNSOLICITED_RPT_SET_REQ_STRU stAtCmd;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    usClientId  = gastAtClientTab[ucIndex].usClientId;
    ucOpId      = gastAtClientTab[ucIndex].opId;
    usMsgType   = ID_AT_MTA_UNSOLICITED_RPT_SET_REQ;
    ulParaLen   = sizeof(AT_MTA_UNSOLICITED_RPT_SET_REQ_STRU);
    ulRcvPid    = I0_UEPS_PID_MTA;
    PS_MEM_SET(&stAtCmd, 0x00, sizeof(stAtCmd));
    stAtCmd.enReqType       = AT_MTA_SET_CTZR_RPT_TYPE;
    stAtCmd.u.ucCregRptFlg  = gastAtParaList[0].ulParaValue;

    /* MOCKER操作; */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(),
                any(),
                eq((VOS_UINT16)usMsgType),
                mirror((void *)&stAtCmd, (VOS_UINT32)sizeof(stAtCmd)),
                eq((VOS_UINT32)ulParaLen),
                eq((VOS_UINT32)ulRcvPid))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /* 调用被测函数 */
    ulRst = At_SetCtzrPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ(AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetModePara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {
    }

};


TEST_F(Test_At_SetModePara,Test_At_SetModePara_001)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetModePara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetModePara,Test_At_SetModePara_002)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 2;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetModePara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetModePara,Test_At_SetModePara_003)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    AT_MODEM_NET_CTX_STRU              *pstNetCtx = VOS_NULL_PTR;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 0;
    gastAtParaList[0].ulParaValue = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;


    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetModePara(ucIndex);

    /* 结果验证 */
    pstNetCtx = AT_GetModemNetCtxAddrFromClientId(ucIndex);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetModePara,Test_At_SetModePara_004)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    AT_MODEM_NET_CTX_STRU              *pstNetCtx = VOS_NULL_PTR;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;


    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetModePara(ucIndex);

    /* 结果验证 */
    pstNetCtx = AT_GetModemNetCtxAddrFromClientId(ucIndex);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetModePara,Test_At_SetModePara_005)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    MN_CLIENT_ID_T                      usClientId;
    MN_OPERATION_ID_T                   ucOpId;
    VOS_UINT16                          usMsgType;
    VOS_UINT32                          ulParaLen;
    VOS_UINT32                          ulRcvPid;
    AT_MTA_UNSOLICITED_RPT_SET_REQ_STRU stAtCmd;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    usClientId  = gastAtClientTab[ucIndex].usClientId;
    ucOpId      = gastAtClientTab[ucIndex].opId;
    usMsgType   = ID_AT_MTA_UNSOLICITED_RPT_SET_REQ;
    ulParaLen   = sizeof(AT_MTA_UNSOLICITED_RPT_SET_REQ_STRU);
    ulRcvPid    = I0_UEPS_PID_MTA;
    PS_MEM_SET(&stAtCmd, 0x00, sizeof(stAtCmd));
    stAtCmd.enReqType       = AT_MTA_SET_MODE_RPT_TYPE;
    stAtCmd.u.ucCregRptFlg  = gastAtParaList[0].ulParaValue;

    /* MOCKER操作; */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(),
                any(),
                eq((VOS_UINT16)usMsgType),
                mirror((void *)&stAtCmd, (VOS_UINT32)sizeof(stAtCmd)),
                eq((VOS_UINT32)ulParaLen),
                eq((VOS_UINT32)ulRcvPid))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /* 调用被测函数 */
    ulRst = At_SetModePara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ(AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetSimstPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {
    }

};


TEST_F(Test_At_SetSimstPara,Test_At_SetSimstPara_001)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetSimstPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetSimstPara,Test_At_SetSimstPara_002)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 2;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetSimstPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetSimstPara,Test_At_SetSimstPara_003)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    AT_USIM_INFO_CTX_STRU              *pstUsimInfoCtx = VOS_NULL_PTR;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 0;
    gastAtParaList[0].ulParaValue = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;


    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetSimstPara(ucIndex);

    /* 结果验证 */
    pstUsimInfoCtx = AT_GetUsimInfoCtxFromModemId(MODEM_ID_0);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetSimstPara,Test_At_SetSimstPara_004)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    AT_USIM_INFO_CTX_STRU              *pstUsimInfoCtx = VOS_NULL_PTR;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;


    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetSimstPara(ucIndex);

    /* 结果验证 */
    pstUsimInfoCtx = AT_GetUsimInfoCtxFromModemId(MODEM_ID_0);

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetSimstPara,Test_At_SetSimstPara_005)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    MN_CLIENT_ID_T                      usClientId;
    MN_OPERATION_ID_T                   ucOpId;
    VOS_UINT16                          usMsgType;
    VOS_UINT32                          ulParaLen;
    VOS_UINT32                          ulRcvPid;
    AT_MTA_UNSOLICITED_RPT_SET_REQ_STRU stAtCmd;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    usClientId  = gastAtClientTab[ucIndex].usClientId;
    ucOpId      = gastAtClientTab[ucIndex].opId;
    usMsgType   = ID_AT_MTA_UNSOLICITED_RPT_SET_REQ;
    ulParaLen   = sizeof(AT_MTA_UNSOLICITED_RPT_SET_REQ_STRU);
    ulRcvPid    = I0_UEPS_PID_MTA;
    PS_MEM_SET(&stAtCmd, 0x00, sizeof(stAtCmd));
    stAtCmd.enReqType       = AT_MTA_SET_SIMST_RPT_TYPE;
    stAtCmd.u.ucCregRptFlg  = gastAtParaList[0].ulParaValue;

    /* MOCKER操作; */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(),
               any(),
                eq((VOS_UINT16)usMsgType),
                mirror((void *)&stAtCmd, (VOS_UINT32)sizeof(stAtCmd)),
                eq((VOS_UINT32)ulParaLen),
                eq((VOS_UINT32)ulRcvPid))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /* 调用被测函数 */
    ulRst = At_SetSimstPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ(AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetImeiPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};

TEST_F(Test_At_SetImeiPara, Test_At_SetImeiPara_001)
{
    VOS_UINT8                           aucImei[TAF_PH_IMEI_LEN]     = {0x01, 0x02, 0x03, 0x04, 0x06};
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;
    VOS_UINT8                           ucModemId;
    VOS_UINT8                           ucNvId;
    AT_CLIENT_CTX_STRU                 *pstClientCtx;
    char                                acNewImei[TAF_PH_IMEI_LEN] = {0x01, 0x02, 0x03, 0x04, 0x06,
                                                                      0x0, 0x0, 0x0, 0x0, 0x0,
                                                                      0x0, 0x0, 0x0, 0x0, 0x9, 0x0};
    ucModemId = MODEM_ID_0;
    ucNvId    = en_NV_Item_IMEI;
    ucIndex = AT_CLIENT_TAB_PCUI_INDEX;

    pstClientCtx = AT_GetClientCtxAddr(ucIndex);

    pstClientCtx->stClientConfiguration.enModemId = MODEM_ID_0;

    g_bAtDataLocked = VOS_FALSE;

    /* 命令参数 */
    gucAtParaIndex = 1;

    gastAtParaList[0].usParaLen =  TAF_PH_IMEI_LEN - 1;
    PS_MEM_SET(gastAtParaList[0].aucPara, 0x30, TAF_PH_IMEI_LEN - 1);
    gastAtParaList[0].aucPara[0] = 0x31;
    gastAtParaList[0].aucPara[1] = 0x32;
    gastAtParaList[0].aucPara[2] = 0x33;
    gastAtParaList[0].aucPara[3] = 0x34;
    gastAtParaList[0].aucPara[4] = 0x35;
    gastAtParaList[0].aucPara[TAF_PH_IMEI_LEN - 2] = 0x39;


    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), eq((VOS_UINT16)ucIndex), outBoundP((void *)aucImei, (VOS_UINT32)sizeof(aucImei)), eq((VOS_UINT32)TAF_PH_IMEI_LEN))
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_WriteEx)
        .stubs()
        .with(eq((VOS_UINT16)ucModemId), eq((VOS_UINT16)ucIndex), any(), any())
        .will(returnValue((VOS_UINT32)NV_OK));

    ulRslt = At_SetImeiPara(ucIndex);

    EXPECT_EQ(AT_OK, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

#if (FEATURE_ON == FEATURE_MULTI_MODEM)
TEST_F(Test_At_SetImeiPara, Test_At_SetImeiPara_002)
{
    VOS_UINT8                           aucImei[TAF_PH_IMEI_LEN]     = {0x01, 0x02, 0x03, 0x04, 0x05};
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;
    VOS_UINT8                           ucModemId;
    VOS_UINT8                           ucImeiLen;
    VOS_UINT32                          ulNvId;
    AT_CLIENT_CTX_STRU                 *pstClientCtx;
    char                                acNewImei[TAF_PH_IMEI_LEN] = {0x01, 0x02, 0x03, 0x04, 0x06,
                                                                      0x0, 0x0, 0x0, 0x0, 0x0,
                                                                      0x0, 0x0, 0x0, 0x0, 0x9, 0x0};
    ucModemId = MODEM_ID_1;
    ulNvId  = en_NV_Item_IMEI;
    ucImeiLen = TAF_PH_IMEI_LEN;
    ucIndex = AT_CLIENT_TAB_CTRL_INDEX;

    pstClientCtx = AT_GetClientCtxAddr(ucIndex);

    pstClientCtx->stClientConfiguration.enModemId = MODEM_ID_1;

    g_bAtDataLocked = VOS_FALSE;

    /* 命令参数 */
    gucAtParaIndex = 1;

    gastAtParaList[0].usParaLen =  TAF_PH_IMEI_LEN - 1;
    PS_MEM_SET(gastAtParaList[0].aucPara, 0x30, TAF_PH_IMEI_LEN - 1);
    gastAtParaList[0].aucPara[0] = 0x31;
    gastAtParaList[0].aucPara[1] = 0x32;
    gastAtParaList[0].aucPara[2] = 0x33;
    gastAtParaList[0].aucPara[3] = 0x34;
    gastAtParaList[0].aucPara[4] = 0x36;
    gastAtParaList[0].aucPara[TAF_PH_IMEI_LEN - 2] = 0x38;


    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), eq((VOS_UINT16)ulNvId), outBoundP((void *)aucImei, (VOS_UINT32)sizeof(aucImei)), eq((VOS_UINT32)ucImeiLen))
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_WriteEx)
        .stubs()
        .with(eq((VOS_UINT16)ucModemId), eq((VOS_UINT16)ulNvId), any(), any())
        .will(returnValue((VOS_UINT32)NV_OK));

    ulRslt = At_SetImeiPara(ucIndex);

    EXPECT_EQ(AT_OK, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#endif
class Test_At_SetQosPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};

TEST_F(Test_At_SetQosPara, Test_At_SetQosPara_001)
{
    AT_TRAFFIC_CLASS_CUSTOMIZE_STRU     stATTrafficClass;
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;
    AT_CLIENT_CTX_STRU                 *pstClientCtx;
    MODEM_ID_ENUM_UINT16                enModemId;

    ucIndex = AT_CLIENT_TAB_PCUI_INDEX;

    pstClientCtx = AT_GetClientCtxAddr(ucIndex);

    pstClientCtx->stClientConfiguration.enModemId = MODEM_ID_0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 1;

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].aucPara[0] = '0';

    g_bAtDataLocked = VOS_FALSE;

    /* 命令参数 */
    stATTrafficClass.ucStatus       = NV_ITEM_ACTIVE;
    stATTrafficClass.ucTrafficClass = 0;

    enModemId = MODEM_ID_0;

    MOCKER(NV_WriteEx)
        .stubs()
        .with(eq((VOS_UINT16)enModemId), eq((VOS_UINT16)en_NV_Item_TRAFFIC_CLASS_Type), mirror((void *)&stATTrafficClass, (VOS_UINT32)sizeof(stATTrafficClass)), any())
        .will(returnValue((VOS_UINT32)NV_OK));

    ulRslt = At_SetQosPara(ucIndex);

    EXPECT_EQ(AT_OK, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

#if (FEATURE_ON == FEATURE_MULTI_MODEM)
TEST_F(Test_At_SetQosPara, Test_At_SetQosPara_002)
{
    AT_TRAFFIC_CLASS_CUSTOMIZE_STRU     stATTrafficClass;
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;
    AT_CLIENT_CTX_STRU                 *pstClientCtx;
    MODEM_ID_ENUM_UINT16                enModemId;

    ucIndex = AT_CLIENT_TAB_CTRL_INDEX;

    pstClientCtx = AT_GetClientCtxAddr(ucIndex);

    pstClientCtx->stClientConfiguration.enModemId = MODEM_ID_1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 1;

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].aucPara[0] = '1';

    g_bAtDataLocked = VOS_FALSE;

    /* 命令参数 */
    stATTrafficClass.ucStatus       = NV_ITEM_ACTIVE;
    stATTrafficClass.ucTrafficClass = 1;

    enModemId = MODEM_ID_1;

    MOCKER(NV_WriteEx)
        .stubs()
        .with(eq((VOS_UINT16)enModemId), eq((VOS_UINT16)en_NV_Item_TRAFFIC_CLASS_Type), mirror((void *)&stATTrafficClass, (VOS_UINT32)sizeof(stATTrafficClass)), any())
        .will(returnValue((VOS_UINT32)NV_OK));

    ulRslt = At_SetQosPara(ucIndex);

    EXPECT_EQ(AT_OK, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#endif
class Test_At_SetSDomainPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};

TEST_F(Test_At_SetSDomainPara, Test_At_SetSDomainPara_001)
{
	/* Modified by h00313353 for Iteration 13, 2015-4-9, begin */
    TAF_MMA_SERVICE_DOMAIN_ENUM_UINT8     enSrvDomain;
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;
    AT_CLIENT_CTX_STRU                 *pstClientCtx;

    ucIndex = AT_CLIENT_TAB_PCUI_INDEX;

    pstClientCtx = AT_GetClientCtxAddr(ucIndex);

    pstClientCtx->stClientConfiguration.enModemId = MODEM_ID_0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 1;

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].aucPara[0] = '0';

    g_bAtDataLocked = VOS_FALSE;

    /* 命令参数 */
    enSrvDomain = 0;

    MOCKER(NV_WriteEx)
        .stubs()
        .with(eq(MODEM_ID_0), eq(en_NV_Item_MMA_MsClass), mirror(&enSrvDomain, sizeof(enSrvDomain)), any())
        .will(returnValue(NV_OK));
	/* Modified by h00313353 for Iteration 13, 2015-4-9, end */
    ulRslt = At_SetSDomainPara(ucIndex);

    EXPECT_EQ(AT_OK, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

#if (FEATURE_ON == FEATURE_MULTI_MODEM)
TEST_F(Test_At_SetSDomainPara, Test_At_SetSDomainPara_002)
{
	/* Modified by h00313353 for Iteration 13, 2015-4-9, begin */
    TAF_MMA_SERVICE_DOMAIN_ENUM_UINT8     enSrvDomain;
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;
    AT_CLIENT_CTX_STRU                 *pstClientCtx;

    ucIndex = AT_CLIENT_TAB_CTRL_INDEX;

    pstClientCtx = AT_GetClientCtxAddr(ucIndex);

    pstClientCtx->stClientConfiguration.enModemId = MODEM_ID_1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 1;

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].aucPara[0] = '1';

    g_bAtDataLocked = VOS_FALSE;

    /* 命令参数 */
    enSrvDomain = 1;

    MOCKER(NV_WriteEx)
        .stubs()
        .with(eq((VOS_UINT16)MODEM_ID_1), eq((VOS_UINT16)en_NV_Item_MMA_MsClass), mirror((void *)&enSrvDomain, (VOS_UINT32)sizeof(enSrvDomain)), any())
        .will(returnValue((VOS_UINT32)NV_OK));
	/* Modified by h00313353 for Iteration 13, 2015-4-9, end */

    ulRslt = At_SetSDomainPara(ucIndex);

    EXPECT_EQ(AT_OK, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#endif
class Test_AT_SetRstriggerPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};

TEST_F(Test_AT_SetRstriggerPara, Test_AT_SetRstriggerPara_001)
{
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;
    AT_CLIENT_CTX_STRU                 *pstClientCtx;
    VOS_UINT8                           aucActiveMessageInfo[MN_MSG_ACTIVE_MESSAGE_PARA_LEN];

    ucIndex = AT_CLIENT_TAB_PCUI_INDEX;

    pstClientCtx = AT_GetClientCtxAddr(ucIndex);

    pstClientCtx->stClientConfiguration.enModemId = MODEM_ID_0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 2;

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = strlen("http://www.baidu.com") + 1;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "http://www.baidu.com", strlen("http://www.baidu.com") + 1);

    g_bAtDataLocked = VOS_FALSE;

    PS_MEM_SET(aucActiveMessageInfo, 0, MN_MSG_ACTIVE_MESSAGE_PARA_LEN);

    /* 命令参数 */

    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), any(), outBoundP((void *)aucActiveMessageInfo, (VOS_UINT32)MN_MSG_ACTIVE_MESSAGE_PARA_LEN), any())
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_WriteEx)
        .stubs()
        .with(any(), eq((VOS_UINT16)en_NV_Item_SMS_ActiveMessage_Para), any(), any())
        .will(returnValue((VOS_UINT32)NV_OK));

    ulRslt = AT_SetRstriggerPara(ucIndex);

    EXPECT_EQ(AT_OK, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

#if (FEATURE_ON == FEATURE_MULTI_MODEM)
TEST_F(Test_AT_SetRstriggerPara, Test_AT_SetRstriggerPara_002)
{
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;
    AT_CLIENT_CTX_STRU                 *pstClientCtx;
    VOS_UINT8                           aucActiveMessageInfo[MN_MSG_ACTIVE_MESSAGE_PARA_LEN];

    ucIndex = AT_CLIENT_TAB_CTRL_INDEX;

    pstClientCtx = AT_GetClientCtxAddr(ucIndex);

    pstClientCtx->stClientConfiguration.enModemId = MODEM_ID_1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 2;

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = strlen("http://www.baidu.com") + 1;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "http://www.baidu.com", strlen("http://www.baidu.com") + 1);

    g_bAtDataLocked = VOS_FALSE;

    PS_MEM_SET(aucActiveMessageInfo, 0, MN_MSG_ACTIVE_MESSAGE_PARA_LEN);

    /* 命令参数 */

    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), any(), outBoundP((void *)aucActiveMessageInfo, (VOS_UINT32)MN_MSG_ACTIVE_MESSAGE_PARA_LEN), any())
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_WriteEx)
        .stubs()
        .with(any(), eq((VOS_UINT16)en_NV_Item_SMS_ActiveMessage_Para), any(), any())
        .will(returnValue((VOS_UINT32)NV_OK));

    ulRslt = AT_SetRstriggerPara(ucIndex);

    EXPECT_EQ(AT_OK, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#endif
class Test_AT_SetPhyNumPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};

TEST_F(Test_AT_SetPhyNumPara, Test_AT_SetPhyNumPara_001)
{
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;
    VOS_UINT8                           ucModemId;
    VOS_UINT8                           ucNvId;
    AT_CLIENT_CTX_STRU                 *pstClientCtx;
    VOS_UINT8                           aucActiveMessageInfo[MN_MSG_ACTIVE_MESSAGE_PARA_LEN];
    VOS_UINT8                           aucImei[TAF_PH_IMEI_LEN]     = {0x01, 0x02, 0x03, 0x04, 0x06};

    ucModemId = MODEM_ID_0;
    ucNvId    = en_NV_Item_IMEI;
    ucIndex = AT_CLIENT_TAB_PCUI_INDEX;

    pstClientCtx = AT_GetClientCtxAddr(ucIndex);

    pstClientCtx->stClientConfiguration.enModemId = MODEM_ID_0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 2;

    gastAtParaList[0].usParaLen = strlen("IMEI") + 1;
    PS_MEM_SET(gastAtParaList[0].aucPara, 0, sizeof(gastAtParaList[0].aucPara));
    PS_MEM_CPY(gastAtParaList[0].aucPara, "IMEI", strlen("IMEI"));
    gastAtParaList[1].usParaLen =  TAF_PH_IMEI_LEN - 1;
    PS_MEM_SET(gastAtParaList[1].aucPara, 0x30, TAF_PH_IMEI_LEN - 1);
    gastAtParaList[1].aucPara[0] = 0x31;
    gastAtParaList[1].aucPara[1] = 0x32;
    gastAtParaList[1].aucPara[2] = 0x33;
    gastAtParaList[1].aucPara[3] = 0x34;
    gastAtParaList[1].aucPara[4] = 0x36;
    gastAtParaList[1].aucPara[TAF_PH_IMEI_LEN - 2] = 0x38;
    gastAtParaList[2].usParaLen = 0;

    g_bAtDataLocked = VOS_FALSE;

    PS_MEM_SET(aucActiveMessageInfo, 0, MN_MSG_ACTIVE_MESSAGE_PARA_LEN);

    /* 命令参数 */

    MOCKER(NV_ReadEx)
        .stubs()
        .with(eq((VOS_UINT16)ucModemId), eq((VOS_UINT16)ucNvId), outBoundP((void *)aucImei, (VOS_UINT32)sizeof(aucImei)), eq((VOS_UINT32)TAF_PH_IMEI_LEN))
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_WriteEx)
        .stubs()
        .with(eq((VOS_UINT16)ucModemId), eq((VOS_UINT16)ucNvId), any(), any())
        .will(returnValue((VOS_UINT32)NV_OK));

    ulRslt = AT_SetPhyNumPara(ucIndex);

    EXPECT_EQ(AT_OK, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetPhyNumPara, Test_AT_SetPhyNumPara_002)
{
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;
    VOS_UINT8                           ucModemId;
    VOS_UINT32                          ulNvId;
    AT_CLIENT_CTX_STRU                 *pstClientCtx;
    TAF_SVN_DATA_STRU                   stSvn;

    ucIndex     = AT_CLIENT_TAB_PCUI_INDEX;
    ucModemId   = MODEM_ID_0;
    ulNvId      = en_NV_Item_Imei_Svn;

    pstClientCtx = AT_GetClientCtxAddr(ucIndex);

    pstClientCtx->stClientConfiguration.enModemId = MODEM_ID_0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 2;

    gastAtParaList[0].usParaLen = strlen("SVN") + 1;
    PS_MEM_SET(gastAtParaList[0].aucPara, 0, sizeof(gastAtParaList[0].aucPara));
    PS_MEM_CPY(gastAtParaList[0].aucPara, "SVN", strlen("SVN"));
    gastAtParaList[1].usParaLen =  TAF_SVN_DATA_LENGTH;
    gastAtParaList[1].aucPara[0] = 0x31;
    gastAtParaList[1].aucPara[1] = 0x31;
    gastAtParaList[2].usParaLen = 0;

    g_bAtDataLocked = VOS_FALSE;

    /* 命令参数 */
    stSvn.ucActiveFlag = NV_ITEM_ACTIVE;
    stSvn.aucSvn[0] = 1;
    stSvn.aucSvn[1] = 1;
    stSvn.aucReserve[0] = 0;

    MOCKER(NV_WriteEx)
        .stubs()
        .with(eq((VOS_UINT16)ucModemId), eq((VOS_UINT16)ulNvId), mirror((void *)&stSvn, (VOS_UINT32)sizeof(stSvn)), any())
        .will(returnValue((VOS_UINT32)NV_OK));

    ulRslt = AT_SetPhyNumPara(ucIndex);

    EXPECT_EQ(AT_OK, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

#if (FEATURE_ON == FEATURE_MULTI_MODEM)
TEST_F(Test_AT_SetPhyNumPara, Test_AT_SetPhyNumPara_003)
{
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;
    VOS_UINT8                           ucModemId;
    VOS_UINT8                           ucImeilen;
    VOS_UINT32                          ulNvId;
    AT_CLIENT_CTX_STRU                 *pstClientCtx;
    VOS_UINT8                           aucActiveMessageInfo[MN_MSG_ACTIVE_MESSAGE_PARA_LEN];
    VOS_UINT8                           aucImei[TAF_PH_IMEI_LEN]     = {0x01, 0x02, 0x03, 0x04, 0x06};

    ucIndex     = AT_CLIENT_TAB_CTRL_INDEX;
    ucModemId   = MODEM_ID_1;
    ulNvId      = en_NV_Item_IMEI;
    ucImeilen   = TAF_PH_IMEI_LEN;

    pstClientCtx = AT_GetClientCtxAddr(ucIndex);

    pstClientCtx->stClientConfiguration.enModemId = MODEM_ID_1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 2;

    gastAtParaList[0].usParaLen = strlen("IMEI") + 1;
    PS_MEM_SET(gastAtParaList[0].aucPara, 0, sizeof(gastAtParaList[0].aucPara));
    PS_MEM_CPY(gastAtParaList[0].aucPara, "IMEI", strlen("IMEI"));
    gastAtParaList[1].usParaLen =  TAF_PH_IMEI_LEN - 1;
    PS_MEM_SET(gastAtParaList[1].aucPara, 0x30, TAF_PH_IMEI_LEN - 1);
    gastAtParaList[1].aucPara[0] = 0x31;
    gastAtParaList[1].aucPara[1] = 0x32;
    gastAtParaList[1].aucPara[2] = 0x33;
    gastAtParaList[1].aucPara[3] = 0x34;
    gastAtParaList[1].aucPara[4] = 0x36;
    gastAtParaList[1].aucPara[TAF_PH_IMEI_LEN - 2] = 0x38;
    gastAtParaList[2].usParaLen = 0;

    g_bAtDataLocked = VOS_FALSE;

    PS_MEM_SET(aucActiveMessageInfo, 0, MN_MSG_ACTIVE_MESSAGE_PARA_LEN);

    /* 命令参数 */

    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), eq((VOS_UINT16)ulNvId), outBoundP((void *)aucImei, (VOS_UINT32)sizeof(aucImei)), eq((VOS_UINT32)ucImeilen))
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_WriteEx)
        .stubs()
        .with(eq((VOS_UINT16)ucModemId), eq((VOS_UINT16)ulNvId), any(), any())
        .will(returnValue((VOS_UINT32)NV_OK));

    ulRslt = AT_SetPhyNumPara(ucIndex);

    EXPECT_EQ(AT_OK, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetPhyNumPara, Test_AT_SetPhyNumPara_004)
{
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;
    AT_CLIENT_CTX_STRU                 *pstClientCtx;
    TAF_SVN_DATA_STRU                   stSvn;
    VOS_UINT8                           ucModemId;
    VOS_UINT32                          ulNvId;


    ucIndex     = AT_CLIENT_TAB_CTRL_INDEX;
    ucModemId   = MODEM_ID_1;
    ulNvId      = en_NV_Item_Imei_Svn;

    pstClientCtx = AT_GetClientCtxAddr(ucIndex);

    pstClientCtx->stClientConfiguration.enModemId = MODEM_ID_1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 2;

    gastAtParaList[0].usParaLen = strlen("SVN") + 1;
    PS_MEM_SET(gastAtParaList[0].aucPara, 0, sizeof(gastAtParaList[0].aucPara));
    PS_MEM_CPY(gastAtParaList[0].aucPara, "SVN", strlen("SVN"));
    gastAtParaList[1].usParaLen =  TAF_SVN_DATA_LENGTH;
    gastAtParaList[1].aucPara[0] = 0x32;
    gastAtParaList[1].aucPara[1] = 0x32;
    gastAtParaList[2].usParaLen = 0;

    g_bAtDataLocked = VOS_FALSE;

    /* 命令参数 */
    stSvn.ucActiveFlag = NV_ITEM_ACTIVE;
    stSvn.aucSvn[0] = 2;
    stSvn.aucSvn[1] = 2;
    stSvn.aucReserve[0] = 0;

    MOCKER(NV_WriteEx)
        .stubs()
        .with(eq((VOS_UINT16)ucModemId), eq((VOS_UINT16)ulNvId), mirror((void *)&stSvn, (VOS_UINT32)sizeof(stSvn)), any())
        .will(returnValue((VOS_UINT32)NV_OK));

    ulRslt = AT_SetPhyNumPara(ucIndex);

    EXPECT_EQ(AT_OK, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#endif
class Test_At_UpdateMsgRcvAct: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};

TEST_F(Test_At_UpdateMsgRcvAct, Test_At_UpdateMsgRcvAct_001)
{
    TAF_UINT8                   ucIndex = 0;
    AT_CSMS_MSG_VERSION_ENUM_U8 ucCsmsVersion = 1;
    AT_CNMI_MT_TYPE             CnmiMtType  = 1;
    AT_CNMI_DS_TYPE             CnmiDsType  = 1;
    VOS_UINT32                  ulRst;

    ulRst = At_UpdateMsgRcvAct(ucIndex, ucCsmsVersion, CnmiMtType, CnmiDsType);

    EXPECT_EQ(AT_OK, ulRst);

    GlobalMockObject::verify();
}



class Test_At_SetModemLoopPara: public ::testing::Test
{
    public:

    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetModemLoopPara, Test_At_SetModemLoopPara_001)
{
    // 变量声明
    VOS_UINT32                          ulResult;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    // MOCKER操作

    // 调用被测函数
    ulResult = At_SetModemLoopPara(0);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetModemLoopPara, Test_At_SetModemLoopPara_002)
{
    // 变量声明
    VOS_UINT32                          ulResult;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;

    // MOCKER操作

    // 调用被测函数
    ulResult = At_SetModemLoopPara(0);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulResult);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetModemLoopPara, Test_At_SetModemLoopPara_003)
{
    // 变量声明
    VOS_UINT32                          ulResult;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;

    // MOCKER操作
	MOCKER(V_AllocMsg)
		.stubs()
		.will(returnValue((MsgBlock*)VOS_NULL_PTR));

    // 调用被测函数
    ulResult = At_SetModemLoopPara(0);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulResult);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetModemLoopPara, Test_At_SetModemLoopPara_004)
{
    // 变量声明
    VOS_UINT32                          ulResult;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;

    // MOCKER操作
    MOCKER(Ps_SendMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulResult = At_SetModemLoopPara(0);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulResult);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetModemLoopPara, Test_At_SetModemLoopPara_005)
{
    // 变量声明
    VOS_UINT32                          ulResult;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;

    // MOCKER操作
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulResult = At_SetModemLoopPara(0);

    // 执行检查
    EXPECT_EQ(AT_OK, ulResult);

    GlobalMockObject::verify();
}


class Test_AT_SetRefclkfreqPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        AT_ResetClientTab();
        g_stAtCommCtx.ucSystemAppConfigAddr = SYSTEM_APP_ANDROID;
    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetRefclkfreqPara, Test_AT_SetRefclkfreqPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 0;

    // MOCKER操作

    // 调用被测函数
    ulRet = AT_SetRefclkfreqPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetRefclkfreqPara, Test_AT_SetRefclkfreqPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_APP_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 0;

    // MOCKER操作

    // 调用被测函数
    ulRet = AT_SetRefclkfreqPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetRefclkfreqPara, Test_AT_SetRefclkfreqPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    AT_MTA_REFCLKFREQ_SET_REQ_STRU      stRefClockReq;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_APP_INDEX;
    PS_MEM_SET(&stRefClockReq, 0, sizeof(stRefClockReq));
    stRefClockReq.enRptFlg = AT_MTA_CMD_RPT_FLG_ON;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;

    // MOCKER操作
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(),
              any(),
              eq((VOS_UINT16)ID_AT_MTA_REFCLKFREQ_SET_REQ),
              mirror((void *)&stRefClockReq, (VOS_UINT32)sizeof(stRefClockReq)),
              eq((VOS_UINT32)sizeof(stRefClockReq)),
              eq((VOS_UINT32)UEPS_PID_MTA))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    // 调用被测函数
    ulRet = AT_SetRefclkfreqPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetRefclkfreqPara, Test_AT_SetRefclkfreqPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    AT_MTA_REFCLKFREQ_SET_REQ_STRU      stRefClockReq;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_APP_INDEX;
    PS_MEM_SET(&stRefClockReq, 0, sizeof(stRefClockReq));
    stRefClockReq.enRptFlg = AT_MTA_CMD_RPT_FLG_ON;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;

    // MOCKER操作
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(),
              any(),
              eq((VOS_UINT16)ID_AT_MTA_REFCLKFREQ_SET_REQ),
              mirror((void *)&stRefClockReq, (VOS_UINT32)sizeof(stRefClockReq)),
              eq((VOS_UINT32)sizeof(stRefClockReq)),
              eq((VOS_UINT32)UEPS_PID_MTA))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulRet = AT_SetRefclkfreqPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ(AT_CMD_REFCLKFREQ_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    GlobalMockObject::verify();
}


/* Added by d0212987 for read die id and chip id, 2013-6-4, begin */

class Test_At_SetPullomlogrrcPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {
    }

};


TEST_F(Test_At_SetPullomlogrrcPara, Test_At_SetPullomlogrrcPara_001)
{
    MOCKER(DIAG_LogShowToFile).expects(exactly(1));

    EXPECT_EQ(AT_OK, At_SetPullomlogrrcPara(VOS_TRUE));

	GlobalMockObject::verify();
}
/* Added by d0212987 for read die id and chip id, 2013-6-4, end */

/* Added by d0212987 for read die id and chip id, 2013-6-4, begin */

class Test_At_SetDieSNPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        AT_ResetClientTab();
        g_stAtCommCtx.ucSystemAppConfigAddr = SYSTEM_APP_ANDROID;
    }
    void TearDown()
    {
    }

};


TEST_F(Test_At_SetDieSNPara, Test_At_SetDieSNPara_001)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    EXPECT_EQ(AT_ERROR, At_SetDieSNPara(VOS_TRUE));

	GlobalMockObject::verify();
}


TEST_F(Test_At_SetDieSNPara, Test_At_SetDieSNPara_002)
{
    VOS_UINT8      ucIndex   = 0x01;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    MOCKER(mdrv_efuse_get_dieid).stubs().will(returnValue((VOS_UINT32)VOS_ERR));

    EXPECT_EQ(AT_ERROR, At_SetDieSNPara(VOS_TRUE));

	GlobalMockObject::verify();
}


TEST_F(Test_At_SetDieSNPara, Test_At_SetDieSNPara_003)
{
    AT_PAR_CMD_ELEMENT_STRU                 stCmdInfo;

    VOS_UINT8 ucIndex           = AT_CLIENT_ID_APP;

    stCmdInfo.ulCmdIndex        = AT_CMD_DIESN;
    stCmdInfo.pfnSetProc        = At_SetDieSNPara;
    stCmdInfo.ulSetTimeOut      = AT_NOT_SET_TIME;
    stCmdInfo.pfnQryProc        = VOS_NULL_PTR;
    stCmdInfo.ulTestTimeOut     = AT_NOT_SET_TIME;
    stCmdInfo.pfnTestProc       = At_CmdTestProcOK;
    stCmdInfo.ulTestTimeOut     = AT_NOT_SET_TIME;
    stCmdInfo.ulParamErrCode    = VOS_NULL_PTR;
    stCmdInfo.ulChkFlag         = AT_NOT_SET_TIME;
    stCmdInfo.pszCmdName        = (VOS_UINT8*)"^DIESN";
    stCmdInfo.pszParam          = VOS_NULL_PTR;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    g_stParseContext[ucIndex].pstCmdElement = &stCmdInfo;

    MOCKER(mdrv_efuse_get_dieid).stubs().will(returnValue((VOS_UINT32)VOS_OK));

    EXPECT_EQ(AT_OK, At_SetDieSNPara(ucIndex));

	GlobalMockObject::verify();
}


class Test_At_SetChipSNPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        AT_ResetClientTab();
        g_stAtCommCtx.ucSystemAppConfigAddr = SYSTEM_APP_ANDROID;

    }
    void TearDown()
    {
    }

};


TEST_F(Test_At_SetChipSNPara, Test_At_SetChipSNPara_001)
{
    VOS_UINT8      ucIndex   = 0x01;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    EXPECT_EQ(AT_ERROR, At_SetChipSNPara(VOS_OK));

	GlobalMockObject::verify();
}


TEST_F(Test_At_SetChipSNPara, Test_At_SetChipSNPara_002)
{
    VOS_UINT8      ucIndex   = 0x01;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    MOCKER(mdrv_efuse_get_chipid).stubs().will(returnValue((VOS_UINT32)VOS_ERR));

    EXPECT_EQ(AT_ERROR, At_SetChipSNPara(VOS_OK));

	GlobalMockObject::verify();
}


TEST_F(Test_At_SetChipSNPara, Test_At_SetChipSNPara_003)
{
    AT_PAR_CMD_ELEMENT_STRU                 stCmdInfo;

    VOS_UINT8 ucIndex           = AT_CLIENT_ID_APP;

    stCmdInfo.ulCmdIndex        = AT_CMD_CHIPSN;
    stCmdInfo.pfnSetProc        = At_SetChipSNPara;
    stCmdInfo.ulSetTimeOut      = AT_NOT_SET_TIME;
    stCmdInfo.pfnQryProc        = VOS_NULL_PTR;
    stCmdInfo.ulTestTimeOut     = AT_NOT_SET_TIME;
    stCmdInfo.pfnTestProc       = At_CmdTestProcOK;
    stCmdInfo.ulTestTimeOut     = AT_NOT_SET_TIME;
    stCmdInfo.ulParamErrCode    = VOS_NULL_PTR;
    stCmdInfo.ulChkFlag         = AT_NOT_SET_TIME;
    stCmdInfo.pszCmdName        = (VOS_UINT8*)"^CHIPSN";
    stCmdInfo.pszParam          = VOS_NULL_PTR;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    g_stParseContext[ucIndex].pstCmdElement = &stCmdInfo;

    MOCKER(mdrv_efuse_get_chipid).stubs().will(returnValue((VOS_UINT32)VOS_OK));

    EXPECT_EQ(AT_OK, At_SetChipSNPara(ucIndex));

	GlobalMockObject::verify();
}
/* Added by d0212987 for read die id and chip id, 2013-6-4, end */

class Test_At_SetVtsPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetVtsPara, Test_At_SetVtsPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 1;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].aucPara[0]    = 'd';

    // MOCKER操作

    //执行检查
    ulRet = At_SetVtsPara(ucIndex);
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetVtsPara, Test_At_SetVtsPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 1;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].aucPara[0]    = 'd';

    // MOCKER操作

    //执行检查
    ulRet = At_SetVtsPara(ucIndex);
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetVtsPara, Test_At_SetVtsPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 1;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].aucPara[0]    = 'e';

    // MOCKER操作

    //执行检查
    ulRet = At_SetVtsPara(ucIndex);
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetVtsPara, Test_At_SetVtsPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    MN_CALL_APP_REQ_PARM_UNION          stAppPara = {0};
    AT_MN_MSGTYPE_ENUM_UINT16           enMsgType;

    //参数初始化
    ucIndex = 1;
    stAppPara.stDtmf.CallId = 0;
    stAppPara.stDtmf.cKey   = 'D';
    stAppPara.stDtmf.usOnLength = AT_VTS_DEFAULT_DTMF_LENGTH;
    enMsgType = MN_CALL_APP_START_DTMF_REQ;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].aucPara[0]    = 'd';

    // MOCKER操作
    MOCKER(MN_CALL_SendAppRequest)
        .stubs()
        .with(eq((VOS_UINT32)enMsgType), any(), any(), eq((VOS_UINT8)stAppPara.stDtmf.CallId),
              any())
        .will(returnValue((VOS_UINT32)VOS_ERR));

    //执行检查
    ulRet = At_SetVtsPara(ucIndex);
    EXPECT_EQ(AT_ERROR, ulRet);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetVtsPara, Test_At_SetVtsPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    MN_CALL_APP_REQ_PARM_UNION          stAppPara = {0};
    AT_MN_MSGTYPE_ENUM_UINT16           enMsgType;

    //参数初始化
    ucIndex = 1;
    stAppPara.stDtmf.CallId = 0;
    stAppPara.stDtmf.cKey   = '1';
    stAppPara.stDtmf.usOnLength = AT_VTS_DEFAULT_DTMF_LENGTH;
    enMsgType = MN_CALL_APP_START_DTMF_REQ;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].aucPara[0]    = '1';

    // MOCKER操作
    MOCKER(MN_CALL_SendAppRequest)
        .stubs()
        .with(eq((VOS_UINT32)enMsgType), any(), any(), eq((VOS_UINT8)stAppPara.stDtmf.CallId),
              any())
        .will(returnValue((VOS_UINT32)VOS_OK));

    //执行检查
    ulRet = At_SetVtsPara(ucIndex);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ(AT_CMD_VTS_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetVtsPara, Test_At_SetVtsPara_006)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 1;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].aucPara[0]    = '&';

    // MOCKER操作

    //执行检查
    ulRet = At_SetVtsPara(ucIndex);
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetStsfPara: public ::testing::Test
{
public:

   void SetUp()
	{
		UT_STUB_INIT();
    }
    void TearDown()
    {
    }
};


TEST_F(Test_At_SetStsfPara, Test_At_SetStsfPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 1;

    //相关全局变量初始化
    gucAtParaIndex = 3;
    gastAtParaList[0].ulParaValue   = 11;
    gastAtParaList[0].usParaLen     = 2;


    //MOCKER操作

    //调用被测函数

    //执行检查
    ulRet = At_SetStsfPara(ucIndex);
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetStsfPara, Test_At_SetStsfPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 1;

    //相关全局变量初始化
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].usParaLen     = 1;


    //MOCKER操作

    //调用被测函数

    //执行检查
    ulRet = At_SetStsfPara(ucIndex);
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetStsfPara, Test_At_SetStsfPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 1;

    //相关全局变量初始化
    gucAtParaIndex = 3;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].usParaLen     = 1;


    //MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue((VOS_UINT32)NV_ID_NOT_EXIST));

    //调用被测函数

    //执行检查
    ulRet = At_SetStsfPara(ucIndex);
    EXPECT_EQ(AT_ERROR, ulRet);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetStsfPara, Test_At_SetStsfPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;


    //参数初始化
    ucIndex = 1;

    //相关全局变量初始化
    gucAtParaIndex = 3;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].usParaLen     = 1;

    gastAtParaList[1].usParaLen     = 6;

    gastAtParaList[1].aucPara[0]        = 'F';
    gastAtParaList[1].aucPara[1]        = 'F';
    gastAtParaList[1].aucPara[2]        = '3';
    gastAtParaList[1].aucPara[3]        = '1';
    gastAtParaList[1].aucPara[4]        = 'C';
    gastAtParaList[1].aucPara[5]        = 'D';

    //MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(AT_GetModemIdFromClient)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    //调用被测函数

    //执行检查
    ulRet = At_SetStsfPara(ucIndex);
    EXPECT_EQ(AT_ERROR, ulRet);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetStsfPara, Test_At_SetStsfPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 1;

    //相关全局变量初始化
    gucAtParaIndex = 3;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].usParaLen     = 1;

    gastAtParaList[1].usParaLen     = 10;
    //MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(AT_GetModemIdFromClient)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(At_AsciiNum2HexString)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    //调用被测函数

    //执行检查
    ulRet = At_SetStsfPara(ucIndex);
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetStsfPara, Test_At_SetStsfPara_006)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT16                          usLen;
    VOS_UINT8                           ucIndex;


    //参数初始化
    ucIndex = 1;
    usLen = 33;

    //相关全局变量初始化
    gucAtParaIndex = 3;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].usParaLen     = 1;

    gastAtParaList[1].usParaLen     = 10;
    //MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(AT_GetModemIdFromClient)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(At_AsciiNum2HexString)
        .stubs()
        .with(any(), outBoundP((VOS_UINT16 *)&usLen, sizeof(usLen)))
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    //调用被测函数

    //执行检查
    ulRet = At_SetStsfPara(ucIndex);
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetStsfPara, Test_At_SetStsfPara_007)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT32                          ulValue;
    MODEM_ID_ENUM_UINT16                usModemId;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 1;
    ulValue = 0xFFF;
    usModemId = 0;

    //相关全局变量初始化
    gucAtParaIndex = 3;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].usParaLen     = 1;

    gastAtParaList[1].usParaLen     = 6;

    gastAtParaList[1].aucPara[0]        = 'F';
    gastAtParaList[1].aucPara[1]        = 'F';
    gastAtParaList[1].aucPara[2]        = '3';
    gastAtParaList[1].aucPara[3]        = '1';
    gastAtParaList[1].aucPara[4]        = 'C';
    gastAtParaList[1].aucPara[5]        = 'D';

    gastAtParaList[2].usParaLen     = 1;

    g_astAtModemCtx[0].stAtUsimInfoCtx.enCardType = USIMM_CARD_USIM;

    //MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(AT_GetModemIdFromClient)
        .stubs()
        .with(any(), outBoundP((VOS_UINT16*)&usModemId, (VOS_UINT32)sizeof(usModemId)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(At_Auc2ul)
        .stubs()
        .with(any(), any(), outBoundP((VOS_UINT32 *)&ulValue, (VOS_UINT32)sizeof(ulValue)))
        .will(returnValue((TAF_UINT32)AT_FAILURE));

    //调用被测函数

    //执行检查
    ulRet = At_SetStsfPara(ucIndex);
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



TEST_F(Test_At_SetStsfPara, Test_At_SetStsfPara_008)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT32                          ulValue;
    MODEM_ID_ENUM_UINT16                usModemId;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 1;
    ulValue = 0xFFF;
    usModemId = 0;

    //相关全局变量初始化
    gucAtParaIndex = 3;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].usParaLen     = 1;

    gastAtParaList[1].usParaLen     = 6;

    gastAtParaList[1].aucPara[0]        = 'F';
    gastAtParaList[1].aucPara[1]        = 'F';
    gastAtParaList[1].aucPara[2]        = '3';
    gastAtParaList[1].aucPara[3]        = '1';
    gastAtParaList[1].aucPara[4]        = 'C';
    gastAtParaList[1].aucPara[5]        = 'D';

    gastAtParaList[2].usParaLen     = 1;

    g_astAtModemCtx[0].stAtUsimInfoCtx.enCardType = USIMM_CARD_SIM;

    //MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(AT_GetModemIdFromClient)
        .stubs()
        .with(any(), outBoundP((VOS_UINT16*)&usModemId, (VOS_UINT32)sizeof(usModemId)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(At_Auc2ul)
        .stubs()
        .with(any(), any(), outBoundP((VOS_UINT32*)&ulValue, (VOS_UINT32)sizeof(ulValue)))
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    //调用被测函数

    //执行检查
    ulRet = At_SetStsfPara(ucIndex);
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetStsfPara, Test_At_SetStsfPara_009)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT32                          ulValue;
    MODEM_ID_ENUM_UINT16                usModemId;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 1;
    ulValue = 0xFFF;
    usModemId = 0;

    //相关全局变量初始化
    gucAtParaIndex = 3;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].usParaLen     = 1;

    gastAtParaList[1].usParaLen     = 6;

    gastAtParaList[1].aucPara[0]        = 'F';
    gastAtParaList[1].aucPara[1]        = 'F';
    gastAtParaList[1].aucPara[2]        = '3';
    gastAtParaList[1].aucPara[3]        = '1';
    gastAtParaList[1].aucPara[4]        = 'C';
    gastAtParaList[1].aucPara[5]        = 'D';

    gastAtParaList[2].usParaLen     = 1;

    gastAtParaList[2].aucPara[0]        = '9';

    g_astAtModemCtx[0].stAtUsimInfoCtx.enCardType = USIMM_CARD_SIM;

    //MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(AT_GetModemIdFromClient)
        .stubs()
        .with(any(), outBoundP((VOS_UINT16*)&usModemId, (VOS_UINT32)sizeof(usModemId)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(NV_WriteEx)
        .stubs()
        .will(returnValue((VOS_UINT32)NV_ID_NOT_EXIST));

    //调用被测函数

    //执行检查
    ulRet = At_SetStsfPara(ucIndex);
    EXPECT_EQ(AT_ERROR, ulRet);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetStsfPara, Test_At_SetStsfPara_010)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT32                          ulValue;
    MODEM_ID_ENUM_UINT16                usModemId;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 1;
    ulValue = 0xFFF;
    usModemId = 0;

    //相关全局变量初始化
    gucAtParaIndex = 3;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].usParaLen     = 1;

    gastAtParaList[1].usParaLen     = 6;

    gastAtParaList[1].aucPara[0]        = 'F';
    gastAtParaList[1].aucPara[1]        = 'F';
    gastAtParaList[1].aucPara[2]        = '3';
    gastAtParaList[1].aucPara[3]        = '1';
    gastAtParaList[1].aucPara[4]        = 'C';
    gastAtParaList[1].aucPara[5]        = 'D';

    gastAtParaList[2].usParaLen     = 1;

    gastAtParaList[2].aucPara[0]        = '9';

    g_astAtModemCtx[0].stAtUsimInfoCtx.enCardType = USIMM_CARD_SIM;

    //MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(AT_GetModemIdFromClient)
        .stubs()
        .with(any(), outBoundP((VOS_UINT16 *)&usModemId,(VOS_UINT32)sizeof(usModemId)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(NV_WriteEx)
        .stubs()
        .will(returnValue((VOS_UINT32)NV_OK));

    //调用被测函数

    //执行检查
    ulRet = At_SetStsfPara(ucIndex);
    EXPECT_EQ(AT_OK, ulRet);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetHandleDect: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetHandleDect, Test_At_SetHandleDect_001)
{
    VOS_UINT8                           ucIndex;

    g_stAtCommCtx.ucSystemAppConfigAddr = SYSTEM_APP_WEBUI;
    ucIndex = 0;

    EXPECT_EQ(AT_CMD_NOT_SUPPORT, At_SetHandleDect(ucIndex));

    // 执行检查
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetHandleDect, Test_At_SetHandleDect_002)
{
    VOS_UINT8                           ucIndex;

    g_stAtCommCtx.ucSystemAppConfigAddr = SYSTEM_APP_ANDROID;
    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_READ_CMD;

    EXPECT_EQ(AT_ERROR, At_SetHandleDect(ucIndex));

    // 执行检查
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetHandleDect, Test_At_SetHandleDect_003)
{
    VOS_UINT8                           ucIndex;

    g_stAtCommCtx.ucSystemAppConfigAddr = SYSTEM_APP_ANDROID;
    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 2;


    EXPECT_EQ(AT_TOO_MANY_PARA, At_SetHandleDect(ucIndex));

    // 执行检查
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetHandleDect, Test_At_SetHandleDect_004)
{
    VOS_UINT8                           ucIndex;

    g_stAtCommCtx.ucSystemAppConfigAddr = SYSTEM_APP_ANDROID;
    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 1;

    gastAtParaList[0].usParaLen = 0;

    EXPECT_EQ(AT_ERROR, At_SetHandleDect(ucIndex));

    // 执行检查
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetHandleDect, Test_At_SetHandleDect_005)
{
    VOS_UINT8                           ucIndex;

    g_stAtCommCtx.ucSystemAppConfigAddr = SYSTEM_APP_ANDROID;
    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 1;

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 5;

    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, At_SetHandleDect(ucIndex));

    // 执行检查
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetHandleDect, Test_At_SetHandleDect_006)
{
    VOS_UINT8                           ucIndex;

    g_stAtCommCtx.ucSystemAppConfigAddr = SYSTEM_APP_ANDROID;
    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 1;

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 4;

    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, At_SetHandleDect(ucIndex));
    EXPECT_EQ(AT_CMD_HANDLEDECT_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    // 执行检查
    GlobalMockObject::verify();

}




class Test_At_SetPNNPara: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetPNNPara, Test_At_SetPNNPara_001)
{
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 0;

    At_SetPNNPara(1);

    // 执行检查
    GlobalMockObject::verify();

}


#if (FEATURE_VSIM == FEATURE_ON)

class Test_AT_SetRsfwPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetRsfwPara, Test_AT_SetRsfwPara_001)
{
    // 变量声明

    //参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[0].usParaLen = 4;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "VSIM" ,4);
    gucAtParaIndex = 6;

    // MOCKER操作;
    MOCKER(At_DealRSFWVsim)
        .expects(exactly(1));

    // 调用被测函数
    AT_SetRsfwPara(0);

    // 执行检查
    //EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}
#endif


class Test_At_SetVMSETPara: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex                     = 0;
        g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
        gucAtParaIndex = 1;
        gastAtParaList[ucIndex].ulParaValue = 1;
    }

    void TearDown()
    {

    }

    VOS_UINT8                           ucIndex;

};


TEST_F(Test_At_SetVMSETPara, Test_At_SetVMSETPara_001)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetVMSETPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetVMSETPara, Test_At_SetVMSETPara_002)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex = 2;

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetVMSETPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}
#if (FEATURE_ON == FEATURE_MULTI_MODEM)

TEST_F(Test_At_SetVMSETPara, Test_At_SetVMSETPara_003)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;

    // MOCKER操作;
    MOCKER(APP_VC_SetVoiceMode)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = At_SetVMSETPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}
#endif


TEST_F(Test_At_SetVMSETPara, Test_At_SetVMSETPara_004)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetVMSETPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}



TEST_F(Test_At_SetVMSETPara, Test_At_SetVMSETPara_005)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;

    // MOCKER操作;
    MOCKER(APP_VC_SetVoiceMode)
        .expects(exactly(1))
        .with(any(),any(),any()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = At_SetVMSETPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetNvManufactureExtPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetNvManufactureExtPara, Test_AT_SetNvManufactureExtPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_CHAR                           *pcLogStr;

    //参数初始化
    pcLogStr                            = "AT_SetNvManufactureExtPara: too many parameters.";

    // 初始化全局变量;
    gucAtParaIndex                      = 1;

    // MOCKER操作
    //MOCKER(DIAG_LogReport)
       // .expects(exactly(1));

    // 调用被测函数
    ulRet = AT_SetNvManufactureExtPara(0);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetNvManufactureExtPara, Test_AT_SetNvManufactureExtPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_CHAR                           *pcLogStr;

    //参数初始化
    pcLogStr                            = "AT_SetApbatlvlPara: AT_FillAndSndAppReqMsg fail.";

    // 初始化全局变量;
    gucAtParaIndex                      = 0;

    // MOCKER操作
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));


    // 调用被测函数
    ulRet = AT_SetNvManufactureExtPara(0);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetNvManufactureExtPara, Test_AT_SetNvManufactureExtPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    //参数初始化

    // 初始化全局变量;
    gucAtParaIndex                      = 0;

    // MOCKER操作
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(), any(), eq((VOS_UINT16)DRV_AGENT_NVMANUFACTUREEXT_SET_REQ),
              any(), any(), eq((VOS_UINT32)WUEPS_PID_DRV_AGENT))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulRet = AT_SetNvManufactureExtPara(0);

    // 执行检查
    EXPECT_EQ(AT_CMD_NVMANUFACTUREEXT_SET, gastAtClientTab[0].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


class Test_At_SetAmpCPara: public ::testing::Test
{
public:
    VOS_UINT8                           ucIndex;

    void SetUp()
	{
		UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }

    void TearDown()
    {

    }

};


TEST_F(Test_At_SetAmpCPara, Test_At_SetAmpCPara_001)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_USBCOM_USER;
    gucAtParaIndex = 0;
    gastAtParaList[0].usParaLen = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetAmpCPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAmpCPara, Test_At_SetAmpCPara_002)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    gucAtParaIndex = 0;
    gastAtParaList[0].usParaLen = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetAmpCPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);
    EXPECT_EQ(AT_UART_DEFAULT_DCD_MODE, g_stAtCommCtx.stUartCtx.stLineCtrl.enDcdMode);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAmpCPara, Test_At_SetAmpCPara_003)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtClientTab[ucIndex].Mode = AT_CMD_MODE;

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetAmpCPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);
    EXPECT_EQ(AT_UART_DCD_MODE_CONNECT_ON, g_stAtCommCtx.stUartCtx.stLineCtrl.enDcdMode);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAmpCPara, Test_At_SetAmpCPara_004)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 2;

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetAmpCPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAmpCPara, Test_At_SetAmpCPara_005)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetAmpCPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);
    EXPECT_EQ(AT_UART_DCD_MODE_ALWAYS_ON, g_stAtCommCtx.stUartCtx.stLineCtrl.enDcdMode);

    GlobalMockObject::verify();
}


class Test_At_SetAmpDPara: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }

    void TearDown()
    {

    }

    VOS_UINT8                           ucIndex;

};


TEST_F(Test_At_SetAmpDPara, Test_At_SetAmpDPara_001)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_USBCOM_USER;

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetAmpDPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAmpDPara, Test_At_SetAmpDPara_002)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    gucAtParaIndex = 0;
    gastAtParaList[0].usParaLen = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetAmpDPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);
    EXPECT_EQ(AT_UART_DEFAULT_DTR_MODE, g_stAtCommCtx.stUartCtx.stLineCtrl.enDtrMode);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAmpDPara, Test_At_SetAmpDPara_003)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetAmpDPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);
    EXPECT_EQ(AT_UART_DTR_MODE_SWITCH_CMD_MODE, g_stAtCommCtx.stUartCtx.stLineCtrl.enDtrMode);

    GlobalMockObject::verify();
}


class Test_At_SetAmpSPara: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }

    void TearDown()
    {

    }

    VOS_UINT8                           ucIndex;

};


TEST_F(Test_At_SetAmpSPara, Test_At_SetAmpSPara_001)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_USBCOM_USER;

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetAmpSPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAmpSPara, Test_At_SetAmpSPara_002)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    gucAtParaIndex = 0;
    gastAtParaList[0].usParaLen = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetAmpSPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);
    EXPECT_EQ(AT_UART_DEFAULT_DSR_MODE, g_stAtCommCtx.stUartCtx.stLineCtrl.enDsrMode);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAmpSPara, Test_At_SetAmpSPara_003)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetAmpSPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);
    EXPECT_EQ(AT_UART_DSR_MODE_CONNECT_ON, g_stAtCommCtx.stUartCtx.stLineCtrl.enDsrMode);

    GlobalMockObject::verify();
}


class Test_AT_UpdateUartCfgNV: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
        AT_InitUartCtx();
    }

    void TearDown()
    {

    }

};


TEST_F(Test_AT_UpdateUartCfgNV, Test_AT_UpdateUartCfgNV_001)
{
    // 变量声明

    // 参数初始化

    // 初始化全局变量;
    g_stAtStatsInfo.stHsUartStats.ucReadNvFailNum  = 0;
    g_stAtStatsInfo.stHsUartStats.ucWriteNvFailNum = 0;

    // MOCKER操作;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_WriteEx)
    .expects(exactly(1))
    .will(returnValue((VOS_UINT32)NV_OK));

    // 调用被测函数
    AT_UpdateUartCfgNV();

    // 执行检查
    EXPECT_EQ(0, g_stAtStatsInfo.stHsUartStats.ucReadNvFailNum);
    EXPECT_EQ(0, g_stAtStatsInfo.stHsUartStats.ucWriteNvFailNum);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_UpdateUartCfgNV, Test_AT_UpdateUartCfgNV_002)
{
    // 变量声明

    // 参数初始化

    // 初始化全局变量;
    g_stAtStatsInfo.stHsUartStats.ucReadNvFailNum  = 0;
    g_stAtStatsInfo.stHsUartStats.ucWriteNvFailNum = 0;

    // MOCKER操作;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)NV_ID_NOT_EXIST));

    MOCKER(NV_WriteEx)
        .expects(never());

    // 调用被测函数
    AT_UpdateUartCfgNV();

    // 执行检查
    EXPECT_EQ(1, g_stAtStatsInfo.stHsUartStats.ucReadNvFailNum);
    EXPECT_EQ(0, g_stAtStatsInfo.stHsUartStats.ucWriteNvFailNum);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_UpdateUartCfgNV, Test_AT_UpdateUartCfgNV_003)
{
    // 变量声明

    // 参数初始化

    // 初始化全局变量;
    g_stAtStatsInfo.stHsUartStats.ucReadNvFailNum  = 0;
    g_stAtStatsInfo.stHsUartStats.ucWriteNvFailNum = 0;

    // MOCKER操作;
    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)NV_OK));

    MOCKER(NV_WriteEx)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)NV_WRITE_FLASH_FAIL));

    // 调用被测函数
    AT_UpdateUartCfgNV();

    // 执行检查
    EXPECT_EQ(0, g_stAtStatsInfo.stHsUartStats.ucReadNvFailNum);
    EXPECT_EQ(1, g_stAtStatsInfo.stHsUartStats.ucWriteNvFailNum);

    GlobalMockObject::verify();
}


class Test_AT_SetIprPara: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }

    void TearDown()
    {

    }

    VOS_UINT8                           ucIndex;

};


TEST_F(Test_AT_SetIprPara, Test_AT_SetIprPara_001)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_USBCOM_USER;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetIprPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIprPara, Test_AT_SetIprPara_002)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    gucAtParaIndex = 3;
    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetIprPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIprPara, Test_AT_SetIprPara_003)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    gucAtParaIndex = 0;

    // MOCKER操作;
    MOCKER(At_FormatResultData)
        .expects(exactly(1));

    MOCKER(mdrv_udi_ioctl)
        .expects(exactly(1))
        .will(returnValue((VOS_INT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetIprPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_SUCCESS, ulRet);
    EXPECT_EQ(AT_UART_DEFAULT_BAUDRATE, g_stAtCommCtx.stUartCtx.stPhyConfig.enBaudRate);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIprPara, Test_AT_SetIprPara_004)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 9000;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetIprPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIprPara, Test_AT_SetIprPara_005)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 0;
    gastAtParaList[0].usParaLen = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetIprPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIprPara, Test_AT_SetIprPara_006)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 9600;

    // MOCKER操作;
    MOCKER(At_FormatResultData)
        .expects(exactly(1));

    MOCKER(mdrv_udi_ioctl)
        .expects(exactly(1))
        .will(returnValue((VOS_INT32)VOS_ERROR));

    // 调用被测函数
    ulRet = AT_SetIprPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_FAILURE, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIprPara, Test_AT_SetIprPara_007)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 9600;

    // MOCKER操作;
    MOCKER(At_FormatResultData)
        .expects(exactly(1));

    MOCKER(mdrv_udi_ioctl)
        .expects(exactly(1))
        .will(returnValue((VOS_INT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetIprPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_SUCCESS, ulRet);
    EXPECT_EQ(AT_UART_BAUDRATE_9600, g_stAtCommCtx.stUartCtx.stPhyConfig.enBaudRate);

    GlobalMockObject::verify();
}


class Test_AT_SetCharFrame: public ::testing::Test
{
public:

    void SetUp()
	{
		UT_STUB_INIT();
        gucAtParaIndex = 0;
        gastAtParaList[0].usParaLen = 0;
    }

    void TearDown()
    {

    }

    VOS_UINT8                           ucIndex;

};


TEST_F(Test_AT_SetCharFrame, Test_AT_SetCharFrame_001)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    AT_UART_FORMAT_ENUM_UINT8 enFormat = AT_UART_FORMAT_BUTT;
    AT_UART_PARITY_ENUM_UINT8 enParity = AT_UART_PARITY_BUTT;
    // 初始化全局变量;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_ConfigUartCharFrameParam(ucIndex, enFormat, enParity);

    // 执行检查
    EXPECT_EQ(VOS_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCharFrame, Test_AT_SetCharFrame_002)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    AT_UART_FORMAT_ENUM_UINT8 enFormat = AT_UART_FORMAT_8DATA_1STOP;
    AT_UART_PARITY_ENUM_UINT8 enParity = AT_UART_PARITY_SPACE;
    // 初始化全局变量;

    // MOCKER操作;
    MOCKER(mdrv_udi_ioctl)
        .expects(exactly(3))
        .will(returnValue((VOS_INT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_ConfigUartCharFrameParam(ucIndex, enFormat, enParity);

    // 执行检查
    EXPECT_EQ(VOS_OK, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCharFrame, Test_AT_SetCharFrame_003)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    AT_UART_FORMAT_ENUM_UINT8 enFormat = AT_UART_FORMAT_8DATA_1PARITY_1STOP;
    AT_UART_PARITY_ENUM_UINT8 enParity = AT_UART_PARITY_ODD;
    // 初始化全局变量;

    // MOCKER操作;
    MOCKER(mdrv_udi_ioctl)
        .expects(exactly(3))
        .will(returnValue((VOS_INT32)VOS_OK));


    // 调用被测函数
    ulRet = AT_ConfigUartCharFrameParam(ucIndex, enFormat, enParity);

    // 执行检查
    EXPECT_EQ(VOS_OK, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCharFrame, Test_AT_SetCharFrame_004)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    AT_UART_FORMAT_ENUM_UINT8 enFormat = AT_UART_FORMAT_8DATA_1PARITY_1STOP;
    AT_UART_PARITY_ENUM_UINT8 enParity = AT_UART_PARITY_BUTT;
    // 初始化全局变量;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_ConfigUartCharFrameParam(ucIndex, enFormat, enParity);

    // 执行检查
    EXPECT_EQ(VOS_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCharFrame, Test_AT_SetCharFrame_005)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    AT_UART_FORMAT_ENUM_UINT8 enFormat = AT_UART_FORMAT_AUTO_DETECT;
    AT_UART_PARITY_ENUM_UINT8 enParity = AT_UART_PARITY_BUTT;
    // 初始化全局变量;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_ConfigUartCharFrameParam(ucIndex, enFormat, enParity);

    // 执行检查
    EXPECT_EQ(VOS_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCharFrame, Test_AT_SetCharFrame_006)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    AT_UART_FORMAT_ENUM_UINT8 enFormat = AT_UART_FORMAT_8DATA_1PARITY_1STOP;
    AT_UART_PARITY_ENUM_UINT8 enParity = AT_UART_PARITY_BUTT;
    // 初始化全局变量;

    // MOCKER操作;
    MOCKER(AT_HSUART_GetUdiValueByStopLen)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = AT_ConfigUartCharFrameParam(ucIndex, enFormat, enParity);

    // 执行检查
    EXPECT_EQ(VOS_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCharFrame, Test_AT_SetCharFrame_007)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    AT_UART_FORMAT_ENUM_UINT8 enFormat = AT_UART_FORMAT_8DATA_1STOP;
    AT_UART_PARITY_ENUM_UINT8 enParity = AT_UART_PARITY_SPACE;
    // 初始化全局变量;

    // MOCKER操作;
    MOCKER(mdrv_udi_ioctl)
        .expects(exactly(1))
        .will(returnValue((VOS_INT32)VOS_ERROR));

    // 调用被测函数
    ulRet = AT_ConfigUartCharFrameParam(ucIndex, enFormat, enParity);

    // 执行检查
    EXPECT_EQ(VOS_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCharFrame, Test_AT_SetCharFrame_008)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    AT_UART_FORMAT_ENUM_UINT8 enFormat = AT_UART_FORMAT_8DATA_1STOP;
    AT_UART_PARITY_ENUM_UINT8 enParity = AT_UART_PARITY_SPACE;
    // 初始化全局变量;

    // MOCKER操作;
    MOCKER(mdrv_udi_ioctl)
        .expects(exactly(1))
		.with(any(),eq((VOS_UINT32)UART_IOCTL_SET_WLEN),any())
        .will(returnValue((VOS_INT32)VOS_OK));

    MOCKER(mdrv_udi_ioctl)
        .expects(exactly(1))
        .with(any(),eq((VOS_UINT32)UART_IOCTL_SET_STP2),any())
        .will(returnValue((VOS_INT32)VOS_ERROR));

    // 调用被测函数
    ulRet = AT_ConfigUartCharFrameParam(ucIndex, enFormat, enParity);

    // 执行检查
    EXPECT_EQ(VOS_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCharFrame, Test_AT_SetCharFrame_009)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化
    AT_UART_FORMAT_ENUM_UINT8 enFormat = AT_UART_FORMAT_8DATA_1STOP;
    AT_UART_PARITY_ENUM_UINT8 enParity = AT_UART_PARITY_SPACE;
    // 初始化全局变量;

    // MOCKER操作;
    MOCKER(mdrv_udi_ioctl)
        .expects(exactly(1))
		.with(any(),eq((VOS_UINT32)UART_IOCTL_SET_WLEN),any())
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(mdrv_udi_ioctl)
        .expects(exactly(1))
        .with(any(),eq((VOS_UINT32)UART_IOCTL_SET_STP2),any())
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(mdrv_udi_ioctl)
        .expects(exactly(1))
        .with(any(),eq((VOS_UINT32)UART_IOCTL_SET_EPS),any())
        .will(returnValue(VOS_ERROR));

    // 调用被测函数
    ulRet = AT_ConfigUartCharFrameParam(ucIndex, enFormat, enParity);

    // 执行检查
    EXPECT_EQ(VOS_ERROR, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetIcfPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
        AT_InitUartCtx();
    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetIcfPara, Test_AT_SetIcfPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_USBCOM_USER;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetIcfPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIcfPara, Test_AT_SetIcfPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    gucAtParaIndex = 3;
    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetIcfPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIcfPara, Test_AT_SetIcfPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    gucAtParaIndex = 0;

    // MOCKER操作;
    MOCKER(At_FormatResultData)
        .expects(exactly(1));

    MOCKER(AT_ConfigUartCharFrameParam)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetIcfPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_SUCCESS, ulRet);
    EXPECT_EQ(AT_UART_DEFAULT_FORMAT, g_stAtCommCtx.stUartCtx.stPhyConfig.stFrame.enFormat);
    EXPECT_EQ(AT_UART_DEFAULT_PARITY, g_stAtCommCtx.stUartCtx.stPhyConfig.stFrame.enParity);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIcfPara, Test_AT_SetIcfPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetIcfPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIcfPara, Test_AT_SetIcfPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetIcfPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIcfPara, Test_AT_SetIcfPara_006)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    // MOCKER操作;
    MOCKER(At_FormatResultData)
        .expects(exactly(1));

    MOCKER(AT_ConfigUartCharFrameParam)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetIcfPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_SUCCESS, ulRet);
    EXPECT_EQ(AT_UART_FORMAT_8DATA_2STOP, g_stAtCommCtx.stUartCtx.stPhyConfig.stFrame.enFormat);
    EXPECT_EQ(AT_UART_DEFAULT_PARITY, g_stAtCommCtx.stUartCtx.stPhyConfig.stFrame.enParity);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIcfPara, Test_AT_SetIcfPara_007)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetIcfPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIcfPara, Test_AT_SetIcfPara_008)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 1;

    // MOCKER操作;
    MOCKER(At_FormatResultData)
        .expects(exactly(1));

    MOCKER(AT_ConfigUartCharFrameParam)
        .expects(exactly(1))
        .will(returnValue(VOS_ERROR));

    // 调用被测函数
    ulRet = AT_SetIcfPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_FAILURE, ulRet);
    EXPECT_EQ(AT_UART_FORMAT_8DATA_2STOP, g_stAtCommCtx.stUartCtx.stPhyConfig.stFrame.enFormat);
    EXPECT_EQ(AT_UART_PARITY_EVEN, g_stAtCommCtx.stUartCtx.stPhyConfig.stFrame.enParity);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIcfPara, Test_AT_SetIcfPara_009)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 1;

    // MOCKER操作;
    MOCKER(At_FormatResultData)
        .expects(exactly(1));

    MOCKER(AT_ConfigUartCharFrameParam)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetIcfPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_SUCCESS, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetOPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
        AT_InitUartCtx();
    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetOPara, Test_AT_SetOPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].Mode       = AT_ONLINE_CMD_MODE;
    gastAtClientTab[ucIndex].DataMode   = AT_PPP_DATA_MODE;
    gastAtClientTab[ucIndex].DataState  = AT_DATA_STOP_STATE;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetOPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CONNECT, ulRet);
    EXPECT_EQ(AT_DATA_MODE, gastAtClientTab[ucIndex].Mode);
    EXPECT_EQ(AT_PPP_DATA_MODE, gastAtClientTab[ucIndex].DataMode);
    EXPECT_EQ(AT_DATA_STOP_STATE, gastAtClientTab[ucIndex].DataState);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetOPara, Test_AT_SetOPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].Mode       = AT_CMD_MODE;
    gastAtClientTab[ucIndex].DataMode   = AT_DATA_BUTT_MODE;
    gastAtClientTab[ucIndex].DataState  = AT_DATA_STOP_STATE;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetOPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_NO_CARRIER, ulRet);
    EXPECT_EQ(AT_CMD_MODE, gastAtClientTab[ucIndex].Mode);
    EXPECT_EQ(AT_DATA_BUTT_MODE, gastAtClientTab[ucIndex].DataMode);
    EXPECT_EQ(AT_DATA_STOP_STATE, gastAtClientTab[ucIndex].DataState);

    GlobalMockObject::verify();
}


class Test_AT_SetIfcPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
        AT_InitUartCtx();
    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetIfcPara, Test_AT_SetIfcPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_USBCOM_USER;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetIfcPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIfcPara, Test_AT_SetIfcPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    gucAtParaIndex = 3;
    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetIfcPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIfcPara, Test_AT_SetIfcPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    gucAtParaIndex = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetIfcPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);
    EXPECT_EQ(AT_UART_DEFAULT_FC_DCE_BY_DTE, g_stAtCommCtx.stUartCtx.stFlowCtrl.enDceByDte);
    EXPECT_EQ(AT_UART_DEFAULT_FC_DTE_BY_DCE, g_stAtCommCtx.stUartCtx.stFlowCtrl.enDteByDce);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIfcPara, Test_AT_SetIfcPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetIfcPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIfcPara, Test_AT_SetIfcPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetIfcPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIfcPara, Test_AT_SetIfcPara_006)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 2;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetIfcPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);
    EXPECT_EQ(AT_UART_FC_DCE_BY_DTE_RTS, g_stAtCommCtx.stUartCtx.stFlowCtrl.enDceByDte);
    EXPECT_EQ(AT_UART_DEFAULT_FC_DTE_BY_DCE, g_stAtCommCtx.stUartCtx.stFlowCtrl.enDteByDce);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIfcPara, Test_AT_SetIfcPara_007)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 2;
    gastAtParaList[1].usParaLen = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetIfcPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetIfcPara, Test_AT_SetIfcPara_008)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_HSUART_INDEX;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].UserType = AT_HSUART_USER;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 2;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 2;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetIfcPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);
    EXPECT_EQ(AT_UART_FC_DCE_BY_DTE_RTS, g_stAtCommCtx.stUartCtx.stFlowCtrl.enDceByDte);
    EXPECT_EQ(AT_UART_FC_DTE_BY_DCE_CTS, g_stAtCommCtx.stUartCtx.stFlowCtrl.enDteByDce);

    GlobalMockObject::verify();
}
#if 0

#if (FEATURE_ON == FEATURE_IMS)

class Test_AT_SetCiregPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        AT_InitCtx();
    }
    void TearDown()
    {
        AT_InitCtx();
    }
};

TEST_F(Test_AT_SetCiregPara, Test_AT_SetCiregPara_001)
{
    // 变量声明
    TAF_UINT8                           ucIndex = AT_CLIENT_TAB_PCUI_INDEX;
    VOS_UINT32                          ulRslt;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType             = AT_CMD_OPT_SET_CMD_NO_PARA;

    // MOCKER操作

    // 调用被测函数
    ulRslt = AT_SetCiregPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRslt);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCiregPara, Test_AT_SetCiregPara_002)
{
    // 变量声明
    TAF_UINT8                           ucIndex = AT_CLIENT_TAB_PCUI_INDEX;
    VOS_UINT32                          ulRslt;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType             = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                          = 2;

    // MOCKER操作

    // 调用被测函数
    ulRslt = AT_SetCiregPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRslt);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCiregPara, Test_AT_SetCiregPara_003)
{
    // 变量声明
    TAF_UINT8                           ucIndex = AT_CLIENT_TAB_PCUI_INDEX;
    VOS_UINT32                          ulRslt;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType             = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                          = 1;
    gastAtParaList[ucIndex].usParaLen       = 1;
    gastAtParaList[0].ulParaValue           = 0;

    // MOCKER操作
    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    // 调用被测函数
    ulRslt = AT_SetCiregPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRslt);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCiregPara, Test_AT_SetCiregPara_004)
{
    // 变量声明
    TAF_UINT8                           ucIndex = AT_CLIENT_TAB_PCUI_INDEX;
    VOS_UINT32                          ulRslt;
    AT_IMSA_CIREG_SET_REQ_STRU          stCireg;

    // 参数初始化
    PS_MEM_SET(&stCireg, 0x00, sizeof(AT_IMSA_CIREG_SET_REQ_STRU));
    stCireg.enCireg = AT_IMSA_IMS_REG_STATE_DISABLE_REPORT;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType             = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                          = 1;
    gastAtParaList[ucIndex].usParaLen       = 0;

    // MOCKER操作
    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .with(any(),
              any(),
              eq(ID_AT_IMSA_CIREG_SET_REQ),
              mirror(&stCireg.enCireg, sizeof(AT_IMSA_IMS_REG_STATE_REPORT_ENUM_UINT32)),
              eq((VOS_UINT32)sizeof(AT_IMSA_IMS_REG_STATE_REPORT_ENUM_UINT32)),
              eq(PS_PID_IMSA))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulRslt = AT_SetCiregPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRslt);
    GlobalMockObject::verify();
}



class Test_AT_SetCirepPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        AT_InitCtx();
    }
    void TearDown()
    {
        AT_InitCtx();
    }
};

TEST_F(Test_AT_SetCirepPara, Test_AT_SetCirepPara_001)
{
    // 变量声明
    TAF_UINT8                           ucIndex = AT_CLIENT_TAB_PCUI_INDEX;
    VOS_UINT32                          ulRslt;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType             = AT_CMD_OPT_SET_CMD_NO_PARA;

    // MOCKER操作

    // 调用被测函数
    ulRslt = AT_SetCirepPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRslt);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCirepPara, Test_AT_SetCirepPara_002)
{
    // 变量声明
    TAF_UINT8                           ucIndex = AT_CLIENT_TAB_PCUI_INDEX;
    VOS_UINT32                          ulRslt;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType             = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                          = 2;

    // MOCKER操作

    // 调用被测函数
    ulRslt = AT_SetCirepPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRslt);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCirepPara, Test_AT_SetCirepPara_003)
{
    // 变量声明
    TAF_UINT8                           ucIndex = AT_CLIENT_TAB_PCUI_INDEX;
    VOS_UINT32                          ulRslt;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType             = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                          = 1;
    gastAtParaList[ucIndex].usParaLen       = 1;
    gastAtParaList[0].ulParaValue           = 0;

    // MOCKER操作
    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    // 调用被测函数
    ulRslt = AT_SetCirepPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRslt);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCirepPara, Test_AT_SetCirepPara_004)
{
    // 变量声明
    TAF_UINT8                           ucIndex = AT_CLIENT_TAB_PCUI_INDEX;
    VOS_UINT32                          ulRslt;
    AT_IMSA_CIREP_SET_REQ_STRU          stCirep;

    // 参数初始化
    PS_MEM_SET(&stCirep, 0x00, sizeof(AT_IMSA_CIREP_SET_REQ_STRU));
    stCirep.enReport = AT_IMSA_CIREP_REPORT_DISENABLE;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType             = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                          = 1;
    gastAtParaList[ucIndex].usParaLen       = 0;

    // MOCKER操作
    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .with(any(),
              any(),
              eq(ID_AT_IMSA_CIREP_SET_REQ),
              mirror(&stCirep.enReport, sizeof(AT_IMSA_CIREP_REPORT_ENUM_UINT32)),
              eq((VOS_UINT32)sizeof(AT_IMSA_CIREP_REPORT_ENUM_UINT32)),
              eq(PS_PID_IMSA))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulRslt = AT_SetCirepPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRslt);
    GlobalMockObject::verify();
}


class Test_AT_SetUiccAuthPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};

TEST_F(Test_AT_SetUiccAuthPara, AT_SetUiccAuthPara_001)
{
	gucAtParaIndex = 4;

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetUiccAuthPara(0));

	gucAtParaIndex = 0;
}


TEST_F(Test_AT_SetUiccAuthPara, AT_SetUiccAuthPara_002)
{
	gucAtParaIndex = 3;

	gastAtParaList[1].usParaLen = 0;

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetUiccAuthPara(0));

	gucAtParaIndex = 0;
}


TEST_F(Test_AT_SetUiccAuthPara, AT_SetUiccAuthPara_003)
{
	gucAtParaIndex = 3;

	gastAtParaList[1].usParaLen = 32;

	gastAtParaList[2].usParaLen = 0;

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetUiccAuthPara(0));

	gucAtParaIndex = 0;

	gastAtParaList[1].usParaLen = 0;
}


TEST_F(Test_AT_SetUiccAuthPara, AT_SetUiccAuthPara_004)
{
	gucAtParaIndex = 3;

	gastAtParaList[1].usParaLen = 32;

	gastAtParaList[2].usParaLen = 32;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetUiccAuthPara(0));

	gucAtParaIndex = 0;

	gastAtParaList[1].usParaLen = 0;

	gastAtParaList[2].usParaLen = 0;
}


TEST_F(Test_AT_SetUiccAuthPara, AT_SetUiccAuthPara_005)
{
	gucAtParaIndex = 3;

	gastAtParaList[1].usParaLen = 32;

	gastAtParaList[2].usParaLen = 32;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetUiccAuthPara(0));

	gucAtParaIndex = 0;

	gastAtParaList[1].usParaLen = 0;

	gastAtParaList[2].usParaLen = 0;
}


TEST_F(Test_AT_SetUiccAuthPara, AT_SetUiccAuthPara_006)
{
	gucAtParaIndex = 3;

	gastAtParaList[1].usParaLen = 32;

	gastAtParaList[2].usParaLen = 32;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnObjectList(AT_SUCCESS,AT_FAILURE));

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetUiccAuthPara(0));

	gucAtParaIndex = 0;

	gastAtParaList[1].usParaLen = 0;

	gastAtParaList[2].usParaLen = 0;
}


TEST_F(Test_AT_SetUiccAuthPara, AT_SetUiccAuthPara_007)
{
	gucAtParaIndex = 3;

	gastAtParaList[1].usParaLen = 320;

	gastAtParaList[2].usParaLen = 32;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnObjectList(AT_SUCCESS,AT_SUCCESS));

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetUiccAuthPara(0));

	gucAtParaIndex = 0;

	gastAtParaList[1].usParaLen = 0;

	gastAtParaList[2].usParaLen = 0;
}

TEST_F(Test_AT_SetUiccAuthPara, AT_SetUiccAuthPara_008)
{
	gucAtParaIndex = 3;

	gastAtParaList[1].usParaLen = 32;

	gastAtParaList[2].usParaLen = 320;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnObjectList(AT_SUCCESS,AT_SUCCESS));

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetUiccAuthPara(0));

	gucAtParaIndex = 0;

	gastAtParaList[1].usParaLen = 0;

	gastAtParaList[2].usParaLen = 0;
}

TEST_F(Test_AT_SetUiccAuthPara, AT_SetUiccAuthPara_009)
{
	gucAtParaIndex = 3;

	gastAtParaList[1].usParaLen = 32;

	gastAtParaList[2].usParaLen = 32;

	gastAtParaList[0].ulParaValue = 0;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnObjectList(AT_SUCCESS,AT_SUCCESS));

	MOCKER(SI_PIH_UiccAuthReq)
		.stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

	EXPECT_EQ(AT_ERROR, AT_SetUiccAuthPara(0));

	gucAtParaIndex = 0;

	gastAtParaList[1].usParaLen = 0;

	gastAtParaList[2].usParaLen = 0;
}

TEST_F(Test_AT_SetUiccAuthPara, AT_SetUiccAuthPara_010)
{
	gucAtParaIndex = 3;

	gastAtParaList[1].usParaLen = 32;

	gastAtParaList[2].usParaLen = 32;

	gastAtParaList[0].ulParaValue = 1;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnObjectList(AT_SUCCESS,AT_SUCCESS));

	MOCKER(SI_PIH_UiccAuthReq)
		.stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

	EXPECT_EQ(AT_WAIT_ASYNC_RETURN, AT_SetUiccAuthPara(0));

	gucAtParaIndex = 0;

	gastAtParaList[1].usParaLen = 0;

	gastAtParaList[2].usParaLen = 0;

	gastAtParaList[0].ulParaValue = 0;
}

TEST_F(Test_AT_SetUiccAuthPara, AT_SetUiccAuthPara_011)
{
	gucAtParaIndex = 3;

	gastAtParaList[1].usParaLen = 32;

	gastAtParaList[2].usParaLen = 32;

	gastAtParaList[0].ulParaValue = 2;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnObjectList(AT_SUCCESS,AT_SUCCESS));

	MOCKER(SI_PIH_UiccAuthReq)
		.stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

	EXPECT_EQ(AT_WAIT_ASYNC_RETURN, AT_SetUiccAuthPara(0));

	gucAtParaIndex = 0;

	gastAtParaList[1].usParaLen = 0;

	gastAtParaList[2].usParaLen = 0;

	gastAtParaList[0].ulParaValue = 0;
}

TEST_F(Test_AT_SetUiccAuthPara, AT_SetUiccAuthPara_012)
{
	gucAtParaIndex = 3;

	gastAtParaList[1].usParaLen = 32;

	gastAtParaList[2].usParaLen = 32;

	gastAtParaList[0].ulParaValue = 3;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnObjectList(AT_SUCCESS,AT_SUCCESS));

	MOCKER(SI_PIH_UiccAuthReq)
		.stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

	EXPECT_EQ(AT_WAIT_ASYNC_RETURN, AT_SetUiccAuthPara(0));

	gucAtParaIndex = 0;

	gastAtParaList[1].usParaLen = 0;

	gastAtParaList[2].usParaLen = 0;

	gastAtParaList[0].ulParaValue = 0;
}

TEST_F(Test_AT_SetUiccAuthPara, AT_SetUiccAuthPara_013)
{
	gucAtParaIndex = 3;

	gastAtParaList[1].usParaLen = 32;

	gastAtParaList[2].usParaLen = 32;

	gastAtParaList[0].ulParaValue = 4;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnObjectList(AT_SUCCESS,AT_SUCCESS));

	MOCKER(SI_PIH_UiccAuthReq)
		.stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetUiccAuthPara(0));

	gucAtParaIndex = 0;

	gastAtParaList[1].usParaLen = 0;

	gastAtParaList[2].usParaLen = 0;

	gastAtParaList[0].ulParaValue = 0;
}

class Test_AT_SetURSMPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};

TEST_F(Test_AT_SetURSMPara, AT_SetURSMPara_001)
{
	gucAtParaIndex = 7;

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetURSMPara(0));

	gucAtParaIndex = 3;

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetURSMPara(0));

	gucAtParaIndex = 0;
}


TEST_F(Test_AT_SetURSMPara, AT_SetURSMPara_002)
{
	gucAtParaIndex = 4;

	gastAtParaList[2].ulParaValue = 0x7FFF;

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetURSMPara(0));

	gucAtParaIndex = 0;
}


TEST_F(Test_AT_SetURSMPara, AT_SetURSMPara_003)
{
	gucAtParaIndex = 6;

	gastAtParaList[1].ulParaValue = SI_PIH_ACCESS_WRITE;

	gastAtParaList[4].usParaLen = 0;

	gastAtParaList[2].ulParaValue = 0x6F07;

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetURSMPara(0));

	gucAtParaIndex = 0;
}


TEST_F(Test_AT_SetURSMPara, AT_SetURSMPara_004)
{
	gucAtParaIndex = 6;

	gastAtParaList[1].ulParaValue = SI_PIH_ACCESS_READ;

	gastAtParaList[4].usParaLen = 100;

	gastAtParaList[2].ulParaValue = 0x6F07;

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetURSMPara(0));

	gastAtParaList[4].usParaLen = 0;

	gucAtParaIndex = 0;
}


TEST_F(Test_AT_SetURSMPara, AT_SetURSMPara_005)
{
	gucAtParaIndex = 6;

	gastAtParaList[1].ulParaValue = SI_PIH_ACCESS_WRITE;

	gastAtParaList[4].usParaLen = 10;

	gastAtParaList[5].usParaLen = 10;

	gastAtParaList[2].ulParaValue = 0x6F07;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetURSMPara(0));

	gastAtParaList[4].usParaLen = 0;

	gastAtParaList[5].usParaLen = 0;

	gucAtParaIndex = 0;
}


TEST_F(Test_AT_SetURSMPara, AT_SetURSMPara_006)
{
	gucAtParaIndex = 6;

	gastAtParaList[1].ulParaValue = SI_PIH_ACCESS_WRITE;

	gastAtParaList[4].usParaLen = 10;

	gastAtParaList[5].usParaLen = 10;

	gastAtParaList[2].ulParaValue = 0x6F07;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnObjectList(AT_SUCCESS, AT_FAILURE));

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetURSMPara(0));

	gastAtParaList[4].usParaLen = 0;

	gastAtParaList[5].usParaLen = 0;

	gucAtParaIndex = 0;
}


TEST_F(Test_AT_SetURSMPara, AT_SetURSMPara_007)
{
	gucAtParaIndex = 6;

	gastAtParaList[1].ulParaValue = SI_PIH_ACCESS_WRITE;

	gastAtParaList[4].usParaLen = 10;

	gastAtParaList[5].usParaLen = 10;

	gastAtParaList[2].ulParaValue = 0x6F07;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnObjectList(AT_SUCCESS, AT_SUCCESS));

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetURSMPara(0));

	gastAtParaList[4].usParaLen = 0;

	gastAtParaList[5].usParaLen = 0;

	gucAtParaIndex = 0;
}


TEST_F(Test_AT_SetURSMPara, AT_SetURSMPara_008)
{
	gucAtParaIndex = 6;

	gastAtParaList[1].ulParaValue = SI_PIH_ACCESS_WRITE;

	gastAtParaList[4].usParaLen = 10;

	gastAtParaList[5].usParaLen = 4;

	gastAtParaList[0].ulParaValue = 3;

	gastAtParaList[2].ulParaValue = 0x6F07;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnObjectList(AT_SUCCESS, AT_SUCCESS));

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetURSMPara(0));

	gastAtParaList[4].usParaLen = 0;

	gastAtParaList[5].usParaLen = 0;

	gastAtParaList[0].ulParaValue = 0;

	gucAtParaIndex = 0;
}


TEST_F(Test_AT_SetURSMPara, AT_SetURSMPara_009)
{
	gucAtParaIndex = 6;

	gastAtParaList[1].ulParaValue = SI_PIH_ACCESS_WRITE;

	gastAtParaList[4].usParaLen = 300;

	gastAtParaList[5].usParaLen = 4;

	gastAtParaList[0].ulParaValue = 0;

	gastAtParaList[2].ulParaValue = 0x6F07;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnObjectList(AT_SUCCESS, AT_SUCCESS));

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetURSMPara(0));

	gastAtParaList[4].usParaLen = 0;

	gastAtParaList[5].usParaLen = 0;

	gastAtParaList[0].ulParaValue = 0;

	gucAtParaIndex = 0;
}


TEST_F(Test_AT_SetURSMPara, AT_SetURSMPara_010)
{
	gucAtParaIndex = 6;

	gastAtParaList[1].ulParaValue = SI_PIH_ACCESS_WRITE;

	gastAtParaList[4].usParaLen = 10;

	gastAtParaList[5].usParaLen = 4;

	gastAtParaList[0].ulParaValue = 0;

	gastAtParaList[2].ulParaValue = 0x6F07;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnObjectList(AT_SUCCESS, AT_SUCCESS));

	MOCKER(SI_PIH_AccessUICCFileReq)
		.stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

	EXPECT_EQ(AT_WAIT_ASYNC_RETURN, AT_SetURSMPara(0));

	gastAtParaList[4].usParaLen = 0;

	gastAtParaList[5].usParaLen = 0;

	gastAtParaList[0].ulParaValue = 0;

	gucAtParaIndex = 0;
}


TEST_F(Test_AT_SetURSMPara, AT_SetURSMPara_011)
{
	gucAtParaIndex = 6;

	gastAtParaList[1].ulParaValue = SI_PIH_ACCESS_WRITE;

	gastAtParaList[4].usParaLen = 10;

	gastAtParaList[5].usParaLen = 4;

	gastAtParaList[0].ulParaValue = 0;

	gastAtParaList[2].ulParaValue = 0x6F07;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnObjectList(AT_SUCCESS, AT_SUCCESS));

	MOCKER(SI_PIH_AccessUICCFileReq)
		.stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

	EXPECT_EQ(AT_ERROR, AT_SetURSMPara(0));

	gastAtParaList[4].usParaLen = 0;

	gastAtParaList[5].usParaLen = 0;

	gastAtParaList[0].ulParaValue = 0;

	gucAtParaIndex = 0;
}


class Test_AT_SetKsNafAuthPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};

TEST_F(Test_AT_SetKsNafAuthPara, AT_SetKsNafAuthPara_001)
{
	gucAtParaIndex = 7;

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetKsNafAuthPara(0));

	gucAtParaIndex = 3;

	gastAtParaList[1].usParaLen = 0;

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetKsNafAuthPara(0));

	gucAtParaIndex = 3;

	gastAtParaList[1].usParaLen = 16;

	gastAtParaList[2].usParaLen = 0;

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetKsNafAuthPara(0));

	gastAtParaList[1].usParaLen = 0;

	gastAtParaList[2].usParaLen = 0;

	gucAtParaIndex = 0;
}


TEST_F(Test_AT_SetKsNafAuthPara, AT_SetKsNafAuthPara_002)
{
	gucAtParaIndex = 3;

	gastAtParaList[1].usParaLen = 16;

	gastAtParaList[2].usParaLen = 16;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnObjectList(AT_FAILURE));

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetKsNafAuthPara(0));

	gastAtParaList[1].usParaLen = 0;

	gastAtParaList[2].usParaLen = 0;

	gucAtParaIndex = 0;
}


TEST_F(Test_AT_SetKsNafAuthPara, AT_SetKsNafAuthPara_003)
{
	gucAtParaIndex = 3;

	gastAtParaList[1].usParaLen = 16;

	gastAtParaList[2].usParaLen = 16;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnObjectList(AT_SUCCESS,AT_FAILURE));

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetKsNafAuthPara(0));

	gastAtParaList[1].usParaLen = 0;

	gastAtParaList[2].usParaLen = 0;

	gucAtParaIndex = 0;
}


TEST_F(Test_AT_SetKsNafAuthPara, AT_SetKsNafAuthPara_004)
{
	gucAtParaIndex = 3;

	gastAtParaList[1].usParaLen = 300;

	gastAtParaList[2].usParaLen = 16;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnObjectList(AT_SUCCESS,AT_SUCCESS));

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetKsNafAuthPara(0));

	gastAtParaList[1].usParaLen = 0;

	gastAtParaList[2].usParaLen = 0;

	gucAtParaIndex = 0;
}


TEST_F(Test_AT_SetKsNafAuthPara, AT_SetKsNafAuthPara_005)
{
	gucAtParaIndex = 3;

	gastAtParaList[1].usParaLen = 16;

	gastAtParaList[2].usParaLen = 16;

	gastAtParaList[0].ulParaValue = 2;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnObjectList(AT_SUCCESS,AT_SUCCESS));

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetKsNafAuthPara(0));

	gastAtParaList[1].usParaLen = 0;

	gastAtParaList[2].usParaLen = 0;

	gastAtParaList[0].ulParaValue = 0;

	gucAtParaIndex = 0;
}


TEST_F(Test_AT_SetKsNafAuthPara, AT_SetKsNafAuthPara_006)
{
	gucAtParaIndex = 3;

	gastAtParaList[1].usParaLen = 16;

	gastAtParaList[2].usParaLen = 16;

	gastAtParaList[0].ulParaValue = 2;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnObjectList(AT_SUCCESS,AT_FAILURE));

	EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, AT_SetKsNafAuthPara(0));

	gastAtParaList[1].usParaLen = 0;

	gastAtParaList[2].usParaLen = 0;

	gastAtParaList[0].ulParaValue = 0;

	gucAtParaIndex = 0;
}


TEST_F(Test_AT_SetKsNafAuthPara, AT_SetKsNafAuthPara_007)
{
	gucAtParaIndex = 3;

	gastAtParaList[1].usParaLen = 16;

	gastAtParaList[2].usParaLen = 16;

	gastAtParaList[0].ulParaValue = 0;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnObjectList(AT_SUCCESS,AT_SUCCESS));

	MOCKER(SI_PIH_UiccAuthReq)
		.stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

	EXPECT_EQ(AT_WAIT_ASYNC_RETURN, AT_SetKsNafAuthPara(0));

	gastAtParaList[1].usParaLen = 0;

	gastAtParaList[2].usParaLen = 0;

	gastAtParaList[0].ulParaValue = 0;

	gucAtParaIndex = 0;
}


TEST_F(Test_AT_SetKsNafAuthPara, AT_SetKsNafAuthPara_008)
{
	gucAtParaIndex = 3;

	gastAtParaList[1].usParaLen = 16;

	gastAtParaList[2].usParaLen = 16;

	gastAtParaList[0].ulParaValue = 1;

	MOCKER(At_AsciiNum2HexString)
		.stubs()
        .will(returnObjectList(AT_SUCCESS,AT_SUCCESS));

	MOCKER(SI_PIH_UiccAuthReq)
		.stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

	EXPECT_EQ(AT_ERROR, AT_SetKsNafAuthPara(0));

	gastAtParaList[1].usParaLen = 0;

	gastAtParaList[2].usParaLen = 0;

	gastAtParaList[0].ulParaValue = 0;

	gucAtParaIndex = 0;
}

#endif
#endif



class Test_At_SetAntSwitchPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetAntSwitchPara, Test_At_SetAntSwitchPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_READ_CMD;
    gucAtParaIndex              = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetAntSwitchPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAntSwitchPara, Test_At_SetAntSwitchPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetAntSwitchPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_TOO_MANY_PARA, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAntSwitchPara, Test_At_SetAntSwitchPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 1;
    gastAtParaList[0].usParaLen = 0;
    gastAtParaList[0].ulParaValue = 1;

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetAntSwitchPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAntSwitchPara, Test_At_SetAntSwitchPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 2;

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetAntSwitchPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAntSwitchPara, Test_At_SetAntSwitchPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulRet = At_SetAntSwitchPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CMD_ANTSWITCH_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAntSwitchPara, Test_At_SetAntSwitchPara_006)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_INVALID;
    gucAtParaIndex              = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    // 调用被测函数
    ulRet = At_SetAntSwitchPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CMD_INVALID, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}

#if 0
#if (FEATURE_ON == FEATURE_IMS)

class Test_AT_SetCacmimsPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        AT_InitCtx();
    }
    void TearDown()
    {
        AT_InitCtx();
    }
};

TEST_F(Test_AT_SetCacmimsPara, Test_AT_SetCacmimsPara_001)
{
    // 变量声明
    TAF_UINT8                           ucIndex = AT_CLIENT_TAB_PCUI_INDEX;
    VOS_UINT32                          ulRslt;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType             = AT_CMD_OPT_SET_CMD_NO_PARA;

    // MOCKER操作

    // 调用被测函数
    ulRslt = AT_SetCacmimsPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRslt);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCacmimsPara, Test_AT_SetCacmimsPara_002)
{
    // 变量声明
    TAF_UINT8                           ucIndex = AT_CLIENT_TAB_PCUI_INDEX;
    VOS_UINT32                          ulRslt;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 2;

    // MOCKER操作

    // 调用被测函数
    ulRslt = AT_SetCacmimsPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRslt);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCacmimsPara, Test_AT_SetCacmimsPara_003)
{
    // 变量声明
    TAF_UINT8                           ucIndex = AT_CLIENT_TAB_PCUI_INDEX;
    VOS_UINT32                          ulRslt;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "+86123456789@", strlen("+86123456789@"));
    gastAtParaList[0].usParaLen         = strlen("+86123456789@");

    // MOCKER操作

    // 调用被测函数
    ulRslt = AT_SetCacmimsPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRslt);
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCacmimsPara, Test_AT_SetCacmimsPara_004)
{
    // 变量声明
    TAF_UINT8                           ucIndex = AT_CLIENT_TAB_PCUI_INDEX;
    VOS_UINT32                          ulRslt;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "+86123456789", strlen("+86123456789"));
    gastAtParaList[0].usParaLen         = strlen("+86123456789");

    // MOCKER操作
    MOCKER(MN_CALL_Orig)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRslt = AT_SetCacmimsPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRslt);
    GlobalMockObject::verify();
}



TEST_F(Test_AT_SetCacmimsPara, Test_AT_SetCacmimsPara_005)
{
    // 变量声明
    TAF_UINT8                           ucIndex = AT_CLIENT_TAB_PCUI_INDEX;
    VOS_UINT32                          ulRslt;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "123456789", strlen("123456789"));
    gastAtParaList[0].usParaLen         = strlen("123456789");

    // MOCKER操作
    MOCKER(MN_CALL_Orig)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRslt = AT_SetCacmimsPara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRslt);
    GlobalMockObject::verify();
}
#endif
#endif

class Test_AT_SetModemStatusPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetModemStatusPara, Test_AT_SetModemStatusPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_CHAR                           *pcLogStr;

    //参数初始化
    pcLogStr                            = "AT_SetModemStatusPara: too many parameters.";

    // 初始化全局变量;
    gucAtParaIndex                      = 1;

    // 调用被测函数
    ulRet = AT_SetModemStatusPara(0);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetModemStatusPara, Test_AT_SetModemStatusPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_CHAR                           *pcLogStr;

    //参数初始化
    pcLogStr                            = "AT_SetModemStatusPara: AT_FillAndSndAppReqMsg fail.";

    // 初始化全局变量;
    gucAtParaIndex                      = 2;
    g_stATParseCmd.ucCmdOptType         = AT_CMD_MODEMSTATUS;
    gastAtParaList[0].ulParaValue       = 0xFFFF;
    gastAtParaList[0].usParaLen         = 2;

    // 调用被测函数
    ulRet = AT_SetModemStatusPara(0);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetModemStatusPara, Test_AT_SetModemStatusPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_CHAR                           *pcLogStr;

    //参数初始化

    // 初始化全局变量;
    gucAtParaIndex                      = 2;
    g_stATParseCmd.ucCmdOptType         = AT_CMD_MODEMSTATUS;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[1].ulParaValue       = 0xFFFF;
    gastAtParaList[1].usParaLen         = 2;

    // 调用被测函数
    ulRet = AT_SetModemStatusPara(0);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetModemStatusPara, Test_AT_SetModemStatusPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_CHAR                           *pcLogStr;

    //参数初始化

    // 初始化全局变量;
    gucAtParaIndex                      = 2;
    g_stATParseCmd.ucCmdOptType         = AT_CMD_MODEMSTATUS;
    gastAtParaList[0].ulParaValue       = 0;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[1].ulParaValue       = 1;
    gastAtParaList[1].usParaLen         = 1;



    // 调用被测函数
    ulRet = AT_SetModemStatusPara(0);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetModemStatusPara, Test_AT_SetModemStatusPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    //参数初始化

    // 初始化全局变量;
    gucAtParaIndex                      = 2;
    g_stATParseCmd.ucCmdOptType         = AT_CMD_MODEMSTATUS;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[1].ulParaValue       = 1;
    gastAtParaList[1].usParaLen         = 1;

    MOCKER(V_AllocMsg)
        .stubs()
        .will(returnValue((MsgBlock*)VOS_NULL_PTR));

    // 调用被测函数
    ulRet = AT_SetModemStatusPara(0);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetModemStatusPara, Test_AT_SetModemStatusPara_006)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    //参数初始化

    // 初始化全局变量;
    gucAtParaIndex                      = 2;
    g_stATParseCmd.ucCmdOptType         = AT_CMD_MODEMSTATUS;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[1].ulParaValue       = 1;
    gastAtParaList[1].usParaLen         = 1;

    // 调用被测函数
    ulRet = AT_SetModemStatusPara(0);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}



class Test_AT_SetRATCombinePara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
		gucAtParaIndex = 1;
    }
    void TearDown()
    {
		gucAtParaIndex = 1;
    }
};


TEST_F(Test_AT_SetRATCombinePara, Test_AT_SetRATCombinePara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
	VOS_UINT8							ucIndex;

    //参数初始化
	ucIndex = 0;

    // 初始化全局变量;
    gucAtParaIndex                      = 2;

    // 调用被测函数
    ulRet = AT_SetRATCombinePara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetRATCombinePara, Test_AT_SetRATCombinePara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
	VOS_UINT8							ucIndex;

    //参数初始化
	ucIndex = 0;

    // 初始化全局变量;

	// MOCKER操作;
	MOCKER(NV_ReadEx)
		.expects(exactly(1))
		.will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = AT_SetRATCombinePara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetRATCombinePara, Test_AT_SetRATCombinePara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
	VOS_UINT8							ucIndex;
	TAF_NV_LC_CTRL_PARA_STRU			stCtrlData;

    //参数初始化
	ucIndex = 0;
	stCtrlData.ucLCEnableFlg = VOS_FALSE;

    // 初始化全局变量;

	// MOCKER操作;
	MOCKER(NV_ReadEx)
		.expects(exactly(1))
		.with(any(), any(), outBoundP((void *)&stCtrlData,(VOS_UINT32)sizeof(stCtrlData)), any())
		.will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetRATCombinePara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_CME_OPERATION_NOT_ALLOWED, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetRATCombinePara, Test_AT_SetRATCombinePara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
	VOS_UINT8							ucIndex;
	TAF_NV_LC_CTRL_PARA_STRU			stCtrlData;

    //参数初始化
	ucIndex = 0;
	stCtrlData.ucLCEnableFlg = VOS_TRUE;

    // 初始化全局变量;
	gastAtParaList[0].ulParaValue = 0;

	// MOCKER操作;
	MOCKER(NV_ReadEx)
		.expects(exactly(1))
		.with(any(), any(), outBoundP((void *)&stCtrlData,(VOS_UINT32)sizeof(stCtrlData)), any())
		.will(returnValue((VOS_UINT32)VOS_OK));

	MOCKER(NV_WriteEx)
		.expects(exactly(1))
		.will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetRATCombinePara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_OK, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetRATCombinePara, Test_AT_SetRATCombinePara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;
	VOS_UINT8							ucIndex;
	TAF_NV_LC_CTRL_PARA_STRU			stCtrlData;

    //参数初始化
	ucIndex = 0;
	stCtrlData.ucLCEnableFlg = VOS_TRUE;

    // 初始化全局变量;
	gastAtParaList[0].ulParaValue = 1;

	// MOCKER操作;
	MOCKER(NV_ReadEx)
		.expects(exactly(1))
		.with(any(), any(), outBoundP((void *)&stCtrlData,(VOS_UINT32)sizeof(stCtrlData)), any())
		.will(returnValue((VOS_UINT32)VOS_OK));

	MOCKER(NV_WriteEx)
		.expects(exactly(1))
		.will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRet = AT_SetRATCombinePara(ucIndex);

    // 执行检查
    EXPECT_EQ(AT_ERROR, ulRet);

    GlobalMockObject::verify();
}

#if (FEATURE_ON == FEATURE_DSDS)

class Test_At_SetPsProtectModePara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex = 0;
    }
    void TearDown()
    {

    }
protected:
    VOS_UINT8                   ucIndex;
};


TEST_F(Test_At_SetPsProtectModePara, Test_At_SetPsProtectModePara001)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;

    /* 初始化变量 */

    /* 全局变量赋值 */
    gastAtClientTab[ucIndex].usClientId = 0;
    gastAtClientTab[ucIndex].opId       = 0;
    gastAtParaList[0].usParaLen         = 0;
    gastAtParaList[0].ulParaValue       = 0;
    gucAtParaIndex                      = 1;

    /* 桩函数 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用消息入口函数 */
    ulRst = At_SetPsProtectModePara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetPsProtectModePara, Test_At_SetPsProtectModePara002)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    AT_MTA_RRC_PROTECT_PS_REQ_STRU      stPsProtectSetPara;
    /* 初始化变量 */
    VOS_MemSet(&stPsProtectSetPara, 0, sizeof(AT_MTA_RRC_PROTECT_PS_REQ_STRU));
    stPsProtectSetPara.enPsProtectFlg  = 0;
    /* 全局变量赋值 */
    gastAtClientTab[ucIndex].usClientId = 0;
    gastAtClientTab[ucIndex].opId       = 0;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 0;
    gucAtParaIndex                      = 1;

    /* 桩函数 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .with(any(), any(), eq((VOS_UINT16)ID_AT_MTA_RRC_PROTECT_PS_REQ), mirror((void *)&stPsProtectSetPara, (VOS_UINT32)sizeof(stPsProtectSetPara)),any(),eq((VOS_UINT32)I0_UEPS_PID_MTA))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));
    /* 调用消息入口函数 */
    ulRst = At_SetPsProtectModePara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetPsProtectModePara, Test_At_SetPsProtectModePara003)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;

    /* 初始化变量 */

    /* 全局变量赋值 */
    gastAtClientTab[ucIndex].usClientId = 0;
    gastAtClientTab[ucIndex].opId       = 0;

    /* 桩函数 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    /* 调用消息入口函数 */
    ulRst = At_SetPsProtectModePara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetPsProtectModePara, Test_At_SetPsProtectModePara004)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;

    /* 初始化变量 */

    /* 全局变量赋值 */
    gastAtClientTab[ucIndex].usClientId = 0;
    gastAtClientTab[ucIndex].opId       = 0;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 0;
    gucAtParaIndex                      = 2;

    /* 桩函数 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用消息入口函数 */
    ulRst = At_SetPsProtectModePara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_TOO_MANY_PARA, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetPsProtectModePara, Test_At_SetPsProtectModePara005)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    AT_MTA_RRC_PROTECT_PS_REQ_STRU      stPsProtectSetPara;
    /* 初始化变量 */
    VOS_MemSet(&stPsProtectSetPara, 0, sizeof(AT_MTA_RRC_PROTECT_PS_REQ_STRU));
    stPsProtectSetPara.enPsProtectFlg = 1;
    /* 全局变量赋值 */
    gastAtClientTab[ucIndex].usClientId = 0;
    gastAtClientTab[ucIndex].opId       = 0;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 1;
    gucAtParaIndex                      = 1;

    /* 桩函数 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .with(any(), any(), eq((VOS_UINT16)ID_AT_MTA_RRC_PROTECT_PS_REQ), mirror((void *)&stPsProtectSetPara, (VOS_UINT32)sizeof(stPsProtectSetPara)),any(),eq((VOS_UINT32)I0_UEPS_PID_MTA))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /* 调用消息入口函数 */
    ulRst = At_SetPsProtectModePara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_ERROR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();

}
#endif
class Test_At_SetPhyInitPara: public ::testing::Test
{
public:
    void SetUp()
	{
		UT_STUB_INIT();
        ucIndex = 0;
    }
    void TearDown()
    {

    }
protected:
    VOS_UINT8                   ucIndex;
};


TEST_F(Test_At_SetPhyInitPara, Test_At_SetPhyInitPara001)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;

    /* 初始化变量 */

    /* 全局变量赋值 */
    gastAtClientTab[ucIndex].usClientId = 0;
    gastAtClientTab[ucIndex].opId       = 0;
    gastAtParaList[0].usParaLen         = 0;
    gastAtParaList[0].ulParaValue       = 0;
    gucAtParaIndex                      = 0;

    /* 桩函数 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用消息入口函数 */
    ulRst = At_SetPhyInitPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_CME_INCORRECT_PARAMETERS, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetPhyInitPara, Test_At_SetPhyInitPara002)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;

    /* 初始化变量 */

    /* 全局变量赋值 */
    gastAtClientTab[ucIndex].usClientId = 0;
    gastAtClientTab[ucIndex].opId       = 0;
    gastAtParaList[0].usParaLen         = 0;
    gastAtParaList[0].ulParaValue       = 0;
    gucAtParaIndex                      = 1;

    /* 桩函数 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    /* 调用消息入口函数 */
    ulRst = At_SetPhyInitPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_TOO_MANY_PARA, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetPhyInitPara, Test_At_SetPhyInitPara003)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    AT_MTA_PHY_INIT_REQ_STRU            stPhyInit;

    /* 初始化变量 */
    VOS_MemSet(&stPhyInit, 0, sizeof(AT_MTA_PHY_INIT_REQ_STRU));

    /* 全局变量赋值 */
    gastAtClientTab[ucIndex].usClientId = 0;
    gastAtClientTab[ucIndex].opId       = 0;
    gastAtParaList[0].usParaLen         = 0;
    gastAtParaList[0].ulParaValue       = 0;
    gucAtParaIndex                      = 0;

    /* 桩函数 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    /* 调用消息入口函数 */
    ulRst = At_SetPhyInitPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_WAIT_ASYNC_RETURN, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetPhyInitPara, Test_At_SetPhyInitPara004)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    AT_MTA_PHY_INIT_REQ_STRU            stPhyInit;

    /* 初始化变量 */
    VOS_MemSet(&stPhyInit, 0, sizeof(AT_MTA_PHY_INIT_REQ_STRU));

    /* 全局变量赋值 */
    gastAtClientTab[ucIndex].usClientId = 0;
    gastAtClientTab[ucIndex].opId       = 0;
    gastAtParaList[0].usParaLen         = 0;
    gastAtParaList[0].ulParaValue       = 0;
    gucAtParaIndex                      = 0;

    /* 桩函数 */
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /* 调用消息入口函数 */
    ulRst = At_SetPhyInitPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ(AT_ERROR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}



/**************************以下用例NAS2负责**********************************/



class Test_At_SetGlastErrPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        ucIndex = 0;
        g_stParseContext[ucIndex].pstCmdElement = &gstGlastErrCmdInfo;
    }
    void TearDown()
    {

    }
protected:
    VOS_UINT8                   ucIndex;
};


TEST_F(Test_At_SetGlastErrPara, Test_At_SetGlastErrPara_001)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;

    /* 初始化变量 */

    /* 全局变量赋值 */
    gucPppDialErrCodeRpt = PPP_DIAL_ERR_CODE_DISABLE;

    gastAtClientTab[ucIndex].usClientId = 0;
    gastAtClientTab[ucIndex].opId       = 0;

    /* 调用消息入口函数 */
    ulRst = At_SetGlastErrPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetGlastErrPara, Test_At_SetGlastErrPara_002)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;

    /* 初始化变量 */

    /* 全局变量赋值 */
    gucPppDialErrCodeRpt = PPP_DIAL_ERR_CODE_ENABLE;

    gastAtClientTab[ucIndex].usClientId = 0;
    gastAtClientTab[ucIndex].opId       = 0;

    gucAtParaIndex = 2;

    /* 调用消息入口函数 */
    ulRst = At_SetGlastErrPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetGlastErrPara, Test_At_SetGlastErrPara_003)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;

    /* 初始化变量 */

    /* 全局变量赋值 */
    gucPppDialErrCodeRpt = PPP_DIAL_ERR_CODE_ENABLE;

    gastAtClientTab[ucIndex].usClientId = 0;
    gastAtClientTab[ucIndex].opId       = 0;

    gucAtParaIndex = 0;
    gastAtParaList[0].usParaLen = 0;

    /* 调用消息入口函数 */
    ulRst = At_SetGlastErrPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetGlastErrPara, Test_At_SetGlastErrPara_004)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;

    /* 初始化变量 */

    /* 全局变量赋值 */
    gucPppDialErrCodeRpt = PPP_DIAL_ERR_CODE_ENABLE;

    gastAtClientTab[ucIndex].usClientId = 0;
    gastAtClientTab[ucIndex].opId       = 0;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 2;

    /* 调用消息入口函数 */
    ulRst = At_SetGlastErrPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetGlastErrPara, Test_At_SetGlastErrPara_005)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;

    /* 初始化变量 */

    /* 全局变量赋值 */
    gucPppDialErrCodeRpt = PPP_DIAL_ERR_CODE_ENABLE;

    gastAtClientTab[ucIndex].usClientId = 0;
    gastAtClientTab[ucIndex].opId       = 0;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    AT_PS_SetPsCallErrCause(0,TAF_PS_CAUSE_SUCCESS);

    /* 调用消息入口函数 */
    ulRst = At_SetGlastErrPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetGlastErrPara, Test_At_SetGlastErrPara_006)
{
    /*变量定义*/
    VOS_UINT32                          ulRst = 0;
    VOS_CHAR                           *pcExpactedStr;

    /* 初始化变量 */

    /* 全局变量赋值 */
    gucPppDialErrCodeRpt = PPP_DIAL_ERR_CODE_ENABLE;
    pcExpactedStr = "^GLASTERR: 1,0";

    gastAtClientTab[ucIndex].usClientId = 0;
    gastAtClientTab[ucIndex].opId       = 0;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    AT_PS_SetPsCallErrCause(0,TAF_PS_CAUSE_SIM_INVALID);

    /* 调用消息入口函数 */
    ulRst = At_SetGlastErrPara(ucIndex);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_OK, ulRst);
    ASSERT_STREQ(pcExpactedStr, (TAF_CHAR *)pgucAtSndCodeAddr);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


/* Deleted by y00322978 for CDMA 1X Iteration 11, 2015-4-11, begin */

/* Deleted by y00322978 for CDMA 1X Iteration 11, 2015-4-11, end */


TEST_F(Test_AT_SetCsqlvlPara,Test_AT_SetCsqlvlPara_002)
{
    // 变量声明
    VOS_UINT32                            ulRet;
    VOS_UINT8                            ucIndex;

    //参数初始化
    ucIndex     = 0;

    // 初始化全局变量;

    // MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulRet = AT_SetCsqlvlPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CSQLVL_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    GlobalMockObject::verify();
}



class Test_AT_SetCdurPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        gucAtParaIndex                    = 1;
        gastAtParaList[0].usParaLen        = 1;
        gastAtParaList[0].ulParaValue    = 0;
    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetCdurPara,Test_AT_SetCdurPara_001)
{
    // 变量声明
    VOS_UINT32                            ulRet;
    VOS_CHAR                           *pcLogStr;

    //参数初始化
    pcLogStr = "AT_SetCdurPara: MN_FillAndSndAppReqMsg fail.";

    // 初始化全局变量;

    // MOCKER操作;
    MOCKER(MN_CALL_SendAppRequest)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_SEND_MSG_ERROR));

    // 调用被测函数
    ulRet = AT_SetCdurPara(0);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCdurPara,Test_AT_SetCdurPara_002)
{
    // 变量声明
    VOS_UINT32                            ulRet;

    //参数初始化

    // 初始化全局变量;

    // MOCKER操作;
    MOCKER(MN_CALL_SendAppRequest)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_NO_ERROR));

    // 调用被测函数
    ulRet = AT_SetCdurPara(0);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CDUR_READ, gastAtClientTab[0].CmdCurrentOpt);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCdurPara,Test_AT_SetCdurPara_003)
{
    // 变量声明
    VOS_UINT32                            ulRet;

    //参数初始化

    // 初始化全局变量;
    gucAtParaIndex = 2;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetCdurPara(0);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_TOO_MANY_PARA, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCdurPara,Test_AT_SetCdurPara_004)
{
    // 变量声明
    VOS_UINT32                            ulRet;

    //参数初始化

    // 初始化全局变量;
    gucAtParaIndex = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetCdurPara(0);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCdurPara,Test_AT_SetCdurPara_005)
{
    // 变量声明
    VOS_UINT32                            ulRet;

    //参数初始化

    // 初始化全局变量;
    gucAtParaIndex                    = 1;
    gastAtParaList[0].usParaLen        = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetCdurPara(0);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCdurPara,Test_AT_SetCdurPara_006)
{
    // 变量声明
    VOS_UINT32                            ulRet;

    //参数初始化

    // 初始化全局变量;
    gucAtParaIndex                    = 1;
    gastAtParaList[0].usParaLen        = 1;
    gastAtParaList[0].ulParaValue    = (AT_CALL_MAX_NUM + 1);

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetCdurPara(0);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}

#if 0

class Test_At_SetCmStubPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCmStubPara,Test_At_SetCmStubPara_001)
{
    // 变量声明
    VOS_UINT32                            ulRet;

    //参数初始化

    // 初始化全局变量;
    gucAtParaIndex                    = 3;
    gastAtParaList[0].usParaLen       = 1;
    gastAtParaList[0].ulParaValue     = MN_MSG_STUB_TYPE_SMS_AUTO_REPLY;

    // MOCKER操作;

    // 调用被测函数
    ulRet = At_SetCmStubPara(0);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CMS_OPERATION_NOT_ALLOWED, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCmStubPara,Test_At_SetCmStubPara_002)
{
    // 变量声明
    VOS_UINT32                            ulRet;

    //参数初始化

    // 初始化全局变量;
    gucAtParaIndex                    = 2;
    gastAtParaList[0].usParaLen       = 1;
    gastAtParaList[1].usParaLen       = 1;
    gastAtParaList[0].ulParaValue     = MN_MSG_STUB_TYPE_SMS_AUTO_REPLY;
    gastAtParaList[1].ulParaValue     = 1;

    // MOCKER操作;
    MOCKER(AT_StubTriggerAutoReply)
        .expects(exactly(1));

    // 调用被测函数
    ulRet = At_SetCmStubPara(0);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_OK, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCmStubPara,Test_At_SetCmStubPara_003)
{
    // 变量声明
    VOS_UINT32                            ulRet;

    //参数初始化

    // 初始化全局变量;
    gucAtParaIndex                    = 2;
    gastAtParaList[0].usParaLen       = 1;
    gastAtParaList[1].usParaLen       = 1;
    gastAtParaList[0].ulParaValue     = MN_MSG_STUB_TYPE_CLASS0_TAILOR;
    gastAtParaList[1].ulParaValue     = MN_MSG_CLASS0_DEF;

    g_enClass0Tailor                  = 0;

    // MOCKER操作;
    MOCKER(Ps_SendMsg)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = At_SetCmStubPara(0);

    // 执行检查
    EXPECT_EQ((MN_MSG_CLASS0_TAILOR_U8)MN_MSG_CLASS0_DEF, g_enClass0Tailor);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CMSTUB_SET, gastAtClientTab[0].CmdCurrentOpt);
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCmStubPara,At_SetCmStubPara_004)
{
    // 变量声明
    VOS_UINT32                            ulRet;

    //参数初始化

    // 初始化全局变量;
    gucAtParaIndex                    = 2;
    gastAtParaList[0].usParaLen       = 1;
    gastAtParaList[1].usParaLen       = 1;
    gastAtParaList[0].ulParaValue     = MN_MSG_STUB_TYPE_PP_DOWNLOAD_RSP_TYPE;
    gastAtParaList[1].ulParaValue     = 1;

    // MOCKER操作;
    MOCKER(MN_MSG_ReqStub)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)MN_ERR_NULLPTR));

    // 调用被测函数
    ulRet = At_SetCmStubPara(0);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)MN_ERR_NULLPTR, ulRet);

    GlobalMockObject::verify();
}



class Test_At_SetHPara: public ::testing::Test
{
public:
    VOS_UINT8                           ucIndex;

    void SetUp()
    {
        UT_STUB_INIT();
        ucIndex                                = 0;
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_H_SET;
        gastAtClientTab[ucIndex].UserType      = AT_COM_USER;
        gastAtClientTab[ucIndex].ucUsed        = AT_CLIENT_USED;

    }

    void TearDown()
    {
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_H_SET;
        gastAtClientTab[ucIndex].UserType      = AT_COM_USER;
        gastAtClientTab[ucIndex].ucUsed        = AT_CLIENT_USED;

        gucAtParaIndex                         = 0;
    }
};


TEST_F(Test_At_SetHPara,Test_At_SetHPara_001)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    gastAtClientTab[ucIndex].UserType  = AT_MODEM_USER;
    gastAtClientTab[ucIndex].ucUsed    = AT_CLIENT_USED;

    /* 函数打桩 */

    /* 调用被测函数 */
    ulRst = At_SetHPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ((VOS_UINT32)AT_OK, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetHPara,Test_At_SetHPara_002)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 函数打桩 */
    MOCKER(MN_CALL_Sups)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    /* 调用被测函数 */
    ulRst = At_SetHPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetHPara,Test_At_SetHPara_003)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 函数打桩 */
    MOCKER(MN_CALL_Sups)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    /* 调用被测函数 */
    ulRst = At_SetHPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetHPara,Test_At_SetHPara_004)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 全局变量定义 */
    gastAtClientTab[ucIndex].UserType   = AT_HSUART_USER;
    gastAtClientTab[ucIndex].Mode       = AT_CMD_MODE;

    /* 函数打桩 */

    /* 调用被测函数 */
    ulRst = At_SetHPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_OK, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetHPara,Test_At_SetHPara_005)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 全局变量定义 */
    gastAtClientTab[ucIndex].UserType       = AT_HSUART_USER;
    gastAtClientTab[ucIndex].Mode           = AT_ONLINE_CMD_MODE;
    gastAtClientTab[ucIndex].CmdCurrentOpt  = AT_CMD_PS_DATA_CALL_END_SET;

    /* 函数打桩 */

    /* 调用被测函数 */
    ulRst = At_SetHPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_H_PS_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetHPara,Test_At_SetHPara_006)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 全局变量定义 */
    gastAtClientTab[ucIndex].UserType       = AT_HSUART_USER;
    gastAtClientTab[ucIndex].Mode           = AT_ONLINE_CMD_MODE;
    gastAtClientTab[ucIndex].CmdCurrentOpt  = AT_CMD_WAIT_PPP_PROTOCOL_REL_SET;

    /* 函数打桩 */

    /* 调用被测函数 */
    ulRst = At_SetHPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_SUCCESS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetHPara,Test_At_SetHPara_007)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 全局变量定义 */
    gastAtClientTab[ucIndex].UserType       = AT_HSUART_USER;
    gastAtClientTab[ucIndex].Mode           = AT_ONLINE_CMD_MODE;
    gastAtClientTab[ucIndex].CmdCurrentOpt  = AT_CMD_D_PPP_CALL_SET;

    /* 函数打桩 */
    MOCKER(TAF_PS_CallEnd)
    .expects(exactly(1));

    /* 调用被测函数 */
    ulRst = At_SetHPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_H_PS_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
class Test_At_SetChupPara: public ::testing::Test
{
public:
    VOS_UINT8                           ucIndex;

    void SetUp()
    {
        UT_STUB_INIT();
        ucIndex                                = 0;
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_CHUP_SET;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

    }

    void TearDown()
    {
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_CHUP_SET;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

        gucAtParaIndex                         = 0;
    }
};


TEST_F(Test_At_SetChupPara,Test_At_SetChupPara_001)
{
    // 参数定义
    VOS_UINT32   ulRst;

    // 参数初始化

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_READ_CMD;

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetChupPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



TEST_F(Test_At_SetChupPara,Test_At_SetChupPara_002)
{
    // 参数定义
    VOS_UINT32      ulRst;

    // 参数初始化

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    // MOCKER操作;
    MOCKER(MN_CALL_Sups)
        .expects(exactly(1))
        .with(any(),any(),any())
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRst = At_SetChupPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CHUP_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetChupPara,Test_At_SetChupPara_003)
{
    // 参数定义
    VOS_UINT32      ulRst;

    // 参数初始化

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    // MOCKER操作;
    MOCKER(MN_CALL_Sups)
        .expects(exactly(1))
        .with(any(),any(),any())
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    // 调用被测函数
    ulRst = At_SetChupPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}



class Test_At_SetClccPara: public ::testing::Test
{
public:
    VOS_UINT8                           ucIndex;

    void SetUp()
    {
        UT_STUB_INIT();
        ucIndex                                = 0;
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_CLCC_SET;
        gastAtClientTab[ucIndex].opId          = 0;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

    }

    void TearDown()
    {
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_CLCC_SET;
        gastAtClientTab[ucIndex].opId          = 0;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

        gucAtParaIndex                         = 0;
    }
};


TEST_F(Test_At_SetClccPara,Test_At_SetClccPara_001)
{
    // 参数定义
    VOS_UINT32   ulRst;

    // 参数初始化

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_READ_CMD;

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetClccPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClccPara,Test_At_SetClccPara_002)
{
    // 参数定义
    VOS_UINT32      ulRst;

    // 参数初始化

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    // MOCKER操作;
    MOCKER(MN_CALL_GetCallInfos)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRst = At_SetClccPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CLCC_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClccPara,Test_At_SetClccPara_003)
{
    // 参数定义
    VOS_UINT32      ulRst;

    // 参数初始化

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    // MOCKER操作;
    MOCKER(MN_CALL_GetCallInfos)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    // 调用被测函数
    ulRst = At_SetClccPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}



class Test_At_SetCmmPara: public ::testing::Test
{
public:
    VOS_UINT8       ucIndex;

    void SetUp()
    {
        UT_STUB_INIT();
        ucIndex                     = 0;
        gucAtParaIndex              = 0;
        gastAtParaList[0].usParaLen = 0;
        g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_BUTT;
    }

    void TearDown()
    {
        ucIndex                     = 0;
        gucAtParaIndex              = 0;
        gastAtParaList[0].usParaLen =0;
        g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_BUTT;
    }

};


TEST_F(Test_At_SetCmmPara,Test_At_SetCmmPara_001)
{
    /* 变量初始化 */
    gucAtParaIndex              = 3;

    EXPECT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetCmmPara(ucIndex));

}
TEST_F(Test_At_SetCmmPara,Test_At_SetCmmPara_002)
{
    /* 变量初始化 */
    gucAtParaIndex                  = 2;
    gastAtParaList[1].ulParaValue   = 1;

    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    /* 调用测试函数 */
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, At_SetCmmPara(ucIndex));

    /* 结果验证 */
    ASSERT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_MM_TEST_CMD_SET,gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetCmmPara,Test_At_SetCmmPara_003)
{
    /* 变量初始化 */
    gucAtParaIndex                  = 2;
    gastAtParaList[1].ulParaValue   = 1;

    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    /* 调用测试函数 */
    EXPECT_EQ((TAF_UINT32)AT_ERROR, At_SetCmmPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
class Test_At_SetDPara: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};

TEST_F(Test_At_SetDPara,Test_At_SetDPara_01)
{
    AT_MODEM_CTX_STRU                  *pstAtModemCtx = VOS_NULL_PTR;

    g_astAtClientCtx[0].stClientConfiguration.enModemId = MODEM_ID_0;
    pstAtModemCtx = AT_GetModemCtxAddr(MODEM_ID_0);

    /*输入参数*/
    MOCKER(At_JudgeIfIsPsCall)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    pstAtModemCtx->stAtUsimInfoCtx.enCardStatus = USIMM_CARD_SERVIC_SIM_PIN;

    ASSERT_EQ((TAF_UINT32)AT_CME_SIM_PIN_REQUIRED, At_SetDPara(0));

    GlobalMockObject::verify();
}
TEST_F(Test_At_SetDPara,Test_At_SetDPara_02)
{
    AT_MODEM_CTX_STRU                  *pstAtModemCtx = VOS_NULL_PTR;

    pstAtModemCtx = AT_GetModemCtxAddr(MODEM_ID_0);

    /*输入参数*/
    MOCKER(At_JudgeIfIsPsCall)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    pstAtModemCtx->stAtUsimInfoCtx.enCardStatus = USIMM_CARD_SERVIC_SIM_PUK;

    ASSERT_EQ((TAF_UINT32)AT_CME_SIM_PUK_REQUIRED, At_SetDPara(0));

    GlobalMockObject::verify();
}
TEST_F(Test_At_SetDPara,Test_At_SetDPara_03)
{
    AT_MODEM_CTX_STRU                  *pstAtModemCtx = VOS_NULL_PTR;

    pstAtModemCtx = AT_GetModemCtxAddr(MODEM_ID_0);

    /*输入参数*/
    MOCKER(At_JudgeIfIsPsCall)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    pstAtModemCtx->stAtUsimInfoCtx.enCardStatus = USIMM_CARD_SERVIC_UNAVAILABLE;

    ASSERT_EQ((TAF_UINT32)AT_CME_SIM_FAILURE, At_SetDPara(0));

    GlobalMockObject::verify();
}
TEST_F(Test_At_SetDPara,Test_At_SetDPara_04)
{
    AT_MODEM_CTX_STRU                  *pstAtModemCtx = VOS_NULL_PTR;

    pstAtModemCtx = AT_GetModemCtxAddr(MODEM_ID_0);

    /*输入参数*/
    MOCKER(At_JudgeIfIsPsCall)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    pstAtModemCtx->stAtUsimInfoCtx.enCardStatus = USIMM_CARD_SERVIC_BUTT;

    ASSERT_EQ((TAF_UINT32)AT_ERROR, At_SetDPara(0));

    GlobalMockObject::verify();
}
TEST_F(Test_At_SetDPara,Test_At_SetDPara_05)
{
    /*输入参数*/
    MOCKER(At_JudgeIfIsPsCall)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    //MOCKER(TAF_GetUsimStatus)
    //    .stubs()
    //    .will(returnValue(TAF_ERR_NO_ERROR));

    MOCKER(At_CheckSemicolon)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ASSERT_EQ((TAF_UINT32)AT_ERROR, At_SetDPara(0));

    GlobalMockObject::verify();
}
TEST_F(Test_At_SetDPara,Test_At_SetDPara_06)
{
    /*输入参数*/
    gastAtParaList[0].usParaLen = 7;

    memcpy(gastAtParaList[0].aucPara,"D*9", gastAtParaList[0].usParaLen);

    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, At_SetDPara(0));

    GlobalMockObject::verify();
}
TEST_F(Test_At_SetDPara,Test_At_SetDPara_07)
{
    /*输入参数*/
    gastAtParaList[0].usParaLen = 13;

    memcpy(gastAtParaList[0].aucPara,"D138*00#0015;", gastAtParaList[0].usParaLen);

    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, At_SetDPara(0));

    GlobalMockObject::verify();
}
TEST_F(Test_At_SetDPara,Test_At_SetDPara_08)
{
    /*输入参数*/
    gastAtParaList[0].usParaLen = 4;

    memcpy(gastAtParaList[0].aucPara,"D117", gastAtParaList[0].usParaLen);

    gastAtParaList[1].usParaLen = 3;

    memcpy(gastAtParaList[1].aucPara,"117", gastAtParaList[1].usParaLen);

    MOCKER(At_JudgeIfIsPsCall)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    //MOCKER(TAF_GetUsimStatus)
    //    .stubs()
    //    .will(returnValue(TAF_ERR_NO_ERROR));

    MOCKER(At_SetDialNumPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    ASSERT_EQ((TAF_UINT32)AT_OK, At_SetDPara(0));

    GlobalMockObject::verify();
}
TEST_F(Test_At_SetDPara,Test_At_SetDPara_09)
{
    /*输入参数*/
    gastAtParaList[0].usParaLen = 5;

    memcpy(gastAtParaList[0].aucPara,"D117;", gastAtParaList[0].usParaLen);

    gastAtParaList[1].usParaLen = 4;

    memcpy(gastAtParaList[1].aucPara,"D117;", gastAtParaList[1].usParaLen);

    MOCKER(At_JudgeIfIsPsCall)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    //MOCKER(TAF_GetUsimStatus)
    //    .stubs()
    //    .will(returnValue(TAF_ERR_NO_ERROR));

    MOCKER(At_SetDialNumPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    ASSERT_EQ((TAF_UINT32)AT_OK, At_SetDPara(0));

    GlobalMockObject::verify();
}
TEST_F(Test_At_SetDPara,Test_At_SetDPara_10)
{
    /*输入参数*/
    gastAtParaList[0].usParaLen = 6;

    memcpy(gastAtParaList[0].aucPara,"D>117;", gastAtParaList[0].usParaLen);

    gastAtParaList[1].usParaLen = 5;

    memcpy(gastAtParaList[1].aucPara,">117;", gastAtParaList[1].usParaLen);

    gastAtParaList[2].usParaLen = 4;

    memcpy(gastAtParaList[2].aucPara,"117;", gastAtParaList[2].usParaLen);

    MOCKER(At_JudgeIfIsPsCall)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    //MOCKER(TAF_GetUsimStatus)
    //    .stubs()
    //    .will(returnValue(TAF_ERR_NO_ERROR));

    MOCKER(At_SetDialVoiceIndexPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    ASSERT_EQ((TAF_UINT32)AT_OK, At_SetDPara(0));

    GlobalMockObject::verify();
}
TEST_F(Test_At_SetDPara,Test_At_SetDPara_11)
{
    /*输入参数*/
    gastAtParaList[0].usParaLen = 6;

    memcpy(gastAtParaList[0].aucPara,"D>ABC;", gastAtParaList[0].usParaLen);

    gastAtParaList[1].usParaLen = 5;

    memcpy(gastAtParaList[1].aucPara,">ABC;", gastAtParaList[1].usParaLen);

    gastAtParaList[2].usParaLen = 4;

    memcpy(gastAtParaList[2].aucPara,"ABC;", gastAtParaList[2].usParaLen);

    MOCKER(At_JudgeIfIsPsCall)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    //MOCKER(TAF_GetUsimStatus)
    //    .stubs()
    //    .will(returnValue(TAF_ERR_NO_ERROR));

    MOCKER(At_SetDialVoiceMemPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    ASSERT_EQ((TAF_UINT32)AT_OK, At_SetDPara(0));

    GlobalMockObject::verify();
}
TEST_F(Test_At_SetDPara,Test_At_SetDPara_12)
{
    /*输入参数*/
    gastAtParaList[0].usParaLen = 6;

    memcpy(gastAtParaList[0].aucPara,"D>!@#;", gastAtParaList[0].usParaLen);

    gastAtParaList[1].usParaLen = 5;

    memcpy(gastAtParaList[1].aucPara,">!@#;", gastAtParaList[1].usParaLen);

    gastAtParaList[2].usParaLen = 4;

    memcpy(gastAtParaList[2].aucPara,"!@#;", gastAtParaList[2].usParaLen);

    MOCKER(At_JudgeIfIsPsCall)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_FALSE));

    //MOCKER(TAF_GetUsimStatus)
    //    .stubs()
    //    .will(returnValue(TAF_ERR_NO_ERROR));

    MOCKER(At_SetDialVoiceNamePara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    ASSERT_EQ((TAF_UINT32)AT_OK, At_SetDPara(0));

    GlobalMockObject::verify();
}
class Test_AT_SetCsqlvlExtPara: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};



TEST_F(Test_AT_SetCsqlvlExtPara, Test_AT_SetCsqlvlExtPara_001)
{
    VOS_UINT32                  ulRet;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    ulRet = AT_SetCsqlvlExtPara(0);

    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCsqlvlExtPara, Test_AT_SetCsqlvlExtPara_002)
{
    VOS_UINT32                  ulRet;

    MOCKER(Taf_ParaQuery)
        .stubs()
        .with(any(),any(),eq((TAF_PARA_TYPE)TAF_PH_CSQLVLEXT_VALUE_PARA),any())
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    ulRet = AT_SetCsqlvlExtPara(0);

    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRet);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCsqlvlExtPara,Test_AT_SetCsqlvlExtPara_003)
{
    VOS_UINT32                  ulRet;

    MOCKER(Taf_ParaQuery)
        .stubs()
        .with(any(),any(),eq((TAF_PARA_TYPE)TAF_PH_CSQLVLEXT_VALUE_PARA),any())
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    ulRet = AT_SetCsqlvlExtPara(0);

    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CSQLVLEXT_SET, gastAtClientTab[0].CmdCurrentOpt);
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRet);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_GetSmsStorage: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};


TEST_F(Test_At_GetSmsStorage, Test_At_GetSmsStorage_001)
{
    TAF_UINT8 ucIndex = 0;
    MN_MSG_MEM_STORE_ENUM_U8            enMemReadorDelete = MN_MSG_MEM_STORE_SIM;
    MN_MSG_MEM_STORE_ENUM_U8            enMemSendorWrite = MN_MSG_MEM_STORE_SIM;
    MN_MSG_MEM_STORE_ENUM_U8            enMemRcv = MN_MSG_MEM_STORE_SIM;
    TAF_UINT32  ulRet;

    /*预置数据*/
    gastAtClientTab[ucIndex].AtSmsData.bWaitForUsimStorageStatus = VOS_FALSE;

    MOCKER(MN_MSG_GetStorageStatus)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_NO_ERROR));

    /*输入参数*/

    ulRet = At_GetSmsStorage(ucIndex, enMemReadorDelete, enMemSendorWrite, enMemRcv);
    ASSERT_EQ((TAF_BOOL)VOS_TRUE, gastAtClientTab[ucIndex].AtSmsData.bWaitForUsimStorageStatus);
    ASSERT_EQ((VOS_UINT32)AT_OK, ulRet);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_GetSmsStorage, Test_At_GetSmsStorage_002)
{
    TAF_UINT8 ucIndex = 0;
    MN_MSG_MEM_STORE_ENUM_U8            enMemReadorDelete = MN_MSG_MEM_STORE_NONE;
    MN_MSG_MEM_STORE_ENUM_U8            enMemSendorWrite = MN_MSG_MEM_STORE_NONE;
    MN_MSG_MEM_STORE_ENUM_U8            enMemRcv = MN_MSG_MEM_STORE_NONE;
    TAF_UINT32  ulRet;

    /*预置数据*/
    gastAtClientTab[ucIndex].AtSmsData.bWaitForUsimStorageStatus = VOS_FALSE;

    /*输入参数*/

    ulRet = At_GetSmsStorage(ucIndex, enMemReadorDelete, enMemSendorWrite, enMemRcv);

    ASSERT_EQ((TAF_BOOL)VOS_FALSE, gastAtClientTab[ucIndex].AtSmsData.bWaitForUsimStorageStatus);
    ASSERT_EQ((VOS_UINT32)AT_ERROR, ulRet);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

#if 0

class Test_At_SetCpmsPara: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};


TEST_F(Test_At_SetCpmsPara, Test_At_SetCpmsPara_001)
{
    TAF_UINT32                          ulRet;

    /*预置数据*/
    gucAtParaIndex = 3;
    gastAtParaList[0].ulParaValue = 0;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 0;
    gastAtParaList[1].usParaLen = 0;
    gastAtParaList[2].ulParaValue = 0;
    gastAtParaList[2].usParaLen = 0;
    gastAtClientTab[0].AtSmsData.bWaitForCpmsSetRsp = VOS_FALSE;
    gastAtClientTab[0].CmdCurrentOpt = AT_CMD_CURRENT_OPT_BUTT;

    MOCKER(MN_MSG_SetRcvMsgPath)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_INVALIDPARM));

    MOCKER(At_GetSmsStorage)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    /*输入参数*/

    ulRet = At_SetCpmsPara(0);
    ASSERT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CURRENT_OPT_BUTT, gastAtClientTab[0].CmdCurrentOpt);
    ASSERT_EQ((TAF_BOOL)VOS_FALSE, gastAtClientTab[0].AtSmsData.bWaitForCpmsSetRsp);
    ASSERT_EQ((TAF_UINT32)AT_ERROR, ulRet);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCpmsPara, Test_At_SetCpmsPara_002)
{
    TAF_UINT32                          ulRet;

    /*预置数据*/
    gucAtParaIndex = 3;
    gastAtParaList[0].ulParaValue = 0;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 0;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[2].ulParaValue = 0;
    gastAtParaList[2].usParaLen = 1;
    gastAtClientTab[0].CmdCurrentOpt = AT_CMD_CURRENT_OPT_BUTT;

    MOCKER(MN_MSG_SetRcvMsgPath)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_NO_ERROR));

    MOCKER(At_GetSmsStorage)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_INVALIDPARM));

    /*输入参数*/

    ulRet = At_SetCpmsPara(0);
    ASSERT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CURRENT_OPT_BUTT, gastAtClientTab[0].CmdCurrentOpt);
    ASSERT_EQ((TAF_UINT32)AT_ERROR, ulRet);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCpmsPara,Test_At_SetCpmsPara_003)
{
    TAF_UINT32                          ulRet;

    /*预置数据*/
    gucAtParaIndex = 3;
    gastAtParaList[0].ulParaValue = 0;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 0;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[2].ulParaValue = 0;
    gastAtParaList[2].usParaLen = 1;

    MOCKER(MN_MSG_SetRcvMsgPath)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_NO_ERROR));

    MOCKER(At_GetSmsStorage)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    /*输入参数*/

    ulRet = At_SetCpmsPara(0);
    ASSERT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CPMS_SET, gastAtClientTab[0].CmdCurrentOpt);
    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRet);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCpmsPara, Test_At_SetCpmsPara_004)
{
    TAF_UINT32                          ulRet;

    /*预置数据*/
    gucAtParaIndex = 3;
    gastAtParaList[0].ulParaValue = 0;
    gastAtParaList[0].usParaLen = 0;
    gastAtParaList[1].ulParaValue = 0;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[2].ulParaValue = 0;
    gastAtParaList[2].usParaLen = 1;

    /*输入参数*/

    ulRet = At_SetCpmsPara(0);
    ASSERT_EQ((TAF_UINT32)AT_CMS_OPERATION_NOT_ALLOWED, ulRet);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCmgcPara,Test_At_SetCpmsPara_105)
{
    TAF_UINT32  ulRet;

    /*预置数据*/
    g_enAtCmgfMsgFormat = AT_CMGF_MSG_FORMAT_TEXT;

    /*输入参数*/
    gastAtParaList[0].usParaLen =1;
    gastAtParaList[1].usParaLen =1;
    gastAtParaList[4].usParaLen = 0;

    ulRet = At_SetCmgcPara(0);
    ASSERT_EQ((TAF_UINT32)AT_WAIT_SMS_INPUT, ulRet);
    ASSERT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CMGC_TEXT_SET, gastAtClientTab[0].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCmgcPara,Test_At_SetCpmsPara_106)
{
    TAF_UINT8 ucIndex = 0;
    TAF_UINT32  ulRet;

    /*预置数据*/
    g_enAtCmgfMsgFormat = AT_CMGF_MSG_FORMAT_TEXT;

    /*输入参数*/
    gastAtParaList[0].usParaLen =1;
    gastAtParaList[1].usParaLen =1;
    gastAtParaList[4].usParaLen = 0;

    MOCKER(At_GetAsciiOrBcdAddr)
        .stubs()
        .will(returnValue((TAF_UINT32)AT_CMS_OPERATION_NOT_ALLOWED));

    ulRet = At_SetCmgcPara(ucIndex);
    ASSERT_EQ((TAF_UINT32)AT_CMS_OPERATION_NOT_ALLOWED, ulRet);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

#endif



TEST_F(Test_At_SetHPara,Test_At_SetHPara_101)
{
    TAF_UINT8 ucIndex;

    ucIndex = 0;

    EXPECT_EQ((VOS_UINT32)AT_OK, At_SetHPara(ucIndex));

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetHPara,Test_At_SetHPara_102)
{
    TAF_UINT8       ucIndex;
    TAF_UINT32      ulNumOfCalls = 0;

    ucIndex = 0;

    MOCKER(MN_CALL_GetNotIdleStateCalls)
        .stubs()
        .with(outBoundP((VOS_UINT32 *)&ulNumOfCalls, (VOS_UINT32)sizeof(ulNumOfCalls)), any());

    EXPECT_EQ((VOS_UINT32)AT_OK, At_SetHPara(ucIndex));

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetHPara,Test_At_SetHPara_103)
{
    TAF_UINT8       ucIndex;
    TAF_UINT32      ulNumOfCalls = 1;

    PS_MEM_SET(gastAtClientTab, 0, sizeof(AT_CLIENT_MANAGE_STRU) * AT_MAX_CLIENT_NUM);
    ucIndex = 0;
#if 0
    MOCKER(MN_CALL_GetNotIdleStateCalls)
        .with(outBoundP(&ulNumOfCalls));
#endif
    MOCKER(MN_CALL_Sups)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, At_SetHPara(ucIndex));

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetHPara,Test_At_SetHPara_104)
{
    TAF_UINT8       ucIndex;
    TAF_UINT32      ulNumOfCalls = 1;

    PS_MEM_SET(gastAtClientTab, 0, sizeof(AT_CLIENT_MANAGE_STRU) * AT_MAX_CLIENT_NUM);

    ucIndex = 0;
#if 0
    MOCKER(MN_CALL_GetNotIdleStateCalls)
        .with(outBoundP(&ulNumOfCalls));
#endif
    MOCKER(MN_CALL_Sups)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    EXPECT_EQ((VOS_UINT32)AT_ERROR, At_SetHPara(ucIndex));

    GlobalMockObject::verify();
}


class Test_AT_CheckCcfcParaValid: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};


TEST_F(Test_AT_CheckCcfcParaValid,Test_AT_CheckCcfcParaValid_001)
{
    gastAtParaList[0].usParaLen = 0;

    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, AT_CheckCcfcParaValid());

    GlobalMockObject::verify();
}


TEST_F(Test_AT_CheckCcfcParaValid,Test_AT_CheckCcfcParaValid_002)
{
    gucAtParaIndex = 9;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;

    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, AT_CheckCcfcParaValid());

    GlobalMockObject::verify();
}



TEST_F(Test_AT_CheckCcfcParaValid,Test_AT_CheckCcfcParaValid_003)
{
    gucAtParaIndex = 9;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;
    gucAtParaIndex = 8;
    gastAtParaList[2].usParaLen = 42;

    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, AT_CheckCcfcParaValid());

    GlobalMockObject::verify();
}



TEST_F(Test_AT_CheckCcfcParaValid,Test_AT_CheckCcfcParaValid_004)
{
    gucAtParaIndex = 9;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;
    gucAtParaIndex = 8;
    gastAtParaList[2].usParaLen = 20;
    gastAtParaList[5].usParaLen = 22;

    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, AT_CheckCcfcParaValid());

    GlobalMockObject::verify();
}


TEST_F(Test_AT_CheckCcfcParaValid,Test_AT_CheckCcfcParaValid_005)
{
    gucAtParaIndex = 9;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;
    gucAtParaIndex = 8;
    gastAtParaList[2].usParaLen = 20;
    gastAtParaList[5].usParaLen = 0;
    gastAtParaList[2].usParaLen = 3;

    gastAtParaList[2].aucPara[0] = 0x33;
    gastAtParaList[2].aucPara[1] = 0x69;
    gastAtParaList[2].aucPara[2] = 0x36;

    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, AT_CheckCcfcParaValid());

    GlobalMockObject::verify();
}


TEST_F(Test_AT_CheckCcfcParaValid,Test_AT_CheckCcfcParaValid_006)
{
    gucAtParaIndex = 9;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;
    gucAtParaIndex = 8;
    gastAtParaList[2].usParaLen = 20;
    gastAtParaList[5].usParaLen = 0;
    gastAtParaList[2].usParaLen = 3;

    gastAtParaList[2].aucPara[0] = 0x33;
    gastAtParaList[2].aucPara[1] = 0x35;
    gastAtParaList[2].aucPara[2] = 0x36;

    gastAtParaList[5].usParaLen = 0x2;
    gastAtParaList[5].aucPara[0] = 0x22;
    gastAtParaList[5].aucPara[0] = 0x23;

    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, AT_CheckCcfcParaValid());

    GlobalMockObject::verify();
}


TEST_F(Test_AT_CheckCcfcParaValid,Test_AT_CheckCcfcParaValid_007)
{
    gucAtParaIndex = 9;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;
    gucAtParaIndex = 8;
    gastAtParaList[2].usParaLen = 20;
    gastAtParaList[5].usParaLen = 0;
    gastAtParaList[2].usParaLen = 0;

    gastAtParaList[5].usParaLen = 0x2;
    gastAtParaList[5].aucPara[0] = 0x35;
    gastAtParaList[5].aucPara[1] = 0x38;

    ASSERT_EQ((VOS_UINT32)AT_OK, AT_CheckCcfcParaValid());

    GlobalMockObject::verify();
}


class Test_AT_SetNumAttribute: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};


TEST_F(Test_AT_SetNumAttribute,Test_AT_SetNumAttribute_001)
{
    TAF_SS_NUMTYPE                      NumType;
    TAF_UINT8                           aucFwdToNum[TAF_SS_MAX_FORWARDED_TO_NUM_LEN + 1];

    gastAtParaList[3].ulParaValue = 0x91;

    gastAtParaList[2].usParaLen = 2;
    gastAtParaList[2].aucPara[0] = 0x31;
    gastAtParaList[2].aucPara[1] = 0x32;
    gastAtParaList[3].usParaLen = 2;

    MOCKER(V_MemCpy)
        .stubs()
        .with(outBoundP((VOS_VOID *)gastAtParaList[2].aucPara,(VOS_UINT32)gastAtParaList[2].usParaLen),any(),any());

    AT_SetNumAttribute((TAF_SS_NUMTYPE *)&NumType,(TAF_UINT8 *)aucFwdToNum);

    ASSERT_EQ(0x91,NumType);
    ASSERT_EQ(0x31,aucFwdToNum[0]);
    ASSERT_EQ(0x32,aucFwdToNum[1]);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetNumAttribute,Test_AT_SetNumAttribute_002)
{
    TAF_SS_NUMTYPE                      NumType;
    TAF_UINT8                           aucFwdToNum[TAF_SS_MAX_FORWARDED_TO_NUM_LEN + 1];

    gastAtParaList[2].usParaLen = 2;
    gastAtParaList[2].aucPara[0] = 0x31;
    gastAtParaList[2].aucPara[1] = 0x32;
    gastAtParaList[3].usParaLen = 0;

    MOCKER(V_MemCpy)
        .stubs()
        .with(outBoundP((VOS_VOID *)gastAtParaList[2].aucPara,(VOS_UINT32)gastAtParaList[2].usParaLen),any(),any());

    AT_SetNumAttribute((TAF_SS_NUMTYPE *)&NumType,(TAF_UINT8 *)aucFwdToNum);

    ASSERT_EQ(0x81,NumType);
    ASSERT_EQ(0x31,aucFwdToNum[0]);
    ASSERT_EQ(0x32,aucFwdToNum[1]);

    GlobalMockObject::verify();
}


class Test_AT_SetSubAddrAttribute: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};



TEST_F(Test_AT_SetSubAddrAttribute,Test_AT_SetNumAttribute_003)
{
    TAF_SS_SUBADDRTYPE                  SubAddrType;
    TAF_UINT8                           aucFwdToSubAddr[TAF_SS_MAX_FORWARDED_TO_SUBADDRESS_LEN];

    gastAtParaList[5].usParaLen = 3;
    gastAtParaList[5].aucPara[0] = 0x34;
    gastAtParaList[5].aucPara[1] = 0x35;
    gastAtParaList[5].aucPara[2] = 0x36;

    gastAtParaList[6].usParaLen = 0;

    MOCKER(V_MemCpy)
        .stubs()
        .with(outBoundP((VOS_VOID *)gastAtParaList[5].aucPara,(VOS_UINT32)gastAtParaList[5].usParaLen),any(),any());

    AT_SetSubAddrAttribute((TAF_SS_NUMTYPE *)&SubAddrType,(TAF_UINT8 *)aucFwdToSubAddr);

    ASSERT_EQ(128,SubAddrType);
    ASSERT_EQ(0x34,aucFwdToSubAddr[0]);
    ASSERT_EQ(0x35,aucFwdToSubAddr[1]);
    ASSERT_EQ(0x36,aucFwdToSubAddr[2]);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetSubAddrAttribute,Test_AT_SetNumAttribute_004)
{
    TAF_SS_SUBADDRTYPE                  SubAddrType;
    TAF_UINT8                           aucFwdToSubAddr[TAF_SS_MAX_FORWARDED_TO_SUBADDRESS_LEN];

    gastAtParaList[5].usParaLen = 3;
    gastAtParaList[5].aucPara[0] = 0x34;
    gastAtParaList[5].aucPara[1] = 0x35;
    gastAtParaList[5].aucPara[2] = 0x36;

    gastAtParaList[6].usParaLen = 1;
    gastAtParaList[6].ulParaValue = 190;

    MOCKER(V_MemCpy)
        .stubs()
        .with(outBoundP((VOS_VOID *)gastAtParaList[5].aucPara,(VOS_UINT32)gastAtParaList[5].usParaLen),any(),any());

    AT_SetSubAddrAttribute((TAF_SS_NUMTYPE *)&SubAddrType,(TAF_UINT8 *)aucFwdToSubAddr);

    ASSERT_EQ(190,SubAddrType);
    ASSERT_EQ(0x34,aucFwdToSubAddr[0]);
    ASSERT_EQ(0x35,aucFwdToSubAddr[1]);
    ASSERT_EQ(0x36,aucFwdToSubAddr[2]);

    GlobalMockObject::verify();
}


class Test_AT_DeactivateSSReq: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};


TEST_F(Test_AT_DeactivateSSReq,Test_AT_DeactivateSSReq_001)
{
    TAF_UINT8                           ucIndex;
    TAF_SS_ERASESS_REQ_STRU             stEraseReq;

    ucIndex = 0;
    MOCKER(TAF_DeactivateSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ASSERT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN,AT_DeactivateSSReq(ucIndex,(TAF_SS_ERASESS_REQ_STRU *)&stEraseReq));

    GlobalMockObject::verify();

}


TEST_F(Test_AT_DeactivateSSReq,Test_AT_DeactivateSSReq_002)
{
    TAF_UINT8                           ucIndex;
    TAF_SS_ERASESS_REQ_STRU             stEraseReq;

    ucIndex = 0;
    MOCKER(TAF_DeactivateSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    ASSERT_EQ((VOS_UINT32)AT_ERROR,AT_DeactivateSSReq(ucIndex,&stEraseReq));

    GlobalMockObject::verify();

}


class Test_AT_ActivateSSReq: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};


TEST_F(Test_AT_ActivateSSReq,Test_AT_ActivateSSReq_001)
{
    TAF_UINT8                           ucIndex;
    TAF_SS_ERASESS_REQ_STRU             stActivateReq;

    ucIndex = 0;
    MOCKER(TAF_ActivateSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ASSERT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN,AT_ActivateSSReq(ucIndex,&stActivateReq));
    ASSERT_EQ(1,stActivateReq.OP_LongFTN_Supported);

    GlobalMockObject::verify();

}


TEST_F(Test_AT_ActivateSSReq,Test_AT_ActivateSSReq_002)
{
    TAF_UINT8                           ucIndex;
    TAF_SS_ERASESS_REQ_STRU             stActivateReq;

    ucIndex = 0;
    MOCKER(TAF_ActivateSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    ASSERT_EQ((VOS_UINT32)AT_ERROR,AT_ActivateSSReq(ucIndex,(TAF_SS_ERASESS_REQ_STRU *)&stActivateReq));
    ASSERT_EQ(0,stActivateReq.OP_LongFTN_Supported);

    GlobalMockObject::verify();

}


class Test_AT_InterrogateSSReq: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};



TEST_F(Test_AT_InterrogateSSReq,Test_AT_InterrogateSSReq_001)
{
    TAF_UINT8                           ucIndex;
    TAF_SS_ERASESS_REQ_STRU             stInterrogateReq;

    ucIndex = 0;
    MOCKER(TAF_InterrogateSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ASSERT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN,AT_InterrogateSSReq(ucIndex,(TAF_SS_ERASESS_REQ_STRU *)&stInterrogateReq));
    ASSERT_EQ(1,stInterrogateReq.OP_LongFTN_Supported);

    GlobalMockObject::verify();

}


TEST_F(Test_AT_InterrogateSSReq,Test_AT_InterrogateSSReq_002)
{
    TAF_UINT8                           ucIndex;
    TAF_SS_ERASESS_REQ_STRU             stInterrogateReq;

    ucIndex = 0;
    MOCKER(TAF_InterrogateSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    ASSERT_EQ((VOS_UINT32)AT_ERROR,AT_InterrogateSSReq(ucIndex,(TAF_SS_ERASESS_REQ_STRU *)&stInterrogateReq));
    ASSERT_EQ(0,stInterrogateReq.OP_LongFTN_Supported);

    GlobalMockObject::verify();

}


class Test_AT_RegisterSSReq: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};


TEST_F(Test_AT_RegisterSSReq,Test_AT_RegisterSSReq_001)
{
    TAF_UINT8                           ucIndex;
    TAF_SS_REGISTERSS_REQ_STRU          stRegisterReq;

    ucIndex = 0;
    MOCKER(TAF_RegisterSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ASSERT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN,AT_RegisterSSReq(ucIndex,&stRegisterReq));
    ASSERT_EQ(1,stRegisterReq.OP_LongFTN_Supported);

    GlobalMockObject::verify();

}


TEST_F(Test_AT_RegisterSSReq,Test_AT_RegisterSSReq_002)
{
    TAF_UINT8                           ucIndex;
    TAF_SS_REGISTERSS_REQ_STRU          stRegisterReq;

    ucIndex = 0;
    MOCKER(TAF_RegisterSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    ASSERT_EQ((VOS_UINT32)AT_ERROR,AT_RegisterSSReq(ucIndex,&stRegisterReq));
    ASSERT_EQ(0,stRegisterReq.OP_LongFTN_Supported);

    GlobalMockObject::verify();

}


class Test_AT_EraseSSReq: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};


TEST_F(Test_AT_EraseSSReq,Test_AT_EraseSSReq_001)
{
    TAF_UINT8                           ucIndex;
    TAF_SS_ERASESS_REQ_STRU             stEraseReq;

    ucIndex = 0;
    MOCKER(TAF_EraseSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ASSERT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN,AT_EraseSSReq(ucIndex,&stEraseReq));

    GlobalMockObject::verify();

}


TEST_F(Test_AT_EraseSSReq,Test_AT_EraseSSReq_002)
{
    TAF_UINT8                           ucIndex;
    TAF_SS_ERASESS_REQ_STRU             stEraseReq;

    ucIndex = 0;
    MOCKER(TAF_EraseSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    ASSERT_EQ((VOS_UINT32)AT_ERROR,AT_EraseSSReq(ucIndex,&stEraseReq));

    GlobalMockObject::verify();

}


class Test_At_SetChldPara: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};


TEST_F(Test_At_SetChldPara,Test_At_SetChldPara_001)
{
    TAF_UINT8                           ucIndex;

    ucIndex = 0;

    gucAtParaIndex = 2;

    ASSERT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS,At_SetChldPara(ucIndex));

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetChldPara,Test_At_SetChldPara_002)
{
    TAF_UINT8                           ucIndex;

    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_BUTT;

    ASSERT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS,At_SetChldPara(ucIndex));

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetChldPara,Test_At_SetChldPara_003)
{
    TAF_UINT8                           ucIndex;

    ucIndex = 0;

    gastAtParaList[0].usParaLen = 0;

    ASSERT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS,At_SetChldPara(ucIndex));

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetChldPara,Test_At_SetChldPara_004)
{
    TAF_UINT8                           ucIndex;

    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;

    gastAtParaList[0].usParaLen = 2;

    MOCKER(At_ParseChldPara)
        .stubs()
        .will(returnValue((TAF_BOOL)AT_ERROR));

    ASSERT_EQ((TAF_UINT32)AT_ERROR,At_SetChldPara(ucIndex));

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetChldPara,Test_At_SetChldPara_005)
{
    TAF_UINT8                           ucIndex;

    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;

    gastAtParaList[0].usParaLen = 2;

    MOCKER(At_ParseChldPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(MN_CALL_Sups)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_ERROR));

    ASSERT_EQ((TAF_UINT32)AT_ERROR,At_SetChldPara(ucIndex));

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetChldPara,Test_At_SetChldPara_006)
{
    TAF_UINT8                           ucIndex;

    ucIndex = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;

    gastAtParaList[0].usParaLen = 2;

    MOCKER(At_ParseChldPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(MN_CALL_Sups)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN,At_SetChldPara(ucIndex));

    GlobalMockObject::verify();
}


class Test_At_ParseChldPara: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};


TEST_F(Test_At_ParseChldPara,Test_At_SetChldPara_007)
{
    TAF_UINT32                         ulParaValue;
    MN_CALL_SUPS_PARAM_STRU            stCallSupsCmd;

    ulParaValue = 1;

    MOCKER(At_ParseSingleChldPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    ASSERT_EQ((TAF_BOOL)AT_OK,At_ParseChldPara(ulParaValue,&stCallSupsCmd));

    GlobalMockObject::verify();
}


TEST_F(Test_At_ParseChldPara,Test_At_SetChldPara_008)
{
    TAF_UINT32                         ulParaValue;
    MN_CALL_SUPS_PARAM_STRU            stCallSupsCmd;

    ulParaValue = 1;

    MOCKER(At_ParseSingleChldPara)
        .stubs()
        .will(returnValue((TAF_BOOL)AT_ERROR));

    ASSERT_EQ((TAF_BOOL)AT_ERROR,At_ParseChldPara(ulParaValue,(MN_CALL_SUPS_PARAM_STRU *)&stCallSupsCmd));

    GlobalMockObject::verify();
}



TEST_F(Test_At_ParseChldPara,Test_At_SetChldPara_009)
{
    TAF_UINT32                         ulParaValue;
    MN_CALL_SUPS_PARAM_STRU            stCallSupsCmd;

    ulParaValue = 30;

    MOCKER(At_ParseSingleChldPara)
        .expects(never());

    ASSERT_EQ((TAF_BOOL)AT_ERROR,At_ParseChldPara(ulParaValue,&stCallSupsCmd));

    GlobalMockObject::verify();
}


TEST_F(Test_At_ParseChldPara,Test_At_SetChldPara_010)
{
    TAF_UINT32                         ulParaValue;
    MN_CALL_SUPS_PARAM_STRU            stCallSupsCmd;

    ulParaValue = 11;

    MOCKER(At_ParseSingleChldPara)
        .expects(never());

    ASSERT_EQ((TAF_BOOL)AT_OK,At_ParseChldPara(ulParaValue,&stCallSupsCmd));

    EXPECT_EQ((MN_CALL_SUPS_CMD_ENUM_U8)MN_CALL_SUPS_CMD_REL_CALL_X,stCallSupsCmd.enCallSupsCmd);

    GlobalMockObject::verify();
}


TEST_F(Test_At_ParseChldPara,Test_At_SetChldPara_011)
{
    TAF_UINT32                         ulParaValue;
    MN_CALL_SUPS_PARAM_STRU            stCallSupsCmd;

    ulParaValue = 21;

    MOCKER(At_ParseSingleChldPara)
        .expects(never());

    ASSERT_EQ((TAF_BOOL)AT_OK,At_ParseChldPara(ulParaValue,&stCallSupsCmd));

    EXPECT_EQ((MN_CALL_SUPS_CMD_ENUM_U8)MN_CALL_SUPS_CMD_HOLD_ALL_EXCPT_X,stCallSupsCmd.enCallSupsCmd);

    GlobalMockObject::verify();
}


class Test_At_ParseSingleChldPara: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};



TEST_F(Test_At_ParseSingleChldPara,Test_At_ParseSingleChldPara_001)
{
    TAF_UINT32                         ulParaValue;
    MN_CALL_SUPS_PARAM_STRU            stCallSupsCmd;

    ulParaValue = 0;

    ASSERT_EQ((TAF_BOOL)AT_OK,At_ParseSingleChldPara(ulParaValue,&stCallSupsCmd));

    GlobalMockObject::verify();

}


TEST_F(Test_At_ParseSingleChldPara,Test_At_ParseSingleChldPara_002)
{
    TAF_UINT32                         ulParaValue;
    MN_CALL_SUPS_PARAM_STRU            stCallSupsCmd;

    ulParaValue = 1;

    ASSERT_EQ((TAF_BOOL)AT_OK,At_ParseSingleChldPara(ulParaValue,&stCallSupsCmd));

    GlobalMockObject::verify();

}


TEST_F(Test_At_ParseSingleChldPara,Test_At_ParseSingleChldPara_003)
{
    TAF_UINT32                         ulParaValue;
    MN_CALL_SUPS_PARAM_STRU            stCallSupsCmd;

    ulParaValue = 2;

    ASSERT_EQ((TAF_BOOL)AT_OK,At_ParseSingleChldPara(ulParaValue,&stCallSupsCmd));

    GlobalMockObject::verify();

}


TEST_F(Test_At_ParseSingleChldPara,Test_At_ParseSingleChldPara_004)
{
    TAF_UINT32                         ulParaValue;
    MN_CALL_SUPS_PARAM_STRU            stCallSupsCmd;

    ulParaValue = 3;

    ASSERT_EQ((TAF_BOOL)AT_OK,At_ParseSingleChldPara(ulParaValue,&stCallSupsCmd));

    GlobalMockObject::verify();

}


TEST_F(Test_At_ParseSingleChldPara,Test_At_ParseSingleChldPara_005)
{
    TAF_UINT32                         ulParaValue;
    MN_CALL_SUPS_PARAM_STRU            stCallSupsCmd;

    ulParaValue = 4;

    ASSERT_EQ((TAF_BOOL)AT_OK,At_ParseSingleChldPara(ulParaValue,&stCallSupsCmd));

    GlobalMockObject::verify();

}
#if (NAS_FEATURE_CCBS == FEATURE_ON)

TEST_F(Test_At_ParseSingleChldPara,Test_At_ParseSingleChldPara_006)
{
    TAF_UINT32                         ulParaValue;
    MN_CALL_SUPS_PARAM_STRU            stCallSupsCmd;

    ulParaValue = 5;

    ASSERT_EQ((TAF_BOOL)AT_OK,At_ParseSingleChldPara(ulParaValue,&stCallSupsCmd));

    GlobalMockObject::verify();

}
#endif

TEST_F(Test_At_ParseSingleChldPara,Test_At_ParseSingleChldPara_007)
{
    TAF_UINT32                         ulParaValue;
    MN_CALL_SUPS_PARAM_STRU            stCallSupsCmd;

    ulParaValue = 8;

    ASSERT_EQ((TAF_BOOL)AT_ERROR,At_ParseSingleChldPara(ulParaValue,&stCallSupsCmd));

    GlobalMockObject::verify();

}


#if (NAS_FEATURE_ALS == FEATURE_ON)

class Test_AT_SetAlsPara: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};

TEST_F(Test_AT_SetAlsPara,Test_AT_SetAlsPara_01)
{
    TAF_UINT8 ucIndex;

    ucIndex = 1;
    gucAtParaIndex = 3;

    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS,AT_SetAlsPara(ucIndex));

    GlobalMockObject::verify();

}


TEST_F(Test_AT_SetAlsPara,Test_AT_SetAlsPara_02)
{
    TAF_UINT8 ucIndex;

    ucIndex = 1;
    gucAtParaIndex = 0;
    gastAtParaList[0].usParaLen = 0;

    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS,AT_SetAlsPara(ucIndex));

    GlobalMockObject::verify();

}


TEST_F(Test_AT_SetAlsPara,Test_AT_SetAlsPara_03)
{
    TAF_UINT8 ucIndex;

    ucIndex = 1;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = AT_SALS_ENABLE_TYPE;
    gastAtParaList[1].usParaLen = 0;

    MOCKER(MN_CALL_SetAlsLineNo)
        .expects(never());

    ASSERT_EQ((VOS_UINT32)AT_OK,AT_SetAlsPara(ucIndex));

    EXPECT_EQ(AT_GetModemSsCtxAddrFromClientId(ucIndex)->ucSalsType,(AT_SALS_TYPE)AT_SALS_ENABLE_TYPE);

    GlobalMockObject::verify();

}


TEST_F(Test_AT_SetAlsPara,Test_AT_SetAlsPara_04)
{
    TAF_UINT8 ucIndex;

    ucIndex = 1;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = AT_SALS_ENABLE_TYPE;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = MN_CALL_ALS_LINE_NO_2;

    MOCKER(MN_CALL_SetAlsLineNo)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_UNSPECIFIED));

    ASSERT_EQ((VOS_UINT32)AT_ERROR,AT_SetAlsPara(ucIndex));

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetAlsPara,Test_AT_SetAlsPara_05)
{
    TAF_UINT8 ucIndex;

    ucIndex = 1;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = AT_SALS_ENABLE_TYPE;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = MN_CALL_ALS_LINE_NO_2;

    MOCKER(MN_CALL_SetAlsLineNo)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_NO_ERROR));

    ASSERT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN,AT_SetAlsPara(ucIndex));

    EXPECT_EQ(AT_GetModemSsCtxAddrFromClientId(ucIndex)->ucSalsType,(AT_SALS_TYPE)AT_SALS_ENABLE_TYPE);

    GlobalMockObject::verify();

}


TEST_F(Test_AT_SetAlsPara,Test_AT_SetAlsPara_06)
{
    TAF_UINT8 ucIndex;

    ucIndex = 1;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = AT_SALS_ENABLE_TYPE;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = MN_CALL_ALS_LINE_NO_2;

    MOCKER(MN_CALL_SetAlsLineNo)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_INVALIDPARM));

    ASSERT_EQ((VOS_UINT32)AT_CME_UNKNOWN,AT_SetAlsPara(ucIndex));

    GlobalMockObject::verify();
}

#endif



TEST_F(Test_At_SetCmStubPara, Test_At_SetCmStubPara_001)
{
    TAF_UINT8                           ucIndex = 0;

    /*预置环境：*/
    gucAtParaIndex = 0;
    gastAtParaList[0].ulParaValue = 0;
    gastAtParaList[1].ulParaValue = 0;

    EXPECT_EQ((VOS_UINT32)AT_CMS_OPERATION_NOT_ALLOWED,At_SetCmStubPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#if 0
extern VOS_UINT8 g_ucSetEfSmsFail;
TEST_F(Test_At_SetCmStubPara, 设置EFSMS文件不可用标志)
{
    TAF_UINT8                           ucIndex = 0;

    /*预置环境：*/
    g_ucSetEfSmsFail = 0;

    gucAtParaIndex = 2;
    gastAtParaList[0].ulParaValue = 0;//AT_SMS_STUB_TYPE_SET_EFSMS_INAVAILABLE
    gastAtParaList[1].ulParaValue = 1;

    EXPECT_EQ(AT_OK,At_SetCmStubPara(ucIndex));

    EXPECT_EQ(1, g_ucSetEfSmsFail);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

extern VOS_UINT8 g_ucSetEfSmsNoResponse;
TEST_F(Test_At_SetCmStubPara, 设置EFSMS文件获取操作无响应标志)
{
    TAF_UINT8                           ucIndex = 0;

    /*预置环境：*/
    g_ucSetEfSmsNoResponse = 0;

    gucAtParaIndex = 2;
    gastAtParaList[0].ulParaValue = 4;//AT_SMS_STUB_TYPE_EFSMS_GET_NO_RESPONSE
    gastAtParaList[1].ulParaValue = 1;

    EXPECT_EQ(AT_OK,At_SetCmStubPara(ucIndex));

    EXPECT_EQ(1, g_ucSetEfSmsNoResponse);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

extern VOS_UINT8 g_ucSetEfSmsCapacity;
TEST_F(Test_At_SetCmStubPara, 设置EFSMS文件容量为１)
{
    TAF_UINT8                           ucIndex = 0;

    /*预置环境：*/
    g_ucSetEfSmsCapacity = 0;

    gucAtParaIndex = 2;
    gastAtParaList[0].ulParaValue = 1;//AT_SMS_STUB_TYPE_SET_EFSMS_CAPACITY
    gastAtParaList[1].ulParaValue = 1;

    EXPECT_EQ(AT_OK,At_SetCmStubPara(ucIndex));

    EXPECT_EQ(1, g_ucSetEfSmsCapacity);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

extern VOS_UINT8 g_ucSetEfSmssClear;
TEST_F(Test_At_SetCmStubPara, 清除EFSMSS文件的溢出标志)
{
    TAF_UINT8                           ucIndex = 0;

    /*预置环境：*/
    g_ucSetEfSmssClear = 0;

    gucAtParaIndex = 2;
    gastAtParaList[0].ulParaValue = 2;//AT_SMS_STUB_TYPE_EFSMSS_RESET
    gastAtParaList[1].ulParaValue = 1;

    EXPECT_EQ(AT_OK,At_SetCmStubPara(ucIndex));

    EXPECT_EQ(1, g_ucSetEfSmssClear);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

extern VOS_UINT8 g_ucSetEfSmspNoRsp;
TEST_F(Test_At_SetCmStubPara, 设置EFSMSP文件获取操作无响应标志)
{
    TAF_UINT8                           ucIndex = 0;

    /*预置环境：*/
    //g_ucSetEfSmspNoRsp = 0;

    gucAtParaIndex = 2;
    gastAtParaList[0].ulParaValue = 3;//AT_SMS_STUB_TYPE_EFSMSP_GET_NO_RESPONSE
    gastAtParaList[1].ulParaValue = 1;

    EXPECT_EQ(AT_OK,At_SetCmStubPara(ucIndex));

    EXPECT_EQ(1, g_ucSetEfSmspNoRsp);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#endif
TEST_F(Test_At_SetCmStubPara, Test_At_SetCmStubPara_100)
{
    TAF_UINT8                           ucIndex = 0;

    /*预置环境：*/
    //g_ucSetEfSmspNoRsp = 0;

    gucAtParaIndex = 2;
    gastAtParaList[0].ulParaValue = 5;//AT_SMS_STUB_TYPE_STK_8BIT_TO_7BIT
    gastAtParaList[1].ulParaValue = 1;

    MOCKER(USIMM_SendSMSDataInd1)
        .expects(exactly(1));

    EXPECT_EQ((VOS_UINT32)AT_OK,At_SetCmStubPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCmStubPara, Test_At_SetCmStubPara_101)
{
    TAF_UINT8                           ucIndex = 0;

    /*预置环境：*/
    //g_ucSetEfSmspNoRsp = 0;

    gucAtParaIndex = 2;
    gastAtParaList[0].ulParaValue = 6;//AT_SMS_STUB_TYPE_STK_SEGMENT
    gastAtParaList[1].ulParaValue = 1;

    MOCKER(USIMM_SendSMSDataInd2)
        .expects(exactly(1));

    EXPECT_EQ((VOS_UINT32)AT_OK,At_SetCmStubPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCmStubPara, Test_At_SetCmStubPara_102)
{
    TAF_UINT8                           ucIndex = 0;

    /*预置环境：*/
    //g_ucDisableMoRetry = 0;

    gucAtParaIndex = 2;
    gastAtParaList[0].ulParaValue = 7;//AT_SMS_STUB_DISABLE_MO_RETRY
    gastAtParaList[1].ulParaValue = 1;

    EXPECT_EQ((VOS_UINT32)AT_OK,At_SetCmStubPara(ucIndex));

    //EXPECT_EQ(1, g_ucDisableMoRetry);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCmStubPara, Test_At_SetCmStubPara_103)
{
    TAF_UINT8                           ucIndex = 0;

    /*预置环境：*/
    g_enClass0Tailor = 0;

    gucAtParaIndex = 2;
    gastAtParaList[0].ulParaValue = 8;//AT_SMS_STUB_CLASS0_TAILOR
    gastAtParaList[1].ulParaValue = 1;

    EXPECT_EQ((VOS_UINT32)AT_OK,At_SetCmStubPara(ucIndex));

    EXPECT_EQ(1, g_enClass0Tailor);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#if 0
extern VOS_UINT8 g_ucPpDownloadStub;
TEST_F(Test_At_SetCmStubPara, 设置PPDOWNLOAD回复消息类型)
{
    TAF_UINT8                           ucIndex = 0;

    /*预置环境：*/
    //g_ucPpDownloadStub = 0;

    gucAtParaIndex = 2;
    gastAtParaList[0].ulParaValue = 9;//AT_SMS_STUB_PP_DOWNLOAD_RSP_TYPE
    gastAtParaList[1].ulParaValue = 1;

    EXPECT_EQ(AT_OK,At_SetCmStubPara(ucIndex));

    EXPECT_EQ(1, g_ucPpDownloadStub);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

extern VOS_UINT8 g_ucNasSmsPsConcatencateFlag;
TEST_F(Test_At_SetCmStubPara, 设置PS域短信联发标志)
{
    TAF_UINT8                           ucIndex = 0;

    /*预置环境：*/
    g_ucNasSmsPsConcatencateFlag = 0;

    gucAtParaIndex = 2;
    gastAtParaList[0].ulParaValue = 10;//AT_SMS_PS_CONCATENATE_FLAG
    gastAtParaList[1].ulParaValue = 1;

    EXPECT_EQ(AT_OK,At_SetCmStubPara(ucIndex));

    EXPECT_EQ(1, g_ucNasSmsPsConcatencateFlag);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#endif
TEST_F(Test_At_SetCmStubPara, Test_At_SetCmStubPara_200)
{
    TAF_UINT8                           ucIndex = 0;

    /*预置环境：*/

    MOCKER(AT_StubTriggerAutoReply)
        .expects(exactly(1));

    gucAtParaIndex = 2;
    gastAtParaList[0].ulParaValue = 11;//AT_SMS_STUB_SMS_AUTO_REPLY
    gastAtParaList[1].ulParaValue = 1;

    EXPECT_EQ((VOS_UINT32)AT_OK,At_SetCmStubPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCmStubPara, Test_At_SetCmStubPara_201)
{
    TAF_UINT8                           ucIndex = 0;

    /*预置环境：*/
    gucAtParaIndex = 2;
    gastAtParaList[0].ulParaValue = 0xff;//AT_SMS_PS_CONCATENATE_FLAG
    gastAtParaList[1].ulParaValue = 1;

    EXPECT_EQ((VOS_UINT32)AT_CMS_OPERATION_NOT_ALLOWED,At_SetCmStubPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetAPara,Test_At_SetAPara_001)
{
    TAF_UINT8                         ucIndex;

    g_stATParseCmd.ucCmdOptType = 1;
    ucIndex = 1;


    EXPECT_EQ(At_SetAPara(ucIndex),(TAF_UINT32)AT_CME_INCORRECT_PARAMETERS);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



TEST_F(Test_At_SetAPara,Test_At_SetAPara_002)
{
    TAF_UINT8                         ucIndex;
    TAF_UINT8                         ucNumOfCalls;
    MN_CALL_INFO_STRU                 **ppstCallInfo,*pstCallInfo,astCallInfos1[7];

    pstCallInfo = astCallInfos1;
    ppstCallInfo = &pstCallInfo;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    ucIndex = 1;
    astCallInfos1[0].enCallState = MN_CALL_S_INCOMING;
    ucNumOfCalls = 1;
    AT_GetModemCcCtxAddrFromClientId(ucIndex)->stS0TimeInfo.ucS0TimerLen = 1;
    AT_GetModemCcCtxAddrFromClientId(ucIndex)->stS0TimeInfo.bTimerStart = TAF_FALSE;

    MOCKER(MN_CALL_GetCallInfos)
        .stubs()
        .with(outBoundP(&ucNumOfCalls,(VOS_UINT32)sizeof(ucNumOfCalls)),outBoundP(ppstCallInfo, (VOS_UINT32)sizeof(pstCallInfo)));

    MOCKER(V_MemFree)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    EXPECT_EQ(At_SetAPara(ucIndex),(TAF_UINT32)AT_OK);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

TEST_F(Test_At_SetAPara,Test_At_SetAPara_003)
{
    TAF_UINT8                         ucIndex;
    MN_CALL_INFO_STRU                 **ppstCallInfo,*pstCallInfo,astCallInfos1[7];

    pstCallInfo = astCallInfos1;
    ppstCallInfo = &pstCallInfo;


    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    ucIndex = 1;
    astCallInfos1[0].enCallState = MN_CALL_S_INCOMING;
    AT_GetModemCcCtxAddrFromClientId(ucIndex)->stS0TimeInfo.ucS0TimerLen = 5;
    AT_GetModemCcCtxAddrFromClientId(ucIndex)->stS0TimeInfo.bTimerStart = TAF_TRUE;
#if 0
    MOCKER(MN_CALL_GetCallInfoByCallId)
        .with(any(),outBoundP(ppstCallInfo));

    MOCKER(V_MemFree)
        .will(returnValue((VOS_UINT32)VOS_OK));
#endif
    EXPECT_EQ(At_SetAPara(ucIndex),(TAF_UINT32)AT_NO_CARRIER);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAPara,Test_At_SetAPara_004)
{
    TAF_UINT8                         ucIndex;
    MN_CALL_INFO_STRU                 **ppstCallInfo,*pstCallInfo,astCallInfos1[7];

    pstCallInfo = astCallInfos1;
    ppstCallInfo = &pstCallInfo;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    ucIndex = 1;
    astCallInfos1[0].enCallState = MN_CALL_S_INCOMING;
    AT_GetModemCcCtxAddrFromClientId(ucIndex)->stS0TimeInfo.ucS0TimerLen = 0;
#if 0
    MOCKER(MN_CALL_GetCallInfoByCallId)
        .with(any(),outBoundP(ppstCallInfo));

    MOCKER(V_MemFree)
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(NAS_StopRelTimer)
        .expects(never());
#endif
    EXPECT_EQ(At_SetAPara(ucIndex),(TAF_UINT32)AT_NO_CARRIER);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAPara,Test_At_SetAPara_005)
{
    TAF_UINT8                         ucIndex;
    TAF_UINT8                         ucNumOfCalls;
    MN_CALL_INFO_STRU                 **ppstCallInfo,*pstCallInfo,astCallInfos1[7];

    pstCallInfo = astCallInfos1;
    ppstCallInfo = &pstCallInfo;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    ucIndex = 1;
    astCallInfos1[0].enCallState = MN_CALL_S_ACTIVE;
    ucNumOfCalls = 1;
    AT_GetModemCcCtxAddrFromClientId(ucIndex)->stS0TimeInfo.ucS0TimerLen = 0;

#if 0
    MOCKER(MN_CALL_GetCallInfos)
        .with(outBoundP(&ucNumOfCalls),outBoundP(ppstCallInfo));

    MOCKER(V_MemFree)
        .will(returnValue((VOS_UINT32)VOS_OK));
#endif
    At_SetAPara(ucIndex);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



TEST_F(Test_At_SetAPara,Test_At_SetAPara_006)
{
    TAF_UINT8                         ucIndex;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    ucIndex = 1;


    MOCKER(V_MemAlloc)
        .stubs()
        .will(returnValue((VOS_VOID*)VOS_NULL_PTR));

    EXPECT_EQ(At_SetAPara(ucIndex),(TAF_UINT32)AT_NO_CARRIER);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAPara,Test_At_SetAPara_007)
{
    TAF_UINT8                         ucIndex;
    TAF_UINT8                         ucNumOfCalls;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    ucIndex = 1;
    ucNumOfCalls = 0;
#if 0
    MOCKER(MN_CALL_GetCallInfos)
        .with(outBoundP(&ucNumOfCalls),any());
#endif
    EXPECT_EQ(At_SetAPara(ucIndex),(TAF_UINT32)AT_NO_CARRIER);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAPara,Test_At_SetAPara_008)
{
    TAF_UINT8                         ucIndex;
    TAF_UINT8                         ucNumOfCalls;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    ucIndex = 1;
    ucNumOfCalls = 1;
#if 0
    MOCKER(MN_CALL_GetCallInfos)
        .with(outBoundP(&ucNumOfCalls),any());
#endif
    MOCKER(MN_CALL_Sups)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    EXPECT_EQ(At_SetAPara(ucIndex),(TAF_UINT32)AT_NO_CARRIER);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetAPara,Test_At_SetAPara_009)
{
    TAF_UINT8                         ucIndex;
    TAF_UINT8                         ucNumOfCalls;
    MN_CALL_INFO_STRU                 **ppstCallInfo,*pstCallInfo,astCallInfos1[7];

    pstCallInfo = astCallInfos1;
    ppstCallInfo = &pstCallInfo;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    ucIndex = 1;
    astCallInfos1[0].enCallState = MN_CALL_S_ACTIVE;
    ucNumOfCalls = 1;
    AT_GetModemCcCtxAddrFromClientId(ucIndex)->stS0TimeInfo.ucS0TimerLen = 1;
    AT_GetModemCcCtxAddrFromClientId(ucIndex)->stS0TimeInfo.bTimerStart = VOS_FALSE;

#if 0
    MOCKER(MN_CALL_GetCallInfos)
        .with(outBoundP(&ucNumOfCalls),outBoundP(ppstCallInfo));
#endif
    MOCKER(V_MemFree)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    EXPECT_EQ(At_SetAPara(ucIndex),(TAF_UINT32)AT_NO_CARRIER);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetClckPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
    }
    void TearDown()
    {

    }
protected:
};


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_101)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 0;
    gastAtParaList[1].usParaLen = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_102)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 5;

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_103)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[2].usParaLen = 2;
    gastAtParaList[0].ulParaValue = AT_CLCK_AO_TYPE;
    gastAtParaList[3].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 0; //unlock

    // MOCKER操作;
    MOCKER(At_SsPrint2Code)
        .expects(exactly(1));

    MOCKER(At_SsPrint2Class)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(TAF_DeactivateSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_104)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_P2_TYPE;

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_105)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_SC_TYPE;
    gastAtParaList[2].usParaLen = TAF_PH_PINCODELENMAX + 1;

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_106)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[2].usParaLen = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_SC_TYPE;
    gastAtParaList[1].ulParaValue = 0; //去激活

    // MOCKER操作;
    MOCKER(Taf_PhonePinHandle)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}



TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_107)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[2].usParaLen = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_SC_TYPE;
    gastAtParaList[1].ulParaValue = 0; //去激活

    // MOCKER操作;
    MOCKER(Taf_PhonePinHandle)
        .stubs()
        .will(returnValue((TAF_UINT32)AT_ERROR));

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_108)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[2].usParaLen = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_SC_TYPE;
    gastAtParaList[1].ulParaValue = 1; //激活

    // MOCKER操作;
    MOCKER(Taf_PhonePinHandle)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_109)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[2].usParaLen = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_SC_TYPE;
    gastAtParaList[1].ulParaValue = 2; //查询

    // MOCKER操作;
    MOCKER(Taf_PhonePinHandle)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_210)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_FD_TYPE;
    gastAtParaList[2].usParaLen = TAF_PH_PINCODELENMAX + 1;

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_211)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_FD_TYPE;
    gastAtParaList[2].usParaLen = 4;
    gastAtParaList[1].ulParaValue = SI_PIH_FDN_BDN_ENABLE;

    // MOCKER操作;
    MOCKER(SI_PIH_FdnEnable)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));
    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_212)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_FD_TYPE;
    gastAtParaList[2].usParaLen = 4;
    gastAtParaList[1].ulParaValue = SI_PIH_FDN_BDN_ENABLE;

    // MOCKER操作;
    MOCKER(SI_PIH_FdnEnable)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));
    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_213)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_FD_TYPE;
    gastAtParaList[2].usParaLen = 4;
    gastAtParaList[1].ulParaValue = SI_PIH_FDN_BDN_DISABLE;

    // MOCKER操作;
    MOCKER(SI_PIH_FdnDisable)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));
    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}



TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_214)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_FD_TYPE;
    gastAtParaList[2].usParaLen = 4;
    gastAtParaList[1].ulParaValue = SI_PIH_FDN_BDN_DISABLE + 2;

    // MOCKER操作;


    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_215)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_PS_TYPE;
    gastAtParaList[2].usParaLen = TAF_PH_PINCODELENMAX + 1;

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_216)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_PS_TYPE;
    gastAtParaList[2].usParaLen = 4;
    gastAtParaList[1].ulParaValue = 0; //去激活

    // MOCKER操作;
    MOCKER(Taf_MePersonalisationHandle)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_217)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_PS_TYPE;
    gastAtParaList[2].usParaLen = 4;
    gastAtParaList[1].ulParaValue = 0; //去激活

    // MOCKER操作;
    MOCKER(Taf_MePersonalisationHandle)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_218)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_PS_TYPE;
    gastAtParaList[2].usParaLen = 4;
    gastAtParaList[1].ulParaValue = 1; //激活

    // MOCKER操作;
    MOCKER(Taf_MePersonalisationHandle)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_219)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_PS_TYPE;
    gastAtParaList[2].usParaLen = 4;
    gastAtParaList[1].ulParaValue = 2; //查询

    // MOCKER操作;
    MOCKER(Taf_MePersonalisationHandle)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}



TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_220)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_AO_TYPE;
    gastAtParaList[2].usParaLen = TAF_SS_MAX_PASSWORD_LEN + 1;


    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}



TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_221)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_AO_TYPE;
    gastAtParaList[2].usParaLen = TAF_SS_MAX_PASSWORD_LEN - 4;
    gastAtParaList[3].usParaLen = 1; //class=0


    // MOCKER操作;

    MOCKER(At_SsPrint2Class)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_222)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_AO_TYPE;
    gastAtParaList[2].usParaLen = 0; //password=0
    gastAtParaList[3].usParaLen = 0; //class=0
    gastAtParaList[1].ulParaValue = 0; //去激活


    // MOCKER操作;
    MOCKER(At_SsPrint2Code)
        .expects(exactly(1));
    MOCKER(At_SsPrint2Class)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(TAF_DeactivateSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_223)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_AO_TYPE;
    gastAtParaList[2].usParaLen = 0; //password=0
    gastAtParaList[3].usParaLen = 0; //class=0
    gastAtParaList[1].ulParaValue = 0; //去激活


    // MOCKER操作;
    MOCKER(At_SsPrint2Code)
        .expects(exactly(1));
    MOCKER(At_SsPrint2Class)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(TAF_DeactivateSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_224)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_AO_TYPE;
    gastAtParaList[2].usParaLen = 0; //password=0
    gastAtParaList[3].usParaLen = 0; //class=0
    gastAtParaList[1].ulParaValue = 1; //激活


    // MOCKER操作;
    MOCKER(At_SsPrint2Code)
        .expects(exactly(1));
    MOCKER(At_SsPrint2Class)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(TAF_ActivateSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_225)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_AO_TYPE;
    gastAtParaList[2].usParaLen = 0; //password=0
    gastAtParaList[3].usParaLen = 0; //class=0
    gastAtParaList[1].ulParaValue = 1; //激活


    // MOCKER操作;
    MOCKER(At_SsPrint2Code)
        .expects(exactly(1));
    MOCKER(At_SsPrint2Class)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(TAF_ActivateSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_226)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_AO_TYPE;
    gastAtParaList[2].usParaLen = 0; //password=0
    gastAtParaList[3].usParaLen = 0; //class=0
    gastAtParaList[1].ulParaValue = 2; //查询


    // MOCKER操作;
    MOCKER(At_SsPrint2Code)
        .expects(exactly(1));
    MOCKER(At_SsPrint2Class)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(TAF_InterrogateSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_227)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gastAtParaList[0].usParaLen = 2;
    gastAtParaList[1].usParaLen = 2;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue = AT_CLCK_AO_TYPE;
    gastAtParaList[2].usParaLen = 4; //password长度
    gastAtParaList[3].usParaLen = 0; //class=0
    gastAtParaList[1].ulParaValue = 2; //查询


    // MOCKER操作;
    MOCKER(At_SsPrint2Code)
        .expects(exactly(1));

    MOCKER(At_SsPrint2Class)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(TAF_InterrogateSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}

#if ((FEATURE_ON == FEATURE_GCBS) || (FEATURE_ON == FEATURE_WCBS))
#if 0

TEST_F(Test_AT_ParseCbParm,Test_AT_ParseCbParm_001)
{
    MN_MSG_CBMIR_LIST_STRU    stCbRange;

    TAF_UINT8  aucPara[512 + 1] = "65555";

    ASSERT_EQ((VOS_UINT32)VOS_ERR, AT_ParseCbParm(aucPara, &stCbRange));
}


TEST_F(Test_AT_ParseCbParm,Test_AT_ParseCbParm_002)
{
    MN_MSG_CBMIR_LIST_STRU    stCbRange;

    TAF_UINT8  aucPara[512 + 1] = "1-65555";

    ASSERT_EQ((VOS_UINT32)VOS_ERR, AT_ParseCbParm(aucPara, &stCbRange));
}



TEST_F(Test_AT_ParseCbParm,Test_AT_ParseCbParm_003)
{
    MN_MSG_CBMIR_LIST_STRU    stCbRange;

    TAF_UINT8  aucPara[512 + 1] = "123456789";

    ASSERT_EQ((VOS_UINT32)VOS_ERR, AT_ParseCbParm(aucPara, &stCbRange));
}



TEST_F(Test_AT_ParseCbParm,Test_AT_ParseCbParm_004)
{
    MN_MSG_CBMIR_LIST_STRU    stCbRange;

    TAF_UINT8  aucPara[512 + 1] = "1a";

    ASSERT_EQ((VOS_UINT32)VOS_ERR, AT_ParseCbParm(aucPara, &stCbRange));
}


TEST_F(Test_AT_ParseCbParm,Test_AT_ParseCbParm_005)
{
    MN_MSG_CBMIR_LIST_STRU    stCbRange;

    TAF_UINT8  aucPara[512 + 1] = "1-1a";

    ASSERT_EQ((VOS_UINT32)VOS_ERR, AT_ParseCbParm(aucPara, &stCbRange));
}

TEST_F(Test_AT_ParseCbParm,Test_AT_ParseCbParm_006)
{
    MN_MSG_CBMIR_LIST_STRU    stCbRange;

    TAF_UINT8  aucPara[512 + 1] = "1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0";

    ASSERT_EQ((VOS_UINT32)VOS_ERR, AT_ParseCbParm(aucPara, &stCbRange));
}



TEST_F(Test_AT_ParseCbParm,Test_AT_ParseCbParm_007)
{
    MN_MSG_CBMIR_LIST_STRU    stCbRange;

    TAF_UINT8  aucPara[512 + 1] = "0,1,5,320-478,922,56-90";

    ASSERT_EQ((VOS_UINT32)VOS_OK, AT_ParseCbParm(aucPara, &stCbRange));

}


TEST_F(Test_AT_ParseCbParm,Test_AT_ParseCbParm_008)
{
    MN_MSG_CBMIR_LIST_STRU    stCbRange;

    TAF_UINT8  aucPara[512 + 1] = "3,3,5";

    ASSERT_EQ((VOS_UINT32)VOS_OK, AT_ParseCbParm(aucPara, &stCbRange));
}



TEST_F(Test_AT_ParseCbParm,Test_AT_ParseCbParm_009)
{
    MN_MSG_CBMIR_LIST_STRU    stCbRange;

    TAF_UINT8  aucPara[512 + 1] = "3,,5";

    ASSERT_EQ((VOS_UINT32)VOS_ERR, AT_ParseCbParm(aucPara, &stCbRange));
}


TEST_F(Test_AT_ParseCbParm,Test_AT_ParseCbParm_010)
{
    MN_MSG_CBMIR_LIST_STRU    stCbRange;

    TAF_UINT8  aucPara[512 + 1] = "3--5";

    ASSERT_EQ((VOS_UINT32)VOS_ERR, AT_ParseCbParm(aucPara, &stCbRange));
}


TEST_F(Test_AT_ParseCbParm,Test_AT_ParseCbParm_011)
{
    MN_MSG_CBMIR_LIST_STRU    stCbRange;

    TAF_UINT8  aucPara[512 + 1] = "3-5";

    ASSERT_EQ((VOS_UINT32)VOS_OK, AT_ParseCbParm(aucPara, &stCbRange));

    ASSERT_EQ(1,stCbRange.ulCbmirNum);

    ASSERT_EQ(3,stCbRange.astCbmirInfo[0].usMsgIdFrom);

    ASSERT_EQ(5,stCbRange.astCbmirInfo[0].usMsgIdTo);
}


TEST_F(Test_AT_ProcCscbWithParm,Test_AT_ProcCscbWithParm_001)
{
    MN_MSG_CBMIR_LIST_STRU    stCbmirList;

    gastAtParaList[1].usParaLen = 1;

    memcpy(gastAtParaList[1].aucPara, "a", 1);

    MOCKER(AT_ParseCbParm).will(returnValue((VOS_UINT32)VOS_ERR));

    ASSERT_EQ((VOS_UINT32)AT_CMS_OPERATION_NOT_ALLOWED, AT_ProcCscbWithParm(0, &stCbmirList));
}


TEST_F(Test_AT_ProcCscbWithParm,Test_AT_ProcCscbWithParm_002)
{
    MN_MSG_CBMIR_LIST_STRU    stCbmirList;

    gastAtParaList[1].usParaLen = 1;

    memcpy(gastAtParaList[1].aucPara, "1", 1);

    gastAtParaList[2].usParaLen = 1;

    memcpy(gastAtParaList[2].aucPara, "1", 1);

    MOCKER(AT_ParseCbParm).will(returnValue((VOS_UINT32)VOS_OK));

    /*申请内存失败*/
    MOCKER(V_MemAlloc).will(returnValue(NULL));

    ASSERT_EQ((VOS_UINT32)AT_CMS_OPERATION_NOT_ALLOWED, AT_ProcCscbWithParm(0, &stCbmirList));
}
TEST_F(Test_AT_ProcCscbWithParm,Test_AT_ProcCscbWithParm_003)
{
    MN_MSG_CBMIR_LIST_STRU    stCbmirList;

    gastAtParaList[1].usParaLen = 1;

    memcpy(gastAtParaList[1].aucPara, "1", 1);

    gastAtParaList[2].usParaLen = 1;

    memcpy(gastAtParaList[2].aucPara, "1", 1);

    MOCKER(AT_ParseCbParm)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(AT_ParseCbParm)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    ASSERT_EQ((VOS_UINT32)AT_CMS_OPERATION_NOT_ALLOWED, AT_ProcCscbWithParm(0, &stCbmirList));
}



TEST_F(Test_AT_ProcCscbWithParm,Test_AT_ProcCscbWithParm_004)
{
    MN_MSG_CBMIR_LIST_STRU    stCbmirList;

    gastAtParaList[0].ulParaValue = MN_MSG_CBMODE_ACCEPT;

    gastAtParaList[1].usParaLen = 1;

    memcpy(gastAtParaList[1].aucPara, "1", 1);

    gastAtParaList[2].usParaLen = 1;

    memcpy(gastAtParaList[2].aucPara, "1", 1);

    MOCKER(AT_ParseCbParm).will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(MN_MSG_AddCbMids).will(returnValue(MN_ERR_NO_ERROR));

    ASSERT_EQ(AT_OK, AT_ProcCscbWithParm(0, &stCbmirList));
}


TEST_F(Test_AT_ProcCscbWithParm,Test_AT_ProcCscbWithParm_005)
{
    MN_MSG_CBMIR_LIST_STRU    stCbmirList;

    gastAtParaList[0].ulParaValue = MN_MSG_CBMODE_REJECT;

    gastAtParaList[1].usParaLen = 1;

    memcpy(gastAtParaList[1].aucPara, "1", 1);

    gastAtParaList[2].usParaLen = 1;

    memcpy(gastAtParaList[2].aucPara, "1", 1);

    MOCKER(AT_ParseCbParm).will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(MN_MSG_DelCbMids).will(returnValue(MN_ERR_NO_ERROR));

    ASSERT_EQ(AT_OK, AT_ProcCscbWithParm(0, &stCbmirList));
}


TEST_F(Test_AT_ProcCscbWithParm,Test_AT_ProcCscbWithParm_006)
{
    MN_MSG_CBMIR_LIST_STRU    stCbmirList;

    gastAtParaList[0].ulParaValue = MN_MSG_CBMODE_REJECT;

    gastAtParaList[1].usParaLen = 1;

    memcpy(gastAtParaList[1].aucPara, "1", 1);

    gastAtParaList[2].usParaLen = 1;

    memcpy(gastAtParaList[2].aucPara, "1", 1);

    MOCKER(AT_ParseCbParm).will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(MN_MSG_DelCbMids).will(returnValue(MN_ERR_UNSPECIFIED));

    ASSERT_EQ(AT_CMS_OPERATION_NOT_ALLOWED, AT_ProcCscbWithParm(0, &stCbmirList));
}


TEST_F(Test_At_SetCscbPara,输入参数为2时_Mid不存在返回失败)
{
    gucAtParaIndex = 2;

    gastAtParaList[1].usParaLen = 0;

    ASSERT_EQ(AT_CMS_OPERATION_NOT_ALLOWED, At_SetCscbPara(0));
}


TEST_F(Test_At_SetCscbPara,申请内存失败时返回失败)
{
    gucAtParaIndex = 1;

    gastAtParaList[1].usParaLen = 0;

    MOCKER(V_MemAlloc).will(returnValue(NULL));

    ASSERT_EQ(AT_CMS_ERROR_IN_MS, At_SetCscbPara(0));
}


TEST_F(Test_At_SetCscbPara,激活所有CBS消息ID成功)
{
    MN_MSG_CBMIR_LIST_STRU    stCbmirList;

    stCbmirList.ulCbmirNum                  = 1;
    stCbmirList.astCbmirInfo[0].usMsgIdFrom = 0;
    stCbmirList.astCbmirInfo[0].usMsgIdTo   = 0xffff;

    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = MN_MSG_CBMODE_ACCEPT;

    MOCKER(At_GetOpId).will(returnValue(1));

    MOCKER(MN_MSG_AddCbMids)
        .with(any(), any(), outBoundP(&stCbmirList))
        .will(returnValue(MN_ERR_NO_ERROR));

    ASSERT_EQ(AT_WAIT_ASYNC_RETURN, At_SetCscbPara(0));
}


TEST_F(Test_At_SetCscbPara,激活所有CBS消息ID失败)
{
    MN_MSG_CBMIR_LIST_STRU    stCbmirList;

    stCbmirList.ulCbmirNum                  = 1;
    stCbmirList.astCbmirInfo[0].usMsgIdFrom = 0;
    stCbmirList.astCbmirInfo[0].usMsgIdTo   = 0xffff;

    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = MN_MSG_CBMODE_ACCEPT;

    MOCKER(At_GetOpId).will(returnValue(1));

    MOCKER(MN_MSG_AddCbMids)
        .with(any(), any(), outBoundP(&stCbmirList))
        .will(returnValue(MN_ERR_UNSPECIFIED));

    ASSERT_EQ(AT_CMS_OPERATION_NOT_ALLOWED, At_SetCscbPara(0));
}


TEST_F(Test_At_SetCscbPara,去激活所有CBS消息ID成功)
{
    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = MN_MSG_CBMODE_REJECT;

    MOCKER(At_GetOpId).will(returnValue(1));

    MOCKER(MN_MSG_EmptyCbMids)
        .will(returnValue(MN_ERR_NO_ERROR));

    ASSERT_EQ(AT_WAIT_ASYNC_RETURN, At_SetCscbPara(0));
}


TEST_F(Test_At_SetCscbPara,去激活所有CBS消息ID失败)
{
    gucAtParaIndex = 1;

    gastAtParaList[0].ulParaValue = MN_MSG_CBMODE_REJECT;

    MOCKER(At_GetOpId).will(returnValue(1));

    MOCKER(MN_MSG_EmptyCbMids)
        .will(returnValue(MN_ERR_UNSPECIFIED));

    ASSERT_EQ(AT_CMS_OPERATION_NOT_ALLOWED, At_SetCscbPara(0));
}


TEST_F(Test_At_SetCscbPara,用户输入参数大于1时且参数解析成功返回设置成功)
{
    gucAtParaIndex = 2;

    gastAtParaList[1].usParaLen = 1;

    MOCKER(At_GetOpId).will(returnValue(1));

    MOCKER(AT_ProcCscbWithParm)
        .will(returnValue((VOS_UINT32)AT_OK));

    ASSERT_EQ(AT_WAIT_ASYNC_RETURN, At_SetCscbPara(0));
}


TEST_F(Test_At_SetCscbPara,用户输入参数大于1时且参数解析失败返回设置失败)
{
    gucAtParaIndex = 2;

    gastAtParaList[1].usParaLen = 1;

    MOCKER(At_GetOpId).will(returnValue(1));

    MOCKER(AT_ProcCscbWithParm)
        .will(returnValue(AT_ERROR));

    ASSERT_EQ(AT_ERROR, At_SetCscbPara(0));
}

#endif
#endif



TEST_F(Test_AT_ProcUus1WithParm,Test_AT_ProcUus1WithParm_000)
{
    VOS_UINT8                           ucIndex = 0;

    gucAtParaIndex  = 5;

    gastAtParaList[3].usParaLen = 1;

    MOCKER(At_Auc2ul)
        .stubs()
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    MOCKER(MN_CALL_SetUus1Info)
        .stubs()
        .will(returnValue(MN_ERR_INVALIDPARM));

    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS,AT_ProcUus1WithParm(ucIndex));
}


TEST_F(Test_AT_ProcUus1WithParm,Test_AT_ProcUus1WithParm_001)
{
    VOS_UINT8                           ucIndex = 0;

    gucAtParaIndex  = 5;

    gastAtParaList[3].usParaLen = 1;

    MOCKER(At_Auc2ul)
        .stubs()
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(At_AsciiNum2HexString)
        .stubs()
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    MOCKER(MN_CALL_SetUus1Info)
        .stubs()
        .will(returnValue(MN_ERR_INVALIDPARM));

    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS,AT_ProcUus1WithParm(ucIndex));
}



TEST_F(Test_AT_ProcUus1WithParm,Test_AT_ProcUus1WithParm_002)
{
    VOS_UINT8                           ucIndex = 0;

    gucAtParaIndex  = 5;

    gastAtParaList[3].usParaLen = 1;

    MOCKER(At_Auc2ul)
        .stubs()
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(At_AsciiNum2HexString)
        .stubs()
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(MN_CALL_SetUus1Info)
        .stubs()
        .will(returnValue(MN_ERR_INVALIDPARM));

    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS,AT_ProcUus1WithParm(ucIndex));
}


TEST_F(Test_AT_ProcUus1WithParm,Test_AT_ProcUus1WithParm_003)
{
    VOS_UINT8                           ucIndex = 0;

    gucAtParaIndex  = 5;

    gastAtParaList[3].usParaLen = 1;
    gastAtParaList[5].usParaLen = 0;

    MOCKER(MN_CALL_SetUus1Info)
        .stubs()
        .will(returnValue(MN_ERR_NO_ERROR));

    MOCKER(At_Auc2ul)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(At_AsciiNum2HexString)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ASSERT_EQ((VOS_UINT32)AT_OK,AT_ProcUus1WithParm(ucIndex));
}


TEST_F(Test_At_SetCuus1Para,Test_AT_ProcUus1WithParm_004)
{
    VOS_UINT8                           ucIndex = 0;

    gucAtParaIndex = 0;

    ASSERT_EQ((VOS_UINT32)AT_OK,At_SetCuus1Para(ucIndex));
}


TEST_F(Test_At_SetCuus1Para,Test_AT_ProcUus1WithParm_005)
{
    VOS_UINT8                           ucIndex = 0;

    gastAtParaList[0].usParaLen = 0;

    gucAtParaIndex = 1;

    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS,At_SetCuus1Para(ucIndex));
}



TEST_F(Test_At_SetCuus1Para,Test_AT_ProcUus1WithParm_006)
{
    VOS_UINT8                           ucIndex = 0;

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;

    gastAtParaList[2].usParaLen = 0;

    gucAtParaIndex = 2;

    MOCKER(AT_ProcUus1WithParm)
        .expects(never());

    ASSERT_EQ((VOS_UINT32)AT_OK,At_SetCuus1Para(ucIndex));


    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}



TEST_F(Test_At_SetCuus1Para,Test_AT_ProcUus1WithParm_007)
{
    VOS_UINT8                           ucIndex = 0;

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[2].usParaLen = 1;

    gucAtParaIndex = 5;

    MOCKER(AT_ProcUus1WithParm)
        .stubs()
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_OK));

    ASSERT_EQ((VOS_UINT32)AT_OK,At_SetCuus1Para(ucIndex));


    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}

#endif



class Test_At_SetCcfcPara: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};

TEST_F(Test_At_SetCcfcPara,Test_At_SetCcfcPara_01)
{
    //参数定义
    VOS_UINT8      ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化


    // MOCKER操作
    MOCKER(AT_CheckCcfcParaValid)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS));


    //执行检查
    ASSERT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetCcfcPara(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCcfcPara,Test_At_SetCcfcPara_02)
{
    //参数定义
    VOS_UINT8      ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    gastAtParaList[2].usParaLen = 1;
    gastAtParaList[5].usParaLen = 1;
    gastAtParaList[7].usParaLen = 1;
    gastAtParaList[4].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 0 ;//disable

    // MOCKER操作
    MOCKER(AT_CheckCcfcParaValid)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(AT_GetSsCodeFromCfccPara)
        .stubs()
        .will(returnValue((TAF_SS_CODE)TAF_CFNRY_SS_CODE));

    MOCKER(AT_SetNumAttribute)
        .expects(exactly(1));

    MOCKER(AT_SetSubAddrAttribute)
        .expects(exactly(1));

    MOCKER(At_SsPrint2Class)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(AT_DeactivateSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    //执行检查
    ASSERT_EQ((TAF_UINT32)AT_SUCCESS, At_SetCcfcPara(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCcfcPara,Test_At_SetCcfcPara_03)
{
    //参数定义
    VOS_UINT8      ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    gastAtParaList[2].usParaLen = 0;
    gastAtParaList[5].usParaLen = 0;
    gastAtParaList[7].usParaLen = 0;
    gastAtParaList[4].usParaLen = 0;
    gastAtParaList[1].ulParaValue = 1 ;//enable

    // MOCKER操作
    MOCKER(AT_CheckCcfcParaValid)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(AT_GetSsCodeFromCfccPara)
        .stubs()
        .will(returnValue((TAF_SS_CODE)TAF_CFNRY_SS_CODE));

    MOCKER(AT_SetNumAttribute)
        .expects(never());

    MOCKER(AT_SetSubAddrAttribute)
        .expects(never());

    MOCKER(At_SsPrint2Class)
        .expects(never());

    MOCKER(AT_ActivateSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    //执行检查
    ASSERT_EQ((TAF_UINT32)AT_SUCCESS, At_SetCcfcPara(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCcfcPara,Test_At_SetCcfcPara_04)
{
    //参数定义
    VOS_UINT8      ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    gastAtParaList[2].usParaLen = 1;
    gastAtParaList[5].usParaLen = 1;
    gastAtParaList[7].usParaLen = 1;
    gastAtParaList[4].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 2 ;//query

    // MOCKER操作
    MOCKER(AT_CheckCcfcParaValid)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(AT_GetSsCodeFromCfccPara)
        .stubs()
        .will(returnValue((TAF_SS_CODE)TAF_CFNRY_SS_CODE));

    MOCKER(AT_SetNumAttribute)
        .expects(exactly(1));

    MOCKER(AT_SetSubAddrAttribute)
        .expects(exactly(1));

    MOCKER(At_SsPrint2Class)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(AT_InterrogateSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    //执行检查
    ASSERT_EQ((TAF_UINT32)AT_SUCCESS, At_SetCcfcPara(0));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCcfcPara,Test_At_SetCcfcPara_05)
{
    //参数定义
    VOS_UINT8      ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    gastAtParaList[2].usParaLen = 1;
    gastAtParaList[5].usParaLen = 1;
    gastAtParaList[7].usParaLen = 1;
    gastAtParaList[4].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 3 ;//registration

    // MOCKER操作
    MOCKER(AT_CheckCcfcParaValid)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(AT_GetSsCodeFromCfccPara)
        .stubs()
        .will(returnValue((TAF_SS_CODE)TAF_CFNRY_SS_CODE));

    MOCKER(AT_SetNumAttribute)
        .expects(exactly(1));

    MOCKER(AT_SetSubAddrAttribute)
        .expects(exactly(1));

    MOCKER(At_SsPrint2Class)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(AT_RegisterSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    //执行检查
    ASSERT_EQ((TAF_UINT32)AT_SUCCESS, At_SetCcfcPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCcfcPara,Test_At_SetCcfcPara_06)
{
    //参数定义
    VOS_UINT8      ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    gastAtParaList[2].usParaLen = 1;
    gastAtParaList[5].usParaLen = 1;
    gastAtParaList[7].usParaLen = 1;
    gastAtParaList[4].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 4 ;//erase

    // MOCKER操作
    MOCKER(AT_CheckCcfcParaValid)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(AT_GetSsCodeFromCfccPara)
        .stubs()
        .will(returnValue((TAF_SS_CODE)TAF_CFNRY_SS_CODE));

    MOCKER(AT_SetNumAttribute)
        .expects(exactly(1));

    MOCKER(AT_SetSubAddrAttribute)
        .expects(exactly(1));

    MOCKER(At_SsPrint2Class)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(AT_EraseSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    //执行检查
    ASSERT_EQ((TAF_UINT32)AT_SUCCESS, At_SetCcfcPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCcfcPara,Test_At_SetCcfcPara_07)
{
    //参数定义
    VOS_UINT8      ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    gastAtParaList[2].usParaLen = 1;
    gastAtParaList[5].usParaLen = 1;
    gastAtParaList[7].usParaLen = 1;
    gastAtParaList[4].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 4 ;//erase

    // MOCKER操作
    MOCKER(AT_CheckCcfcParaValid)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    MOCKER(AT_GetSsCodeFromCfccPara)
        .stubs()
        .will(returnValue((TAF_SS_CODE)TAF_CFNRY_SS_CODE));

    MOCKER(AT_SetNumAttribute)
        .expects(exactly(1));

    MOCKER(AT_SetSubAddrAttribute)
        .expects(exactly(1));

    MOCKER(At_SsPrint2Class)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));


    //执行检查
    ASSERT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetCcfcPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SsPrint2Class: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};

TEST_F(Test_At_SsPrint2Class,Test_At_SsPrint2Class_01)
{
    //参数定义
    TAF_SS_BASIC_SERVICE_STRU  stBsService;
    TAF_UINT8                  ucClass;

    //参数初始化
    ucClass = 1;

    //相关全局变量初始化

    // MOCKER操作

    //执行检查
    ASSERT_EQ((TAF_UINT32)AT_SUCCESS, At_SsPrint2Class(&stBsService,ucClass));
    EXPECT_EQ(stBsService.BsType ,(TAF_BASIC_SERVICE_TYPE)TAF_SS_TELE_SERVICE);
    EXPECT_EQ(stBsService.BsServiceCode ,(TAF_BASIC_SERVICE_CODE)TAF_ALL_SPEECH_TRANSMISSION_SERVICES_TSCODE);


    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SsPrint2Class,Test_At_SsPrint2Class_02)
{
    //参数定义
    TAF_SS_BASIC_SERVICE_STRU  stBsService;
    TAF_UINT8                  ucClass;

    //参数初始化
    ucClass = 16;

    //相关全局变量初始化

    // MOCKER操作

    //执行检查
    ASSERT_EQ((TAF_UINT32 )AT_SUCCESS, At_SsPrint2Class(&stBsService,ucClass));
    EXPECT_EQ(stBsService.BsType ,(TAF_BASIC_SERVICE_TYPE)TAF_SS_BEARER_SERVICE);
    EXPECT_EQ(stBsService.BsServiceCode ,(TAF_BASIC_SERVICE_CODE)TAF_ALL_DATA_CIRCUIT_SYNCHRONOUS_BSCODE);


    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SsPrint2Class,Test_At_SsPrint2Class_03)
{
    //参数定义
    TAF_SS_BASIC_SERVICE_STRU  stBsService;
    TAF_UINT8                  ucClass;

    //参数初始化
    ucClass = 2;

    //相关全局变量初始化

    // MOCKER操作

    //执行检查
    ASSERT_EQ((TAF_UINT32)AT_SUCCESS, At_SsPrint2Class(&stBsService,ucClass));


    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



TEST_F(Test_AT_SetCsqlvlPara,Test_AT_SetCsqlvlPara_01)
{
    VOS_UINT8                           ucIndex;

    ucIndex = 0;

    MOCKER(Taf_QueryCSNR)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    EXPECT_EQ(AT_SetCsqlvlPara(ucIndex), (VOS_UINT32)AT_WAIT_ASYNC_RETURN);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCsqlvlPara,Test_AT_SetCsqlvlPara_02)
{
    VOS_UINT8                           ucIndex;
    VOS_INT16                           sCpichRscp;

    ucIndex = 0;
    sCpichRscp = -97;

    MOCKER(Taf_QueryCSNR)
        .stubs()
        .with(outBoundP((TAF_INT16 *)&sCpichRscp, (VOS_UINT32)sizeof(sCpichRscp)),any())
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    /*MOCKER(At_sprintf)
        .expects(exactly(1));*/

    EXPECT_EQ(AT_SetCsqlvlPara(ucIndex), (VOS_UINT32)AT_WAIT_ASYNC_RETURN);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCsqlvlPara,Test_AT_SetCsqlvlPara_03)
{
    VOS_UINT8                           ucIndex;
    VOS_INT16                           sCpichRscp;

    ucIndex = 0;
    sCpichRscp = -102;

    MOCKER(Taf_QueryCSNR)
        .stubs()
        .with(outBoundP((TAF_INT16 *)&sCpichRscp, (VOS_UINT32)sizeof(sCpichRscp)),any())
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    /*MOCKER(At_sprintf)
        .expects(exactly(1));*/

    EXPECT_EQ(AT_SetCsqlvlPara(ucIndex), (VOS_UINT32)AT_WAIT_ASYNC_RETURN);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCsqlvlPara,Test_AT_SetCsqlvlPara_04)
{
    VOS_UINT8                           ucIndex;
    VOS_INT16                           sCpichRscp;

    ucIndex = 0;
    sCpichRscp = -105;

    MOCKER(Taf_QueryCSNR)
        .stubs()
        .with(outBoundP((TAF_INT16 *)&sCpichRscp, (VOS_UINT32)sizeof(sCpichRscp)),any())
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    /*MOCKER(At_sprintf)
        .expects(exactly(1));*/

    EXPECT_EQ(AT_SetCsqlvlPara(ucIndex), (VOS_UINT32)AT_WAIT_ASYNC_RETURN);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCsqlvlPara,Test_AT_SetCsqlvlPara_05)
{
    VOS_UINT8                           ucIndex;
    VOS_INT16                           sCpichRscp;

    ucIndex = 0;
    sCpichRscp = -125;

    MOCKER(Taf_QueryCSNR)
        .stubs()
        .with(outBoundP((TAF_INT16 *)&sCpichRscp, (VOS_UINT32)sizeof(sCpichRscp)),any())
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    /*MOCKER(At_sprintf)
        .expects(exactly(1));*/

    EXPECT_EQ(AT_SetCsqlvlPara(ucIndex), AT_WAIT_ASYNC_RETURN);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

#if 0

TEST_F(Test_At_SetCusdPara,Test_At_SetCusdPara_001)
{
    // 变量声明
    TAF_UINT32 ulRst;
    TAF_UINT8 ucIndex;

    //参数初始化
    ucIndex = 0;

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    // MOCKER操作;


    // 调用被测函数
    ulRst = At_SetCusdPara(0);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCusdPara,Test_At_SetCusdPara_002)
{
    // 变量声明
    TAF_UINT32 ulRst;
    TAF_UINT8 ucIndex;

    //参数初始化
    ucIndex = 0;

    // 初始化全局变量;
    gucAtParaIndex = 4;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    // MOCKER操作;


    // 调用被测函数
    ulRst = At_SetCusdPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCusdPara,Test_At_SetCusdPara_003)
{
    // 变量声明
    TAF_UINT32 ulRst;
    TAF_UINT8 ucIndex;

    //参数初始化
    ucIndex = 0;

    // 初始化全局变量;
    gucAtParaIndex = 3;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[2].usParaLen = 1;
    gastAtParaList[2].ulParaValue = 0x44;

    // MOCKER操作;


    // 调用被测函数
    ulRst = At_SetCusdPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRst);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCusdPara,Test_At_SetCusdPara_004)
{
    // 变量声明
    TAF_UINT32 ulRst;
    TAF_UINT8 ucIndex;

    //参数初始化
    ucIndex = 0;

    // 初始化全局变量;
    gucAtParaIndex = 3;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[2].usParaLen = 0;


    // MOCKER操作;
    MOCKER(At_CheckUssdNumLen).will(returnValue((VOS_UINT32)AT_FAILURE));

    // 调用被测函数
    ulRst = At_SetCusdPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    GlobalMockObject::verify();
}



TEST_F(Test_At_SetCusdPara,Test_At_SetCusdPara_005)
{
    // 变量声明
    TAF_UINT32 ulRst;
    TAF_UINT8 ucIndex;

    //参数初始化
    ucIndex = 0;

    // 初始化全局变量;
    gucAtParaIndex = 3;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[2].usParaLen = 0;


    // MOCKER操作;
    MOCKER(At_CheckUssdNumLen)
    .stubs()
    .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(V_MemAlloc)
    .stubs()
    .will(returnValue((VOS_VOID *)TAF_NULL_PTR));

    // 调用被测函数
    ulRst = At_SetCusdPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRst);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCusdPara,Test_At_SetCusdPara_006)
{
    // 变量声明
    TAF_UINT32 ulRst;
    TAF_UINT8 ucIndex;

    //参数初始化
    ucIndex = 0;

    // 初始化全局变量;
    gucAtParaIndex = 3;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[2].usParaLen = 0;


    // MOCKER操作;
    MOCKER(At_CheckUssdNumLen).will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(V_MemAlloc)
        .stubs()
        .expects(exactly(1))
        .will(returnValue((VOS_VOID *)malloc(sizeof(TAF_SS_PROCESS_USS_REQ_STRU))))

    MOCKER(V_MemAlloc)
        .stubs()
        .expects(exactly(1))
        .will(returnValue((VOS_VOID *)VOS_NULL_PTR));

    // 调用被测函数
    ulRst = At_SetCusdPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRst);

    GlobalMockObject::verify();


}


TEST_F(Test_At_SetCusdPara,Test_At_SetCusdPara_007)
{
    // 变量声明
    TAF_UINT32 ulRst;
    TAF_UINT8 ucIndex;

    //参数初始化
    ucIndex = 0;

    // 初始化全局变量;
    gucAtParaIndex = 3;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[2].usParaLen = 0;
    gastAtParaList[0].usParaLen =1;
    gastAtParaList[0].ulParaValue = 0;
    gastAtParaList[1].usParaLen = 0;


    // MOCKER操作;
    MOCKER(At_CheckUssdNumLen)
    .stubs()
    .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRst = At_SetCusdPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_OK, ulRst);

    GlobalMockObject::verify();


}


TEST_F(Test_At_SetCusdPara,Test_At_SetCusdPara_007)
{
    // 变量声明
    TAF_UINT32 ulRst;
    TAF_UINT8 ucIndex;

    //参数初始化
    ucIndex = 0;

    // 初始化全局变量;
    gucAtParaIndex = 3;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[2].usParaLen = 0;
    gastAtParaList[0].usParaLen =0;
    gastAtParaList[0].ulParaValue = 0;
    gastAtParaList[1].usParaLen = 0;



    // MOCKER操作;
    MOCKER(At_CheckUssdNumLen)
    .stubs()
    .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRst = At_SetCusdPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_OK, ulRst);

    GlobalMockObject::verify();


}


TEST_F(Test_At_SetCusdPara,Test_At_SetCusdPara_008)
{
    // 变量声明
    TAF_UINT32 ulRst;
    TAF_UINT8 ucIndex;

    //参数初始化
    ucIndex = 0;

    // 初始化全局变量;
    gucAtParaIndex = 3;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[2].usParaLen = 0;
    gastAtParaList[0].usParaLen =1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    AT_GetModemSsCtxAddrFromClientId(ucIndex)->ucCusdStateInd = AT_CUSD_MT_IDL_STATE;


    // MOCKER操作;
    MOCKER(At_CheckUssdNumLen)
    .stubs()
    .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(TAF_ProcessUnstructuredSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    // 调用被测函数
    ulRst = At_SetCusdPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRst);

    GlobalMockObject::verify();


}


TEST_F(Test_At_SetCusdPara,Test_At_SetCusdPara_009)
{
    // 变量声明
    TAF_UINT32 ulRst;
    TAF_UINT8 ucIndex;

    //参数初始化
    ucIndex = 0;

    // 初始化全局变量;
    gucAtParaIndex = 3;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[2].usParaLen = 0;
    gastAtParaList[0].usParaLen =1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    AT_GetModemSsCtxAddrFromClientId(ucIndex)->ucCusdStateInd = AT_CUSD_MT_IDL_STATE;


    // MOCKER操作;
    MOCKER(At_CheckUssdNumLen)
    .stubs()
    .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(TAF_ProcessUnstructuredSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRst = At_SetCusdPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    GlobalMockObject::verify();


}


TEST_F(Test_At_SetCusdPara,Test_At_SetCusdPara_010)
{
    // 变量声明
    TAF_UINT32 ulRst;
    TAF_UINT8 ucIndex;

    //参数初始化
    ucIndex = 0;

    // 初始化全局变量;
    gucAtParaIndex = 3;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[2].usParaLen = 0;
    gastAtParaList[0].usParaLen =1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    AT_GetModemSsCtxAddrFromClientId(ucIndex)->ucCusdStateInd = AT_CUSD_NT_IND_STATE;


    // MOCKER操作;
    MOCKER(At_CheckUssdNumLen)
    .stubs()
    .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(TAF_UnstructuredSSRsp)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    // 调用被测函数
    ulRst = At_SetCusdPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRst);

    GlobalMockObject::verify();


}


TEST_F(Test_At_SetCusdPara,Test_At_SetCusdPara_011)
{
    // 变量声明
    TAF_UINT32 ulRst;
    TAF_UINT8 ucIndex;

    //参数初始化
    ucIndex = 0;

    // 初始化全局变量;
    gucAtParaIndex = 3;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[2].usParaLen = 0;
    gastAtParaList[0].usParaLen =1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    AT_GetModemSsCtxAddrFromClientId(ucIndex)->ucCusdStateInd = AT_CUSD_NT_IND_STATE;


    // MOCKER操作;
    MOCKER(At_CheckUssdNumLen)
    .stubs()
    .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(TAF_UnstructuredSSRsp)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRst = At_SetCusdPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    GlobalMockObject::verify();


}


TEST_F(Test_At_SetCusdPara,Test_At_SetCusdPara_012)
{
    // 变量声明
    TAF_UINT32 ulRst;
    TAF_UINT8 ucIndex;

    //参数初始化
    ucIndex = 0;

    // 初始化全局变量;
    gucAtParaIndex = 3;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[2].usParaLen = 0;
    gastAtParaList[0].usParaLen =1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 2;
    AT_GetModemSsCtxAddrFromClientId(ucIndex)->ucCusdStateInd = AT_CUSD_NT_IND_STATE;


    // MOCKER操作;
    MOCKER(At_CheckUssdNumLen)
    .stubs()
    .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(TAF_SsGetUssdTi)
        .stubs()
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    // 调用被测函数
    ulRst = At_SetCusdPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRst);

    GlobalMockObject::verify();


}


TEST_F(Test_At_SetCusdPara,Test_At_SetCusdPara_013)
{
    // 变量声明
    TAF_UINT32 ulRst;
    TAF_UINT8 ucIndex;

    //参数初始化
    ucIndex = 0;

    // 初始化全局变量;
    gucAtParaIndex = 3;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[2].usParaLen = 0;
    gastAtParaList[0].usParaLen =1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 2;
    AT_GetModemSsCtxAddrFromClientId(ucIndex)->ucCusdStateInd = AT_CUSD_NT_IND_STATE;


    // MOCKER操作;
    MOCKER(At_CheckUssdNumLen).will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(TAF_SsGetUssdTi)
        .stubs()
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(TAF_SsReleaseComplete)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    // 调用被测函数
    ulRst = At_SetCusdPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRst);

    GlobalMockObject::verify();


}


TEST_F(Test_At_SetCusdPara,Test_At_SetCusdPara_014)
{
    // 变量声明
    TAF_UINT32 ulRst;
    TAF_UINT8 ucIndex;

    //参数初始化
    ucIndex = 0;

    // 初始化全局变量;
    gucAtParaIndex = 3;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[2].usParaLen = 0;
    gastAtParaList[0].usParaLen =1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 2;
    AT_GetModemSsCtxAddrFromClientId(ucIndex)->ucCusdStateInd = AT_CUSD_NT_IND_STATE;


    // MOCKER操作;
    MOCKER(At_CheckUssdNumLen).will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(TAF_SsGetUssdTi)
        .stubs()
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(TAF_SsReleaseComplete)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRst = At_SetCusdPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_OK, ulRst);

    GlobalMockObject::verify();


}


class Test_At_SetCmgiPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCmgiPara,Test_At_SetCmgiPara_101)
{
    VOS_UINT32  ulRst;

    // 变量声明
    gucAtParaIndex = 2;

    //参数初始化

    // 初始化全局变量;

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetCmgiPara(0);

    // 执行检查
    EXPECT_EQ((TAF_UINT32)AT_CMS_OPERATION_NOT_ALLOWED, ulRst);

    GlobalMockObject::verify();


}


TEST_F(Test_At_SetCmgiPara,Test_At_SetCmgiPara_102)
{
    // 变量声明
    VOS_UINT32 ulRst;

    //参数初始化

    // 初始化全局变量;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetCmgiPara(0);

    // 执行检查
    EXPECT_EQ((TAF_UINT32)AT_ERROR, ulRst);

    GlobalMockObject::verify();


}


TEST_F(Test_At_SetCmgiPara,Test_At_SetCmgiPara_103)
{
    // 变量声明
    VOS_UINT32      ulRst;

    //参数初始化

    // 初始化全局变量;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = MN_MSG_STATUS_MAX;
    g_stAtCpmsInfo.enMemReadorDelete = MN_MSG_MEM_STORE_NV;

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetCmgiPara(0);

    // 执行检查
    EXPECT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    GlobalMockObject::verify();

}
#endif



class Test_MMA_PhoneGetRssi: public ::testing::Test
{
public:
    VOS_UINT8       ucIndex;
    VOS_UINT8       OpId;

    void SetUp()
    {
        UT_STUB_INIT();
        OpId                              = 0;
        ucIndex                           = 0;
        g_stATParseCmd.ucCmdOptType       = AT_CMD_OPT_BUTT;
    }

    void TearDown()
    {
        OpId                              = 0;
        ucIndex                           = 0;
        g_stATParseCmd.ucCmdOptType       = AT_CMD_OPT_BUTT;
    }
};
#if 0

TEST_F(Test_MMA_PhoneGetRssi,Test_MMA_PhoneGetRssi_001)
{

    MOCKER(MN_PH_GetCurRat)
        .will(returnValue(MMC_MS_LTE));

    MOCKER(MN_APS_TransCsqReqToL4a)
        .will(returnValue((VOS_UINT32)VOS_ERR));

    MOCKER(MMA_ParaQueryReport)
        .expects(exactly(1));

    MMA_PhoneGetRssi(ucIndex,OpId);

    GlobalMockObject::verify();
}
#endif


class Test_AT_SetAlsPara: public ::testing::Test
{
public:
    VOS_UINT8       ucIndex;

    void SetUp()
    {
        UT_STUB_INIT();
        ucIndex                       = 0;
        gucAtParaIndex                = 0;
        gastAtParaList[0].usParaLen   = 0;
        gastAtParaList[0].ulParaValue = 0;
        gastAtParaList[1].usParaLen   = 0;
        gastAtParaList[1].ulParaValue = 0;
        AT_GetModemSsCtxAddrFromClientId(ucIndex)->ucSalsType                 = 0;
        g_stATParseCmd.ucCmdOptType   = AT_CMD_OPT_BUTT;
    }

    void TearDown()
    {
        ucIndex                       = 0;
        gucAtParaIndex                = 0;
        gastAtParaList[0].usParaLen   = 0;
        gastAtParaList[0].ulParaValue = 0;
        gastAtParaList[1].usParaLen   = 0;
        gastAtParaList[1].ulParaValue = 0;
        AT_GetModemSsCtxAddrFromClientId(ucIndex)->ucSalsType                 = 0;
        g_stATParseCmd.ucCmdOptType   = AT_CMD_OPT_BUTT;
    }
};


TEST_F(Test_AT_SetAlsPara,Test_AT_SetAlsPara_001)
{
    gucAtParaIndex                  = 0;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 2;

    MOCKER(MN_CALL_SendAppRequest)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_NO_ERROR));

    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, AT_SetAlsPara(ucIndex));
    ASSERT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_APP_SET_ALS_REQ, gastAtClientTab[ucIndex].CmdCurrentOpt);

    GlobalMockObject::verify();
}

TEST_F(Test_AT_SetAlsPara,Test_AT_SetAlsPara_002)
{
    gucAtParaIndex                  = 0;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 1;

    MOCKER(MN_CALL_SendAppRequest)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_NOMEM));

    EXPECT_EQ((VOS_UINT32)AT_ERROR, AT_SetAlsPara(ucIndex));

    GlobalMockObject::verify();
}

TEST_F(Test_AT_SetAlsPara,Test_AT_SetAlsPara_003)
{
    gucAtParaIndex = 3;

    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, AT_SetAlsPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

TEST_F(Test_AT_SetAlsPara,Test_AT_SetAlsPara_004)
{
    gucAtParaIndex              = 0;
    gastAtParaList[0].usParaLen = 0;

    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, AT_SetAlsPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

TEST_F(Test_AT_SetAlsPara,Test_AT_SetAlsPara_005)
{
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].usParaLen     = 0;

    EXPECT_EQ((VOS_UINT32)AT_OK, AT_SetAlsPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetCellSearch: public ::testing::Test
{
public:
    VOS_UINT8       ucIndex;

    void SetUp()
    {
        UT_STUB_INIT();
        ucIndex                     = 0;
        gucAtParaIndex              = 0;
        gastAtParaList[0].usParaLen = 0;
        g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_BUTT;
    }

    void TearDown()
    {
        ucIndex                     = 0;
        gucAtParaIndex              = 0;
         gastAtParaList[0].usParaLen =0;
        g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_BUTT;
    }
};

TEST_F(Test_At_SetCellSearch,Test_At_SetCellSearch_001)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    EXPECT_EQ((VOS_UINT32)AT_ERROR, At_SetCellSearch(ucIndex));

    GlobalMockObject::verify();
}

TEST_F(Test_At_SetCellSearch,Test_At_SetCellSearch_002)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 2;

    EXPECT_EQ((VOS_UINT32)AT_TOO_MANY_PARA, At_SetCellSearch(ucIndex));

    GlobalMockObject::verify();
}

TEST_F(Test_At_SetCellSearch,Test_At_SetCellSearch_003)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex              = 1;
    gastAtParaList[0].usParaLen = 0;

    EXPECT_EQ((VOS_UINT32)AT_ERROR, At_SetCellSearch(ucIndex));

    GlobalMockObject::verify();
}

TEST_F(Test_At_SetCellSearch,Test_At_SetCellSearch_004)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[0].usParaLen = 1;

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    EXPECT_EQ((VOS_UINT32)AT_ERROR, At_SetCellSearch(ucIndex));

    GlobalMockObject::verify();
}

TEST_F(Test_At_SetCellSearch,Test_At_SetCellSearch_005)
{
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[0].usParaLen = 1;

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, At_SetCellSearch(ucIndex));

    GlobalMockObject::verify();
}



class Test_At_SetCpolPara: public ::testing::Test
{
public:
    VOS_UINT8       ucIndex;

    void SetUp()
    {
        UT_STUB_INIT();
        ucIndex                       = 0;
        gucAtParaIndex                = 0;
        gastAtParaList[0].usParaLen   = 0;
        gastAtParaList[1].usParaLen   = 0;
        gastAtParaList[1].ulParaValue = 0;
        gastAtParaList[2].usParaLen   = 0;
        gastAtParaList[3].usParaLen   = 0;
        gastAtParaList[3].ulParaValue = 0;
        gastAtParaList[4].usParaLen   = 0;
        gastAtParaList[4].ulParaValue = 0;
        gastAtParaList[5].usParaLen   = 0;
        gastAtParaList[5].ulParaValue = 0;
        g_stATParseCmd.ucCmdOptType   = AT_CMD_OPT_BUTT;
    }

    void TearDown()
    {
        ucIndex                       = 0;
        gucAtParaIndex                = 0;
        gastAtParaList[0].usParaLen   = 0;
        gastAtParaList[1].usParaLen   = 0;
        gastAtParaList[1].ulParaValue = 0;
        gastAtParaList[2].usParaLen   = 0;
        gastAtParaList[3].usParaLen   = 0;
        gastAtParaList[3].ulParaValue = 0;
        gastAtParaList[4].usParaLen   = 0;
        gastAtParaList[4].ulParaValue = 0;
        gastAtParaList[5].usParaLen   = 0;
        gastAtParaList[5].ulParaValue = 0;
        g_stATParseCmd.ucCmdOptType   = AT_CMD_OPT_BUTT;
    }
};

TEST_F(Test_At_SetCpolPara,Test_At_SetCpolPara_001)
{
    gucAtParaIndex = 8;

    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetCpolPara(ucIndex));

    GlobalMockObject::verify();
}

TEST_F(Test_At_SetCpolPara,Test_At_SetCpolPara_002)
{
    gucAtParaIndex                = 2;
    gastAtParaList[0].usParaLen   = 0;
    gastAtParaList[1].usParaLen   = 1;
    gastAtParaList[1].ulParaValue = 1;

    EXPECT_EQ((VOS_UINT32)AT_OK, At_SetCpolPara(ucIndex));

    GlobalMockObject::verify();
}

TEST_F(Test_At_SetCpolPara,Test_At_SetCpolPara_003)
{
    gucAtParaIndex                = 2;
    gastAtParaList[0].usParaLen   = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen   = 1;
    gastAtParaList[1].ulParaValue = 1;
    AT_GetModemNetCtxAddrFromClientId(ucIndex)->enPrefPlmnType              = MN_PH_PREF_PLMN_HPLMN + 1;

    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetCpolPara(ucIndex));

    GlobalMockObject::verify();
}

TEST_F(Test_At_SetCpolPara,Test_At_SetCpolPara_004)
{
    gucAtParaIndex                = 2;
    gastAtParaList[0].usParaLen   = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen   = 1;
    gastAtParaList[1].ulParaValue = 0;
    AT_GetModemNetCtxAddrFromClientId(ucIndex)->enPrefPlmnType              = MN_PH_PREF_PLMN_HPLMN;

    gastAtParaList[2].usParaLen   = strlen("CMCC CHINA");
    strcpy((char*)gastAtParaList[2].aucPara,"CMCC CHINA");

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));


    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, At_SetCpolPara(ucIndex));

    ASSERT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CPOL_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    GlobalMockObject::verify();
}

TEST_F(Test_At_SetCpolPara,Test_At_SetCpolPara_005)
{
    gucAtParaIndex                = 2;
    gastAtParaList[0].usParaLen   = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen   = 1;
    gastAtParaList[1].ulParaValue = 1;
    AT_GetModemNetCtxAddrFromClientId(ucIndex)->enPrefPlmnType              = MN_PH_PREF_PLMN_HPLMN;

    gastAtParaList[2].usParaLen   = strlen("CMCC");
    strcpy((char*)gastAtParaList[2].aucPara,"CMCC");

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    EXPECT_EQ((VOS_UINT32)AT_ERROR, At_SetCpolPara(ucIndex));

    GlobalMockObject::verify();
}

TEST_F(Test_At_SetCpolPara,Test_At_SetCpolPara_006)
{
    gucAtParaIndex                = 2;
    gastAtParaList[0].usParaLen   = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen   = 1;
    gastAtParaList[1].ulParaValue = 2;
    AT_GetModemNetCtxAddrFromClientId(ucIndex)->enPrefPlmnType              = MN_PH_PREF_PLMN_HPLMN;

    gastAtParaList[2].usParaLen   = strlen("4540000");
    strcpy((char*)gastAtParaList[2].aucPara,"4540000");

    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetCpolPara(ucIndex));

    GlobalMockObject::verify();
}


class Test_AT_ProcUus1WithParm: public ::testing::Test
{
public:
    VOS_UINT8       ucIndex;

    void SetUp()
    {
        UT_STUB_INIT();
        ucIndex                       = 0;
        gucAtParaIndex                = 0;
        gastAtParaList[0].usParaLen   = 0;
        gastAtParaList[1].usParaLen   = 0;
        gastAtParaList[1].ulParaValue = 0;
        gastAtParaList[2].usParaLen   = 0;
        gastAtParaList[3].usParaLen   = 0;
        g_stATParseCmd.ucCmdOptType   = AT_CMD_OPT_BUTT;
    }

    void TearDown()
    {
        ucIndex                       = 0;
        gucAtParaIndex                = 0;
        gastAtParaList[0].usParaLen   = 0;
        gastAtParaList[1].usParaLen   = 0;
        gastAtParaList[1].ulParaValue = 0;
        gastAtParaList[2].usParaLen   = 0;
        gastAtParaList[3].usParaLen   = 0;
        g_stATParseCmd.ucCmdOptType   = AT_CMD_OPT_BUTT;
    }
};

TEST_F(Test_AT_ProcUus1WithParm,Test_AT_ProcUus1WithParm_001)
{
    gucAtParaIndex = 3;

    MOCKER(At_Auc2ul)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetCuus1Para(ucIndex));

    GlobalMockObject::verify();
}

TEST_F(Test_AT_ProcUus1WithParm,Test_AT_ProcUus1WithParm_002)
{
    gucAtParaIndex                  = 3;
    gastAtParaList[3].usParaLen     = 1;

    MOCKER(At_Auc2ul)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(At_AsciiNum2HexString)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetCuus1Para(ucIndex));

    GlobalMockObject::verify();
}

TEST_F(Test_AT_ProcUus1WithParm,Test_AT_ProcUus1WithParm_003)
{
    gucAtParaIndex                  = 3;
    gastAtParaList[3].usParaLen     = 1;

    MOCKER(At_Auc2ul)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(At_AsciiNum2HexString)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(MN_CALL_CheckUus1ParmValid)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_INVALIDPARM));

    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetCuus1Para(ucIndex));

    GlobalMockObject::verify();
}

TEST_F(Test_AT_ProcUus1WithParm,Test_AT_ProcUus1WithParm_004)
{
    gucAtParaIndex                  = 3;
    gastAtParaList[3].usParaLen     = 0;
    gastAtParaList[0].usParaLen     = 1;

    MOCKER(At_Auc2ul)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(MN_CALL_CheckUus1ParmValid)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_NO_ERROR));

    MOCKER(MN_CALL_SendAppRequest)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_NO_ERROR));

    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, At_SetCuus1Para(ucIndex));
    ASSERT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_APP_SET_UUSINFO_REQ, gastAtClientTab[ucIndex].CmdCurrentOpt);

    GlobalMockObject::verify();
}

TEST_F(Test_AT_ProcUus1WithParm,Test_AT_ProcUus1WithParm_005)
{
    gucAtParaIndex                  = 3;
    gastAtParaList[3].usParaLen     = 0;
    gastAtParaList[0].usParaLen     = 1;

    MOCKER(At_Auc2ul)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(MN_CALL_CheckUus1ParmValid)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_NO_ERROR));

    MOCKER(MN_CALL_SendAppRequest)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_NOMEM));

    EXPECT_EQ((VOS_UINT32)AT_ERROR, At_SetCuus1Para(ucIndex));

    GlobalMockObject::verify();
}


TEST_F(Test_AT_ProcUus1WithParm,Test_AT_ProcUus1WithParm_006)
{
    gucAtParaIndex                  = 3;

    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;

    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 1;

    gastAtParaList[2].usParaLen     = 1;
    gastAtParaList[2].ulParaValue   = 0;
    gastAtParaList[2].aucPara[0]    = '1';

    MOCKER(MN_CALL_SendAppRequest)
        .expects(exactly(1))
        .will(returnValue(VOS_OK));

    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, At_SetCuus1Para(ucIndex));
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_APP_SET_UUSINFO_REQ, gastAtClientTab[ucIndex].CmdCurrentOpt);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_ProcUus1WithParm,Test_AT_ProcUus1WithParm_007)
{
    gucAtParaIndex                  = 3;

    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;

    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 1;

    gastAtParaList[2].usParaLen     = 1;
    gastAtParaList[2].ulParaValue   = 0;
    gastAtParaList[2].aucPara[0]    = '1';
    gastAtParaList[3].usParaLen     = 2;
    gastAtParaList[3].aucPara[0]    = '7';
    gastAtParaList[3].aucPara[1]    = 'e';

    MOCKER(MN_CALL_SendAppRequest)
        .expects(exactly(1))
        .will(returnValue(VOS_OK));

    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, At_SetCuus1Para(ucIndex));
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_APP_SET_UUSINFO_REQ, gastAtClientTab[ucIndex].CmdCurrentOpt);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_ProcUus1WithParm,Test_AT_ProcUus1WithParm_008)
{
    gucAtParaIndex                  = 3;

    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;

    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 1;

    gastAtParaList[2].usParaLen     = 1;
    gastAtParaList[2].ulParaValue   = 0;
    gastAtParaList[2].aucPara[0]    = 7;

    MOCKER(MN_CALL_SendAppRequest)
        .expects(never());

    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetCuus1Para(ucIndex));

    GlobalMockObject::verify();
}


TEST_F(Test_AT_ProcUus1WithParm,Test_AT_ProcUus1WithParm_009)
{
    gucAtParaIndex                  = 3;

    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;

    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 1;

    gastAtParaList[2].usParaLen     = 1;
    gastAtParaList[2].ulParaValue   = 0;
    gastAtParaList[2].aucPara[0]    = '1';
    gastAtParaList[3].usParaLen     = 1;
    gastAtParaList[3].aucPara[0]    = '2';

    MOCKER(MN_CALL_SendAppRequest)
        .expects(never());

    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetCuus1Para(ucIndex));

    GlobalMockObject::verify();
}


TEST_F(Test_AT_ProcUus1WithParm,Test_AT_ProcUus1WithParm_010)
{
    gucAtParaIndex                  = 3;

    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;

    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 1;

    gastAtParaList[2].usParaLen     = 1;
    gastAtParaList[2].ulParaValue   = 0;
    gastAtParaList[2].aucPara[0]    = '1';
    gastAtParaList[2].aucPara[1]    = '2';

    gastAtParaList[3].usParaLen     = 2;
    gastAtParaList[3].aucPara[0]    = '1';
    gastAtParaList[3].aucPara[1]    = '2';

    MOCKER(MN_CALL_SendAppRequest)
        .expects(never());

    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetCuus1Para(ucIndex));

    GlobalMockObject::verify();
}


TEST_F(Test_AT_ProcUus1WithParm,Test_AT_ProcUus1WithParm_011)
{
    gucAtParaIndex                  = 3;

    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;

    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 1;

    gastAtParaList[2].usParaLen     = 1;
    gastAtParaList[2].ulParaValue   = 0;
    gastAtParaList[2].aucPara[0]    = '1';

    MOCKER(MN_CALL_SendAppRequest)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    EXPECT_EQ((VOS_UINT32)AT_ERROR, At_SetCuus1Para(ucIndex));

    GlobalMockObject::verify();
}




class Test_AT_SetCccPara: public ::testing::Test
{
public:
    TAF_UINT8                           ucIndex;

    void SetUp()
    {
        UT_STUB_INIT();
        ucIndex                                = 0;
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_INVALID;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

    }

    void TearDown()
    {
        gastAtClientTab[ucIndex].usClientId    = 0;
        gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_INVALID;
        g_stATParseCmd.ucCmdOptType            = AT_CMD_OPT_BUTT;

        gucAtParaIndex                         = 0;
    }
};



TEST_F(Test_AT_SetCccPara,Test_AT_SetCccPara_001)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;

    /* 变量初始化 */
    gucAtParaIndex                = 0;

    /* 函数打桩 */


    /* 调用被测函数 */
    ulRst = AT_SetCccPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetCccPara,Test_AT_SetCccPara_002)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucCallId;

    /* 变量初始化 */
    gucAtParaIndex                = 1;
    gastAtParaList[0].ulParaValue = 0;
    ucCallId                      = 0;

    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(), any(), eq((VOS_UINT16)AT_CC_MSG_STATE_QRY_REQ), mirror((VOS_VOID *)&ucCallId, (VOS_UINT32)sizeof(VOS_UINT8)), any(), any())
        .will(returnValue((VOS_UINT32)VOS_OK));

    /* 调用被测函数 */
    ulRst = AT_SetCccPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);
    ASSERT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CC_STATE_QUERY, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetCccPara,Test_AT_SetCccPara_003)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucCallId;

    /* 变量初始化 */
    gucAtParaIndex                = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen   = 0;
    ucCallId                      = 1;

    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(), any(), eq((VOS_UINT16)AT_CC_MSG_STATE_QRY_REQ), mirror((VOS_VOID *)&ucCallId, (VOS_UINT32)sizeof(VOS_UINT8)), any(), any())
        .will(returnValue((VOS_UINT32)VOS_OK));

    /* 调用被测函数 */
    ulRst = AT_SetCccPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);
    ASSERT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CC_STATE_QUERY, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetCccPara,Test_AT_SetCccPara_004)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucCallId;

    /* 变量初始化 */
    gucAtParaIndex                = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen   = 1;
    ucCallId                      = 2;
    gastAtParaList[1].ulParaValue = 2;

    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(), any(), eq((VOS_UINT16)AT_CC_MSG_STATE_QRY_REQ), mirror((VOS_VOID *)&ucCallId, (VOS_UINT32)sizeof(VOS_UINT8)), any(), any())
        .will(returnValue((VOS_UINT32)VOS_OK));

    /* 调用被测函数 */
    ulRst = AT_SetCccPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);
    ASSERT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CC_STATE_QUERY, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetCccPara,Test_AT_SetCccPara_005)
{
    /* 变量定义 */
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucCallId;

    /* 变量初始化 */
    gucAtParaIndex                = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen   = 1;
    ucCallId                      = 2;
    gastAtParaList[1].ulParaValue = 2;

    /* 函数打桩 */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(any(), any(), eq((VOS_UINT16)AT_CC_MSG_STATE_QRY_REQ), mirror((VOS_VOID *)&ucCallId, (VOS_UINT32)sizeof(VOS_UINT8)), any(), any())
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /* 调用被测函数 */
    ulRst = AT_SetCccPara(ucIndex);

    /* 结果验证 */
    ASSERT_EQ((VOS_UINT32)AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
class Test_At_SetCpinPara: public ::testing::Test
{
public:
    VOS_UINT8                                  ucIndex;
    MN_APP_REQ_MSG_STRU                       *pRcvMsg;
    MN_PH_SET_CPIN_REQ_STRU                   *pstSetPinReq;

    void SetUp()
    {
        UT_STUB_INIT();
        ucIndex = 0;

        pRcvMsg = (MN_APP_REQ_MSG_STRU *)PS_MEM_ALLOC(WUEPS_PID_AT, sizeof(MN_APP_REQ_MSG_STRU) + sizeof(MN_PH_SET_CPIN_REQ_STRU) );

        if (VOS_NULL_PTR == pRcvMsg)
        {
            return;
        }

        pstSetPinReq = (MN_PH_SET_CPIN_REQ_STRU *)(pRcvMsg->aucContent);
    }
    void TearDown()
    {
        ucIndex = 0;
        if (VOS_NULL_PTR != pRcvMsg)
        {
            PS_MEM_FREE(WUEPS_PID_AT, pRcvMsg);
        }
    }
};

TEST_F(Test_At_SetCpinPara,Test_At_SetCpinPara_001)
{
    VOS_UINT32                             ulRet;

    MOCKER(At_CheckCpinPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    ulRet = At_SetCpinPara(0);

    GlobalMockObject::verify();
}

TEST_F(Test_At_SetCpinPara,Test_At_SetCpinPara_002)
{
    VOS_UINT32                             ulRet;

    MOCKER(At_CheckCpinPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ulRet = At_SetCpinPara(0);

    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRet);
    GlobalMockObject::verify();
}

TEST_F(Test_At_SetCpinPara,Test_At_SetCpinPara_003)
{
    VOS_UINT32                             ulRet;

    MOCKER(At_CheckCpinPara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    ulRet = At_SetCpinPara(0);

    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRet);
    GlobalMockObject::verify();
}


class Test_At_SetSystemInfo: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetSystemInfo, Test_At_SetSystemInfo_001)
{
    /*变量定义*/
    VOS_UINT8                              ucRATMode;
    VOS_UINT32                             ulRet;

    /*本地变量初始化*/
    ucRATMode                   = 1;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /*调用被测函数 */
    ulRet = At_SetSystemInfo(ucRATMode);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);
    ASSERT_EQ((AT_CMD_OPT_TYPE)AT_CMD_OPT_SET_PARA_CMD, g_stATParseCmd.ucCmdOptType);

    GlobalMockObject::verify();
}



TEST_F(Test_At_SetSystemInfo, Test_At_SetSystemInfo_002)
{
    /*变量定义*/
    VOS_UINT8                              ucRATMode;
    VOS_UINT32                             ulRet;

    /*本地变量初始化*/
    ucRATMode                   = 1;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    MOCKER(Taf_ParaQuery)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    /*调用被测函数 */
    ulRet = At_SetSystemInfo(ucRATMode);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRet);
    ASSERT_EQ((AT_CMD_OPT_TYPE)AT_CMD_OPT_SET_CMD_NO_PARA, g_stATParseCmd.ucCmdOptType);

    GlobalMockObject::verify();
}




TEST_F(Test_At_SetSystemInfo, Test_At_SetSystemInfo_003)
{
    /*变量定义*/
    VOS_UINT8                              ucRATMode;
    VOS_UINT32                             ulRet;

    /*本地变量初始化*/
    ucRATMode                   = 1;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    MOCKER(Taf_ParaQuery)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    /*调用被测函数 */
    ulRet = At_SetSystemInfo(ucRATMode);

    /* 结果验证*/
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRet);
    ASSERT_EQ((AT_CMD_OPT_TYPE)AT_CMD_OPT_SET_CMD_NO_PARA, g_stATParseCmd.ucCmdOptType);

    GlobalMockObject::verify();
}



class Test_At_SetFPlmnPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetFPlmnPara, Test_At_SetFPlmnPara_001)
{
    /* 变量初始化 */
    TAF_UINT8 ucIndex = 1;

    g_stATParseCmd.ucCmdOptType =   AT_CMD_OPT_READ_CMD;

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetFPlmnPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetFPlmnPara, Test_At_SetFPlmnPara_002)
{
    /* 变量初始化 */
    TAF_UINT8 ucIndex = 1;

    gucAtParaIndex              =   3;
    g_stATParseCmd.ucCmdOptType =   AT_CMD_OPT_SET_PARA_CMD;

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetFPlmnPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetFPlmnPara, Test_At_SetFPlmnPara_003)
{
    /* 变量初始化 */
    TAF_UINT8 ucIndex = 1;

    gastAtParaList[0].usParaLen =   0;
    gucAtParaIndex              =   2;
    g_stATParseCmd.ucCmdOptType =   AT_CMD_OPT_SET_PARA_CMD;

    /* 调用被测函数并结果验证 */
    EXPECT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetFPlmnPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



class Test_At_SetUssdModePara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetUssdModePara, At_SetUssdModePara_01)
{
    TAF_UINT8                           ucIndex = 0;

    /*预置环境：*/
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_READ_CMD;

    EXPECT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS,At_SetUssdModePara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetUssdModePara, At_SetUssdModePara_02)
{
    TAF_UINT8      ucIndex = 0;

    /*预置环境：*/
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    //gastAtParaList[0].ulParaValue = 0xff;//AT_SMS_PS_CONCATENATE_FLAG
    //gastAtParaList[1].ulParaValue = 1;

    EXPECT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS,At_SetUssdModePara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetUssdModePara, At_SetUssdModePara_03)
{
    TAF_UINT8      ucIndex = 0;

    /*预置环境：*/
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 0;
    //gastAtParaList[0].ulParaValue = 0xff;//AT_SMS_PS_CONCATENATE_FLAG
    //gastAtParaList[1].ulParaValue = 1;

    EXPECT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS,At_SetUssdModePara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetUssdModePara, At_SetUssdModePara_04)
{
    TAF_UINT8      ucIndex = 0;

    /*预置环境：*/
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 2;
    //gastAtParaList[0].ulParaValue = 0xff;//AT_SMS_PS_CONCATENATE_FLAG
    //gastAtParaList[1].ulParaValue = 1;

    EXPECT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS,At_SetUssdModePara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetUssdModePara, At_SetUssdModePara_05)
{
    TAF_UINT8      ucIndex = 0;

    /*预置环境：*/
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    //gastAtParaList[0].ulParaValue = 0xff;//AT_SMS_PS_CONCATENATE_FLAG
    //gastAtParaList[1].ulParaValue = 1;

    EXPECT_EQ((TAF_UINT32)AT_OK,At_SetUssdModePara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetUssdModePara,Test_At_SetUssdModePara_06)
{
    TAF_UINT8      ucIndex = 0;
    USSD_TRANS_MODE_STRU                stCmpUssdTranMode;

    /*预置环境：*/
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    stCmpUssdTranMode.ucStatus = VOS_TRUE;
    stCmpUssdTranMode.ucUssdTransMode = gastAtParaList[0].ulParaValue;
    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .with(any(), any(), eq((VOS_UINT16)TAF_MSG_SET_USSDMODE_MSG), mirror((VOS_VOID *)&stCmpUssdTranMode, (VOS_UINT32)sizeof(stCmpUssdTranMode)), any(), any())
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    EXPECT_EQ((VOS_UINT32)AT_ERROR, At_SetUssdModePara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetUssdModePara,Test_At_SetUssdModePara_07)
{
    TAF_UINT8      ucIndex = 0;
    USSD_TRANS_MODE_STRU                stCmpUssdTranMode;

    /*预置环境：*/
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    stCmpUssdTranMode.ucStatus = VOS_TRUE;
    stCmpUssdTranMode.ucUssdTransMode = gastAtParaList[0].ulParaValue;
    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .with(any(), any(), eq((VOS_UINT16)TAF_MSG_SET_USSDMODE_MSG), mirror((VOS_VOID *)&stCmpUssdTranMode, (VOS_UINT32)sizeof(stCmpUssdTranMode)), any(), any())
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    EXPECT_EQ((VOS_UINT32)AT_OK, At_SetUssdModePara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
class Test_At_ConvertSysCfgExRat: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};

#if (FEATURE_ON == FEATURE_LTE)

TEST_F(Test_At_ConvertSysCfgExRat,Test_At_ConvertSysCfgExRat_001)
{
    AT_SYSCFGEX_RAT_ORDER_STRU         stSysCfgExRatOrder;
    TAF_MMA_RAT_ORDER_STRU              stRatOrder;
    AT_MODEM_SPT_RAT_STRU             *pstSptRatList = VOS_NULL_PTR;

    pstSptRatList = AT_GetSptRatFromModemId(MODEM_ID_0);

    pstSptRatList->ucPlatformSptLte = VOS_TRUE;
    pstSptRatList->ucPlatformSptWcdma = VOS_TRUE;
    pstSptRatList->ucPlatformSptGsm = VOS_TRUE;

    stSysCfgExRatOrder.ucRatOrderNum = 1;
    stSysCfgExRatOrder.aenRatOrder[0] = AT_SYSCFGEX_RAT_AUTO;
    At_ConvertSysCfgExRat((VOS_UINT8)AT_CLIENT_TAB_PCUI_INDEX, (AT_SYSCFGEX_RAT_ORDER_STRU *)&stSysCfgExRatOrder, &stRatOrder);

    EXPECT_EQ((VOS_UINT8)TAF_PH_MAX_GUL_RAT_NUM, stRatOrder.ucRatOrderNum);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, begin */
    EXPECT_EQ((TAF_MMA_RAT_TYPE_ENUM_UINT8)TAF_MMA_RAT_LTE, stRatOrder.aenRatOrder[0]);
    EXPECT_EQ((TAF_MMA_RAT_TYPE_ENUM_UINT8)TAF_MMA_RAT_WCDMA, stRatOrder.aenRatOrder[1]);
    EXPECT_EQ((TAF_MMA_RAT_TYPE_ENUM_UINT8)TAF_MMA_RAT_GSM, stRatOrder.aenRatOrder[2]);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, end */


    GlobalMockObject::verify();

}
#else

TEST_F(Test_At_ConvertSysCfgExRat,Test_At_ConvertSysCfgExRat_002)
{
    AT_SYSCFGEX_RAT_ORDER_STRU         stSysCfgExRatOrder;
    TAF_MMA_RAT_ORDER_STRU              stRatOrder;
    AT_MODEM_SPT_RAT_STRU             *pstSptRatList = VOS_NULL_PTR;

    pstSptRatList = AT_GetSptRatFromModemId(MODEM_ID_0);

    pstSptRatList->ucPlatformSptLte = VOS_TRUE;
    pstSptRatList->ucPlatformSptWcdma = VOS_TRUE;
    pstSptRatList->ucPlatformSptGsm = VOS_TRUE;

    stSysCfgExRatOrder.ucRatOrderNum = 1;
    stSysCfgExRatOrder.aenRatOrder[0] = AT_SYSCFGEX_RAT_AUTO;
    At_ConvertSysCfgExRat((VOS_UINT8)AT_CLIENT_TAB_PCUI_INDEX, (AT_SYSCFGEX_RAT_ORDER_STRU *)&stSysCfgExRatOrder, &stRatOrder);

    EXPECT_EQ((VOS_UINT8)TAF_PH_MAX_GU_RAT_NUM, stRatOrder.ucRatOrderNum);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, begin */
    EXPECT_EQ((TAF_MMA_RAT_TYPE_ENUM_UINT8)TAF_MMA_RAT_WCDMA, stRatOrder.aenRatOrder[0]);
    EXPECT_EQ((TAF_MMA_RAT_TYPE_ENUM_UINT8)TAF_MMA_RAT_GSM, stRatOrder.aenRatOrder[1]);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, end */


    GlobalMockObject::verify();

}
#endif

#if (FEATURE_ON == FEATURE_LTE)

TEST_F(Test_At_ConvertSysCfgExRat,Test_At_ConvertSysCfgExRat_003)
{
    AT_SYSCFGEX_RAT_ORDER_STRU         *pstSysCfgExRatOrder;
    TAF_MMA_RAT_ORDER_STRU              *pstRatOrder;
    AT_MODEM_SPT_RAT_STRU              *pstSptRatList = VOS_NULL_PTR;

    pstSptRatList = AT_GetSptRatFromModemId(MODEM_ID_0);
    pstSptRatList->ucPlatformSptLte = VOS_TRUE;
    pstSptRatList->ucPlatformSptWcdma = VOS_TRUE;
    pstSptRatList->ucPlatformSptGsm = VOS_TRUE;

    pstSysCfgExRatOrder = (AT_SYSCFGEX_RAT_ORDER_STRU*)malloc(sizeof(AT_SYSCFGEX_RAT_ORDER_STRU));
    pstRatOrder = (TAF_MMA_RAT_ORDER_STRU*)malloc(sizeof(TAF_MMA_RAT_ORDER_STRU));
    pstSysCfgExRatOrder->ucRatOrderNum = 1;
    pstSysCfgExRatOrder->aenRatOrder[0] = AT_SYSCFGEX_RAT_AUTO;

    At_ConvertSysCfgExRat((VOS_UINT8)AT_CLIENT_TAB_PCUI_INDEX, pstSysCfgExRatOrder, pstRatOrder);

    EXPECT_EQ((VOS_UINT8)TAF_PH_MAX_GUL_RAT_NUM, pstRatOrder->ucRatOrderNum);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, begin */
    EXPECT_EQ((TAF_MMA_RAT_TYPE_ENUM_UINT8)TAF_MMA_RAT_LTE, pstRatOrder->aenRatOrder[0]);
    EXPECT_EQ((TAF_MMA_RAT_TYPE_ENUM_UINT8)TAF_MMA_RAT_WCDMA, pstRatOrder->aenRatOrder[1]);
    EXPECT_EQ((TAF_MMA_RAT_TYPE_ENUM_UINT8)TAF_MMA_RAT_GSM, pstRatOrder->aenRatOrder[2]);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, end */

    GlobalMockObject::verify();
}


TEST_F(Test_At_ConvertSysCfgExRat,Test_At_ConvertSysCfgExRat_004)
{
    VOS_UINT8                           ucClientId;
    AT_SYSCFGEX_RAT_ORDER_STRU         *pstSysCfgExRatOrder;
    TAF_MMA_RAT_ORDER_STRU              *pstRatOrder;
    TAF_MMA_RAT_ORDER_STRU               stPrioRatList;

    pstSysCfgExRatOrder = (AT_SYSCFGEX_RAT_ORDER_STRU*)malloc(sizeof(AT_SYSCFGEX_RAT_ORDER_STRU));
    pstRatOrder = (TAF_MMA_RAT_ORDER_STRU*)malloc(sizeof(TAF_MMA_RAT_ORDER_STRU));
    pstSysCfgExRatOrder->ucRatOrderNum = 1;
    pstSysCfgExRatOrder->aenRatOrder[0] = AT_SYSCFGEX_RAT_NO_CHANGE;
    stPrioRatList.ucRatOrderNum = TAF_PH_MAX_GUL_RAT_NUM;
	/* Modified by h00313353 for Iteration 13, 2015-4-10, begin */
    stPrioRatList.aenRatOrder[0] = TAF_MMA_RAT_LTE;
    stPrioRatList.aenRatOrder[1] = TAF_MMA_RAT_WCDMA;
    stPrioRatList.aenRatOrder[2] = TAF_MMA_RAT_GSM;
	/* Modified by h00313353 for Iteration 13, 2015-4-10, end */

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(),any(),outBoundP((VOS_VOID*)&stPrioRatList, (VOS_UINT32)sizeof(stPrioRatList)),any())
        .will(returnValue((VOS_UINT32)NV_OK));

    At_ConvertSysCfgExRat((VOS_UINT8)AT_CLIENT_TAB_PCUI_INDEX, pstSysCfgExRatOrder, pstRatOrder);

    EXPECT_EQ((VOS_UINT8)TAF_PH_MAX_GUL_RAT_NUM, pstRatOrder->ucRatOrderNum);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, begin */
    EXPECT_EQ((TAF_MMA_RAT_TYPE_ENUM_UINT8)TAF_MMA_RAT_LTE, pstRatOrder->aenRatOrder[0]);
    EXPECT_EQ((TAF_MMA_RAT_TYPE_ENUM_UINT8)TAF_MMA_RAT_WCDMA, pstRatOrder->aenRatOrder[1]);
    EXPECT_EQ((TAF_MMA_RAT_TYPE_ENUM_UINT8)TAF_MMA_RAT_GSM, pstRatOrder->aenRatOrder[2]);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, end */

    GlobalMockObject::verify();
}

#endif

TEST_F(Test_At_ConvertSysCfgExRat,Test_At_ConvertSysCfgExRat_005)
{
    VOS_UINT8                           ucClientId;
    AT_SYSCFGEX_RAT_ORDER_STRU         *pstSysCfgExRatOrder;
    TAF_MMA_RAT_ORDER_STRU              *pstRatOrder;

    pstSysCfgExRatOrder = (AT_SYSCFGEX_RAT_ORDER_STRU*)malloc(sizeof(AT_SYSCFGEX_RAT_ORDER_STRU));
    pstRatOrder = (TAF_MMA_RAT_ORDER_STRU*)malloc(sizeof(TAF_MMA_RAT_ORDER_STRU));
    pstSysCfgExRatOrder->ucRatOrderNum = 1;
    pstSysCfgExRatOrder->aenRatOrder[0] = AT_SYSCFGEX_RAT_NO_CHANGE;

    MOCKER(AT_GetRatOrderNvim).expects(never());

    At_ConvertSysCfgExRat((VOS_UINT8)AT_CLIENT_BUTT, pstSysCfgExRatOrder, pstRatOrder);

    GlobalMockObject::verify();
}

TEST_F(Test_At_ConvertSysCfgExRat,Test_At_ConvertSysCfgExRat_006)
{
    AT_SYSCFGEX_RAT_ORDER_STRU         *pstSysCfgExRatOrder;
    TAF_MMA_RAT_ORDER_STRU              *pstRatOrder;
    AT_MODEM_SPT_RAT_STRU              *pstSptRatList = VOS_NULL_PTR;

    pstSptRatList = AT_GetSptRatFromModemId(MODEM_ID_0);
    pstSptRatList->ucPlatformSptLte = VOS_FALSE;
    pstSptRatList->ucPlatformSptWcdma = VOS_TRUE;
    pstSptRatList->ucPlatformSptGsm = VOS_TRUE;

    pstSysCfgExRatOrder = (AT_SYSCFGEX_RAT_ORDER_STRU*)malloc(sizeof(AT_SYSCFGEX_RAT_ORDER_STRU));
    pstRatOrder = (TAF_MMA_RAT_ORDER_STRU*)malloc(sizeof(TAF_MMA_RAT_ORDER_STRU));
    pstSysCfgExRatOrder->ucRatOrderNum = 1;
    pstSysCfgExRatOrder->aenRatOrder[0] = AT_SYSCFGEX_RAT_AUTO;

    At_ConvertSysCfgExRat((VOS_UINT8)AT_CLIENT_TAB_PCUI_INDEX, pstSysCfgExRatOrder, pstRatOrder);

    EXPECT_EQ((VOS_UINT8)TAF_PH_MAX_GU_RAT_NUM, pstRatOrder->ucRatOrderNum);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, begin */
    EXPECT_EQ((TAF_MMA_RAT_TYPE_ENUM_UINT8)TAF_MMA_RAT_WCDMA, pstRatOrder->aenRatOrder[0]);
    EXPECT_EQ((TAF_MMA_RAT_TYPE_ENUM_UINT8)TAF_MMA_RAT_GSM, pstRatOrder->aenRatOrder[1]);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, end */

    GlobalMockObject::verify();
}

#if (FEATURE_OFF == FEATURE_LTE)

TEST_F(Test_At_ConvertSysCfgExRat,Test_At_ConvertSysCfgExRat_007)
{
    VOS_UINT8                           ucClientId;
    AT_SYSCFGEX_RAT_ORDER_STRU         *pstSysCfgExRatOrder;
    TAF_MMA_RAT_ORDER_STRU              *pstRatOrder;
    TAF_MMA_RAT_ORDER_STRU               stPrioRatList;

    pstSysCfgExRatOrder = (AT_SYSCFGEX_RAT_ORDER_STRU*)malloc(sizeof(AT_SYSCFGEX_RAT_ORDER_STRU));
    pstRatOrder = (TAF_MMA_RAT_ORDER_STRU*)malloc(sizeof(TAF_MMA_RAT_ORDER_STRU));
    pstSysCfgExRatOrder->ucRatOrderNum = 1;
    pstSysCfgExRatOrder->aenRatOrder[0] = AT_SYSCFGEX_RAT_NO_CHANGE;
    stPrioRatList.ucRatOrderNum = TAF_PH_MAX_GU_RAT_NUM;
	/* Modified by h00313353 for Iteration 13, 2015-4-10, begin */
    stPrioRatList.aenRatOrder[0] = TAF_MMA_RAT_WCDMA;
    stPrioRatList.aenRatOrder[1] = TAF_MMA_RAT_GSM;
	/* Modified by h00313353 for Iteration 13, 2015-4-10, end */

    MOCKER(NV_ReadEx)
        .expects(exactly(1))
        .with(any(),any(),outBoundP((VOS_VOID *)&stPrioRatList,(VOS_UINT32)sizeof(stPrioRatList)),any())
        .will(returnValue((VOS_UINT32)NV_OK));

    At_ConvertSysCfgExRat((VOS_UINT8)AT_CLIENT_TAB_PCUI_INDEX, pstSysCfgExRatOrder, pstRatOrder);

    EXPECT_EQ((VOS_UINT8)TAF_PH_MAX_GU_RAT_NUM, pstRatOrder->ucRatOrderNum);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, begin */
    EXPECT_EQ((TAF_MMA_RAT_TYPE_ENUM_UINT8)TAF_MMA_RAT_WCDMA, pstRatOrder->aenRatOrder[0]);
    EXPECT_EQ((TAF_MMA_RAT_TYPE_ENUM_UINT8)TAF_MMA_RAT_GSM, pstRatOrder->aenRatOrder[1]);
	/* Modified by h00313353 for Iteration 13, 2015-4-10, end */

    GlobalMockObject::verify();
}
#endif


class Test_AT_SetApdsPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        ucIndex                         = 0;
        g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;

        gastAtParaList[0].usParaLen     = 1;
        gastAtParaList[0].aucPara[0]    = '1';
        gastAtParaList[1].usParaLen     = 1;
        gastAtParaList[1].aucPara[0]    = '2';
        gastAtParaList[2].usParaLen     = 1;
        gastAtParaList[2].ulParaValue   = 1;
        gastAtParaList[3].usParaLen     = 1;
        gastAtParaList[3].ulParaValue   = 0;
        gastAtParaList[4].usParaLen     = 1;
        gastAtParaList[4].ulParaValue   = MN_CALL_TYPE_VOICE;
    }

    void TearDown()
    {

    }

    VOS_UINT8                           ucIndex;
};

TEST_F(Test_AT_SetApdsPara, Test_AT_SetApdsPara_001)
{
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_TEST_CMD;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetApdsPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApdsPara, Test_AT_SetApdsPara_002)
{
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex  = 6;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetApdsPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApdsPara, Test_AT_SetApdsPara_003)
{
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex              = 5;
    gastAtParaList[0].usParaLen = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetApdsPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApdsPara, Test_AT_SetApdsPara_004)
{
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex  = 5;
    gastAtParaList[0].usParaLen = MN_CALL_MAX_CALLED_ASCII_NUM_LEN + 2;
    gastAtParaList[0].aucPara[0] = '+';

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetApdsPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApdsPara, Test_AT_SetApdsPara_005)
{
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex                  = 5;
    gastAtParaList[0].usParaLen     = 2;
    gastAtParaList[0].aucPara[0]    = 'd';


    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetApdsPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApdsPara, Test_AT_SetApdsPara_006)
{
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex              = 5;
    gastAtParaList[0].usParaLen = (MN_CALL_MAX_BCD_NUM_LEN * 2);
    gastAtParaList[1].usParaLen = MN_CALL_MAX_SUBADDR_INFO_LEN + 1;

    memcpy(gastAtParaList[0].aucPara,
           "16415643165125432164316431544511841321684154841315",
           gastAtParaList[0].usParaLen);
    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetApdsPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApdsPara, Test_AT_SetApdsPara_007)
{
    VOS_UINT32                          ulRet;
    VOS_CHAR                            acCalledNum[] = "+123456789012345678901234567890123456789";
    VOS_CHAR                            acSubaddr[]   = "1234567890123456789";

    // 参数初始化
    //PS_MEM_SET(&stOrigParam, 0x00, sizeof(MN_CALL_ORIG_PARAM_STRU));
    //PS_MEM_SET(stOrigParam.stDialNumber.aucBcdNum, acCalledNum, sizeof(acCalledNum));

    // 初始化全局变量;
    gucAtParaIndex              = 5;
    gastAtParaList[0].usParaLen = sizeof(acCalledNum);
    PS_MEM_CPY(gastAtParaList[0].aucPara,
               acCalledNum,
               gastAtParaList[0].usParaLen);

    gastAtParaList[1].usParaLen = sizeof(acSubaddr);
    PS_MEM_CPY(gastAtParaList[1].aucPara,
               acSubaddr,
               gastAtParaList[1].usParaLen);

    // MOCKER操作;

    // 调用被测函数

    MOCKER(MN_CALL_SendAppRequest)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_OK));

    ulRet = AT_SetApdsPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApdsPara, Test_AT_SetApdsPara_008)
{
    VOS_UINT32  ulRet;
    VOS_CHAR                            acCalledNum[] = "123456789012345678901234567890123456789";
    VOS_CHAR                            acSubaddr[]   = "1234567890123456789";

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex                  = 5;
    gastAtParaList[4].ulParaValue   = MN_CALL_TYPE_VIDEO;

    gastAtParaList[0].usParaLen = sizeof(acCalledNum);
    PS_MEM_CPY(gastAtParaList[0].aucPara,
               acCalledNum,
               gastAtParaList[0].usParaLen);

    gastAtParaList[1].usParaLen = sizeof(acSubaddr);
    PS_MEM_CPY(gastAtParaList[1].aucPara,
               acSubaddr,
               gastAtParaList[1].usParaLen);

    // MOCKER操作;
    MOCKER(MN_CALL_SendAppRequest)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetApdsPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetApdsPara, Test_AT_SetApdsPara_009)
{
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex                  = 5;
    gastAtParaList[4].ulParaValue   = MN_CALL_TYPE_VIDEO;

    // MOCKER操作;
    MOCKER(MN_CALL_Orig)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_SEND_MSG_ERROR));

    // 调用被测函数
    ulRet = AT_SetApdsPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRet);

    GlobalMockObject::verify();
}



TEST_F(Test_AT_SetApdsPara, Test_AT_SetApdsPara_010)
{
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex                  = 5;
    gastAtParaList[0].usParaLen     = 6;
    PS_MEM_CPY(gastAtParaList[0].aucPara, "ABCabc", gastAtParaList[0].usParaLen);
    gastAtParaList[2].ulParaValue   = 0;

    // MOCKER操作;
    MOCKER(MN_CALL_Orig)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));

    // 调用被测函数
    ulRet = AT_SetApdsPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


class Test_AT_SetClprPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        ucIndex                         = 0;
        g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;

        gastAtParaList[0].usParaLen     = 1;
        gastAtParaList[0].aucPara[0]    = '1';
        gastAtParaList[0].ulParaValue   = 1;
        gucAtParaIndex                  = 1;
    }

    void TearDown()
    {

    }

    VOS_UINT8                           ucIndex;
};

TEST_F(Test_AT_SetClprPara, Test_AT_SetClprPara_001)
{
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_TEST_CMD;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetClprPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetClprPara, Test_AT_SetClprPara_002)
{
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex  = 2;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetClprPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetClprPara, Test_AT_SetClprPara_003)
{
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;

    // MOCKER操作;
    MOCKER(MN_CALL_SendAppRequest)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_SEND_MSG_ERROR));

    // 调用被测函数
    ulRet = AT_SetClprPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetClprPara, Test_AT_SetClprPara_004)
{
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetClprPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CLPR_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    GlobalMockObject::verify();
}


class Test_At_SetCerssiPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCerssiPara, Test_At_SetCerssiPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_CMD_NO_PARA;
    AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucCerssiReportType                 = AT_CERSSI_REPORT_TYPE_NOT_REPORT;

    // MOCKER操作

    // 调用被测函数
    ulRet = At_SetCerssiPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);
    EXPECT_EQ((AT_CERSSI_REPORT_TYPE_ENUM_UINT8)AT_CERSSI_REPORT_TYPE_NOT_REPORT, AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucCerssiReportType);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCerssiPara, Test_At_SetCerssiPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucCerssiReportType                 = AT_CERSSI_REPORT_TYPE_NOT_REPORT;
    gucAtParaIndex                  = 3;

    // MOCKER操作

    // 调用被测函数
    ulRet = At_SetCerssiPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);
    EXPECT_EQ((AT_CERSSI_REPORT_TYPE_ENUM_UINT8)AT_CERSSI_REPORT_TYPE_NOT_REPORT, AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucCerssiReportType);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCerssiPara, Test_At_SetCerssiPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex         = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucCerssiReportType                 = AT_CERSSI_REPORT_TYPE_NOT_REPORT;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 0;

    // MOCKER操作

    // 调用被测函数
    ulRet = At_SetCerssiPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);
    EXPECT_EQ((AT_CERSSI_REPORT_TYPE_ENUM_UINT8)AT_CERSSI_REPORT_TYPE_NOT_REPORT, AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucCerssiReportType);

    GlobalMockObject::verify();
}



TEST_F(Test_At_SetCerssiPara, Test_At_SetCerssiPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;


    // 参数初始化
    ucIndex                       = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucCerssiReportType                 = AT_CERSSI_REPORT_TYPE_NOT_REPORT;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 3;

    // MOCKER操作
    MOCKER(TAF_MMA_SetCerssiReq)
        .expects(exactly(1))
        .will(returnValue(0));

#if(FEATURE_ON == FEATURE_LTE)
    MOCKER(AT_IsModemSupportRat)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    MOCKER(AT_SetLIndCfgReq)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_OK));
#endif

    // 调用被测函数
    ulRet = At_SetCerssiPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_OK, ulRet);
    EXPECT_EQ((AT_CERSSI_REPORT_TYPE_ENUM_UINT8)AT_CERSSI_REPORT_TYPE_3DB_CHANGE_REPORT, AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucCerssiReportType);
    EXPECT_EQ(0, AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucCerssiMinTimerInterval);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCerssiPara, Test_At_SetCerssiPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                       = AT_CLIENT_TAB_PCUI_INDEX;


    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucCerssiReportType                 = AT_CERSSI_REPORT_TYPE_NOT_REPORT;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = AT_CERSSI_REPORT_TYPE_NOT_REPORT;
    AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucCerssiMinTimerInterval    = 0;

    // MOCKER操作
    MOCKER(TAF_MMA_SetCerssiReq)
        .expects(exactly(1))
        .will(returnValue(0));

#if(FEATURE_ON == FEATURE_LTE)
    MOCKER(AT_IsModemSupportRat)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_FALSE));
#endif

    // 调用被测函数
    ulRet = At_SetCerssiPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_OK, ulRet);
    EXPECT_EQ((AT_CERSSI_REPORT_TYPE_ENUM_UINT8)AT_CERSSI_REPORT_TYPE_NOT_REPORT, AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucCerssiReportType);

    GlobalMockObject::verify();
}



TEST_F(Test_At_SetCerssiPara, Test_At_SetCerssiPara_006)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                       = AT_CLIENT_TAB_PCUI_INDEX;


    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucCerssiReportType                 = AT_CERSSI_REPORT_TYPE_3DB_CHANGE_REPORT;
    gucAtParaIndex                  = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = AT_CERSSI_REPORT_TYPE_NOT_REPORT;
    AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucCerssiMinTimerInterval        = 3;

    // MOCKER操作
#if(FEATURE_ON == FEATURE_LTE)
    MOCKER(AT_IsModemSupportRat)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_FALSE));
#endif

    MOCKER(TAF_MMA_SetCerssiReq)
        .expects(exactly(1))
        .will(returnValue(0));

    // 调用被测函数
    ulRet = At_SetCerssiPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_OK, ulRet);
    EXPECT_EQ((AT_CERSSI_REPORT_TYPE_ENUM_UINT8)AT_CERSSI_REPORT_TYPE_NOT_REPORT, AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucCerssiReportType);

    GlobalMockObject::verify();
}

TEST_F(Test_At_SetCerssiPara, Test_At_SetCerssiPara_007)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                       = AT_CLIENT_TAB_PCUI_INDEX;


    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucCerssiReportType                 = AT_CERSSI_REPORT_TYPE_NOT_REPORT;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = AT_CERSSI_REPORT_TYPE_NOT_REPORT;
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 3;
    AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucCerssiMinTimerInterval        = 3;

    // MOCKER操作
#if(FEATURE_ON == FEATURE_LTE)
    MOCKER(AT_IsModemSupportRat)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_FALSE));
#endif

    // 调用被测函数
    ulRet = At_SetCerssiPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_OK, ulRet);
    EXPECT_EQ((AT_CERSSI_REPORT_TYPE_ENUM_UINT8)AT_CERSSI_REPORT_TYPE_NOT_REPORT, AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucCerssiReportType);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCerssiPara, Test_At_SetCerssiPara_008)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    // 参数初始化
    ucIndex                       = AT_CLIENT_TAB_PCUI_INDEX;

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType     = AT_CMD_OPT_SET_PARA_CMD;
    AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucCerssiReportType                 = AT_CERSSI_REPORT_TYPE_3DB_CHANGE_REPORT;
    gucAtParaIndex                  = 2;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = AT_CERSSI_REPORT_TYPE_NOT_REPORT;
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 10;
    AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucCerssiMinTimerInterval        = 3;

    // MOCKER操作
    MOCKER(TAF_MMA_SetCerssiReq)
        .expects(exactly(1))
        .will(returnValue(0));

#if(FEATURE_ON == FEATURE_LTE)
    MOCKER(AT_IsModemSupportRat)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)VOS_FALSE));
#endif

    // 调用被测函数
    ulRet = At_SetCerssiPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_OK, ulRet);
    EXPECT_EQ((AT_CERSSI_REPORT_TYPE_ENUM_UINT8)AT_CERSSI_REPORT_TYPE_NOT_REPORT, AT_GetModemNetCtxAddrFromClientId(ucIndex)->ucCerssiReportType);


    GlobalMockObject::verify();
}

class Test_At_SetCmmiPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCmmiPara, Test_At_SetCmmiPara_001)
{
    VOS_UINT8                           ucIndex = 0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;
    AT_MODEM_CC_CTX_STRU               *pstCcCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = MODEM_ID_0;

    pstCcCtx = AT_GetModemCcCtxAddrFromClientId(ucIndex);
    pstCcCtx->ulCurIsExistCallFlag = VOS_FALSE;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);


    /* 桩函数 */
    MOCKER(MN_MmiStringParse).stubs().will(returnValue((TAF_UINT32)MN_ERR_UNSPECIFIED));

    /* 调用函数 */
    ulRst = At_SetCmmiPara(ucIndex);

    /* 检查结果 */
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCmmiPara, Test_At_SetCmmiPara_002)
{
    VOS_UINT8                           ucIndex = 0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;
    AT_MODEM_CC_CTX_STRU               *pstCcCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = MODEM_ID_0;

    pstCcCtx = AT_GetModemCcCtxAddrFromClientId(ucIndex);
    pstCcCtx->ulCurIsExistCallFlag = VOS_TRUE;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);
    gastAtParaList[0].ulParaValue = 1;

    /* 桩函数 */
    MOCKER(MN_MmiStringParse).stubs().will(returnValue(MN_ERR_NO_ERROR));
    MOCKER(At_GetMnOptType).stubs().will(returnValue(AT_CMD_CLIP_READ));

    /* 调用函数 */
    ulRst = At_SetCmmiPara(ucIndex);

    /* 检查结果 */
    EXPECT_EQ((VOS_UINT32)AT_OK, ulRst);
    EXPECT_EQ(1, pstSsCtx->ucClipType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


class Test_At_SetCuus1Para: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
        gucAtParaIndex = 3;
    }
    void TearDown()
    {
        gucAtParaIndex = 0;
    }
};


TEST_F(Test_At_SetCuus1Para, Test_At_SetCuus1Para_001)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 1;
    gastAtParaList[2].usParaLen = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;

    /* 调用函数 */
    ulRst = At_SetCuus1Para(ucIndex);

    /* 检查 */
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_APP_SET_UUSINFO_REQ, gastAtClientTab[ucIndex].CmdCurrentOpt);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}

#if(FEATURE_ON == FEATURE_MULTI_MODEM)
TEST_F(Test_At_SetCuus1Para, Test_At_SetCuus1Para_002)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 1;
    gastAtParaList[2].usParaLen = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;

    /* 调用函数 */
    ulRst = At_SetCuus1Para(ucIndex);

    /* 检查 */
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_APP_SET_UUSINFO_REQ, gastAtClientTab[ucIndex].CmdCurrentOpt);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
#endif
class Test_At_CheckUssdNumLen: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_CheckUssdNumLen, Test_At_CheckUssdNumLen_001)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    TAF_SS_DATA_CODING_SCHEME           dcs = AT_CSCS_IRA_CODE;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);
    pstSsCtx->usUssdTransMode = AT_USSD_NON_TRAN_MODE;

    ulRst = At_CheckUssdNumLen(ucIndex, dcs, 183);

    EXPECT_EQ((TAF_UINT32)AT_FAILURE, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}

#if(FEATURE_ON == FEATURE_MULTI_MODEM)
TEST_F(Test_At_CheckUssdNumLen, Test_At_CheckUssdNumLen_002)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    TAF_SS_DATA_CODING_SCHEME           dcs = AT_CSCS_IRA_CODE;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);
    pstSsCtx->usUssdTransMode = AT_USSD_TRAN_MODE;

    ulRst = At_CheckUssdNumLen(ucIndex, dcs, 400);

    EXPECT_EQ((TAF_UINT32)AT_FAILURE, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
#endif
class Test_At_SetCusdPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
        gucAtParaIndex = 3;
    }
    void TearDown()
    {
        gucAtParaIndex = 0;
    }
};


TEST_F(Test_At_SetCusdPara, Test_At_SetCusdPara_001)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);
    pstSsCtx->usUssdTransMode = AT_USSD_NON_TRAN_MODE;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 2;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[2].usParaLen = 0;

    /* 桩函数 */
    MOCKER(TAF_SsReleaseComplete).stubs().will(returnValue((VOS_UINT32)AT_SUCCESS));

    ulRst = At_SetCusdPara(ucIndex);

    EXPECT_EQ((VOS_UINT32)AT_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCusdPara, Test_At_SetCusdPara_002)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);
    pstSsCtx->usUssdTransMode = AT_USSD_NON_TRAN_MODE;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 0;
    gastAtParaList[1].usParaLen = 3;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "118", gastAtParaList[1].usParaLen);
    gastAtParaList[2].usParaLen = 0;

    /* 桩函数 */
    MOCKER(TAF_ProcessUnstructuredSSReq).stubs().will(returnValue((VOS_UINT32)AT_SUCCESS));

    ulRst = At_SetCusdPara(ucIndex);

    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CUSD_REQ, gastAtClientTab[ucIndex].CmdCurrentOpt);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}

#if(FEATURE_ON == FEATURE_MULTI_MODEM)

TEST_F(Test_At_SetCusdPara, Test_At_SetCusdPara_003)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);
    pstSsCtx->usUssdTransMode = AT_USSD_NON_TRAN_MODE;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[0].usParaLen = 0;
    gastAtParaList[1].usParaLen = 0;
    gastAtParaList[2].usParaLen = 0;

    /* 桩函数 */

    ulRst = At_SetCusdPara(ucIndex);

    EXPECT_EQ((VOS_UINT32)AT_OK, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCusdPara, Test_At_SetCusdPara_004)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);
    pstSsCtx->usUssdTransMode = AT_USSD_NON_TRAN_MODE;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 0;
    gastAtParaList[1].usParaLen = 3;
    PS_MEM_CPY(gastAtParaList[1].aucPara, "118", gastAtParaList[1].usParaLen);
    gastAtParaList[2].usParaLen = 0;

    /* 桩函数 */
    MOCKER(TAF_ProcessUnstructuredSSReq).stubs().will(returnValue((VOS_UINT32)AT_SUCCESS));

    ulRst = At_SetCusdPara(ucIndex);

    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CUSD_REQ, gastAtClientTab[ucIndex].CmdCurrentOpt);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
#endif




TEST_F(Test_At_SetCusdPara,Test_At_SetCusdPara_005)
{
    // 变量声明
    TAF_UINT32 ulRst;
    VOS_UINT8                           ucIndex = 0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;


    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);
    pstSsCtx->usUssdTransMode = AT_USSD_NON_TRAN_MODE;
    //参数初始化
    ucIndex = 0;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);
    pstSsCtx->usUssdTransMode = AT_USSD_NON_TRAN_MODE;

    // 初始化全局变量;
    gucAtParaIndex = 3;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[2].usParaLen = 2;

    gastAtParaList[2].ulParaValue = TAF_SS_UCS2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 2;

    MOCKER(At_UnicodePrint2Unicode).stubs().will(returnValue((VOS_UINT32)AT_FAILURE));

    // MOCKER操作;
    MOCKER(At_CheckUssdNumLen).stubs().will(returnValue((VOS_UINT32)AT_SUCCESS));


    // 调用被测函数
    ulRst = At_SetCusdPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CMS_INVALID_TEXT_MODE_PARAMETER, ulRst);

    GlobalMockObject::verify();


}



TEST_F(Test_At_SetCusdPara,Test_At_SetCusdPara_006)
{
    // 变量声明
    TAF_UINT32 ulRst;
    VOS_UINT8                           ucIndex = 0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;


    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);
    pstSsCtx->usUssdTransMode = AT_USSD_NON_TRAN_MODE;

    //参数初始化
    ucIndex = 0;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    // 初始化全局变量;
    gucAtParaIndex = 3;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[2].usParaLen = 2;

    gastAtParaList[2].ulParaValue = TAF_SS_UCS2;

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 2;

    MOCKER(At_UnicodePrint2Unicode).stubs().will(returnValue((VOS_UINT32)AT_SUCCESS));

    // MOCKER操作;
    MOCKER(At_CheckUssdNumLen).stubs().will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(TAF_ProcessUnstructuredSSReq).stubs().will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRst = At_SetCusdPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    GlobalMockObject::verify();


}



class Test_At_SetDialNumPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetDialNumPara, Test_At_SetDialNumPara_001)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;
    MN_CALL_TYPE_ENUM_U8                CallType = MN_CALL_TYPE_VOICE;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);
    pstSsCtx->enCModType = 0;

    memset(&pstSsCtx->stCbstDataCfg, 0, sizeof(AT_CBST_DATA_CFG_STRU));
    pstSsCtx->stCbstDataCfg.enSpeed = MN_CALL_CSD_SPD_19K2_V34;
    pstSsCtx->stCbstDataCfg.enName = MN_CALL_CSD_NAME_ASYNC_UDI;
    pstSsCtx->stCbstDataCfg.enConnElem = MN_CALL_CSD_CE_T;

    /* 打桩函数 */
    MOCKER(AT_FillCalledNumPara)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));
    MOCKER(MN_CALL_Orig)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    /* 调用函数 */
    ulRst = At_SetDialNumPara(ucIndex, CallType);

    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_D_CS_VOICE_CALL_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetDialNumPara,Test_At_SetDialNumPara_002)
{
    // 参数定义
    VOS_UINT8                           ucIndex = 0;
    VOS_UINT32                          ulRet;
    MN_CALL_TYPE_ENUM_U8                ucCallType;

    // 参数初始化
    ucCallType = MN_CALL_TYPE_VOICE;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;

    // MOCKER操作
    MOCKER(AT_FillCalledNumPara).stubs().will(returnValue((VOS_UINT32)VOS_ERR));
    MOCKER(AT_SetCsCallErrCause).expects(exactly(1));

    // 调用被测函数
    ulRet = At_SetDialNumPara(ucIndex, ucCallType);

    // 执行检查
    EXPECT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

#if(FEATURE_ON == FEATURE_MULTI_MODEM)

TEST_F(Test_At_SetDialNumPara, Test_At_SetDialNumPara_003)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;
    MN_CALL_TYPE_ENUM_U8                CallType = MN_CALL_TYPE_VOICE;
    AT_MODEM_CC_CTX_STRU               *pstCcCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);
    pstSsCtx->enCModType = 0;

    pstCcCtx = AT_GetModemCcCtxAddrFromClientId(ucIndex);

    memset(&pstSsCtx->stCbstDataCfg, 0, sizeof(AT_CBST_DATA_CFG_STRU));
    pstSsCtx->stCbstDataCfg.enSpeed = MN_CALL_CSD_SPD_19K2_V34;
    pstSsCtx->stCbstDataCfg.enName = MN_CALL_CSD_NAME_ASYNC_UDI;
    pstSsCtx->stCbstDataCfg.enConnElem = MN_CALL_CSD_CE_T;

    /* 打桩函数 */
    MOCKER(AT_FillCalledNumPara)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_OK));
    MOCKER(MN_CALL_Orig)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    /* 调用函数 */
    ulRst = At_SetDialNumPara(ucIndex, CallType);

    EXPECT_EQ((TAF_UINT32)TAF_CS_CAUSE_UNKNOWN, pstCcCtx->enCsErrCause);
    EXPECT_EQ((TAF_UINT32)AT_ERROR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
#endif
class Test_At_SetDMmiNumWithClirPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetDMmiNumWithClirPara, Test_At_SetDMmiNumWithClirPara_001)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;
    MN_CALL_TYPE_ENUM_U8                CallType = MN_CALL_TYPE_VOICE;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);
    pstSsCtx->enCModType = 0;

    /* 打桩函数 */
    MOCKER(MN_CALL_Orig)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    /* 调用函数 */
    ulRst = At_SetDMmiNumWithClirPara(ucIndex, (MN_CALL_CLIR_CFG_ENUM_U8)MN_CALL_CLIR_AS_SUBS, (TAF_INT8*)"118", 3);

    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_D_CS_VOICE_CALL_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}

#if(FEATURE_ON == FEATURE_MULTI_MODEM)
TEST_F(Test_At_SetDMmiNumWithClirPara, Test_At_SetDMmiNumWithClirPara_002)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;
    MN_CALL_TYPE_ENUM_U8                CallType = MN_CALL_TYPE_VOICE;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);
    pstSsCtx->enCModType = 1;

    /* 打桩函数 */
    MOCKER(MN_CALL_Orig)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    /* 调用函数 */
    ulRst = At_SetDMmiNumWithClirPara(ucIndex, (MN_CALL_CLIR_CFG_ENUM_U8)MN_CALL_CLIR_AS_SUBS, (TAF_INT8*)"118", 3);

    EXPECT_EQ((TAF_UINT32)AT_ERROR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
#endif
class Test_AT_FillApdsPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_FillApdsPara, Test_AT_FillApdsPara_001)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;
    MN_CALL_ORIG_PARAM_STRU             stOrigParam;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);
    pstSsCtx->enCModType = 1;
    memset(&pstSsCtx->stCbstDataCfg, 0, sizeof(AT_CBST_DATA_CFG_STRU));
    pstSsCtx->ucClirType = 1;
    memset(&pstSsCtx->stCcugCfg, 0, sizeof(AT_CCUG_CFG_STRU));

    gastAtParaList[0].usParaLen = 0;
    memset(&stOrigParam, 0, sizeof(MN_CALL_ORIG_PARAM_STRU));

    ulRst = AT_FillApdsPara(ucIndex, &stOrigParam);

    EXPECT_EQ((VOS_UINT32)VOS_ERR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}

#if(FEATURE_ON == FEATURE_MULTI_MODEM)
TEST_F(Test_AT_FillApdsPara, Test_AT_FillApdsPara_002)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;
    MN_CALL_ORIG_PARAM_STRU             stOrigParam;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);
    pstSsCtx->enCModType = 1;
    memset(&pstSsCtx->stCbstDataCfg, 0, sizeof(AT_CBST_DATA_CFG_STRU));
    pstSsCtx->ucClirType = 1;
    memset(&pstSsCtx->stCcugCfg, 0, sizeof(AT_CCUG_CFG_STRU));

    gastAtParaList[0].usParaLen = 0;
    memset(&stOrigParam, 0, sizeof(MN_CALL_ORIG_PARAM_STRU));

    ulRst = AT_FillApdsPara(ucIndex, &stOrigParam);

    EXPECT_EQ((VOS_UINT32)VOS_ERR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
#endif
class Test_At_SetClipPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
        gucAtParaIndex = 1;
    }
    void TearDown()
    {
        gucAtParaIndex = 0;
    }
};


TEST_F(Test_At_SetClipPara, Test_At_SetClipPara_001)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetClipPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRst);
    EXPECT_EQ(1, pstSsCtx->ucClipType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetClipPara, Test_At_SetClipPara_002)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetClipPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRst);
    EXPECT_EQ((AT_CLIP_TYPE)AT_CLIP_DISABLE_TYPE, pstSsCtx->ucClipType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}

#if(FEATURE_ON == FEATURE_MULTI_MODEM)
TEST_F(Test_At_SetClipPara, Test_At_SetClipPara_003)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetClipPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRst);
    EXPECT_EQ(0, pstSsCtx->ucClipType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetClipPara, Test_At_SetClipPara_004)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetClipPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRst);
    EXPECT_EQ((AT_CLIP_TYPE)AT_CLIP_DISABLE_TYPE, pstSsCtx->ucClipType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
#endif
class Test_At_SetClirPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
        gucAtParaIndex = 1;
    }
    void TearDown()
    {
        gucAtParaIndex = 0;
    }
};


TEST_F(Test_At_SetClirPara, Test_At_SetClirPara_001)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = AT_CLIR_AS_SUBSCRIPT;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetClirPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRst);
    EXPECT_EQ((AT_CLIR_TYPE)AT_CLIR_AS_SUBSCRIPT, pstSsCtx->ucClirType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetClirPara, Test_At_SetClirPara_002)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = AT_CLIR_INVOKE;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetClirPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRst);
    EXPECT_EQ((AT_CLIR_TYPE)AT_CLIR_INVOKE, pstSsCtx->ucClirType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetClirPara, Test_At_SetClirPara_003)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = AT_CLIR_SUPPRESS;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetClirPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRst);
    EXPECT_EQ((AT_CLIR_TYPE)AT_CLIR_SUPPRESS, pstSsCtx->ucClirType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetClirPara, Test_At_SetClirPara_004)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetClirPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRst);
    EXPECT_EQ((AT_CLIR_TYPE)AT_CLIR_AS_SUBSCRIPT, pstSsCtx->ucClirType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}

#if(FEATURE_ON == FEATURE_MULTI_MODEM)
TEST_F(Test_At_SetClirPara, Test_At_SetClirPara_005)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = AT_CLIR_AS_SUBSCRIPT;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetClirPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRst);
    EXPECT_EQ((AT_CLIR_TYPE)AT_CLIR_AS_SUBSCRIPT, pstSsCtx->ucClirType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetClirPara, Test_At_SetClirPara_006)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = AT_CLIR_INVOKE;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetClirPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRst);
    EXPECT_EQ((AT_CLIR_TYPE)AT_CLIR_INVOKE, pstSsCtx->ucClirType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetClirPara, Test_At_SetClirPara_007)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 3;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetClirPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetClirPara, Test_At_SetClirPara_008)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetClirPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRst);
    EXPECT_EQ((AT_CLIR_TYPE)AT_CLIR_AS_SUBSCRIPT, pstSsCtx->ucClirType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
#endif
class Test_AT_SetSysCfgExPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
    }
    void TearDown()
    {
    }

};


TEST_F(Test_AT_SetSysCfgExPara, Test_AT_SetSysCfgExPara_001)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    AT_MODEM_NET_CTX_STRU              *pstNetCtx = VOS_NULL_PTR;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex              = 7;

    gastAtParaList[0].usParaLen = 2;
    memcpy(gastAtParaList[0].aucPara, "03", sizeof("03"));

    gastAtParaList[1].usParaLen = sizeof("3FFFFFFF") - 1;
    memcpy(gastAtParaList[1].aucPara, "3FFFFFFF", sizeof("3FFFFFFF"));

    gastAtParaList[2].usParaLen = 1;
    gastAtParaList[2].ulParaValue = 4;

    gastAtParaList[3].usParaLen = 1;
    gastAtParaList[3].ulParaValue = 2;

    gastAtParaList[4].usParaLen = sizeof("7FFFFFFFFFFFFFFF") -1;
    memcpy(gastAtParaList[4].aucPara, "7FFFFFFFFFFFFFFF", sizeof("7FFFFFFFFFFFFFFF"));

    gastAtParaList[5].usParaLen = 1;
    gastAtParaList[5].ulParaValue = 0;

    gastAtParaList[6].usParaLen = 1;
    gastAtParaList[6].ulParaValue = 0;

    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId = MODEM_ID_0;
    pstNetCtx = AT_GetModemNetCtxAddrFromClientId(ucIndex);

    pstNetCtx->ucRoamFeature = AT_ROAM_FEATURE_OFF;


    /* 调用被测函数 */
    ulRst = AT_SetSysCfgExPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetSysCfgExPara, Test_AT_SetSysCfgExPara_002)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    AT_MODEM_NET_CTX_STRU              *pstNetCtx = VOS_NULL_PTR;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex              = 7;

    gastAtParaList[0].usParaLen = 2;
    memcpy(gastAtParaList[0].aucPara, "03", sizeof("03"));

    gastAtParaList[1].usParaLen = sizeof("3FFFFFFF") - 1;
    memcpy(gastAtParaList[1].aucPara, "3FFFFFFF", sizeof("3FFFFFFF"));

    gastAtParaList[2].usParaLen = 1;
    gastAtParaList[2].ulParaValue = 2;

    gastAtParaList[3].usParaLen = 1;
    gastAtParaList[3].ulParaValue = 2;

    gastAtParaList[4].usParaLen = sizeof("7FFFFFFFFFFFFFFF") -1;
    memcpy(gastAtParaList[4].aucPara, "7FFFFFFFFFFFFFFF", sizeof("7FFFFFFFFFFFFFFF"));

    gastAtParaList[5].usParaLen = 1;
    gastAtParaList[5].ulParaValue = 0;

    gastAtParaList[6].usParaLen = 1;
    gastAtParaList[6].ulParaValue = 0;

    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId = MODEM_ID_0;
    pstNetCtx = AT_GetModemNetCtxAddrFromClientId(ucIndex);

    pstNetCtx->ucRoamFeature = AT_ROAM_FEATURE_OFF;

    //// MOCKER操作;
    MOCKER(TAF_MMA_QrySyscfgReq)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_TRUE));

    /* 调用被测函数 */
    ulRst = AT_SetSysCfgExPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
class Test_At_SetCregPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
    }
    void TearDown()
    {
    }

};


TEST_F(Test_At_SetCregPara, Test_At_SetCregPara_001)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetCregPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCregPara, Test_At_SetCregPara_002)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 2;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetCregPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCregPara, Test_At_SetCregPara_003)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    AT_MODEM_NET_CTX_STRU              *pstNetCtx = VOS_NULL_PTR;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 0;
    gastAtParaList[0].ulParaValue = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;


    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetCregPara(ucIndex);

    /* 结果验证 */
    pstNetCtx = AT_GetModemNetCtxAddrFromClientId(ucIndex);

    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);
    EXPECT_EQ((AT_CREG_TYPE)AT_CREG_RESULT_CODE_NOT_REPORT_TYPE, pstNetCtx->ucCregType);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCregPara, Test_At_SetCregPara_004)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    AT_MODEM_NET_CTX_STRU              *pstNetCtx = VOS_NULL_PTR;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;


    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetCregPara(ucIndex);

    /* 结果验证 */
    pstNetCtx = AT_GetModemNetCtxAddrFromClientId(ucIndex);

    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);
    EXPECT_EQ(gastAtParaList[0].ulParaValue, pstNetCtx->ucCregType);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCregPara, Test_At_SetCregPara_005)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    AT_MODEM_NET_CTX_STRU              *pstNetCtx = VOS_NULL_PTR;
    MN_CLIENT_ID_T                      usClientId;
    MN_OPERATION_ID_T                   ucOpId;
    VOS_UINT16                          usMsgType;
    VOS_UINT32                          ulParaLen;
    VOS_UINT32                          ulRcvPid;
    AT_MTA_UNSOLICITED_RPT_SET_REQ_STRU stAtCmd;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    usClientId  = gastAtClientTab[ucIndex].usClientId;
    ucOpId      = gastAtClientTab[ucIndex].opId;
    usMsgType   = ID_AT_MTA_UNSOLICITED_RPT_SET_REQ;
    ulParaLen   = sizeof(AT_MTA_UNSOLICITED_RPT_SET_REQ_STRU);
    ulRcvPid    = I0_UEPS_PID_MTA;
    PS_MEM_SET(&stAtCmd, 0x00, sizeof(stAtCmd));
    stAtCmd.enReqType       = AT_MTA_SET_CREG_RPT_TYPE;
    stAtCmd.u.ucCregRptFlg  = gastAtParaList[0].ulParaValue;

    //// MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq(usClientId),
                eq(ucOpId),
                eq(usMsgType),
                mirror((VOS_VOID *)&stAtCmd, (VOS_UINT32)sizeof(stAtCmd)),
                eq(ulParaLen),
                eq(ulRcvPid))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /* 调用被测函数 */
    ulRst = At_SetCregPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ((TAF_UINT32)AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
class Test_At_SetCgregPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
    }
    void TearDown()
    {
    }

};


TEST_F(Test_At_SetCgregPara, Test_At_SetCgregPara_001)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetCgregPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCgregPara, Test_At_SetCgregPara_002)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 2;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetCgregPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCgregPara, Test_At_SetCgregPara_003)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    AT_MODEM_NET_CTX_STRU              *pstNetCtx = VOS_NULL_PTR;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 0;
    gastAtParaList[0].ulParaValue = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;


    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetCgregPara(ucIndex);

    /* 结果验证 */
    pstNetCtx = AT_GetModemNetCtxAddrFromClientId(ucIndex);

    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);
    EXPECT_EQ((AT_CGREG_TYPE)AT_CGREG_RESULT_CODE_NOT_REPORT_TYPE, pstNetCtx->ucCgregType);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCgregPara, Test_At_SetCgregPara_004)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    AT_MODEM_NET_CTX_STRU              *pstNetCtx = VOS_NULL_PTR;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;


    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetCgregPara(ucIndex);

    /* 结果验证 */
    pstNetCtx = AT_GetModemNetCtxAddrFromClientId(ucIndex);

    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);
    EXPECT_EQ((AT_CGREG_TYPE)gastAtParaList[0].ulParaValue, pstNetCtx->ucCgregType);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCgregPara, Test_At_SetCgregPara_005)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    AT_MODEM_NET_CTX_STRU              *pstNetCtx = VOS_NULL_PTR;
    MN_CLIENT_ID_T                      usClientId;
    MN_OPERATION_ID_T                   ucOpId;
    VOS_UINT16                          usMsgType;
    VOS_UINT32                          ulParaLen;
    VOS_UINT32                          ulRcvPid;
    AT_MTA_UNSOLICITED_RPT_SET_REQ_STRU stAtCmd;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    usClientId  = gastAtClientTab[ucIndex].usClientId;
    ucOpId      = gastAtClientTab[ucIndex].opId;
    usMsgType   = ID_AT_MTA_UNSOLICITED_RPT_SET_REQ;
    ulParaLen   = sizeof(AT_MTA_UNSOLICITED_RPT_SET_REQ_STRU);
    ulRcvPid    = I0_UEPS_PID_MTA;
    PS_MEM_SET(&stAtCmd, 0x00, sizeof(stAtCmd));
    stAtCmd.enReqType       = AT_MTA_SET_CGREG_RPT_TYPE;
    stAtCmd.u.ucCregRptFlg  = gastAtParaList[0].ulParaValue;

    //// MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq(usClientId),
                eq(ucOpId),
                eq(usMsgType),
                mirror((VOS_VOID*)&stAtCmd, (VOS_UINT32)sizeof(stAtCmd)),
                eq(ulParaLen),
                eq(ulRcvPid))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /* 调用被测函数 */
    ulRst = At_SetCgregPara(ucIndex);

    /* 结果验证 */
    pstNetCtx = AT_GetModemNetCtxAddrFromClientId(ucIndex);

    EXPECT_EQ((TAF_UINT32)AT_ERROR, ulRst);
    EXPECT_EQ((AT_CGREG_TYPE)gastAtParaList[0].ulParaValue, pstNetCtx->ucCgregType);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

#if (FEATURE_ON == FEATURE_LTE)
class Test_AT_SetCeregPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
    }
    void TearDown()
    {
    }

};


TEST_F(Test_AT_SetCeregPara, Test_AT_SetCeregPara_001)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = AT_SetCeregPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetCeregPara, Test_AT_SetCeregPara_002)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 2;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = AT_SetCeregPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetCeregPara, Test_AT_SetCeregPara_003)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    AT_MODEM_NET_CTX_STRU              *pstNetCtx = VOS_NULL_PTR;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 0;
    gastAtParaList[0].ulParaValue = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;


    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = AT_SetCeregPara(ucIndex);

    /* 结果验证 */
    pstNetCtx = AT_GetModemNetCtxAddrFromClientId(ucIndex);

    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);
    EXPECT_EQ((AT_CEREG_TYPE_ENUM_UINT8)AT_CEREG_RESULT_CODE_NOT_REPORT_TYPE, pstNetCtx->ucCeregType);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetCeregPara, Test_AT_SetCeregPara_004)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    AT_MODEM_NET_CTX_STRU              *pstNetCtx = VOS_NULL_PTR;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;


    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = AT_SetCeregPara(ucIndex);

    /* 结果验证 */
    pstNetCtx = AT_GetModemNetCtxAddrFromClientId(ucIndex);

    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);
    EXPECT_EQ(gastAtParaList[0].ulParaValue, pstNetCtx->ucCeregType);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetCeregPara, Test_AT_SetCeregPara_005)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    AT_MODEM_NET_CTX_STRU              *pstNetCtx = VOS_NULL_PTR;
    MN_CLIENT_ID_T                      usClientId;
    MN_OPERATION_ID_T                   ucOpId;
    VOS_UINT16                          usMsgType;
    VOS_UINT32                          ulParaLen;
    VOS_UINT32                          ulRcvPid;
    AT_MTA_UNSOLICITED_RPT_SET_REQ_STRU stAtCmd;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    usClientId  = gastAtClientTab[ucIndex].usClientId;
    ucOpId      = gastAtClientTab[ucIndex].opId;
    usMsgType   = ID_AT_MTA_UNSOLICITED_RPT_SET_REQ;
    ulParaLen   = sizeof(AT_MTA_UNSOLICITED_RPT_SET_REQ_STRU);
    ulRcvPid    = I0_UEPS_PID_MTA;
    PS_MEM_SET(&stAtCmd, 0x00, sizeof(stAtCmd));
    stAtCmd.enReqType       = AT_MTA_SET_CEREG_RPT_TYPE;
    stAtCmd.u.ucCregRptFlg  = gastAtParaList[0].ulParaValue;

    //// MOCKER操作;
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq(usClientId),
                eq(ucOpId),
                eq(usMsgType),
                mirror((VOS_VOID*)&stAtCmd, (VOS_UINT32)sizeof(stAtCmd)),
                eq(ulParaLen),
                eq(ulRcvPid))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /* 调用被测函数 */
    ulRst = AT_SetCeregPara(ucIndex);

    /* 结果验证 */
    pstNetCtx = AT_GetModemNetCtxAddrFromClientId(ucIndex);

    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRst);
    EXPECT_EQ(gastAtParaList[0].ulParaValue, pstNetCtx->ucCeregType);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#endif
class Test_At_SetCopsPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
    }
    void TearDown()
    {
    }

};


TEST_F(Test_At_SetCopsPara, Test_At_SetCopsPara_001)
{
    TAF_UINT8           ucIndex;
    VOS_UINT32          ulResult;

    ucIndex = 1;


    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_READ_CMD;

    ulResult = At_SetCopsPara(ucIndex);

    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS,ulResult);
    //检查调用时，需要在用例结束位置加上这句

    GlobalMockObject::verify();

}


TEST_F(Test_At_SetCopsPara, Test_At_SetCopsPara_002)
{
    TAF_UINT8           ucIndex;
    VOS_UINT32          ulResult;

    ucIndex = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex  = 5;

    ulResult = At_SetCopsPara(ucIndex);

    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS,ulResult);
    //检查调用时，需要在用例结束位置加上这句

    //GlobalMockObject::verify();

}


TEST_F(Test_At_SetCopsPara, Test_At_SetCopsPara_003)
{
    TAF_UINT8           ucIndex;
    VOS_UINT32          ulResult;

    ucIndex = 1;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex  = 4;
    gastAtParaList[0].usParaLen     = 0;
    gastAtParaList[0].ulParaValue   = 0;

    gastAtParaList[1].usParaLen     = 1;

    gastAtParaList[3].usParaLen     = 1;
    gastAtParaList[3].ulParaValue   = 0;


    MOCKER(Taf_PhonePlmnResel)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ulResult = At_SetCopsPara(ucIndex);

    ASSERT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN,ulResult);
    ASSERT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_COPS_SET_AUTOMATIC,gastAtClientTab[1].CmdCurrentOpt);
    //检查调用时，需要在用例结束位置加上这句

    GlobalMockObject::verify();

}


TEST_F(Test_At_SetCopsPara, Test_At_SetCopsPara_004)
{
    TAF_UINT8           ucIndex;
    VOS_UINT32          ulResult;

    ucIndex = 1;


    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;


    gucAtParaIndex  = 4;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 0;

    gastAtParaList[1].usParaLen     = 0;

    gastAtParaList[3].usParaLen     = 1;
    gastAtParaList[3].ulParaValue   = 2;


    MOCKER(Taf_PhonePlmnResel)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));


    ulResult = At_SetCopsPara(ucIndex);

    ASSERT_EQ((VOS_UINT32)AT_ERROR,ulResult);
    //检查调用时，需要在用例结束位置加上这句

    GlobalMockObject::verify();

}


TEST_F(Test_At_SetCopsPara, Test_At_SetCopsPara_005)
{
    TAF_UINT8           ucIndex;
    VOS_UINT32          ulResult;

    ucIndex = 1;


    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;


    gucAtParaIndex  = 4;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;

    gastAtParaList[1].usParaLen     = 1;

    gastAtParaList[3].usParaLen     = 0;
    gastAtParaList[3].ulParaValue   = 2;



    ulResult = At_SetCopsPara(ucIndex);

    ASSERT_EQ((VOS_UINT32)AT_ERROR,ulResult);
    //检查调用时，需要在用例结束位置加上这句

    GlobalMockObject::verify();

}


TEST_F(Test_At_SetCopsPara, Test_At_SetCopsPara_005_1)
{
    TAF_UINT8           ucIndex;
    VOS_UINT32          ulResult;

    ucIndex = 1;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;


    gucAtParaIndex  = 4;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;

    gastAtParaList[1].usParaLen     = 1;

    /* 参数异常 */

    gastAtParaList[2].usParaLen     = 0;

    gastAtParaList[3].usParaLen     = 0;
    gastAtParaList[3].ulParaValue   = 2;



    ulResult = At_SetCopsPara(ucIndex);

    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulResult);
    //检查调用时，需要在用例结束位置加上这句

    GlobalMockObject::verify();

}
TEST_F(Test_At_SetCopsPara, Test_At_SetCopsPara_005_2)
{
    TAF_UINT8           ucIndex;
    VOS_UINT32          ulResult;

    ucIndex = 1;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex  = 4;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;

    gastAtParaList[1].usParaLen     = 1;

    /* 参数异常 */

    gastAtParaList[2].usParaLen     = 0;

    gastAtParaList[3].usParaLen     = 0;
    gastAtParaList[3].ulParaValue   = 2;



    ulResult = At_SetCopsPara(ucIndex);

    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulResult);
    //检查调用时，需要在用例结束位置加上这句

    GlobalMockObject::verify();

}
TEST_F(Test_At_SetCopsPara, Test_At_SetCopsPara_006)
{
    TAF_UINT8           ucIndex;
    VOS_UINT32          ulResult;

    ucIndex = 1;


    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;


    gucAtParaIndex  = 4;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;

    gastAtParaList[1].usParaLen     = 0;

    gastAtParaList[2].usParaLen     = 5;

    gastAtParaList[3].usParaLen     = 0;
    gastAtParaList[3].ulParaValue   = 2;

    MOCKER(AT_GetOperatorNameFromParam)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));


    ulResult = At_SetCopsPara(ucIndex);

    ASSERT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN,ulResult);
    ASSERT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_COPS_SET_MANUAL,gastAtClientTab[1].CmdCurrentOpt);
    //检查调用时，需要在用例结束位置加上这句

    GlobalMockObject::verify();

}


TEST_F(Test_At_SetCopsPara, Test_At_SetCopsPara_007)
{
    TAF_UINT8           ucIndex;
    VOS_UINT32          ulResult;

    ucIndex = 1;


    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;


    gucAtParaIndex  = 4;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 3;

    gastAtParaList[1].usParaLen     = 0;

    gastAtParaList[3].usParaLen     = 0;
    gastAtParaList[3].ulParaValue   = 2;



    ulResult = At_SetCopsPara(ucIndex);

    ASSERT_EQ((VOS_UINT32)AT_OK,ulResult);
    //检查调用时，需要在用例结束位置加上这句

    GlobalMockObject::verify();

}


TEST_F(Test_At_SetCopsPara, Test_At_SetCopsPara_008)
{
    TAF_UINT8           ucIndex;
    VOS_UINT32          ulResult;

    ucIndex = 1;


    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;


    gucAtParaIndex  = 4;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 4;

    gastAtParaList[1].usParaLen     = 0;

    gastAtParaList[3].usParaLen     = 0;
    gastAtParaList[3].ulParaValue   = 2;

    MOCKER(TAF_MMA_PlmnSpecialSelReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    ulResult = At_SetCopsPara(ucIndex);

    ASSERT_EQ((VOS_UINT32)AT_ERROR,ulResult);

    //检查调用时，需要在用例结束位置加上这句

    GlobalMockObject::verify();

}


TEST_F(Test_At_SetCopsPara, Test_At_SetCopsPara_009)
{
    TAF_UINT8           ucIndex;
    VOS_UINT32          ulResult;

    ucIndex = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex  = 4;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[0].ulParaValue   = 1;

    gastAtParaList[1].usParaLen     = 0;

    gastAtParaList[2].usParaLen     = 1;

    gastAtParaList[3].usParaLen     = 0;
    gastAtParaList[3].ulParaValue   = 2;

    MOCKER(AT_GetOperatorNameFromParam)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS));

    ulResult = At_SetCopsPara(ucIndex);

    ASSERT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulResult);

    //检查调用时，需要在用例结束位置加上这句

    GlobalMockObject::verify();

}


class Test_At_SetSrvstPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
    }
    void TearDown()
    {
    }

};


TEST_F(Test_At_SetSrvstPara,Test_At_SetSrvstPara_001)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetSrvstPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetSrvstPara,Test_At_SetSrvstPara_002)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 2;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetSrvstPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetSrvstPara,Test_At_SetSrvstPara_003)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    AT_MODEM_NET_CTX_STRU              *pstNetCtx = VOS_NULL_PTR;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 0;
    gastAtParaList[0].ulParaValue = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;


    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetSrvstPara(ucIndex);

    /* 结果验证 */
    pstNetCtx = AT_GetModemNetCtxAddrFromClientId(ucIndex);

    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetSrvstPara,Test_At_SetSrvstPara_004)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    AT_MODEM_NET_CTX_STRU              *pstNetCtx = VOS_NULL_PTR;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;


    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetSrvstPara(ucIndex);

    /* 结果验证 */
    pstNetCtx = AT_GetModemNetCtxAddrFromClientId(ucIndex);

    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetSrvstPara,Test_At_SetSrvstPara_005)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    MN_CLIENT_ID_T                      usClientId;
    MN_OPERATION_ID_T                   ucOpId;
    VOS_UINT16                          usMsgType;
    VOS_UINT32                          ulParaLen;
    VOS_UINT32                          ulRcvPid;
    AT_MTA_UNSOLICITED_RPT_SET_REQ_STRU stAtCmd;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    usClientId  = gastAtClientTab[ucIndex].usClientId;
    ucOpId      = gastAtClientTab[ucIndex].opId;
    usMsgType   = ID_AT_MTA_UNSOLICITED_RPT_SET_REQ;
    ulParaLen   = sizeof(AT_MTA_UNSOLICITED_RPT_SET_REQ_STRU);
    ulRcvPid    = I0_UEPS_PID_MTA;
    PS_MEM_SET(&stAtCmd, 0x00, sizeof(stAtCmd));
    stAtCmd.enReqType       = AT_MTA_SET_SRVST_RPT_TYPE;
    stAtCmd.u.ucCregRptFlg  = gastAtParaList[0].ulParaValue;

    /* MOCKER操作; */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq(usClientId),
                eq(ucOpId),
                eq(usMsgType),
                mirror((VOS_VOID*)&stAtCmd, (VOS_UINT32)sizeof(stAtCmd)),
                eq(ulParaLen),
                eq(ulRcvPid))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /* 调用被测函数 */
    ulRst = At_SetSrvstPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ((TAF_UINT32)AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetRssiPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
    }
    void TearDown()
    {
    }

};


TEST_F(Test_At_SetRssiPara,Test_At_SetRssiPara_001)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetRssiPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetRssiPara,Test_At_SetRssiPara_002)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 2;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetRssiPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetRssiPara,Test_At_SetRssiPara_003)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    AT_MODEM_NET_CTX_STRU              *pstNetCtx = VOS_NULL_PTR;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 0;
    gastAtParaList[0].ulParaValue = 0;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;


    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetRssiPara(ucIndex);

    /* 结果验证 */
    pstNetCtx = AT_GetModemNetCtxAddrFromClientId(ucIndex);

    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetRssiPara,Test_At_SetRssiPara_004)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    AT_MODEM_NET_CTX_STRU              *pstNetCtx = VOS_NULL_PTR;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;


    //// MOCKER操作;

    /* 调用被测函数 */
    ulRst = At_SetRssiPara(ucIndex);

    /* 结果验证 */
    pstNetCtx = AT_GetModemNetCtxAddrFromClientId(ucIndex);

    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetRssiPara,Test_At_SetRssiPara_005)
{
    VOS_UINT32                          ulRst;
    VOS_UINT8                           ucIndex;
    MN_CLIENT_ID_T                      usClientId;
    MN_OPERATION_ID_T                   ucOpId;
    VOS_UINT16                          usMsgType;
    VOS_UINT32                          ulParaLen;
    VOS_UINT32                          ulRcvPid;
    AT_MTA_UNSOLICITED_RPT_SET_REQ_STRU stAtCmd;

    /* 变量初始化 */
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    gucAtParaIndex = 1;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    usClientId  = gastAtClientTab[ucIndex].usClientId;
    ucOpId      = gastAtClientTab[ucIndex].opId;
    usMsgType   = ID_AT_MTA_UNSOLICITED_RPT_SET_REQ;
    ulParaLen   = sizeof(AT_MTA_UNSOLICITED_RPT_SET_REQ_STRU);
    ulRcvPid    = I0_UEPS_PID_MTA;
    PS_MEM_SET(&stAtCmd, 0x00, sizeof(stAtCmd));
    stAtCmd.enReqType       = AT_MTA_SET_RSSI_RPT_TYPE;
    stAtCmd.u.ucCregRptFlg  = gastAtParaList[0].ulParaValue;

    /* MOCKER操作; */
    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq(usClientId),
                eq(ucOpId),
                eq(usMsgType),
                mirror((VOS_VOID *)&stAtCmd, (VOS_UINT32)sizeof(stAtCmd)),
                eq(ulParaLen),
                eq(ulRcvPid))
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    /* 调用被测函数 */
    ulRst = At_SetRssiPara(ucIndex);

    /* 结果验证 */
    EXPECT_EQ((TAF_UINT32)AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



class Test_At_SetDialIGPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetDialIGPara, Test_At_SetDialIGPara_001)
{
    VOS_UINT8                           ucIndex = 0;
    VOS_UINT8                           ucParaIndex = 1;
    VOS_UINT8                           ucClir;
    MN_CALL_CUG_CFG_STRU                stCcug;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);
    pstSsCtx->ucClirType = 0;
    memset(&pstSsCtx->stCcugCfg, 0, sizeof(AT_CCUG_CFG_STRU));

    memset(&stCcug, 0, sizeof(AT_CCUG_CFG_STRU));

    gastAtParaList[ucParaIndex].aucPara[0] = 'i';

    At_SetDialIGPara(ucIndex, ucParaIndex, (TAF_UINT8 *)&ucClir, &stCcug);

    EXPECT_EQ((TAF_UINT8)MN_CALL_CLIR_SUPPRESS, ucClir);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetDialIGPara, Test_At_SetDialIGPara_002)
{
    VOS_UINT8                           ucIndex = 0;
    VOS_UINT8                           ucParaIndex = 1;
    VOS_UINT8                           ucClir;
    MN_CALL_CUG_CFG_STRU                stCcug;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);
    pstSsCtx->ucClirType = 0;
    memset(&pstSsCtx->stCcugCfg, 0, sizeof(AT_CCUG_CFG_STRU));
    memset(&stCcug, 0, sizeof(AT_CCUG_CFG_STRU));
    gastAtParaList[ucParaIndex].aucPara[0] = 'I';

    At_SetDialIGPara(ucIndex, ucParaIndex, (TAF_UINT8 *)&ucClir, &stCcug);

    EXPECT_EQ((TAF_UINT8)MN_CALL_CLIR_INVOKE, ucClir);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}

#if (FEATURE_ON == FEATURE_MULTI_MODEM)
TEST_F(Test_At_SetDialIGPara, Test_At_SetDialIGPara_003)
{
    VOS_UINT8                           ucIndex = 0;
    VOS_UINT8                           ucParaIndex = 1;
    VOS_UINT8                           ucClir;
    MN_CALL_CUG_CFG_STRU                stCcug;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);
    pstSsCtx->ucClirType = 0;
    memset(&pstSsCtx->stCcugCfg, 0, sizeof(AT_CCUG_CFG_STRU));

    memset(&stCcug, 0, sizeof(AT_CCUG_CFG_STRU));

    gastAtParaList[ucParaIndex].aucPara[0] = 'i';

    At_SetDialIGPara(ucIndex, ucParaIndex, (TAF_UINT8 *)&ucClir, &stCcug);

    EXPECT_EQ((TAF_UINT8)MN_CALL_CLIR_SUPPRESS, ucClir);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetDialIGPara, Test_At_SetDialIGPara_004)
{
    VOS_UINT8                           ucIndex = 0;
    VOS_UINT8                           ucParaIndex = 1;
    VOS_UINT8                           ucClir;
    MN_CALL_CUG_CFG_STRU                stCcug;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);
    pstSsCtx->ucClirType = 0;
    memset(&pstSsCtx->stCcugCfg, 0, sizeof(AT_CCUG_CFG_STRU));
    memset(&stCcug, 0, sizeof(AT_CCUG_CFG_STRU));
    gastAtParaList[ucParaIndex].aucPara[0] = 'g';

    At_SetDialIGPara(ucIndex, ucParaIndex, (TAF_UINT8 *)&ucClir, &stCcug);

    EXPECT_EQ(1, stCcug.bEnable);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
#endif
class Test_At_SetColpPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
        gucAtParaIndex = 1;
    }
    void TearDown()
    {
        gucAtParaIndex = 0;
    }
};


TEST_F(Test_At_SetColpPara, Test_At_SetColpPara_001)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetColpPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((VOS_UINT32)AT_OK, ulRst);
    EXPECT_EQ(1, pstSsCtx->ucColpType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetColpPara, Test_At_SetColpPara_002)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetColpPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((VOS_UINT32)AT_OK, ulRst);
    EXPECT_EQ(0, pstSsCtx->ucColpType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}

#if (FEATURE_ON == FEATURE_MULTI_MODEM)
TEST_F(Test_At_SetColpPara, Test_At_SetColpPara_003)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetColpPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((VOS_UINT32)AT_OK, ulRst);
    EXPECT_EQ((AT_COLP_TYPE)AT_COLP_DISABLE_TYPE, pstSsCtx->ucColpType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetColpPara, Test_At_SetColpPara_004)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetColpPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((VOS_UINT32)AT_OK, ulRst);
    EXPECT_EQ(0, pstSsCtx->ucColpType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
#endif
class Test_At_SetCcwaPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
        gucAtParaIndex = 3;
    }
    void TearDown()
    {
        gucAtParaIndex = 0;
    }
};


TEST_F(Test_At_SetCcwaPara, Test_At_SetCcwaPara_001)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetCcwaPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRst);
    EXPECT_EQ(1, pstSsCtx->ucCcwaType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}

#if (FEATURE_ON == FEATURE_MULTI_MODEM)
TEST_F(Test_At_SetCcwaPara, Test_At_SetCcwaPara_002)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 0;
    gastAtParaList[1].usParaLen = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetCcwaPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRst);
    EXPECT_EQ(0, pstSsCtx->ucCcwaType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
#endif
TEST_F(Test_At_SetCcwaPara,Test_At_SetCcwaPara_003)
{
    //参数定义
    VOS_UINT8      ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_BUTT;

    // MOCKER操作

    //执行检查
    ASSERT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetCcwaPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCcwaPara,Test_At_SetCcwaPara_004)
{
    //参数定义
    VOS_UINT8      ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 4;

    // MOCKER操作

    //执行检查
    ASSERT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetCcwaPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCcwaPara,Test_At_SetCcwaPara_005)
{
    //参数定义
    VOS_UINT8      ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 0;

    // MOCKER操作

    //执行检查
    ASSERT_EQ((TAF_UINT32)AT_OK, At_SetCcwaPara(ucIndex));

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCcwaPara,Test_At_SetCcwaPara_006)
{
    //参数定义
    VOS_UINT8      ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 0;
    gastAtParaList[1].usParaLen = 0;

    // MOCKER操作

    //执行检查
    ASSERT_EQ((TAF_UINT32)AT_OK, At_SetCcwaPara(ucIndex));
//    EXPECT_EQ(gucAtCcwaType , AT_CCWA_DISABLE_TYPE);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCcwaPara,Test_At_SetCcwaPara_007)
{
    //参数定义
    VOS_UINT8      ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[2].usParaLen = 0;
    gastAtParaList[1].ulParaValue = 0; //disable

    // MOCKER操作
    MOCKER(TAF_DeactivateSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    //执行检查
    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, At_SetCcwaPara(ucIndex));
    EXPECT_EQ(gastAtClientTab[ucIndex].CmdCurrentOpt ,(AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CCWA_DISABLE);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCcwaPara,Test_At_SetCcwaPara_008)
{
    //参数定义
    VOS_UINT8      ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[2].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 0; //disable

    // MOCKER操作
    MOCKER(At_SsPrint2Class)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    MOCKER(TAF_DeactivateSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    //执行检查
    ASSERT_EQ((TAF_UINT32)AT_ERROR, At_SetCcwaPara(ucIndex));


    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCcwaPara,Test_At_SetCcwaPara_009)
{
    //参数定义
    VOS_UINT8      ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[2].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 0; //disable

    // MOCKER操作
    MOCKER(At_SsPrint2Class)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    MOCKER(TAF_DeactivateSSReq)
        .expects(never());

    //执行检查
    ASSERT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, At_SetCcwaPara(ucIndex));


    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCcwaPara,Test_At_SetCcwaPara_010)
{
    //参数定义
    VOS_UINT8      ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[2].usParaLen = 0;
    gastAtParaList[1].ulParaValue = 1; //enable

    // MOCKER操作
    MOCKER(TAF_ActivateSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    //执行检查
    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, At_SetCcwaPara(ucIndex));
    EXPECT_EQ(gastAtClientTab[ucIndex].CmdCurrentOpt ,(AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CCWA_ENABLE);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



TEST_F(Test_At_SetCcwaPara,Test_At_SetCcwaPara_011)
{
    //参数定义
    VOS_UINT8      ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[2].usParaLen = 0;
    gastAtParaList[1].ulParaValue = 1; //enable

    // MOCKER操作
    MOCKER(TAF_ActivateSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    //执行检查
    ASSERT_EQ((TAF_UINT32)AT_ERROR, At_SetCcwaPara(ucIndex));


    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCcwaPara,Test_At_SetCcwaPara_012)
{
    //参数定义
    VOS_UINT8      ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[2].usParaLen = 0;
    gastAtParaList[1].ulParaValue = 2; //ｑｕｅｒｙ

    // MOCKER操作
    MOCKER(TAF_InterrogateSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    //执行检查
    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, At_SetCcwaPara(ucIndex));
    EXPECT_EQ(gastAtClientTab[ucIndex].CmdCurrentOpt ,(AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CCWA_QUERY);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



TEST_F(Test_At_SetCcwaPara,Test_At_SetCcwaPara_013)
{
    //参数定义
    VOS_UINT8      ucIndex;

    //参数初始化
    ucIndex = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[2].usParaLen = 0;
    gastAtParaList[1].ulParaValue = 2; //ｑｕｅｒｙ

    // MOCKER操作
    MOCKER(TAF_InterrogateSSReq)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    //执行检查
    ASSERT_EQ((TAF_UINT32)AT_ERROR, At_SetCcwaPara(ucIndex));


    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

class Test_At_SetCssnPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
        gucAtParaIndex = 2;
    }
    void TearDown()
    {
        gucAtParaIndex = 0;
    }
};


TEST_F(Test_At_SetCssnPara, Test_At_SetCssnPara_001)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 1;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    MOCKER(MN_CALL_SendAppRequest)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    /* 调用函数 */
    ulRst = At_SetCssnPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_ERROR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}

#if (FEATURE_ON == FEATURE_MULTI_MODEM)
TEST_F(Test_At_SetCssnPara, Test_At_SetCssnPara_002)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 0;
    gastAtParaList[1].usParaLen = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    MOCKER(MN_CALL_SendAppRequest)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    /* 调用函数 */
    ulRst = At_SetCssnPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_ERROR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
#endif
TEST_F(Test_At_SetCssnPara, Test_At_SetCssnPara_003)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    VOS_UINT32                          ulRst;
    MN_CALL_APP_REQ_ENUM_UINT32         enReq;
    MN_CLIENT_ID_T                      clientId;
    MN_OPERATION_ID_T                   opId;
    MN_CALL_ID_T                        callId;
    MN_CALL_SET_CSSN_REQ_STRU           stCssnReq;

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 1;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    clientId    = gastAtClientTab[ucIndex].usClientId;
    opId        = gastAtClientTab[ucIndex].opId;
    enReq       = MN_CALL_APP_SET_CSSN_REQ;
    callId      = 0;

    PS_MEM_SET(&stCssnReq, 0, sizeof(stCssnReq));
    stCssnReq.ulActNum      = MN_CALL_MAX_CSSN_MSG_NUM;
    stCssnReq.aenSetType[0] = (MN_CALL_SET_CSSN_TYPE_ENUM_U32)gastAtParaList[0].ulParaValue;
    stCssnReq.aenSetType[1] = (MN_CALL_SET_CSSN_TYPE_ENUM_U32)gastAtParaList[1].ulParaValue;

    // MOCKER操作
    MOCKER(MN_CALL_SendAppRequest)
        .stubs()
        .with(eq(enReq),
                eq(clientId),
                eq(opId),
                eq(callId),
                mirror((const MN_CALL_APP_REQ_PARM_UNION*)&stCssnReq, (VOS_UINT32)sizeof(stCssnReq)))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    /* 调用函数 */
    ulRst = At_SetCssnPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_ERROR, ulRst);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
class Test_At_SetCmgfPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCmgfPara, Test_At_SetCmgfPara_001)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;
    gucAtParaIndex                                              = 2;

    // MOCKER操作;

    // 调用被测函数
    ulRslt = At_SetCmgfPara(ucIndex);

    // 执行检查
    EXPECT_EQ((TAF_UINT32)AT_CMS_OPERATION_NOT_ALLOWED, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCmgfPara, Test_At_SetCmgfPara_002)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;
    g_stATParseCmd.ucCmdOptType                                 = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                                              = 1;
    gastAtParaList[0].usParaLen                                 = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRslt = At_SetCmgfPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMGF_MSG_FORMAT_ENUM_U8)AT_CMGF_MSG_FORMAT_PDU, g_astAtModemCtx[MODEM_ID_0].stSmsCtx.enCmgfMsgFormat);
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#if (FEATURE_ON == FEATURE_MULTI_MODEM)

TEST_F(Test_At_SetCmgfPara, Test_At_SetCmgfPara_003)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP5_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_1;
    g_stATParseCmd.ucCmdOptType                                 = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                                              = 1;
    gastAtParaList[0].usParaLen                                 = 1;

    // MOCKER操作;

    // 调用被测函数
    ulRslt = At_SetCmgfPara(ucIndex);

    // 执行检查
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#endif

class Test_At_SetCnmaPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCnmaPara, Test_At_SetCnmaPara_001)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;
    gucAtParaIndex                                              = 2;
    g_astAtModemCtx[MODEM_ID_0].stSmsCtx.enCmgfMsgFormat        = AT_CMGF_MSG_FORMAT_TEXT;
    g_stATParseCmd.ucCmdOptType                                 = AT_CMD_OPT_SET_PARA_CMD;

    // MOCKER操作;

    // 调用被测函数
    ulRslt = At_SetCnmaPara(ucIndex);

    // 执行检查
    EXPECT_EQ((TAF_UINT32)AT_CMS_OPERATION_NOT_ALLOWED, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

#if (FEATURE_ON == FEATURE_MULTI_MODEM)

TEST_F(Test_At_SetCnmaPara, Test_At_SetCnmaPara_002)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP5_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_1;
    gucAtParaIndex                                              = 2;
    g_astAtModemCtx[MODEM_ID_1].stSmsCtx.enCmgfMsgFormat        = AT_CMGF_MSG_FORMAT_PDU;
    g_stATParseCmd.ucCmdOptType                                 = AT_CMD_OPT_SET_CMD_NO_PARA;

    // MOCKER操作
    MOCKER(MN_MSG_SendAck).stubs().will(returnValue((VOS_UINT32)MN_ERR_NO_ERROR));

    // 调用被测函数
    ulRslt = At_SetCnmaPara(ucIndex);

    // 执行检查
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#endif


class Test_At_SetCmgsPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCmgsPara, Test_At_SetCmgsPara_001)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;
    MN_MSG_ASCII_ADDR_STRU              stAsciiAddr;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;
    stAsciiAddr.enNumType = 1;
    stAsciiAddr.enNumPlan = 1;
    stAsciiAddr.ulLen = 2;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;
    gastAtParaList[0].usParaLen                                 = 1;
    gucAtParaIndex                                              = 2;
    g_astAtModemCtx[MODEM_ID_0].stSmsCtx.enCmgfMsgFormat        = AT_CMGF_MSG_FORMAT_TEXT;

    // MOCKER操作
    MOCKER(At_GetAsciiOrBcdAddr)
        .stubs()
        .with(any(), any(), any(),any(), outBoundP((MN_MSG_ASCII_ADDR_STRU*)&stAsciiAddr,(VOS_UINT32)sizeof(stAsciiAddr)), any())
        .will(returnValue((VOS_UINT32)AT_OK));

    // 调用被测函数
    ulRslt = At_SetCmgsPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CMGS_TEXT_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_SMS_INPUT, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

#if (FEATURE_ON == FEATURE_MULTI_MODEM)

TEST_F(Test_At_SetCmgsPara, Test_At_SetCmgsPara_002)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP5_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_1;
    gastAtParaList[0].usParaLen                                 = 1;
    gucAtParaIndex                                              = 1;
    g_astAtModemCtx[MODEM_ID_1].stSmsCtx.enCmgfMsgFormat        = AT_CMGF_MSG_FORMAT_PDU;

    // MOCKER操作;

    // 调用被测函数
    ulRslt = At_SetCmgsPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CMGS_PDU_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_SMS_INPUT, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#endif


class Test_At_SetCmgwPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCmgwPara, Test_At_SetCmgwPara_001)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;
    MN_MSG_ASCII_ADDR_STRU              stAsciiAddr;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;
    stAsciiAddr.enNumType = 1;
    stAsciiAddr.enNumPlan = 1;
    stAsciiAddr.ulLen = 2;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;
    gastAtParaList[0].usParaLen                                 = 1;
    gucAtParaIndex                                              = 3;
    g_astAtModemCtx[MODEM_ID_0].stSmsCtx.enCmgfMsgFormat        = AT_CMGF_MSG_FORMAT_TEXT;

    // MOCKER操作
    MOCKER(At_GetAsciiOrBcdAddr)
        .stubs()
        .with(any(), any(), any(),any(), outBoundP((MN_MSG_ASCII_ADDR_STRU*)&stAsciiAddr,(VOS_UINT32)sizeof(stAsciiAddr)), any())
        .will(returnValue((VOS_UINT32)AT_OK));

    // 调用被测函数
    ulRslt = At_SetCmgwPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CMGW_TEXT_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_SMS_INPUT, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

#if (FEATURE_ON == FEATURE_MULTI_MODEM)

TEST_F(Test_At_SetCmgwPara, Test_At_SetCmgwPara_002)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP5_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_1;
    gastAtParaList[0].usParaLen                                 = 1;
    gucAtParaIndex                                              = 2;
    g_astAtModemCtx[MODEM_ID_1].stSmsCtx.enCmgfMsgFormat        = AT_CMGF_MSG_FORMAT_PDU;

    // MOCKER操作;

    // 调用被测函数
    ulRslt = At_SetCmgwPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CMGW_PDU_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_SMS_INPUT, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#endif


class Test_At_SetCmgcPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCmgcPara, Test_At_SetCmgcPara_001)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;
    MN_MSG_ASCII_ADDR_STRU              stAsciiAddr;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;
    stAsciiAddr.enNumType = 1;
    stAsciiAddr.enNumPlan = 1;
    stAsciiAddr.ulLen = 2;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;
    gastAtParaList[0].usParaLen                                 = 1;
    gastAtParaList[1].usParaLen                                 = 1;
    gucAtParaIndex                                              = 3;
    g_astAtModemCtx[MODEM_ID_0].stSmsCtx.enCmgfMsgFormat        = AT_CMGF_MSG_FORMAT_TEXT;

    // MOCKER操作
    MOCKER(At_GetAsciiOrBcdAddr)
        .stubs()
        .with(any(), any(), any(),any(), outBoundP((MN_MSG_ASCII_ADDR_STRU*)&stAsciiAddr,(VOS_UINT32)sizeof(stAsciiAddr)), any())
        .will(returnValue((VOS_UINT32)AT_OK));

    // 调用被测函数
    ulRslt = At_SetCmgcPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CMGC_TEXT_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_SMS_INPUT, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

#if (FEATURE_ON == FEATURE_MULTI_MODEM)

TEST_F(Test_At_SetCmgcPara, Test_At_SetCmgcPara_002)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP5_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_1;
    gastAtParaList[0].usParaLen                                 = 1;
    gucAtParaIndex                                              = 1;
    g_astAtModemCtx[MODEM_ID_1].stSmsCtx.enCmgfMsgFormat        = AT_CMGF_MSG_FORMAT_PDU;

    // MOCKER操作;

    // 调用被测函数
    ulRslt = At_SetCmgcPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CMGC_PDU_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_SMS_INPUT, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#endif



class Test_At_SetCbstPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCbstPara, Test_At_SetCbstPara_001)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 2;
    gastAtParaList[2].usParaLen = 1;
    gastAtParaList[2].ulParaValue = 3;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetCbstPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRst);
    EXPECT_EQ(1, pstSsCtx->stCbstDataCfg.enSpeed);
    EXPECT_EQ(2, pstSsCtx->stCbstDataCfg.enName);
    EXPECT_EQ(3, pstSsCtx->stCbstDataCfg.enConnElem);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}

#if (FEATURE_ON == FEATURE_MULTI_MODEM)
TEST_F(Test_At_SetCbstPara, Test_At_SetCbstPara_002)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 0;
    gastAtParaList[1].usParaLen = 0;
    gastAtParaList[2].usParaLen = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetCbstPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRst);
    EXPECT_EQ((MN_CALL_CS_DATA_SPEED_ENUM_U8)MN_CALL_CSD_SPD_64K_MULTI, pstSsCtx->stCbstDataCfg.enSpeed);
    EXPECT_EQ((MN_CALL_CS_DATA_NAME_ENUM_U8)MN_CALL_CSD_NAME_SYNC_UDI, pstSsCtx->stCbstDataCfg.enName);
    EXPECT_EQ((MN_CALL_CS_DATA_CE_ENUM_U8)MN_CALL_CSD_CE_T, pstSsCtx->stCbstDataCfg.enConnElem);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
#endif
class Test_At_SetCcugPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
        gucAtParaIndex = 3;
    }
    void TearDown()
    {
        gucAtParaIndex = 0;
    }
};


TEST_F(Test_At_SetCcugPara, Test_At_SetCcugPara_001)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 10;
    gastAtParaList[2].usParaLen = 1;
    gastAtParaList[2].ulParaValue = 3;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetCcugPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRst);
    EXPECT_EQ(1, pstSsCtx->stCcugCfg.bEnable);
    EXPECT_EQ(0, pstSsCtx->stCcugCfg.bIndexPresent);
    EXPECT_EQ(1, pstSsCtx->stCcugCfg.bSuppressPrefer);
    EXPECT_EQ(1, pstSsCtx->stCcugCfg.bSuppressOA);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCcugPara, Test_At_SetCcugPara_002)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 0;
    gastAtParaList[1].usParaLen = 0;
    gastAtParaList[2].usParaLen = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetCcugPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRst);
    EXPECT_EQ(0, pstSsCtx->stCcugCfg.bEnable);
    EXPECT_EQ(0, pstSsCtx->stCcugCfg.bIndexPresent);
    EXPECT_EQ(0, pstSsCtx->stCcugCfg.bSuppressPrefer);
    EXPECT_EQ(0, pstSsCtx->stCcugCfg.bSuppressOA);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}

#if (FEATURE_ON == FEATURE_MULTI_MODEM)
TEST_F(Test_At_SetCcugPara, Test_At_SetCcugPara_003)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 0;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[1].ulParaValue = 3;
    gastAtParaList[2].usParaLen = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetCcugPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRst);
    EXPECT_EQ(0, pstSsCtx->stCcugCfg.bEnable);
    EXPECT_EQ(1, pstSsCtx->stCcugCfg.bIndexPresent);
    EXPECT_EQ(3, pstSsCtx->stCcugCfg.ulIndex);
    EXPECT_EQ(0, pstSsCtx->stCcugCfg.bSuppressPrefer);
    EXPECT_EQ(0, pstSsCtx->stCcugCfg.bSuppressOA);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
#endif
class Test_At_SetCsdhPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCsdhPara, Test_At_SetCsdhPara_001)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;
    g_stATParseCmd.ucCmdOptType                                 = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                                              = 1;
    gastAtParaList[0].usParaLen                                 = 1;
    gastAtParaList[0].ulParaValue                               = 1;

    // MOCKER操作;

    // 调用被测函数
    ulRslt = At_SetCsdhPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CSDH_TYPE)AT_CSDH_SHOW_TYPE, g_astAtModemCtx[MODEM_ID_0].stSmsCtx.ucCsdhType);
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#if (FEATURE_ON == FEATURE_MULTI_MODEM)

TEST_F(Test_At_SetCsdhPara, Test_At_SetCsdhPara_002)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP5_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_1;
    g_stATParseCmd.ucCmdOptType                                 = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                                              = 1;
    gastAtParaList[0].usParaLen                                 = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRslt = At_SetCsdhPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CSDH_TYPE)AT_CSDH_NOT_SHOW_TYPE, g_astAtModemCtx[MODEM_ID_1].stSmsCtx.ucCsdhType);
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#endif


class Test_At_SetCmglPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCmglPara, Test_At_SetCmglPara_001)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;
    g_stATParseCmd.ucCmdOptType                                 = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[0].usParaLen                                 = 1;
    g_astAtModemCtx[MODEM_ID_0].stSmsCtx.ucParaCmsr             = 0;

    // MOCKER操作
    MOCKER(MN_MSG_List).stubs().will(returnValue((VOS_UINT32)MN_ERR_NO_ERROR));

    // 调用被测函数
    ulRslt = At_SetCmglPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CMGL_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

#if (FEATURE_ON == FEATURE_MULTI_MODEM)

TEST_F(Test_At_SetCmglPara, Test_At_SetCmglPara_002)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP5_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_1;
    g_stATParseCmd.ucCmdOptType                                 = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[0].usParaLen                                 = 1;
    g_astAtModemCtx[MODEM_ID_1].stSmsCtx.ucParaCmsr             = 1;
    gucAtParaIndex                                              = 1;

    // MOCKER操作
    MOCKER(MN_MSG_List).stubs().will(returnValue((VOS_UINT32)MN_ERR_NO_ERROR));

    // 调用被测函数
    ulRslt = At_SetCmglPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CMGL_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#endif


class Test_At_SetCmgrPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCmgrPara, Test_At_SetCmgrPara_001)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;
    gastAtParaList[0].usParaLen                                 = 1;
    g_astAtModemCtx[MODEM_ID_0].stSmsCtx.ucParaCmsr             = 0;

    // MOCKER操作
    MOCKER(MN_MSG_Read).stubs().will(returnValue((VOS_UINT32)MN_ERR_NO_ERROR));

    // 调用被测函数
    ulRslt = At_SetCmgrPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CMGR_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}

#if (FEATURE_ON == FEATURE_MULTI_MODEM)

TEST_F(Test_At_SetCmgrPara, Test_At_SetCmgrPara_002)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP5_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_1;
    gastAtParaList[0].usParaLen                                 = 1;
    g_astAtModemCtx[MODEM_ID_1].stSmsCtx.ucParaCmsr             = 1;
    gucAtParaIndex                                              = 1;

    // MOCKER操作
    MOCKER(MN_MSG_Read).stubs().will(returnValue((VOS_UINT32)MN_ERR_NO_ERROR));

    // 调用被测函数
    ulRslt = At_SetCmgrPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CMGR_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
#endif


class Test_At_SetCmsrPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCmsrPara, Test_At_SetCmsrPara_001)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;
    gastAtParaList[0].usParaLen                                 = 1;
    gucAtParaIndex                                              = 1;
    gastAtParaList[0].ulParaValue                               = 1;

    // MOCKER操作

    // 调用被测函数
    ulRslt = At_SetCmsrPara(ucIndex);

    // 执行检查
    EXPECT_EQ(1, g_astAtModemCtx[MODEM_ID_0].stSmsCtx.ucParaCmsr);
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetCpmsPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCpmsPara, Test_At_SetCpmsPara_001)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;
    gastAtParaList[0].usParaLen                                 = 1;
    gastAtParaList[0].ulParaValue                               = 1;
    gucAtParaIndex                                              = 3;
    gastAtParaList[1].usParaLen                                 = 1;
    g_astAtModemCtx[MODEM_ID_0].stSmsCtx.enMsgMeStorageStatus   = MN_MSG_ME_STORAGE_DISABLE;
    g_astAtModemCtx[MODEM_ID_0].stSmsCtx.stCpmsInfo.enTmpMemReadorDelete = MN_MSG_MEM_STORE_NV;

    // MOCKER操作

    // 调用被测函数
    ulRslt = At_SetCpmsPara(ucIndex);

    // 执行检查
    EXPECT_EQ((TAF_UINT32)AT_ERROR, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCpmsPara, Test_At_SetCpmsPara_002)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;
    gastAtParaList[0].usParaLen                                 = 1;
    gucAtParaIndex                                              = 3;
    gastAtParaList[1].usParaLen                                 = 0;
    g_astAtModemCtx[MODEM_ID_0].stSmsCtx.enMsgMeStorageStatus   = MN_MSG_ME_STORAGE_ENABLE;
    g_astAtModemCtx[MODEM_ID_0].stSmsCtx.stCpmsInfo.enTmpMemSendorWrite = MN_MSG_MEM_STORE_NV;

    // MOCKER操作
    MOCKER(MN_MSG_SetRcvMsgPath).stubs().will(returnValue(MN_ERR_NO_ERROR));
    MOCKER(At_GetSmsStorage).stubs().will(returnValue((VOS_UINT32)AT_OK));

    // 调用被测函数
    ulRslt = At_SetCpmsPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CPMS_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetCgsmsPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCgsmsPara, Test_At_SetCgsmsPara_001)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_BUTT;

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType                                 = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[0].usParaLen                                 = 1;
    gucAtParaIndex                                              = 1;

    // MOCKER操作

    // 调用被测函数
    ulRslt = At_SetCgsmsPara(ucIndex);

    // 执行检查
    EXPECT_EQ((TAF_UINT32)AT_ERROR, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCgsmsPara, Test_At_SetCgsmsPara_002)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;
    AT_NVIM_SEND_DOMAIN_STRU            stSendDomain;

    // 参数初始化
    ucIndex                     = AT_CLIENT_TAB_APP_INDEX;
    stSendDomain.ucSendDomain   = AT_NV_SMS_DOMAIN_CS_ONLY;
    stSendDomain.ucActFlg       = VOS_TRUE;

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType                                         = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[0].usParaLen                                         = 0;
    gucAtParaIndex                                                      = 1;
    g_astAtModemCtx[MODEM_ID_0].stSmsCtx.stCgsmsSendDomain.ucActFlg     = VOS_TRUE;

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), any(), outBoundP((VOS_VOID*)&stSendDomain,(VOS_UINT32)sizeof(stSendDomain)), any())
        .will(returnValue((VOS_UINT32)NV_OK));

    // 调用被测函数
    ulRslt = At_SetCgsmsPara(ucIndex);

    // 执行检查
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCgsmsPara, Test_At_SetCgsmsPara_003)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;
    AT_NVIM_SEND_DOMAIN_STRU            stSendDomain;

    // 参数初始化
    ucIndex                     = AT_CLIENT_TAB_APP_INDEX;
    stSendDomain.ucSendDomain   = AT_NV_SMS_DOMAIN_CS_ONLY;
    stSendDomain.ucActFlg       = VOS_FALSE;

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType                                         = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[0].usParaLen                                         = 0;
    gucAtParaIndex                                                      = 1;
    g_astAtModemCtx[MODEM_ID_0].stSmsCtx.stCgsmsSendDomain.ucActFlg     = VOS_TRUE;
    g_astAtModemCtx[MODEM_ID_0].stSmsCtx.stCgsmsSendDomain.enSendDomain = MN_MSG_SEND_DOMAIN_CS;

    // MOCKER操作
    MOCKER(NV_ReadEx)
        .stubs()
        .with(any(), any(), outBoundP((VOS_VOID*)&stSendDomain,(VOS_UINT32)sizeof(stSendDomain)), any())
        .will(returnValue((VOS_UINT32)NV_OK));
    MOCKER(NV_WriteEx)
        .stubs()
        .will(returnValue((VOS_UINT32)NV_READ_UNABLE));

    // 调用被测函数
    ulRslt = At_SetCgsmsPara(ucIndex);

    // 执行检查
    EXPECT_EQ((TAF_UINT32)AT_ERROR, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetCmssPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCmssPara, Test_At_SetCmssPara_001)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;
    gastAtParaList[0].usParaLen                                 = 1;
    gucAtParaIndex                                              = 3;
    gastAtParaList[0].ulParaValue                               = 1;

    // MOCKER操作
    MOCKER(At_GetAsciiOrBcdAddr)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));
    MOCKER(MN_MSG_SendFromMem)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_NO_ERROR));

    // 调用被测函数
    ulRslt = At_SetCmssPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CMSS_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetCmstPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCmstPara, Test_At_SetCmstPara_001)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;
    gastAtParaList[0].usParaLen                                 = 1;
    gastAtParaList[3].usParaLen                                 = 1;
    gucAtParaIndex                                              = 4;
    gastAtParaList[0].ulParaValue                               = 1;
    gastAtParaList[3].ulParaValue                               = 1;

    // MOCKER操作
    MOCKER(At_GetAsciiOrBcdAddr)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));
    MOCKER(MN_MSG_SendFromMem)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRslt = At_SetCmstPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CMST_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetCscaPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCscaPara, Test_At_SetCscaPara_001)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;
    gastAtParaList[0].usParaLen                                 = 1;
    gucAtParaIndex                                              = 2;

    // MOCKER操作
    MOCKER(At_SetNumTypePara)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));
    MOCKER(AT_AsciiNumberToBcd)
        .stubs()
        .will(returnValue(MN_ERR_NO_ERROR));
    MOCKER(MN_MSG_WriteSrvParam)
        .stubs()
        .will(returnValue(MN_ERR_NO_ERROR));

    // 调用被测函数
    ulRslt = At_SetCscaPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CSCA_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetCsmpPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCsmpPara, Test_At_SetCsmpPara_001)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;
    g_stATParseCmd.ucCmdOptType                                 = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[0].usParaLen                                 = 1;
    gucAtParaIndex                                              = 4;
    gastAtParaList[2].usParaLen                                 = 0;
    gastAtParaList[3].usParaLen                                 = 0;

    // MOCKER操作
    MOCKER(At_ParseCsmpFo)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));
    MOCKER(At_ParseCsmpVp)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));
    MOCKER(MN_MSG_WriteSrvParam)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_NO_ERROR));

    // 调用被测函数
    ulRslt = At_SetCsmpPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CSMP_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCsmpPara, Test_At_SetCsmpPara_002)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;
    g_stATParseCmd.ucCmdOptType                                 = AT_CMD_OPT_SET_PARA_CMD;
    gastAtParaList[0].usParaLen                                 = 0;
    gucAtParaIndex                                              = 4;
    gastAtParaList[2].usParaLen                                 = 0;
    gastAtParaList[3].usParaLen                                 = 0;

    // MOCKER操作
    MOCKER(At_ParseCsmpVp)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));
    MOCKER(MN_MSG_WriteSrvParam)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_NO_ERROR));

    // 调用被测函数
    ulRslt = At_SetCsmpPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CSMP_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



class Test_At_SetCrcPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
        gucAtParaIndex = 1;
    }
    void TearDown()
    {
        gucAtParaIndex = 0;
    }
};


TEST_F(Test_At_SetCrcPara, Test_At_SetCrcPara_001)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_0;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[0].ulParaValue = 1;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetCrcPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRst);
    EXPECT_EQ(1, pstSsCtx->ucCrcType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}

#if (FEATURE_ON == FEATURE_MULTI_MODEM)
TEST_F(Test_At_SetCrcPara, Test_At_SetCrcPara_002)
{
    VOS_UINT8                           ucIndex = 0;
    MODEM_ID_ENUM_UINT16                enModemId = MODEM_ID_1;
    AT_CLIENT_CTX_STRU                 *pstAtClientCtx = VOS_NULL_PTR;
    VOS_UINT32                          ulRst;
    AT_MODEM_SS_CTX_STRU               *pstSsCtx = VOS_NULL_PTR;

    pstAtClientCtx = AT_GetClientCtxAddr(ucIndex);
    pstAtClientCtx->stClientConfiguration.enModemId = enModemId;

    pstSsCtx = AT_GetModemSsCtxAddrFromClientId(ucIndex);

    gastAtParaList[0].usParaLen = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    /* 调用函数 */
    ulRst = At_SetCrcPara(ucIndex);

    /* 检查 */
    EXPECT_EQ((TAF_UINT32)AT_OK, ulRst);
    EXPECT_EQ(0, pstSsCtx->ucCrcType);

    /* 检查调用时, 需要在用例结束位置加上这句 */
    GlobalMockObject::verify();
}
#endif
class Test_At_SetCnmiPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCnmiPara, Test_At_SetCnmiPara_001)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType                                 = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                                              = 0;

    gastAtClientTab[ucIndex].CmdCurrentOpt 						= AT_CMD_CURRENT_OPT_BUTT;
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;

    // MOCKER操作
    MOCKER(At_UpdateMsgRcvAct)
        .expects(never());

    // 调用被测函数
    ulRslt = At_SetCnmiPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CURRENT_OPT_BUTT, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_CMS_OPERATION_NOT_SUPPORTED, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCnmiPara, Test_At_SetCnmiPara_002)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;
    MODEM_ID_ENUM_UINT16                enModemId;

    // 参数初始化
    ucIndex		= AT_CLIENT_TAB_APP_INDEX;
    enModemId   = MODEM_ID_0;

    // 相关全局变量初始化
    g_stATParseCmd.ucCmdOptType                                 = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                                              = 1;

    gastAtClientTab[ucIndex].CmdCurrentOpt                      = AT_CMD_CURRENT_OPT_BUTT;
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = enModemId;

    g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiModeType = 1;
    g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiMtType   = 2;
    g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiBmType   = 2;
    g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiDsType   = 1;
    g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiBfrType	= 0;

    gastAtParaList[0].usParaLen                                 = 0;
    gastAtParaList[1].usParaLen                                 = 1;
    gastAtParaList[1].ulParaValue                               = 3;
    gastAtParaList[2].usParaLen                                 = 0;
    gastAtParaList[3].usParaLen                                 = 0;
    gastAtParaList[4].usParaLen                                 = 0;

    // MOCKER操作
    MOCKER(At_UpdateMsgRcvAct)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    // 调用被测函数
    ulRslt = At_SetCnmiPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CNMI_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRslt);
    EXPECT_EQ(g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiTmpModeType, 1);
    EXPECT_EQ(g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiTmpMtType, 3);
    EXPECT_EQ(g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiTmpBmType, 2);
    EXPECT_EQ(g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiTmpDsType, 1);
    EXPECT_EQ(g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiTmpBfrType, 0);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCnmiPara, Test_At_SetCnmiPara_003)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;
    MODEM_ID_ENUM_UINT16                enModemId;

    // 参数初始化
    ucIndex		= AT_CLIENT_TAB_APP_INDEX;
    enModemId   = MODEM_ID_0;

    // 相关全局变量初始化
    g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiModeType = 1;
    g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiMtType   = 2;
    g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiBmType   = 2;
    g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiDsType   = 1;
    g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiBfrType  = 0;

    gucAtParaIndex                                              = 5;

    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = enModemId;
    g_stATParseCmd.ucCmdOptType                                 = AT_CMD_OPT_SET_PARA_CMD;

    gastAtParaList[0].usParaLen                                 = 1;
    gastAtParaList[0].ulParaValue                               = 2;
    gastAtParaList[1].usParaLen                                 = 1;
    gastAtParaList[1].ulParaValue                               = 1;
    gastAtParaList[2].usParaLen                                 = 1;
    gastAtParaList[2].ulParaValue                               = 2;
    gastAtParaList[3].usParaLen                                 = 1;
    gastAtParaList[3].ulParaValue                               = 2;
    gastAtParaList[4].usParaLen                                 = 1;
    gastAtParaList[4].ulParaValue                               = 1;

    // MOCKER操作
    MOCKER(At_UpdateMsgRcvAct)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    // 调用被测函数
    ulRslt = At_SetCnmiPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CNMI_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRslt);
    EXPECT_EQ(g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiTmpModeType, 2);
    EXPECT_EQ(g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiTmpMtType, 1);
    EXPECT_EQ(g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiTmpBmType, 2);
    EXPECT_EQ(g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiTmpDsType, 2);
    EXPECT_EQ(g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiTmpBfrType, 1);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCnmiPara, Test_At_SetCnmiPara_004)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;
    MODEM_ID_ENUM_UINT16                enModemId;

    // 参数初始化
    ucIndex		= AT_CLIENT_TAB_APP_INDEX;
    enModemId   = MODEM_ID_0;

    // 相关全局变量初始化
    g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiModeType = 1;
    g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiMtType   = 2;
    g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiBmType   = 2;
    g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiDsType   = 1;
    g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiBfrType	= 0;

    gucAtParaIndex                                              = 1;

    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = enModemId;
    g_stATParseCmd.ucCmdOptType                                 = AT_CMD_OPT_SET_PARA_CMD;

    gastAtParaList[0].usParaLen                                 = 0;
    gastAtParaList[0].ulParaValue                               = 0;
    gastAtParaList[1].usParaLen                                 = 0;
    gastAtParaList[1].ulParaValue                               = 0;
    gastAtParaList[2].usParaLen                                 = 0;
    gastAtParaList[2].ulParaValue                               = 0;
    gastAtParaList[3].usParaLen                                 = 0;
    gastAtParaList[3].ulParaValue                               = 0;
    gastAtParaList[4].usParaLen                                 = 1;
    gastAtParaList[4].ulParaValue                               = 1;

    // MOCKER操作
    MOCKER(At_UpdateMsgRcvAct)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    // 调用被测函数
    ulRslt = At_SetCnmiPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CNMI_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRslt);
    EXPECT_EQ(g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiTmpModeType, 1);
    EXPECT_EQ(g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiTmpMtType, 2);
    EXPECT_EQ(g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiTmpBmType, 2);
    EXPECT_EQ(g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiTmpDsType, 1);
    EXPECT_EQ(g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiTmpBfrType, 1);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCnmiPara, Test_At_SetCnmiPara_005)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;
    MODEM_ID_ENUM_UINT16                enModemId;

    // 参数初始化
    ucIndex		= AT_CLIENT_TAB_APP_INDEX;
    enModemId   = MODEM_ID_0;

    // 相关全局变量初始化
    g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiModeType = 1;
    g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiMtType   = 2;
    g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiBmType   = 2;
    g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiDsType   = 1;
    g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiBfrType  = 0;

    gucAtParaIndex                                              = 0;

    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = enModemId;
    g_stATParseCmd.ucCmdOptType                                 = AT_CMD_OPT_SET_CMD_NO_PARA;

    // MOCKER操作
    MOCKER(At_UpdateMsgRcvAct)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    // 调用被测函数
    ulRslt = At_SetCnmiPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CNMI_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRslt);
    EXPECT_EQ(g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiTmpModeType, 0);
    EXPECT_EQ(g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiTmpMtType, 0);
    EXPECT_EQ(g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiTmpBmType, 0);
    EXPECT_EQ(g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiTmpDsType, 0);
    EXPECT_EQ(g_astAtModemCtx[enModemId].stSmsCtx.stCnmiType.CnmiTmpBfrType, 0);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetCmgdPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCmgdPara, Test_At_SetCmgdPara_001)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;
    gastAtParaList[0].usParaLen                                 = 0;
    gucAtParaIndex                                              = 2;
    gastAtParaList[1].usParaLen                                 = 1;
    gastAtParaList[1].ulParaValue                               = 1;

    // MOCKER操作
    MOCKER(At_MsgDeleteCmdProc)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    // 调用被测函数
    ulRslt = At_SetCmgdPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CMGD_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetCmgiPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCmgiPara, Test_At_SetCmgiPara_001)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;
    gastAtParaList[0].usParaLen                                 = 1;
    gucAtParaIndex                                              = 1;
    gastAtParaList[0].ulParaValue                               = 1;

    // MOCKER操作
    MOCKER(MN_MSG_Delete_Test)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_NO_ERROR));

    // 调用被测函数
    ulRslt = At_SetCmgiPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CMGI_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((VOS_UINT8)AT_FW_CLIENT_STATUS_PEND, g_stParseContext[ucIndex].ucClientStatus);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetCmmtPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCmmtPara, Test_At_SetCmmtPara_001)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;
    gastAtParaList[0].usParaLen                                 = 1;
    gucAtParaIndex                                              = 2;
    gastAtParaList[0].ulParaValue                               = 1;

    // MOCKER操作
    MOCKER(MN_MSG_ModifyStatus)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_NO_ERROR));

    // 调用被测函数
    ulRslt = At_SetCmmtPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CMMT_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_AT_ProcCscbWithParm: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_ProcCscbWithParm, Test_AT_ProcCscbWithParm_001)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    TAF_CBA_CBMI_RANGE_LIST_STRU        stCbmirList;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;
    gastAtParaList[1].usParaLen                                 = 1;
    gucAtParaIndex                                              = 3;
    gastAtParaList[2].usParaLen                                 = 1;
    gastAtParaList[0].ulParaValue                               = 0;

    // MOCKER操作
    MOCKER(AT_ParseCbParm)
        .expects(exactly(2))
        .will(returnValue((VOS_UINT32)VOS_OK));

    MOCKER(MN_MSG_AddCbMids)
        .stubs()
        .will(returnValue((VOS_UINT32)MN_ERR_NO_ERROR));

    // 调用被测函数
    ulRslt = AT_ProcCscbWithParm(ucIndex, &stCbmirList);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_OK, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetCsmsPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
        At_PidInit(VOS_IP_INITIAL);
    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCsmsPara, Test_At_SetCsmsPara_001)
{
    // 参数定义
    TAF_UINT8                           ucIndex;
    VOS_UINT32                          ulRslt = 0;

    // 参数初始化
    ucIndex = AT_CLIENT_TAB_APP_INDEX;

    // 相关全局变量初始化
    g_astAtClientCtx[ucIndex].stClientConfiguration.enModemId   = MODEM_ID_0;
    gastAtParaList[0].usParaLen                                 = 1;
    gucAtParaIndex                                              = 1;
    gastAtParaList[0].ulParaValue                               = 1;

    // MOCKER操作
    MOCKER(At_UpdateMsgRcvAct)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_OK));

    // 调用被测函数
    ulRslt = At_SetCsmsPara(ucIndex);

    // 执行检查
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CSMS_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



class Test_At_SetCgsnPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};

TEST_F(Test_At_SetCgsnPara, Test_At_SetCgsnPara_001)
{
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;

    ucIndex = AT_CLIENT_TAB_PCUI_INDEX;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    ulRslt = At_SetCgsnPara(ucIndex);

    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRslt);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CGSN_READ , gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCgsnPara, Test_At_SetCgsnPara_002)
{
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;

    ucIndex = AT_CLIENT_TAB_PCUI_INDEX;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    ulRslt = At_SetCgsnPara(ucIndex);

    EXPECT_EQ((TAF_UINT32)AT_ERROR, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCgsnPara, Test_At_SetCgsnPara_003)
{
    VOS_UINT32                          ulRslt;
    VOS_UINT8                           ucIndex;

    ucIndex = AT_CLIENT_TAB_PCUI_INDEX;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    MOCKER(AT_FillAndSndAppReqMsg)
        .expects(never())
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    ulRslt = At_SetCgsnPara(ucIndex);

    EXPECT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRslt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



class Test_AT_FillSsBsService: public ::testing::Test
{
public:
    TAF_SS_ERASESS_REQ_STRU             stSSPara;
    AT_PARSE_PARA_TYPE_STRU             stAtPara;
   void SetUp()
    {
        UT_STUB_INIT();
        PS_MEM_SET(&stSSPara, 0x00, sizeof(TAF_SS_ERASESS_REQ_STRU));
        PS_MEM_SET(&stAtPara, 0x00, sizeof(AT_PARSE_PARA_TYPE_STRU));
    }
    void TearDown()
    {
    }
};


TEST_F(Test_AT_FillSsBsService, Test_AT_FillSsBsService_001)
{
    //参数定义

    //参数初始化
    stAtPara.usParaLen   = 1;
    stAtPara.ulParaValue = AT_CLCK_PARA_CLASS_ALL;

    //相关全局变量初始化

    //MOCKER操作

    //调用被测函数

    //执行检查
    AT_FillSsBsService(&stSSPara, &stAtPara);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_FillSsBsService, Test_AT_FillSsBsService_002)
{
    //参数定义

    //参数初始化
    stAtPara.usParaLen = 1;


    //相关全局变量初始化

    //MOCKER操作

    //调用被测函数

    //执行检查
    AT_FillSsBsService(&stSSPara, &stAtPara);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_AT_FillSsBsService, Test_AT_FillSsBsService_003)
{
    //参数定义

    //参数初始化
    stAtPara.usParaLen = 1;
    stAtPara.ulParaValue = 1;


    //相关全局变量初始化

    //MOCKER操作

    //调用被测函数

    //执行检查
    AT_FillSsBsService(&stSSPara, &stAtPara);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



class Test_AT_SetCopnPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_AT_SetCopnPara, Test_AT_SetCopnPara_001)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;

    ucIndex     = AT_CLIENT_TAB_PCUI_INDEX;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    // 调用被测函数
    ulRet = AT_SetCopnPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCopnPara, Test_AT_SetCopnPara_002)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;
    VOS_UINT16                          usMsgType;
    TAF_MMA_COPN_INFO_QRY_REQ_STRU    stCopnInfo;
    MN_CLIENT_ID_T                      usClientId;
    MN_OPERATION_ID_T                   ucOpId;


    ucIndex                 = AT_CLIENT_TAB_PCUI_INDEX;
    stCopnInfo.usFromIndex  = 0;
    stCopnInfo.usPlmnNum    = TAF_MMA_COPN_PLMN_MAX_NUM;
    usMsgType               = ID_TAF_MMA_COPN_INFO_QRY_REQ;
    usClientId              = 150;
    ucOpId                  = 0;


    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_CMD_NO_PARA;
    gastAtClientTab[ucIndex].usClientId = 150;

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq(usClientId), eq(ucOpId), eq(usMsgType),
              mirror((VOS_VOID*)&stCopnInfo, (VOS_UINT32)sizeof(TAF_MMA_COPN_INFO_QRY_REQ_STRU)), any(), any())
        .will(returnValue((VOS_UINT32)TAF_SUCCESS));

    // 调用被测函数
    ulRet = AT_SetCopnPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_COPN_QRY, gastAtClientTab[ucIndex].CmdCurrentOpt);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetCopnPara, Test_AT_SetCopnPara_003)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;
    TAF_MMA_COPN_INFO_QRY_REQ_STRU    stCopnInfo;
    VOS_UINT16                          usMsgType;

    ucIndex                 = AT_CLIENT_TAB_PCUI_INDEX;
    stCopnInfo.usFromIndex  = 0;
    stCopnInfo.usPlmnNum    = TAF_MMA_COPN_PLMN_MAX_NUM;

    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_CMD_NO_PARA;
    gastAtClientTab[ucIndex].usClientId = 150;

    usMsgType                           = ID_TAF_MMA_COPN_INFO_QRY_REQ;

    MOCKER(AT_FillAndSndAppReqMsg)
        .stubs()
        .with(eq(gastAtClientTab[ucIndex].usClientId),any(), eq(usMsgType),
                                        mirror((VOS_VOID *)&stCopnInfo, (VOS_UINT32)sizeof(stCopnInfo)), any(), any())
        .will(returnValue((VOS_UINT32)TAF_FAILURE));

    // 调用被测函数
    ulRet = AT_SetCopnPara(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRet);

    GlobalMockObject::verify();
}





class Test_AT_SetNumAttribute: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();
    }

    void TearDown()
    {
    }

};

TEST_F(Test_AT_SetNumAttribute,Test_AT_SetNumAttribute_01)
{
    TAF_SS_NUMTYPE                      NumType;
    TAF_UINT8                           aucFwdToNum[TAF_SS_MAX_FORWARDED_TO_NUM_LEN + 1];

    gastAtParaList[3].ulParaValue = 0x91;

    gastAtParaList[2].usParaLen = 2;
    gastAtParaList[2].aucPara[0] = '+';
    gastAtParaList[2].aucPara[1] = 0x32;
    gastAtParaList[3].usParaLen = 2;


    AT_SetNumAttribute(&NumType,aucFwdToNum);

    EXPECT_EQ(0x91,NumType);
    EXPECT_EQ(0x32,(TAF_UINT8 )aucFwdToNum[0]);
}


TEST_F(Test_AT_SetNumAttribute,Test_AT_SetNumAttribute_02)
{
    TAF_SS_NUMTYPE                      NumType;
    TAF_UINT8                           aucFwdToNum[TAF_SS_MAX_FORWARDED_TO_NUM_LEN + 1];

    gastAtParaList[2].usParaLen = 2;
    gastAtParaList[2].aucPara[0] = 0x31;
    gastAtParaList[2].aucPara[1] = 0x32;
    gastAtParaList[3].usParaLen = 0;


    AT_SetNumAttribute(&NumType,aucFwdToNum);

    EXPECT_EQ(0x81,NumType);
    EXPECT_EQ(0x31,aucFwdToNum[0]);
    EXPECT_EQ(0x32,aucFwdToNum[1]);
}




TEST_F(Test_At_SetCmmiPara, Test_At_SetCmmiPara_101)
{
    VOS_CHAR                            acMmi[] = "*31#";
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex = 0;

    gucAtParaIndex = 1;

    PS_MEM_CPY(gastAtParaList[0].aucPara, acMmi, sizeof(acMmi));

    gastAtParaList[0].usParaLen = VOS_StrLen(acMmi);

    ulRet = At_SetCmmiPara(ucIndex);

    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    EXPECT_EQ((MN_CALL_CLIR_CFG_ENUM_U8)MN_CALL_CLIR_SUPPRESS, f_enClirOperate);

    // 执行检查
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetCmmiPara, Test_At_SetCmmiPara_102)
{
    VOS_CHAR                            acMmi[] = "#31#";
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex = 0;

    gucAtParaIndex = 1;

    PS_MEM_CPY(gastAtParaList[0].aucPara, acMmi, sizeof(acMmi));

    gastAtParaList[0].usParaLen = VOS_StrLen(acMmi);

    ulRet = At_SetCmmiPara(ucIndex);

    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    EXPECT_EQ((MN_CALL_CLIR_CFG_ENUM_U8)MN_CALL_CLIR_INVOKE, f_enClirOperate);

    // 执行检查
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetCmmiPara, Test_At_SetCmmiPara_003)
{
    VOS_CHAR                            acMmi[] = "*21*+8613800000000*10#";
    VOS_UINT32                          ulRet;
    MN_APP_SS_REGISTER_REQ_STRU         stRegisterMsg;
    VOS_UINT8                           ucIndex = 0;

    gucAtParaIndex = 1;

    PS_MEM_CPY(gastAtParaList[0].aucPara, acMmi, sizeof(acMmi));

    gastAtParaList[0].usParaLen = VOS_StrLen(acMmi);

    PS_MEM_SET(&stRegisterMsg, 0, sizeof(stRegisterMsg));

    stRegisterMsg.stTafSsRegisterSsReq.OP_BsService = VOS_TRUE;
    stRegisterMsg.stTafSsRegisterSsReq.BsService.BsServiceCode    = TAF_ALL_SPEECH_TRANSMISSION_SERVICES_TSCODE;
    stRegisterMsg.stTafSsRegisterSsReq.BsService.BsType           = TAF_SS_TELE_SERVICE;
    stRegisterMsg.stTafSsRegisterSsReq.SsCode                     = TAF_CFU_SS_CODE;
    stRegisterMsg.stTafSsRegisterSsReq.OP_NumType                 = VOS_TRUE;
    stRegisterMsg.stTafSsRegisterSsReq.NumType                    = 145;
    stRegisterMsg.stTafSsRegisterSsReq.OP_FwdToNum                = VOS_TRUE;
    PS_MEM_CPY(stRegisterMsg.stTafSsRegisterSsReq.aucFwdToNum, "8613800000000", VOS_StrLen("8613800000000"));

    stRegisterMsg.ulMsgId          = TAF_MSG_REGISTERSS_MSG;
    stRegisterMsg.ulSenderPid      = WUEPS_PID_AT;
    stRegisterMsg.ulReceiverPid    = I0_WUEPS_PID_TAF;
    stRegisterMsg.ulLength         = sizeof(stRegisterMsg) - VOS_MSG_HEAD_LENGTH;

    MOCKER(MN_MmiStringParse).stubs().will(returnValue(MN_ERR_NO_ERROR));
    MOCKER(At_GetMnOptType).stubs().will(returnValue(AT_CMD_CLIP_READ));

    stRegisterMsg.usClientId = 0;
    stRegisterMsg.opID = 0;
    MOCKER(Ps_SendMsg)
        .stubs()
        .with(any(), any(), eq(WUEPS_PID_AT), any())
        .will(returnValue((VOS_UINT32)VOS_OK));
//        .with(any(), any(), eq(WUEPS_PID_AT), mirror(&stRegisterMsg, sizeof(stRegisterMsg)));

    ulRet = At_SetCmmiPara(ucIndex);

    EXPECT_EQ((VOS_UINT32)AT_OK, ulRet);

    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CURRENT_OPT_BUTT, gastAtClientTab[ucIndex].CmdCurrentOpt);

    // 执行检查
    GlobalMockObject::verify();

}


class Test_At_SetClckPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
    }
    void TearDown()
    {

    }
protected:
};


TEST_F(Test_At_SetClckPara, Test_At_SetClckPara_001)
{
    VOS_UINT32                          ulRet;
    MN_APP_SS_ERASE_REQ_STRU            stEraseMsg;
    VOS_CHAR                            acPassword[] = "1234";
    VOS_UINT8                           ucIndex = 0;

    gucAtParaIndex = 4;

    PS_MEM_SET(gastAtParaList, 0, sizeof(gastAtParaList));

    /* <fac>: "AO" */
    gastAtParaList[0].usParaLen   = 2;
    gastAtParaList[0].ulParaValue = AT_CLCK_AO_TYPE;

    /* <mode>: unlock */
    gastAtParaList[1].usParaLen   = 1;
    gastAtParaList[1].ulParaValue = 0;

    /* <password>: "1234" */
    gastAtParaList[2].usParaLen = VOS_StrLen(acPassword);
    PS_MEM_CPY((VOS_CHAR *)gastAtParaList[2].aucPara, acPassword, gastAtParaList[2].usParaLen);

    /* <class>:  */
    gastAtParaList[3].usParaLen    = 1;
    gastAtParaList[3].ulParaValue = AT_CLCK_PARA_CLASS_VOICE;

    PS_MEM_SET(&stEraseMsg, 0, sizeof(stEraseMsg));

    stEraseMsg.stTafSsEraseSsReq.OP_BsService = VOS_TRUE;
    stEraseMsg.stTafSsEraseSsReq.BsService.BsServiceCode    = TAF_ALL_SPEECH_TRANSMISSION_SERVICES_TSCODE;
    stEraseMsg.stTafSsEraseSsReq.BsService.BsType           = TAF_SS_TELE_SERVICE;
    stEraseMsg.stTafSsEraseSsReq.SsCode                     = TAF_BAOC_SS_CODE;

    stEraseMsg.stTafSsEraseSsReq.OP_Password = VOS_TRUE;
    PS_MEM_CPY((VOS_CHAR *)stEraseMsg.stTafSsEraseSsReq.aucPassword, acPassword, VOS_StrLen(acPassword));

    stEraseMsg.ulMsgId          = TAF_MSG_DEACTIVATESS_MSG;
    stEraseMsg.ulSenderPid      = WUEPS_PID_AT;
    stEraseMsg.ulReceiverPid    = I0_WUEPS_PID_TAF;
    stEraseMsg.ulLength         = sizeof(stEraseMsg) - VOS_MSG_HEAD_LENGTH;

    stEraseMsg.usClientId = 0;
    stEraseMsg.opID = 0;
    MOCKER(Ps_SendMsg)
        .stubs()
        .with(any(), any(), eq(WUEPS_PID_AT), any())
        .will(returnValue((VOS_UINT32)VOS_OK));
//        .with(any(), any(), eq(WUEPS_PID_AT), mirror(&stEraseMsg, sizeof(stEraseMsg)));

    ulRet = At_SetClckPara(ucIndex);

    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRet);


    // 执行检查
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara, Test_At_SetClckPara_002)
{
    VOS_UINT32                          ulRet;
    VOS_CHAR                            acPassword[] = "123456";
    VOS_UINT8                           ucIndex;

    ucIndex = 0;
    PS_MEM_SET(gastAtParaList, 0, sizeof(gastAtParaList));

    /* <fac>: "AO" */
    gastAtParaList[0].usParaLen   = 2;
    gastAtParaList[0].ulParaValue = AT_CLCK_AO_TYPE;

    /* <mode>: unlock */
    gastAtParaList[1].usParaLen   = 1;
    gastAtParaList[1].ulParaValue = 0;

    gastAtParaList[2].usParaLen = VOS_StrLen(acPassword);
    PS_MEM_CPY((VOS_CHAR *)gastAtParaList[2].aucPara, acPassword, gastAtParaList[2].usParaLen);

    /* <class>:  */
    gastAtParaList[3].usParaLen    = 1;
    gastAtParaList[3].ulParaValue = AT_CLCK_PARA_CLASS_VOICE;

    MOCKER(Ps_SendMsg)
        .expects(never());

    ulRet = At_SetClckPara(ucIndex);

    EXPECT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);


    // 执行检查
    GlobalMockObject::verify();

}
TEST_F(Test_At_SetClckPara, Test_At_SetClckPara_003)
{
    VOS_UINT32                          ulRet;
    MN_APP_SS_INTERROGATE_REQ_STRU      stInterrogate;
    VOS_UINT8                           ucIndex;

    ucIndex = 0;
    PS_MEM_SET(gastAtParaList, 0, sizeof(gastAtParaList));

    /* <fac>: "AO" */
    gastAtParaList[0].usParaLen   = 2;
    gastAtParaList[0].ulParaValue = AT_CLCK_AO_TYPE;

    /* <mode>: unlock */
    gastAtParaList[1].usParaLen   = 1;
    gastAtParaList[1].ulParaValue = 2;

    /* <class>:  */
    gastAtParaList[3].usParaLen    = 1;
    gastAtParaList[3].ulParaValue = AT_CLCK_PARA_CLASS_VOICE;

    PS_MEM_SET(&stInterrogate, 0, sizeof(stInterrogate));

    stInterrogate.stTafSsInterrogateSsReq.OP_BsService = 1;
    stInterrogate.stTafSsInterrogateSsReq.BsService.BsServiceCode    = TAF_ALL_SPEECH_TRANSMISSION_SERVICES_TSCODE;
    stInterrogate.stTafSsInterrogateSsReq.BsService.BsType           = TAF_SS_TELE_SERVICE;
    stInterrogate.stTafSsInterrogateSsReq.SsCode                     = TAF_BAOC_SS_CODE;

    stInterrogate.ulMsgId          = TAF_MSG_INTERROGATESS_MSG;
    stInterrogate.ulSenderPid      = WUEPS_PID_AT;
    stInterrogate.ulReceiverPid    = I0_WUEPS_PID_TAF;
    stInterrogate.ulLength         = sizeof(stInterrogate) - VOS_MSG_HEAD_LENGTH;

    stInterrogate.usClientId = 0;
    stInterrogate.opID = 0;
    MOCKER(Ps_SendMsg)
        .stubs()
        .with(any(), any(), eq(WUEPS_PID_AT), any())
        .will(returnValue((VOS_UINT32)VOS_OK));
//        .with(any(), any(), eq(WUEPS_PID_AT), mirror(&stInterrogate, sizeof(stInterrogate)));

    ulRet = At_SetClckPara(ucIndex);

    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CLCK_QUERY, gastAtClientTab[ucIndex].CmdCurrentOpt);


    // 执行检查
    GlobalMockObject::verify();

}
class Test_At_SetCfunPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetCfunPara, Test_At_SetCfunPara_001)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;
    gastAtParaList[0].usParaLen = 0;

    ucIndex     = AT_CLIENT_TAB_PCUI_INDEX;

    // 调用被测函数
    ulRet = At_SetCfunPara(ucIndex);

    // 执行检查
    EXPECT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCfunPara, Test_At_SetCfunPara_001_1)
{
    // 变量声明
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;
    TAF_MMA_PHONE_MODE_SET_REQ_STRU    stPhoneModeSetReqMsg;

    ucIndex     = AT_CLIENT_TAB_PCUI_INDEX;

    PS_MEM_SET(&stPhoneModeSetReqMsg, 0, sizeof(TAF_MMA_PHONE_MODE_SET_REQ_STRU));

    stPhoneModeSetReqMsg.ulSenderCpuId     = VOS_LOCAL_CPUID;
    stPhoneModeSetReqMsg.ulReceiverCpuId   = VOS_LOCAL_CPUID;
    stPhoneModeSetReqMsg.ulSenderPid       = WUEPS_PID_TAF;
    stPhoneModeSetReqMsg.ulReceiverPid     = WUEPS_PID_MMA;
    stPhoneModeSetReqMsg.ulLength          = sizeof(TAF_MMA_PHONE_MODE_SET_REQ_STRU) - VOS_MSG_HEAD_LENGTH;
    stPhoneModeSetReqMsg.ulMsgName         = ID_TAF_MMA_PHONE_MODE_SET_REQ;
    stPhoneModeSetReqMsg.stCtrl.ulModuleId = WUEPS_PID_AT;
    stPhoneModeSetReqMsg.stCtrl.usClientId = 11;
    stPhoneModeSetReqMsg.stCtrl.ucOpId     = 0;
    stPhoneModeSetReqMsg.stPhoneModePara.PhMode  = TAF_PH_MODE_FULL;
    stPhoneModeSetReqMsg.stPhoneModePara.PhReset = TAF_PH_OP_MODE_UNRESET;

    g_stATParseCmd.ucCmdOptType         = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex                      = 1;
    gastAtParaList[0].usParaLen         = 1;
    gastAtParaList[0].ulParaValue       = 1;
    gastAtClientTab[ucIndex].usClientId = 11;

    // 调用被测函数
    ulRet = At_SetCfunPara(ucIndex);

    // 执行检查
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CFUN_SET,      gastAtClientTab[ucIndex].CmdCurrentOpt);

    GlobalMockObject::verify();
}





class Test_At_SetSimInsertPara: public ::testing::Test
{
    public:

    void SetUp()
    {
        UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetSimInsertPara, Test_At_SetSimInsertPara_001)
{
    // 变量声明
    VOS_UINT32                          ulResult;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    // MOCKER操作

    // 调用被测函数
    ulResult = At_SetSimInsertPara(0);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulResult);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetSimInsertPara, Test_At_SetSimInsertPara_002)
{
    // 变量声明
    VOS_UINT32                          ulResult;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 2;

    // MOCKER操作

    // 调用被测函数
    ulResult = At_SetSimInsertPara(0);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulResult);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetSimInsertPara, Test_At_SetSimInsertPara_003)
{
    // 变量声明
    VOS_UINT32                          ulResult;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].ulParaValue = 2;

    // MOCKER操作

    // 调用被测函数
    ulResult = At_SetSimInsertPara(0);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulResult);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetSimInsertPara, Test_At_SetSimInsertPara_004)
{
    // 变量声明
    VOS_UINT32                          ulResult;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].ulParaValue = 1;

    // 调用被测函数
    ulResult = At_SetSimInsertPara(0);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulResult);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetSimInsertPara, Test_At_SetSimInsertPara_005)
{
    // 变量声明
    VOS_UINT32                          ulResult;

    // 参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 1;
    gastAtParaList[0].ulParaValue = TAF_SIM_INSERT_STATE_INSERT;

    TAF_MMA_SIM_INSERT_REQ_STRU        stMsg;
    VOS_UINT32                          ulReceiverPid;
    VOS_UINT32                          ulSenderPid;

    PS_MEM_SET( ((VOS_UINT8 *)&stMsg + VOS_MSG_HEAD_LENGTH), 0X00,
                (sizeof(TAF_MMA_SIM_INSERT_REQ_STRU) - VOS_MSG_HEAD_LENGTH) );

#if (OSA_CPU_ACPU == VOS_OSA_CPU)
    ulReceiverPid = AT_GetDestPid(usClientId, WUEPS_PID_MMA);
    ulSenderPid   = AT_GetDestPid(usClientId, WUEPS_PID_TAF);
#else
    ulReceiverPid = WUEPS_PID_MMA;
    ulSenderPid   = WUEPS_PID_TAF;
#endif
    stMsg.ulSenderCpuId       = VOS_LOCAL_CPUID;
    stMsg.ulReceiverCpuId     = VOS_LOCAL_CPUID;
    stMsg.ulReceiverPid       = ulReceiverPid;
    stMsg.ulSenderPid         = ulSenderPid;
    stMsg.ulMsgName           = ID_TAF_MMA_SIM_INSERT_REQ;
    stMsg.stCtrl.ulModuleId   = WUEPS_PID_AT;
    stMsg.stCtrl.usClientId   = gastAtClientTab[ulIndex].usClientId;
    stMsg.stCtrl.ucOpId       = 0;
    stMsg.ulLength            = sizeof(TAF_MMA_SIM_INSERT_REQ_STRU) - VOS_MSG_HEAD_LENGTH;
    stMsg.enSimInsertState    = TAF_SIM_INSERT_STATE_INSERT;

    MOCKER(Ps_SendMsg)
        .with(any(), any(),eq(WUEPS_PID_TAF), mirror(&stMsg, sizeof(stMsg)))
        .will(returnValue(VOS_OK));

    // 调用被测函数
    ulResult = At_SetSimInsertPara(0);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulResult);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_SIMINSERT_SET, gastAtClientTab[0].CmdCurrentOpt);

    GlobalMockObject::verify();
}


class Test_At_SetReleaseRrc: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();

    }
    void TearDown()
    {

    }
};


TEST_F(Test_At_SetReleaseRrc, Test_At_SetReleaseRrc_001)
{
    VOS_UINT8                           ucIndex;
    VOS_UINT32                          ulRet;
    VOS_UINT8                              *pucSystemAppConfig;

    /* 读取NV项中当前产品形态 */
    pucSystemAppConfig  = AT_GetSystemAppConfigAddr();
    *pucSystemAppConfig = SYSTEM_APP_ANDROID;

    ucIndex                     = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    ulRet                       = At_SetReleaseRrc(ucIndex);
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}
TEST_F(Test_At_SetReleaseRrc, Test_At_SetReleaseRrc_002)
{
    VOS_UINT8                           ucIndex;
    VOS_UINT8                          *pucSystemAppConfig;
    VOS_UINT32                          ulRet;

    pucSystemAppConfig          = AT_GetSystemAppConfigAddr();
    ucIndex                     = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    *pucSystemAppConfig         = SYSTEM_APP_WEBUI;

    ulRet = At_SetReleaseRrc(ucIndex);

    EXPECT_EQ((VOS_UINT32)AT_CMD_NOT_SUPPORT, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetReleaseRrc, Test_At_SetReleaseRrc_003)
{
    VOS_UINT8                           ucIndex;
    VOS_UINT8                          *pucSystemAppConfig;
    VOS_UINT32                          ulRet;

    pucSystemAppConfig          = AT_GetSystemAppConfigAddr();
    ucIndex                     = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    *pucSystemAppConfig         = SYSTEM_APP_ANDROID;
    gastAtClientTab[ucIndex].usClientId     = 0;
    gastAtClientTab[ucIndex].opId           = 0;
    gastAtClientTab[ucIndex].CmdCurrentOpt  = AT_CMD_CURRENT_OPT_BUTT;

    ulRet = At_SetReleaseRrc(ucIndex);

    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_RELEASE_RRC_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetReleaseRrc, Test_At_SetReleaseRrc_004)
{
    VOS_UINT8                           ucIndex;
    VOS_UINT8                          *pucSystemAppConfig;
    VOS_UINT32                          ulRet;

    pucSystemAppConfig          = AT_GetSystemAppConfigAddr();
    ucIndex                     = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    *pucSystemAppConfig         = SYSTEM_APP_ANDROID;
    gastAtClientTab[ucIndex].usClientId     = 0;
    gastAtClientTab[ucIndex].opId           = 0;
    gastAtClientTab[ucIndex].CmdCurrentOpt  = AT_CMD_CURRENT_OPT_BUTT;

    MOCKER(V_AllocMsg)
        .stubs()
        .will(returnValue((MsgBlock *)VOS_NULL_PTR));

    ulRet = At_SetReleaseRrc(ucIndex);

    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRet);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CURRENT_OPT_BUTT, gastAtClientTab[ucIndex].CmdCurrentOpt);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetReleaseRrc, Test_At_SetReleaseRrc_005)
{
    VOS_UINT8                           ucIndex;
    VOS_UINT8                          *pucSystemAppConfig;
    VOS_UINT32                          ulRet;

    pucSystemAppConfig          = AT_GetSystemAppConfigAddr();
    ucIndex                     = 0;
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    *pucSystemAppConfig         = SYSTEM_APP_ANDROID;
    gastAtClientTab[ucIndex].usClientId     = 0;
    gastAtClientTab[ucIndex].opId           = 0;
    gastAtClientTab[ucIndex].CmdCurrentOpt  = AT_CMD_CURRENT_OPT_BUTT;

    MOCKER(Ps_SendMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)VOS_ERR));

    ulRet = At_SetReleaseRrc(ucIndex);

    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRet);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CURRENT_OPT_BUTT, gastAtClientTab[ucIndex].CmdCurrentOpt);

    GlobalMockObject::verify();
}





class Test_At_CheckDtmfPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();

    }

    void TearDown()
    {

    }
};


TEST_F(Test_At_CheckDtmfPara,Test_At_CheckDtmfPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    //参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].aucPara[0]    = 'd';
    gastAtParaList[2].ulParaValue   = 1;
    gastAtParaList[2].usParaLen     = 1;

    // MOCKER操作

    //执行检查
    ulRet = At_CheckDtmfPara();
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CheckDtmfPara,Test_At_CheckDtmfPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    //参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].aucPara[0]    = 'd';
    gastAtParaList[2].ulParaValue   = 0;
    gastAtParaList[2].usParaLen     = 0;

    // MOCKER操作

    //执行检查
    ulRet = At_CheckDtmfPara();
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CheckDtmfPara,Test_At_CheckDtmfPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    //参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 2;
    gastAtParaList[1].aucPara[0]    = 'd';
    gastAtParaList[2].ulParaValue   = 1;
    gastAtParaList[2].usParaLen     = 1;

    // MOCKER操作

    //执行检查
    ulRet = At_CheckDtmfPara();
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CheckDtmfPara,Test_At_CheckDtmfPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    //参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].aucPara[0]    = 'd';
    gastAtParaList[2].ulParaValue   = 1;
    gastAtParaList[2].usParaLen     = 1;

    // MOCKER操作
    MOCKER(At_UpString)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)AT_FAILURE));

    //执行检查
    ulRet = At_CheckDtmfPara();
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CheckDtmfPara,Test_At_CheckDtmfPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    //参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].aucPara[0]    = 'e';
    gastAtParaList[2].ulParaValue   = 1;
    gastAtParaList[2].usParaLen     = 1;

    // MOCKER操作

    //执行检查
    ulRet = At_CheckDtmfPara();
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_CheckDtmfPara,Test_At_CheckDtmfPara_006)
{
    // 变量声明
    VOS_UINT32                          ulRet;

    //参数初始化

    // 初始化全局变量
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].aucPara[0]    = 'd';
    gastAtParaList[2].ulParaValue   = 1;
    gastAtParaList[2].usParaLen     = 1;

    // MOCKER操作

    //执行检查
    ulRet = At_CheckDtmfPara();
    EXPECT_EQ((VOS_UINT32)AT_SUCCESS, ulRet);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


class Test_At_SetDtmfPara: public ::testing::Test
{
public:

   void SetUp()
    {
        UT_STUB_INIT();
    }
    void TearDown()
    {
    }
};


TEST_F(Test_At_SetDtmfPara, Test_At_SetDtmfPara_001)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;

    //参数初始化
    ucIndex = 1;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].aucPara[0]    = 'e';
    gastAtParaList[2].ulParaValue   = 1;
    gastAtParaList[2].usParaLen     = 1;

    //MOCKER操作

    //调用被测函数

    //执行检查
    ulRet = At_SetDtmfPara(ucIndex);
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetDtmfPara, Test_At_SetDtmfPara_002)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    MN_CALL_APP_REQ_PARM_UNION          stAppPara = {0};
    AT_MN_MSGTYPE_ENUM_UINT16           enMsgType;

    //参数初始化
    ucIndex = 1;
    stAppPara.stDtmf.CallId = 1;
    stAppPara.stDtmf.cKey   = 'A';
    stAppPara.stDtmf.usOnLength = AT_DTMF_DEFAULT_DTMF_LENGTH;
    enMsgType = MN_CALL_APP_START_DTMF_REQ;
    stAppPara.stDtmf.usOffLength = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue   = 1;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].aucPara[0]    = 'A';
    gastAtParaList[2].ulParaValue   = 1;
    gastAtParaList[2].usParaLen     = 1;

    gastAtParaList[3].ulParaValue     = 0;

    //MOCKER操作
    MOCKER(MN_CALL_SendAppRequest)
        .stubs()
        .with(eq((MN_CALL_APP_REQ_ENUM_UINT32)enMsgType), any(), any(), eq((MN_CALL_ID_T)stAppPara.stDtmf.CallId),
              mirror((const MN_CALL_APP_REQ_PARM_UNION *)&stAppPara, (VOS_UINT32)sizeof(stAppPara)))
        .will(returnValue((VOS_UINT32)VOS_ERR));

    //调用被测函数

    //执行检查
    ulRet = At_SetDtmfPara(ucIndex);
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRet);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetDtmfPara, Test_At_SetDtmfPara_003)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    MN_CALL_APP_REQ_PARM_UNION          stAppPara = {0};
    AT_MN_MSGTYPE_ENUM_UINT16           enMsgType;

    //参数初始化
    ucIndex = 1;
    stAppPara.stDtmf.CallId = 2;
    stAppPara.stDtmf.cKey   = 'D';
    stAppPara.stDtmf.usOnLength = AT_DTMF_DEFAULT_DTMF_LENGTH;
    enMsgType = MN_CALL_APP_START_DTMF_REQ;
    stAppPara.stDtmf.usOffLength = 0;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue   = 2;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 1;
    gastAtParaList[1].aucPara[0]    = 'd';
    gastAtParaList[2].ulParaValue   = 1;
    gastAtParaList[2].usParaLen     = 1;

    gastAtParaList[3].ulParaValue     = 0;

    //MOCKER操作
    MOCKER(MN_CALL_SendAppRequest)
        .stubs()
        .with(eq((MN_CALL_APP_REQ_ENUM_UINT32)enMsgType), any(), any(), eq((MN_CALL_ID_T)stAppPara.stDtmf.CallId),
             mirror((const MN_CALL_APP_REQ_PARM_UNION *)&stAppPara, (VOS_UINT32)sizeof(stAppPara)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    //调用被测函数

    //执行检查
    ulRet = At_SetDtmfPara(ucIndex);
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_DTMF_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}




TEST_F(Test_At_SetDtmfPara, Test_At_SetDtmfPara_004)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    MN_CALL_APP_REQ_PARM_UNION          stAppPara = {0};
    AT_MN_MSGTYPE_ENUM_UINT16           enMsgType;

    //参数初始化
    ucIndex = 1;
    stAppPara.stDtmf.CallId = 2;
    stAppPara.stDtmf.cKey   = 0;
    stAppPara.stDtmf.usOnLength = 0;
    stAppPara.stDtmf.usOffLength = 0;
    enMsgType = MN_CALL_APP_STOP_DTMF_REQ;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue   = 2;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 0;
    gastAtParaList[1].aucPara[0]    = 0;
    gastAtParaList[2].ulParaValue   = 0;
    gastAtParaList[2].usParaLen     = 1;

    gastAtParaList[3].ulParaValue     = 0;

    //MOCKER操作
    MOCKER(MN_CALL_SendAppRequest)
        .stubs()
        .with(eq((MN_CALL_APP_REQ_ENUM_UINT32)enMsgType), any(), any(), eq((MN_CALL_ID_T)stAppPara.stDtmf.CallId),
              mirror((const MN_CALL_APP_REQ_PARM_UNION *)&stAppPara, (VOS_UINT32)sizeof(stAppPara)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    //调用被测函数

    //执行检查
    ulRet = At_SetDtmfPara(ucIndex);
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_DTMF_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetDtmfPara, Test_At_SetDtmfPara_005)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    MN_CALL_APP_REQ_PARM_UNION          stAppPara = {0};
    AT_MN_MSGTYPE_ENUM_UINT16           enMsgType;

    //参数初始化
    ucIndex = 1;
    stAppPara.stDtmf.CallId = 2;
    stAppPara.stDtmf.cKey   = 0;
    stAppPara.stDtmf.usOnLength = 0;
    stAppPara.stDtmf.usOffLength = 70;
    enMsgType = MN_CALL_APP_STOP_DTMF_REQ;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue   = 2;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 0;
    gastAtParaList[1].aucPara[0]    = 0;
    gastAtParaList[2].ulParaValue   = 0;
    gastAtParaList[2].usParaLen     = 1;

    gastAtParaList[3].ulParaValue     = 70;

    //MOCKER操作
    MOCKER(MN_CALL_SendAppRequest)
        .stubs()
        .with(eq((MN_CALL_APP_REQ_ENUM_UINT32)enMsgType), any(), any(), eq((MN_CALL_ID_T)stAppPara.stDtmf.CallId),
              mirror((const MN_CALL_APP_REQ_PARM_UNION *)&stAppPara, (VOS_UINT32)sizeof(stAppPara)))
        .will(returnValue((VOS_UINT32)VOS_OK));

    //调用被测函数

    //执行检查
    ulRet = At_SetDtmfPara(ucIndex);
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRet);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_DTMF_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetDtmfPara, Test_At_SetDtmfPara_006)
{
    // 变量声明
    VOS_UINT32                          ulRet;
    VOS_UINT8                           ucIndex;
    MN_CALL_APP_REQ_PARM_UNION          stAppPara = {0};
    AT_MN_MSGTYPE_ENUM_UINT16           enMsgType;

    //参数初始化
    ucIndex = 1;
    stAppPara.stDtmf.CallId = 2;
    stAppPara.stDtmf.cKey   = 0;
    stAppPara.stDtmf.usOnLength = 0;
    stAppPara.stDtmf.usOffLength = 70;
    enMsgType = MN_CALL_APP_STOP_DTMF_REQ;

    //相关全局变量初始化
    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
    gucAtParaIndex = 4;
    gastAtParaList[0].ulParaValue   = 2;
    gastAtParaList[0].usParaLen     = 1;
    gastAtParaList[1].ulParaValue   = 0;
    gastAtParaList[1].usParaLen     = 0;
    gastAtParaList[1].aucPara[0]    = 0;
    gastAtParaList[2].ulParaValue   = 0;
    gastAtParaList[2].usParaLen     = 1;

    gastAtParaList[3].ulParaValue     = 5;

    //MOCKER操作
    MOCKER(MN_CALL_SendAppRequest)
        .expects(never());

    //调用被测函数

    //执行检查
    ulRet = At_SetDtmfPara(ucIndex);
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    //检查调用时, 需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



class Test_At_SetNetScan: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();
        ucIndex                     = 0;
        g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
        gucAtParaIndex = 1;
        gastAtParaList[ucIndex].ulParaValue = 1;
    }

    void TearDown()
    {

    }

    VOS_UINT8                           ucIndex;

};


TEST_F(Test_At_SetNetScan, Test_At_SetNetScan_001)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex = 1;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetNetScan(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetNetScan, Test_At_SetNetScan_002)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex = 5;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetNetScan(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}




TEST_F(Test_At_SetNetScan, Test_At_SetNetScan_003)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex = 2;

    PS_MEM_SET(&gastAtParaList[0], 0x00, sizeof(gastAtParaList[0]));
    gastAtParaList[0].usParaLen = 0;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetNetScan(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetNetScan, Test_At_SetNetScan_004)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex = 2;
    PS_MEM_SET(&gastAtParaList[0], 0x00, sizeof(gastAtParaList[0]));
    gastAtParaList[0].usParaLen   = 2;
    gastAtParaList[0].ulParaValue = 21;
    gastAtParaList[0].aucPara[0]  = '2';
    gastAtParaList[0].aucPara[1]  = '1';

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetNetScan(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetNetScan, Test_At_SetNetScan_005)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex = 2;
    PS_MEM_SET(&gastAtParaList[0], 0x00, sizeof(gastAtParaList[0]));
    PS_MEM_SET(&gastAtParaList[1], 0x00, sizeof(gastAtParaList[1]));
    gastAtParaList[0].usParaLen   = 2;
    gastAtParaList[0].ulParaValue = 20;
    gastAtParaList[0].aucPara[0]  = '2';
    gastAtParaList[0].aucPara[1]  = '0';

    gastAtParaList[1].usParaLen   = 2;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetNetScan(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetNetScan, Test_At_SetNetScan_006)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex = 2;
    PS_MEM_SET(&gastAtParaList[0], 0x00, sizeof(gastAtParaList[0]));
    PS_MEM_SET(&gastAtParaList[1], 0x00, sizeof(gastAtParaList[1]));
    gastAtParaList[0].usParaLen   = 2;
    gastAtParaList[0].ulParaValue = 20;
    gastAtParaList[0].aucPara[0]  = '2';
    gastAtParaList[0].aucPara[1]  = '0';

    gastAtParaList[1].usParaLen   = 5;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetNetScan(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetNetScan, Test_At_SetNetScan_007)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex = 2;
    PS_MEM_SET(&gastAtParaList[0], 0x00, sizeof(gastAtParaList[0]));
    PS_MEM_SET(&gastAtParaList[1], 0x00, sizeof(gastAtParaList[1]));
    gastAtParaList[0].usParaLen   = 2;
    gastAtParaList[0].ulParaValue = 20;
    gastAtParaList[0].aucPara[0]  = '2';
    gastAtParaList[0].aucPara[1]  = '0';

    gastAtParaList[1].usParaLen   = 4;
    gastAtParaList[1].aucPara[0]  = '+';

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetNetScan(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetNetScan, Test_At_SetNetScan_008)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex = 2;
    PS_MEM_SET(&gastAtParaList[0], 0x00, sizeof(gastAtParaList[0]));
    PS_MEM_SET(&gastAtParaList[1], 0x00, sizeof(gastAtParaList[1]));
    gastAtParaList[0].usParaLen   = 2;
    gastAtParaList[0].ulParaValue = 20;
    gastAtParaList[0].aucPara[0]  = '2';
    gastAtParaList[0].aucPara[1]  = '0';

    gastAtParaList[1].usParaLen   = 4;
    gastAtParaList[1].aucPara[0]  = '-';
    gastAtParaList[1].aucPara[1]  = 'F';
    gastAtParaList[1].aucPara[2]  = 'F';
    gastAtParaList[1].aucPara[3]  = 'F';

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetNetScan(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetNetScan, Test_At_SetNetScan_009)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex = 2;
    PS_MEM_SET(&gastAtParaList[0], 0x00, sizeof(gastAtParaList[0]));
    PS_MEM_SET(&gastAtParaList[1], 0x00, sizeof(gastAtParaList[1]));
    gastAtParaList[0].usParaLen   = 2;
    gastAtParaList[0].ulParaValue = 20;
    gastAtParaList[0].aucPara[0]  = '2';
    gastAtParaList[0].aucPara[1]  = '0';

    gastAtParaList[1].usParaLen   = 4;
    gastAtParaList[1].aucPara[0]  = '-';
    gastAtParaList[1].aucPara[1]  = '1';
    gastAtParaList[1].aucPara[2]  = '2';
    gastAtParaList[1].aucPara[3]  = '0';

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetNetScan(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetNetScan, Test_At_SetNetScan_010)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex = 2;
    PS_MEM_SET(&gastAtParaList[0], 0x00, sizeof(gastAtParaList[0]));
    PS_MEM_SET(&gastAtParaList[1], 0x00, sizeof(gastAtParaList[1]));
    gastAtParaList[0].usParaLen   = 2;
    gastAtParaList[0].ulParaValue = 20;
    gastAtParaList[0].aucPara[0]  = '2';
    gastAtParaList[0].aucPara[1]  = '0';

    gastAtParaList[1].usParaLen   = 3;
    gastAtParaList[1].aucPara[0]  = '-';
    gastAtParaList[1].aucPara[1]  = '3';
    gastAtParaList[1].aucPara[2]  = '0';

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetNetScan(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetNetScan, Test_At_SetNetScan_011)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex = 2;
    PS_MEM_SET(&gastAtParaList[0], 0x00, sizeof(gastAtParaList[0]));
    PS_MEM_SET(&gastAtParaList[1], 0x00, sizeof(gastAtParaList[1]));
    PS_MEM_SET(&gastAtParaList[2], 0x00, sizeof(gastAtParaList[2]));
    PS_MEM_SET(&gastAtParaList[3], 0x00, sizeof(gastAtParaList[3]));
    gastAtParaList[0].usParaLen   = 2;
    gastAtParaList[0].ulParaValue = 20;
    gastAtParaList[0].aucPara[0]  = '2';
    gastAtParaList[0].aucPara[1]  = '0';

    gastAtParaList[1].usParaLen   = 4;
    gastAtParaList[1].aucPara[0]  = '-';
    gastAtParaList[1].aucPara[1]  = '1';
    gastAtParaList[1].aucPara[2]  = '1';
    gastAtParaList[1].aucPara[3]  = '0';

    gastAtParaList[2].usParaLen   = 0;
    gastAtParaList[3].usParaLen   = 5;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetNetScan(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetNetScan, Test_At_SetNetScan_012)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex = 2;
    PS_MEM_SET(&gastAtParaList[0], 0x00, sizeof(gastAtParaList[0]));
    PS_MEM_SET(&gastAtParaList[1], 0x00, sizeof(gastAtParaList[1]));
    PS_MEM_SET(&gastAtParaList[2], 0x00, sizeof(gastAtParaList[2]));
    PS_MEM_SET(&gastAtParaList[3], 0x00, sizeof(gastAtParaList[3]));
    gastAtParaList[0].usParaLen   = 2;
    gastAtParaList[0].ulParaValue = 20;
    gastAtParaList[0].aucPara[0]  = '2';
    gastAtParaList[0].aucPara[1]  = '0';

    gastAtParaList[1].usParaLen   = 4;
    gastAtParaList[1].aucPara[0]  = '-';
    gastAtParaList[1].aucPara[1]  = '1';
    gastAtParaList[1].aucPara[2]  = '1';
    gastAtParaList[1].aucPara[3]  = '0';

    gastAtParaList[2].usParaLen   = 1;
    gastAtParaList[3].usParaLen   = 5;
    gastAtParaList[3].aucPara[0]  = 'H';
    gastAtParaList[3].aucPara[1]  = '4';
    gastAtParaList[3].aucPara[2]  = '4';
    gastAtParaList[3].aucPara[3]  = '4';
    gastAtParaList[3].aucPara[4]  = '4';

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetNetScan(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetNetScan, Test_At_SetNetScan_013)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gucAtParaIndex = 2;
    PS_MEM_SET(&gastAtParaList[0], 0x00, sizeof(gastAtParaList[0]));
    PS_MEM_SET(&gastAtParaList[1], 0x00, sizeof(gastAtParaList[1]));
    PS_MEM_SET(&gastAtParaList[2], 0x00, sizeof(gastAtParaList[2]));
    PS_MEM_SET(&gastAtParaList[3], 0x00, sizeof(gastAtParaList[3]));
    gastAtParaList[0].usParaLen   = 2;
    gastAtParaList[0].ulParaValue = 20;
    gastAtParaList[0].aucPara[0]  = '2';
    gastAtParaList[0].aucPara[1]  = '0';

    gastAtParaList[1].usParaLen   = 4;
    gastAtParaList[1].aucPara[0]  = '-';
    gastAtParaList[1].aucPara[1]  = '1';
    gastAtParaList[1].aucPara[2]  = '1';
    gastAtParaList[1].aucPara[3]  = '0';

    gastAtParaList[2].usParaLen   = 1;
    gastAtParaList[3].usParaLen   = 9;
    gastAtParaList[3].aucPara[0]  = 'H';

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_SetNetScan(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetNetScan, Test_At_SetNetScan_014)
{
    // 变量声明
    VOS_UINT32                  ulRet;
    TAF_MMA_NET_SCAN_REQ_STRU   stNetScanReq;
    VOS_UINT32                  ulExpectRet;


    // 参数初始化
    gucAtParaIndex = 2;
    PS_MEM_SET(&stNetScanReq, 0x00, sizeof(stNetScanReq));
    stNetScanReq.usCellNum         = 20;
    stNetScanReq.sCellPow          = -110;
    stNetScanReq.ucRat             = 0;
    stNetScanReq.stBand.ulBandHigh = 0x00000004;
    stNetScanReq.stBand.ulBandLow  = 0x00000000;
    ulExpectRet                    = AT_SUCCESS;

    // 初始化全局变量;
    PS_MEM_SET(&gastAtParaList[0], 0x00, sizeof(gastAtParaList[0]));
    PS_MEM_SET(&gastAtParaList[1], 0x00, sizeof(gastAtParaList[1]));
    PS_MEM_SET(&gastAtParaList[2], 0x00, sizeof(gastAtParaList[2]));
    PS_MEM_SET(&gastAtParaList[3], 0x00, sizeof(gastAtParaList[3]));
    gastAtParaList[0].usParaLen   = 2;
    gastAtParaList[0].ulParaValue = 20;
    gastAtParaList[0].aucPara[0]  = '2';
    gastAtParaList[0].aucPara[1]  = '0';

    gastAtParaList[1].usParaLen   = 4;
    gastAtParaList[1].aucPara[0]  = '-';
    gastAtParaList[1].aucPara[1]  = '1';
    gastAtParaList[1].aucPara[2]  = '1';
    gastAtParaList[1].aucPara[3]  = '0';

    gastAtParaList[2].usParaLen   = 1;
    gastAtParaList[3].usParaLen   = 9;
    gastAtParaList[3].aucPara[0]  = '4';
    gastAtParaList[3].aucPara[1]  = '0';
    gastAtParaList[3].aucPara[2]  = '0';
    gastAtParaList[3].aucPara[3]  = '0';
    gastAtParaList[3].aucPara[4]  = '0';
    gastAtParaList[3].aucPara[5]  = '0';
    gastAtParaList[3].aucPara[6]  = '0';
    gastAtParaList[3].aucPara[7]  = '0';
    gastAtParaList[3].aucPara[8]  = '0';


    // MOCKER操作



    // 调用被测函数
    ulRet = AT_SetNetScan(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetNetScan, Test_At_SetNetScan_015)
{
    // 变量声明
    VOS_UINT32                  ulRet;
    TAF_MMA_NET_SCAN_REQ_STRU   stNetScanReq;
    VOS_UINT32                  ulExpectRet;

    // 参数初始化
    gucAtParaIndex = 2;
    PS_MEM_SET(&stNetScanReq, 0x00, sizeof(stNetScanReq));
    stNetScanReq.usCellNum         = 20;
    stNetScanReq.sCellPow          = -110;
    stNetScanReq.ucRat             = 0;
    stNetScanReq.stBand.ulBandHigh = 0x00000000;
    stNetScanReq.stBand.ulBandLow  = 0x3FFFFFFF;
    ulExpectRet                    = AT_FAILURE;

    // 初始化全局变量;
    PS_MEM_SET(&gastAtParaList[0], 0x00, sizeof(gastAtParaList[0]));
    PS_MEM_SET(&gastAtParaList[1], 0x00, sizeof(gastAtParaList[1]));
    PS_MEM_SET(&gastAtParaList[2], 0x00, sizeof(gastAtParaList[2]));
    PS_MEM_SET(&gastAtParaList[3], 0x00, sizeof(gastAtParaList[3]));
    gastAtParaList[0].usParaLen   = 2;
    gastAtParaList[0].ulParaValue = 20;
    gastAtParaList[0].aucPara[0]  = '2';
    gastAtParaList[0].aucPara[1]  = '0';

    gastAtParaList[1].usParaLen   = 4;
    gastAtParaList[1].aucPara[0]  = '-';
    gastAtParaList[1].aucPara[1]  = '1';
    gastAtParaList[1].aucPara[2]  = '1';
    gastAtParaList[1].aucPara[3]  = '0';

    gastAtParaList[2].usParaLen   = 0;
    gastAtParaList[3].usParaLen   = 0;

    // MOCKER操作

    // 调用被测函数
    ulRet = AT_SetNetScan(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_SetNetScan, Test_At_SetNetScan_016)
{
    // 变量声明
    VOS_UINT32                  ulRet;
    TAF_MMA_NET_SCAN_REQ_STRU   stNetScanReq;
    VOS_UINT32                  ulExpectRet;

    // 参数初始化
    gucAtParaIndex = 2;
    PS_MEM_SET(&stNetScanReq, 0x00, sizeof(stNetScanReq));
    stNetScanReq.usCellNum         = 20;
    stNetScanReq.sCellPow          = -110;
    stNetScanReq.ucRat             = 0;
    stNetScanReq.stBand.ulBandHigh = 0x00000000;
    stNetScanReq.stBand.ulBandLow  = 0x3FFFFFFF;
    ulExpectRet                    = AT_FAILURE;

    // 初始化全局变量;
    PS_MEM_SET(&gastAtParaList[0], 0x00, sizeof(gastAtParaList[0]));
    PS_MEM_SET(&gastAtParaList[1], 0x00, sizeof(gastAtParaList[1]));
    PS_MEM_SET(&gastAtParaList[2], 0x00, sizeof(gastAtParaList[2]));
    PS_MEM_SET(&gastAtParaList[3], 0x00, sizeof(gastAtParaList[3]));
    gastAtParaList[0].usParaLen   = 2;
    gastAtParaList[0].ulParaValue = 20;
    gastAtParaList[0].aucPara[0]  = '2';
    gastAtParaList[0].aucPara[1]  = '0';

    gastAtParaList[1].usParaLen   = 4;
    gastAtParaList[1].aucPara[0]  = '-';
    gastAtParaList[1].aucPara[1]  = '1';
    gastAtParaList[1].aucPara[2]  = '1';
    gastAtParaList[1].aucPara[3]  = '0';

    gastAtParaList[2].usParaLen   = 0;
    gastAtParaList[3].usParaLen   = 0;

    // MOCKER操作
    MOCKER(MN_FillAndSndAppReqMsg)
        .stubs()
        .will(returnValue((VOS_UINT32)ulExpectRet));

    // 调用被测函数
    ulRet = AT_SetNetScan(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRet);

    GlobalMockObject::verify();
}


class Test_At_AbortSetNetScan: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();
        ucIndex                     = 0;
        g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;
        gucAtParaIndex = 1;
        gastAtParaList[ucIndex].ulParaValue = 1;
    }

    void TearDown()
    {

    }

    VOS_UINT8                           ucIndex;

};


TEST_F(Test_At_AbortSetNetScan, Test_At_AbortSetNetScan_001)
{
    // 变量声明
    VOS_UINT32  ulRet;

    // 参数初始化

    // 初始化全局变量;
    gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_ABORT_NETSCAN;

    // MOCKER操作;

    // 调用被测函数
    ulRet = AT_AbortNetScan(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_FAILURE, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_AbortSetNetScan, Test_At_AbortSetNetScan_002)
{
    // 变量声明
    VOS_UINT32  ulRet;
    VOS_UINT32  ulReqRet;

    // 参数初始化
    ulReqRet                            = AT_FAILURE;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_NETSCAN_SET;

    // MOCKER操作;
    MOCKER(MN_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)ulReqRet));

    // 调用被测函数
    ulRet = AT_AbortNetScan(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_FAILURE, ulRet);

    GlobalMockObject::verify();
}


TEST_F(Test_At_AbortSetNetScan, Test_At_AbortSetNetScan_003)
{
    // 变量声明
    VOS_UINT32  ulRet;
    VOS_UINT32  ulReqRet;

    // 参数初始化
    ulReqRet                            = AT_SUCCESS;

    // 初始化全局变量;
    gastAtClientTab[ucIndex].CmdCurrentOpt = AT_CMD_NETSCAN_SET;

    // MOCKER操作;
    MOCKER(MN_FillAndSndAppReqMsg)
        .expects(exactly(1))
        .will(returnValue((VOS_UINT32)ulReqRet));

    // 调用被测函数
    ulRet = AT_AbortNetScan(ucIndex);

    // 执行检查
    EXPECT_EQ((VOS_UINT32)AT_WAIT_ASYNC_RETURN, ulRet);

    GlobalMockObject::verify();
}




class Test_At_SetCgattPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
    }
    void TearDown()
    {
    }

};


TEST_F(Test_At_SetCgattPara, Test_At_SetCgattPara_001)
{
    /* 局部变量定义 */
    TAF_MMA_DETACH_REQ_STRU             stRcvMsg;
    VOS_UINT32                          ulRslt;
    TAF_UINT8                           ucIndex;

    /* 局部变量初始化  */
    ucIndex                                 = 0;

    PS_MEM_SET(&stRcvMsg, 0X00, sizeof(stRcvMsg));
    stRcvMsg.ulSenderCpuId                  = VOS_LOCAL_CPUID;
    stRcvMsg.ulSenderPid                    = WUEPS_PID_TAF;
    stRcvMsg.ulReceiverCpuId                = VOS_LOCAL_CPUID;
    stRcvMsg.ulReceiverPid                  = WUEPS_PID_MMA;
    stRcvMsg.ulLength                       = sizeof(TAF_MMA_DETACH_REQ_STRU) - VOS_MSG_HEAD_LENGTH;
    stRcvMsg.ulMsgName                      = ID_TAF_MMA_DETACH_REQ;
    stRcvMsg.stCtrl.ulModuleId              = WUEPS_PID_AT;
    stRcvMsg.stCtrl.usClientId              = 11;
    stRcvMsg.stCtrl.ucOpId                  = 0;
    stRcvMsg.stDetachPara.enDetachCause     = TAF_MMA_DETACH_CAUSE_USER_DETACH;
	/* Modified by h00313353 for Iteration 13, 2015-4-9, begin */
    stRcvMsg.stDetachPara.enDetachDomain    = TAF_MMA_SERVICE_DOMAIN_PS;
	/* Modified by h00313353 for Iteration 13, 2015-4-9, end */

    /* 全局变量初始化  */
    g_stATParseCmd.ucCmdOptType             = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex                          = 1;
    gastAtParaList[0].usParaLen             = 1;
    gastAtParaList[0].ulParaValue           = 0;
    gastAtClientTab[ucIndex].usClientId     = 11;

    /* MOCKER检测 */
    MOCKER(Ps_SendMsg)
        .stubs()
        .with(any(),any(),eq(WUEPS_PID_TAF),mirror(&stRcvMsg, (VOS_UINT32)sizeof(stRcvMsg)))
        .will(returnValue(VOS_OK));


    ulRslt = At_SetCgattPara(ucIndex);

    /* 结果检测 */
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN,     ulRslt);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CGATT_DETAACH_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
class Test_At_SetCgcattPara: public ::testing::Test
{
public:
    void SetUp()
    {
        UT_STUB_INIT();
    }
    void TearDown()
    {
    }

};


TEST_F(Test_At_SetCgcattPara, Test_At_SetCgcattPara_001)
{
    /* 局部变量定义 */
    TAF_MMA_DETACH_REQ_STRU             stRcvMsg;
    VOS_UINT32                          ulRslt;
    TAF_UINT8                           ucIndex;

    /* 局部变量初始化  */
    ucIndex                                 = 0;

    PS_MEM_SET(&stRcvMsg, 0X00, sizeof(stRcvMsg));
    stRcvMsg.ulSenderCpuId                  = VOS_LOCAL_CPUID;
    stRcvMsg.ulSenderPid                    = WUEPS_PID_TAF;
    stRcvMsg.ulReceiverCpuId                = VOS_LOCAL_CPUID;
    stRcvMsg.ulReceiverPid                  = WUEPS_PID_MMA;
    stRcvMsg.ulLength                       = sizeof(TAF_MMA_DETACH_REQ_STRU) - VOS_MSG_HEAD_LENGTH;
    stRcvMsg.ulMsgName                      = ID_TAF_MMA_DETACH_REQ;
    stRcvMsg.stCtrl.ulModuleId              = WUEPS_PID_AT;
    stRcvMsg.stCtrl.usClientId              = 11;
    stRcvMsg.stCtrl.ucOpId                  = 0;
    stRcvMsg.stDetachPara.enDetachCause     = TAF_MMA_DETACH_CAUSE_USER_DETACH;
	/* Modified by h00313353 for Iteration 13, 2015-4-9, begin */
    stRcvMsg.stDetachPara.enDetachDomain    = TAF_MMA_SERVICE_DOMAIN_PS;
	/* Modified by h00313353 for Iteration 13, 2015-4-9, end */

    /* 全局变量初始化  */
    g_stATParseCmd.ucCmdOptType             = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex                          = 1;

    gucAtParaIndex                          = 2;
    gastAtParaList[0].usParaLen             = 1;
    gastAtParaList[1].usParaLen             = 1;

    gastAtParaList[0].ulParaValue           = 0;
    gastAtParaList[1].ulParaValue           = 1;
    gastAtClientTab[ucIndex].usClientId     = 11;

    /* MOCKER检测 */
    MOCKER(Ps_SendMsg)
        .stubs()
        .with(any(),any(),eq(WUEPS_PID_TAF),mirror(&stRcvMsg, (VOS_UINT32)sizeof(stRcvMsg)))
        .will(returnValue(VOS_OK));


    ulRslt = At_SetCgcattPara(ucIndex);

    /* 结果检测 */
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN,         ulRslt);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CGCATT_PS_DETAACH_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}
TEST_F(Test_At_SetCgcattPara, Test_At_SetCgcattPara_002)
{
    /* 局部变量定义 */
    TAF_MMA_DETACH_REQ_STRU             stRcvMsg;
    VOS_UINT32                          ulRslt;
    TAF_UINT8                           ucIndex;

    /* 局部变量初始化  */
    ucIndex                                 = 0;

    PS_MEM_SET(&stRcvMsg, 0X00, sizeof(stRcvMsg));
    stRcvMsg.ulSenderCpuId                  = VOS_LOCAL_CPUID;
    stRcvMsg.ulSenderPid                    = WUEPS_PID_TAF;
    stRcvMsg.ulReceiverCpuId                = VOS_LOCAL_CPUID;
    stRcvMsg.ulReceiverPid                  = WUEPS_PID_MMA;
    stRcvMsg.ulLength                       = sizeof(TAF_MMA_DETACH_REQ_STRU) - VOS_MSG_HEAD_LENGTH;
    stRcvMsg.ulMsgName                      = ID_TAF_MMA_DETACH_REQ;
    stRcvMsg.stCtrl.ulModuleId              = WUEPS_PID_AT;
    stRcvMsg.stCtrl.usClientId              = 11;
    stRcvMsg.stCtrl.ucOpId                  = 0;
    stRcvMsg.stDetachPara.enDetachCause     = TAF_MMA_DETACH_CAUSE_USER_DETACH;
	/* Modified by h00313353 for Iteration 13, 2015-4-9, begin */
    stRcvMsg.stDetachPara.enDetachDomain    = TAF_MMA_SERVICE_DOMAIN_CS;
	/* Modified by h00313353 for Iteration 13, 2015-4-9, end */

    /* 全局变量初始化  */
    g_stATParseCmd.ucCmdOptType             = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex                          = 1;

    gucAtParaIndex                          = 2;
    gastAtParaList[0].usParaLen             = 1;
    gastAtParaList[1].usParaLen             = 1;

    gastAtParaList[0].ulParaValue           = 0;

    /* detach cs */
    gastAtParaList[1].ulParaValue           = 2;
    gastAtClientTab[ucIndex].usClientId     = 11;

    /* MOCKER检测 */
    MOCKER(Ps_SendMsg)
        .stubs()
        .with(any(),any(),eq(WUEPS_PID_TAF),mirror(&stRcvMsg, (VOS_UINT32)sizeof(stRcvMsg)))
        .will(returnValue(VOS_OK));


    ulRslt = At_SetCgcattPara(ucIndex);

    /* 结果检测 */
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN,         ulRslt);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CGCATT_CS_DETAACH_SET, gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}


TEST_F(Test_At_SetCgcattPara, Test_At_SetCgcattPara_003)
{
    /* 局部变量定义 */
    TAF_MMA_DETACH_REQ_STRU             stRcvMsg;
    VOS_UINT32                          ulRslt;
    TAF_UINT8                           ucIndex;

    /* 局部变量初始化  */
    ucIndex                                 = 0;

    PS_MEM_SET(&stRcvMsg, 0X00, sizeof(stRcvMsg));
    stRcvMsg.ulSenderCpuId                  = VOS_LOCAL_CPUID;
    stRcvMsg.ulSenderPid                    = WUEPS_PID_TAF;
    stRcvMsg.ulReceiverCpuId                = VOS_LOCAL_CPUID;
    stRcvMsg.ulReceiverPid                  = WUEPS_PID_MMA;
    stRcvMsg.ulLength                       = sizeof(TAF_MMA_DETACH_REQ_STRU) - VOS_MSG_HEAD_LENGTH;
    stRcvMsg.ulMsgName                      = ID_TAF_MMA_DETACH_REQ;
    stRcvMsg.stCtrl.ulModuleId              = WUEPS_PID_AT;
    stRcvMsg.stCtrl.usClientId              = 11;
    stRcvMsg.stCtrl.ucOpId                  = 0;
    stRcvMsg.stDetachPara.enDetachCause     = TAF_MMA_DETACH_CAUSE_USER_DETACH;
	/* Modified by h00313353 for Iteration 13, 2015-4-9, begin */
    stRcvMsg.stDetachPara.enDetachDomain    = TAF_MMA_SERVICE_DOMAIN_CS_PS;
	/* Modified by h00313353 for Iteration 13, 2015-4-9, end */

    /* 全局变量初始化  */
    g_stATParseCmd.ucCmdOptType             = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex                          = 1;

    gucAtParaIndex                          = 2;
    gastAtParaList[0].usParaLen             = 1;
    gastAtParaList[1].usParaLen             = 1;

    gastAtParaList[0].ulParaValue           = 0;

    /* detach cs_PS */
    gastAtParaList[1].ulParaValue           = 3;
    gastAtClientTab[ucIndex].usClientId     = 11;

    /* MOCKER检测 */
    MOCKER(Ps_SendMsg)
        .stubs()
        .with(any(),any(),eq(WUEPS_PID_TAF),mirror(&stRcvMsg, (VOS_UINT32)sizeof(stRcvMsg)))
        .will(returnValue(VOS_OK));


    ulRslt = At_SetCgcattPara(ucIndex);

    /* 结果检测 */
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN,             ulRslt);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CGCATT_PS_CS_DETAACH_SET,  gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}



TEST_F(Test_At_SetCgcattPara, Test_At_SetCgcattPara_004)
{
    /* 局部变量定义 */
    TAF_MMA_DETACH_REQ_STRU             stRcvMsg;
    VOS_UINT32                          ulRslt;
    TAF_UINT8                           ucIndex;

    /* 局部变量初始化  */
    ucIndex                                 = 0;

    PS_MEM_SET(&stRcvMsg, 0X00, sizeof(stRcvMsg));
    stRcvMsg.ulSenderCpuId                  = VOS_LOCAL_CPUID;
    stRcvMsg.ulSenderPid                    = WUEPS_PID_TAF;
    stRcvMsg.ulReceiverCpuId                = VOS_LOCAL_CPUID;
    stRcvMsg.ulReceiverPid                  = WUEPS_PID_MMA;
    stRcvMsg.ulLength                       = sizeof(TAF_MMA_DETACH_REQ_STRU) - VOS_MSG_HEAD_LENGTH;
    stRcvMsg.ulMsgName                      = ID_TAF_MMA_DETACH_REQ;
    stRcvMsg.stCtrl.ulModuleId              = WUEPS_PID_AT;
    stRcvMsg.stCtrl.usClientId              = 11;
    stRcvMsg.stCtrl.ucOpId                  = 0;
    stRcvMsg.stDetachPara.enDetachCause     = TAF_MMA_DETACH_CAUSE_USER_DETACH;
	/* Modified by h00313353 for Iteration 13, 2015-4-9, begin */
    stRcvMsg.stDetachPara.enDetachDomain    = TAF_MMA_SERVICE_DOMAIN_CS_PS;
	/* Modified by h00313353 for Iteration 13, 2015-4-9, end */

    /* 全局变量初始化  */
    g_stATParseCmd.ucCmdOptType             = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex                          = 1;

    gucAtParaIndex                          = 2;
    gastAtParaList[0].usParaLen             = 1;
    gastAtParaList[1].usParaLen             = 1;

    gastAtParaList[0].ulParaValue           = 0;

    /* 异常参数，等同于detach cs_PS */
    gastAtParaList[1].ulParaValue           = 4;
    gastAtClientTab[ucIndex].usClientId     = 11;

    /* MOCKER检测 */
    MOCKER(Ps_SendMsg)
        .stubs()
        .with(any(),any(),eq(WUEPS_PID_TAF),mirror(&stRcvMsg, (VOS_UINT32)sizeof(stRcvMsg)))
        .will(returnValue(VOS_OK));


    ulRslt = At_SetCgcattPara(ucIndex);

    /* 结果检测 */
    EXPECT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN,             ulRslt);
    EXPECT_EQ((AT_CMD_CURRENT_OPT_ENUM)AT_CMD_CGCATT_PS_CS_DETAACH_SET,  gastAtClientTab[ucIndex].CmdCurrentOpt);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();
}




TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_01)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gucAtParaIndex = 3;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[0].ulParaValue = AT_CLCK_SC_TYPE;
    gastAtParaList[0].ulParaValue = 1;
    gastAtParaList[2].usParaLen = TAF_PH_PINCODELENMAX + 1;
    PS_MEM_CPY(gastAtParaList[2].aucPara, "123456789" ,9);

    // MOCKER操作;

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_02)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gucAtParaIndex = 3;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;
    gastAtParaList[0].ulParaValue = AT_CLCK_SC_TYPE;
    gastAtParaList[1].ulParaValue = 0;
    gastAtParaList[2].usParaLen = TAF_PH_PINCODELENMIN;
    PS_MEM_CPY(gastAtParaList[2].aucPara, "1234" ,4);

    // MOCKER操作;
    MOCKER(Taf_PhonePinHandle)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}



TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_03)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gucAtParaIndex = 3;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;

    gastAtParaList[0].ulParaValue = AT_CLCK_SC_TYPE;
    gastAtParaList[1].ulParaValue = 0;
    gastAtParaList[2].usParaLen = TAF_PH_PINCODELENMIN;
    PS_MEM_CPY(gastAtParaList[2].aucPara, "1234" ,4);

    // MOCKER操作;
    MOCKER(Taf_PhonePinHandle)
        .stubs()
        .will(returnValue((TAF_UINT32)AT_ERROR));

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_ERROR, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_04)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gucAtParaIndex = 3;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;

    gastAtParaList[0].ulParaValue = AT_CLCK_SC_TYPE;
    gastAtParaList[1].ulParaValue = 1;
    gastAtParaList[2].usParaLen = TAF_PH_PINCODELENMIN;
    PS_MEM_CPY(gastAtParaList[2].aucPara, "1234" ,4);

    // MOCKER操作;
    MOCKER(Taf_PhonePinHandle)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_05)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gucAtParaIndex = 3;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;

    gastAtParaList[0].ulParaValue = AT_CLCK_SC_TYPE;
    gastAtParaList[1].ulParaValue = 1;
    gastAtParaList[2].usParaLen = 3;
    PS_MEM_CPY(gastAtParaList[2].aucPara, "1234" ,3);

    // MOCKER操作;
    MOCKER(Taf_PhonePinHandle)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_06)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gucAtParaIndex = 3;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;

    gastAtParaList[0].ulParaValue = AT_CLCK_SC_TYPE;
    gastAtParaList[1].ulParaValue = 1;
    gastAtParaList[2].usParaLen = 4;
    PS_MEM_CPY(gastAtParaList[2].aucPara, "aaaa" ,4);

    // MOCKER操作;
    MOCKER(Taf_PhonePinHandle)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}


TEST_F(Test_At_SetClckPara,Test_At_SetClckPara_07)
{
    // 参数定义
    TAF_UINT8    ucIndex;
    TAF_UINT32   ulRst;

    // 参数初始化
    ucIndex = 1;

    // 相关全局变量初始化
    gucAtParaIndex = 3;
    gastAtParaList[0].usParaLen = 1;
    gastAtParaList[1].usParaLen = 1;

    gastAtParaList[0].ulParaValue = AT_CLCK_SC_TYPE;
    gastAtParaList[1].ulParaValue = 2;
    gastAtParaList[2].usParaLen = TAF_PH_PINCODELENMIN;

    // MOCKER操作;
    MOCKER(Taf_PhonePinHandle)
        .stubs()
        .will(returnValue((VOS_UINT32)AT_SUCCESS));

    // 调用被测函数
    ulRst = At_SetClckPara(ucIndex);

    // 执行检查
    ASSERT_EQ((TAF_UINT32)AT_WAIT_ASYNC_RETURN, ulRst);

    //检查调用时，需要在用例结束位置加上这句
    GlobalMockObject::verify();

}

class Test_AT_SetNvmEccNumPara: public ::testing::Test
{
public:

    void SetUp()
    {
        UT_STUB_INIT();

    }

    void TearDown()
    {

    }
};



TEST_F(Test_AT_SetNvmEccNumPara, Test_AT_SetNvmEccNumPara_001)
{
    VOS_UINT32                          ulRslt;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_CMD_NO_PARA;

    ulRslt = AT_SetNvmEccNumPara(0);

    EXPECT_EQ((VOS_UINT32)AT_ERROR, ulRslt);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetNvmEccNumPara, Test_AT_SetNvmEccNumPara_002)
{
    VOS_UINT32                          ulRslt;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 7;

    ulRslt = AT_SetNvmEccNumPara(0);

    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRslt);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetNvmEccNumPara, Test_AT_SetNvmEccNumPara_003)
{
    VOS_UINT32                          ulRslt;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 6;

    gastAtParaList[0].ulParaValue = 7;
    gastAtParaList[1].ulParaValue = 6;
    gastAtParaList[2].usParaLen = 3;
    PS_MEM_CPY(gastAtParaList[2].aucPara, "118", gastAtParaList[2].usParaLen);
    gastAtParaList[3].ulParaValue = 1;
    gastAtParaList[4].ulParaValue = 1;
    gastAtParaList[5].ulParaValue = 0x410;

    ulRslt = AT_SetNvmEccNumPara(0);

    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRslt);

    GlobalMockObject::verify();
}


TEST_F(Test_AT_SetNvmEccNumPara, Test_AT_SetNvmEccNumPara_004)
{
    VOS_UINT32                          ulRslt;
    MN_CALL_APP_CUSTOM_ECC_NUM_REQ_STRU stEccNumReq;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 6;

    gastAtParaList[0].ulParaValue = 6;
    gastAtParaList[1].ulParaValue = 6;
    gastAtParaList[2].usParaLen = 3;
    PS_MEM_CPY(gastAtParaList[2].aucPara, "118", gastAtParaList[2].usParaLen);
    gastAtParaList[2].aucPara[gastAtParaList[2].usParaLen] = 0;
    gastAtParaList[3].ulParaValue = 1;
    gastAtParaList[4].ulParaValue = 1;
    gastAtParaList[5].ulParaValue = 0x19A;  /* 十进制410 */

    PS_MEM_SET(&stEccNumReq, 0x00, sizeof(MN_CALL_APP_CUSTOM_ECC_NUM_REQ_STRU));

    stEccNumReq.ucIndex           = (VOS_UINT8)gastAtParaList[0].ulParaValue;
    stEccNumReq.ucTotal           = (VOS_UINT8)gastAtParaList[1].ulParaValue;
    stEccNumReq.stEccNum.aucBcdNum[0] = 0x11;
    stEccNumReq.stEccNum.aucBcdNum[1] = 0xF8;
    stEccNumReq.stEccNum.ucNumLen = 2;
    stEccNumReq.ucCategory       = (VOS_UINT8)gastAtParaList[3].ulParaValue;
    stEccNumReq.ucSimPresent     = (VOS_UINT8)gastAtParaList[4].ulParaValue;
    stEccNumReq.ulMcc            = 0x104;

    MOCKER(MN_CALL_SendAppRequest)
        .stubs()
        .with(eq((MN_CALL_APP_REQ_ENUM_UINT32)MN_CALL_APP_CUSTOM_ECC_NUM_REQ),
                                        any(),
                                        eq((MN_OPERATION_ID_T)0),
                                        eq((MN_CALL_ID_T)0),
                                        mirror((const MN_CALL_APP_REQ_PARM_UNION *)&stEccNumReq, (VOS_UINT32)sizeof(stEccNumReq)))
         .will(returnValue((VOS_UINT32)VOS_OK));

    ulRslt = AT_SetNvmEccNumPara(0);

    EXPECT_EQ((VOS_UINT32)AT_OK, ulRslt);

    GlobalMockObject::verify();
}
TEST_F(Test_AT_SetNvmEccNumPara, Test_AT_SetNvmEccNumPara_005)
{
    VOS_UINT32                          ulRslt;

    g_stATParseCmd.ucCmdOptType = AT_CMD_OPT_SET_PARA_CMD;

    gucAtParaIndex = 6;

    gastAtParaList[0].ulParaValue = 6;
    gastAtParaList[1].ulParaValue = 6;
    gastAtParaList[2].usParaLen = 3;
    PS_MEM_CPY(gastAtParaList[2].aucPara, "zzz", gastAtParaList[2].usParaLen);
    gastAtParaList[3].ulParaValue = 1;
    gastAtParaList[4].ulParaValue = 1;
    gastAtParaList[5].ulParaValue = 0x410;

    ulRslt = AT_SetNvmEccNumPara(0);

    EXPECT_EQ((VOS_UINT32)AT_CME_INCORRECT_PARAMETERS, ulRslt);

    GlobalMockObject::verify();
}


