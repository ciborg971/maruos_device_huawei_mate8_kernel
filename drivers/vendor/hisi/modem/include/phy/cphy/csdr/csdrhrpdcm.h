/** ****************************************************************************

                    Huawei Technologies Sweden AB (C), 2001-2015

 ********************************************************************************
 * @author    Automatically generated by DAISY
 * @version
 * @date      2015-10-08
 * @file
 * @brief
 * CSDRHRPDCM is the interface between CSDR_HRPD_ChannelManager and
 * CPROC_HRPD_ChannelManager. It includes:
 * -  Input: CSDR_HRPD Initialization request. Frequency: Once per init.
 * -  Input: Channel Configuration requests. Frequency: Once per
 *    re-/configuration.
 * -  Input. TCH Maintain requests. Frequency: DRCCover or DSC change, and when
 *    switching between fixed mode and variable mode, or extending fixed mode.
 * -  Input: Channel Release requests. Frequency: Once per deactivation.
 * -  Input: RX and TX on/off requests.
 * -  Input: Sleep and Pause requests.
 * -  Output: Confirms to the requester. Frequency: Once per
 *    re-/configuration/deactivation.
 * -  Output: TCH DRCLock and DRC Indications: Frequency: When changed.
 * @copyright Huawei Technologies Sweden AB
 *******************************************************************************/
#ifndef CSDRHRPDCM_H
#define CSDRHRPDCM_H

/*******************************************************************************
 1. Other files included
*******************************************************************************/

#include "uphy_type_define.h"
#include "csdr_hrpd.h"

#ifdef __cplusplus
#if __cplusplus
    extern "C" {
#endif /* __cpluscplus */
#endif /* __cpluscplus */
#pragma pack(4)

/*******************************************************************************
 2. Macro definitions
*******************************************************************************/

/**
 * To be used in for system time that is now, i.e. immediate.
 */
#define CSDR_HRPD_NOW                                       ( 0xFFFFFFFF )
/**
 * To be used in CPROC_CSDR_HRPD_RXON_REQ for system time in IRAT scenarios.
 * Radio shall be started when INT_1 is received from LTE.
 */
#define CSDR_HRPD_INT_1                                     ( 0xFFFFFFFE )
/**
 * To be used in bitmask indicating the active set values are valid.
 */
#define CSDR_HRPD_ACTIVE_SET_UPDATE                         ( 1 )
/**
 * To be used in bitmask indicating the non-active set parameters are updated,
 * excluding test loop parameters.
 */
#define CSDR_HRPD_NON_AS_UPDATE                             ( 2 )
/**
 * To be used in bitmask indicating the test loop parameters are valid.
 */
#define CSDR_HRPD_TESTLOOP_UPDATE                           ( 4 )
/**
 * Maximum size of active set.
 */
#define CSDR_HRPD_MAX_SIZE_ACTIVE_SET                       ( 6 )
/**
 * Maximum number of Interference cancellation cells.
 */
#define CSDR_HRPD_MAX_SIZE_IC_SET                           ( 2 )
/**
 * Number of HARQ processes for subtype 2.
 */
#define CSDR_HRPD_NUM_HARQ_PROC_SUBTYPE2                    ( 3 )

/*******************************************************************************
 3. Enumerations declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : CSDRHRPDCM_MSG_TYPE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDRHRPDCM_MSG_TYPE_ENUM
{
    ID_CPROC_CSDR_HRPD_ACTIVE_REQ                           = 0x4000, /**< @sa CPROC_CSDR_HRPD_ACTIVE_REQ_STRU */
    ID_CSDR_CPROC_HRPD_ACTIVE_CNF                           = 0x4001, /**< @sa CSDR_CPROC_HRPD_ACTIVE_CNF_STRU */
    ID_CPROC_CSDR_HRPD_SLEEP_REQ                            = 0x4002, /**< @sa CPROC_CSDR_HRPD_SLEEP_REQ_STRU */
    ID_CSDR_CPROC_HRPD_SLEEP_CNF                            = 0x4003, /**< @sa CSDR_CPROC_HRPD_SLEEP_CNF_STRU */
    ID_CPROC_CSDR_HRPD_SET_MODE_REQ                         = 0x4004, /**< @sa CPROC_CSDR_HRPD_SET_MODE_REQ_STRU */
    ID_CSDR_CPROC_HRPD_SET_MODE_CNF                         = 0x4005, /**< @sa CSDR_CPROC_HRPD_SET_MODE_CNF_STRU */
    ID_CPROC_CSDR_HRPD_CM_RESET_REQ                         = 0x4006, /**< @sa CPROC_CSDR_HRPD_CM_RESET_REQ_STRU */
    ID_CSDR_CPROC_HRPD_CM_RESET_CNF                         = 0x4007, /**< @sa CSDR_CPROC_HRPD_CM_RESET_CNF_STRU */
    ID_CPROC_CSDR_HRPD_RXON_REQ                             = 0x4008, /**< @sa CPROC_CSDR_HRPD_RXON_REQ_STRU */
    ID_CSDR_CPROC_HRPD_RXON_CNF                             = 0x4009, /**< @sa CSDR_CPROC_HRPD_RXON_CNF_STRU */
    ID_CPROC_CSDR_HRPD_RXOFF_REQ                            = 0x400A, /**< @sa CPROC_CSDR_HRPD_RXOFF_REQ_STRU */
    ID_CSDR_CPROC_HRPD_RXOFF_CNF                            = 0x400B, /**< @sa CSDR_CPROC_HRPD_RXOFF_CNF_STRU */
    ID_CPROC_CSDR_HRPD_CC_START_REQ                         = 0x400C, /**< @sa CPROC_CSDR_HRPD_CC_START_REQ_STRU */
    ID_CSDR_CPROC_HRPD_CC_START_CNF                         = 0x400D, /**< @sa CSDR_CPROC_HRPD_CC_START_CNF_STRU */
    ID_CSDR_CPROC_HRPD_CC_DONE_IND                          = 0x400E, /**< @sa CSDR_CPROC_HRPD_CC_DONE_IND_STRU */
    ID_CPROC_CSDR_HRPD_CC_STOP_REQ                          = 0x400F, /**< @sa CPROC_CSDR_HRPD_CC_STOP_REQ_STRU */
    ID_CSDR_CPROC_HRPD_CC_STOP_CNF                          = 0x4010, /**< @sa CSDR_CPROC_HRPD_CC_STOP_CNF_STRU */
    ID_CPROC_CSDR_HRPD_AC_START_REQ                         = 0x4011, /**< @sa CPROC_CSDR_HRPD_AC_START_REQ_STRU */
    ID_CSDR_CPROC_HRPD_AC_START_CNF                         = 0x4012, /**< @sa CSDR_CPROC_HRPD_AC_START_CNF_STRU */
    ID_CSDR_CPROC_HRPD_AC_START_IND                         = 0x4013, /**< @sa CSDR_CPROC_HRPD_AC_START_IND_STRU */
    ID_CPROC_CSDR_HRPD_AC_STOP_REQ                          = 0x4014, /**< @sa CPROC_CSDR_HRPD_AC_STOP_REQ_STRU */
    ID_CSDR_CPROC_HRPD_AC_STOP_CNF                          = 0x4015, /**< @sa CSDR_CPROC_HRPD_AC_STOP_CNF_STRU */
    ID_CSDR_CPROC_HRPD_AC_ERROR_IND                         = 0x4016, /**< @sa CSDR_CPROC_HRPD_AC_ERROR_IND_STRU */
    ID_CPROC_CSDR_HRPD_TCH_START_REQ                        = 0x4017, /**< @sa CPROC_CSDR_HRPD_TCH_START_REQ_STRU */
    ID_CSDR_CPROC_HRPD_TCH_START_CNF                        = 0x4018, /**< @sa CSDR_CPROC_HRPD_TCH_START_CNF_STRU */
    ID_CPROC_CSDR_HRPD_TCH_MAINTAIN_REQ                     = 0x4019, /**< @sa CPROC_CSDR_HRPD_TCH_MAINTAIN_REQ_STRU */
    ID_CSDR_CPROC_HRPD_TCH_MAINTAIN_IND                     = 0x401A, /**< @sa CSDR_CPROC_HRPD_TCH_MAINTAIN_IND_STRU */
    ID_CPROC_CSDR_HRPD_TCH_RECONFIG_REQ                     = 0x401B, /**< @sa CPROC_CSDR_HRPD_TCH_RECONFIG_REQ_STRU */
    ID_CSDR_CPROC_HRPD_TCH_RECONFIG_CNF                     = 0x401C, /**< @sa CSDR_CPROC_HRPD_TCH_RECONFIG_CNF_STRU */
    ID_CPROC_CSDR_HRPD_TCH_STOP_REQ                         = 0x401D, /**< @sa CPROC_CSDR_HRPD_TCH_STOP_REQ_STRU */
    ID_CSDR_CPROC_HRPD_TCH_STOP_CNF                         = 0x401E, /**< @sa CSDR_CPROC_HRPD_TCH_STOP_CNF_STRU */
    ID_CPROC_CSDR_HRPD_SET_SYSTIME_REQ                      = 0x401F, /**< @sa CPROC_CSDR_HRPD_SET_SYSTIME_REQ_STRU */
    ID_CSDR_CPROC_HRPD_SET_SYSTIME_CNF                      = 0x4020, /**< @sa CSDR_CPROC_HRPD_SET_SYSTIME_CNF_STRU */
    ID_CPROC_CSDR_HRPD_TIME_REFERENCE_REQ                   = 0x4021, /**< @sa CPROC_CSDR_HRPD_TIME_REFERENCE_REQ_STRU */
    ID_CSDR_CPROC_HRPD_DRCLOCK_IND                          = 0x4022, /**< @sa CSDR_CPROC_HRPD_DRCLOCK_IND_STRU */
    ID_CSDR_CPROC_HRPD_DRC_IND                              = 0x4023, /**< @sa CSDR_CPROC_HRPD_DRC_IND_STRU */
    ID_CPROC_CSDR_HRPD_SUSPEND_REQ                          = 0x4024, /**< @sa CPROC_CSDR_HRPD_SUSPEND_REQ_STRU */
    ID_CSDR_CPROC_HRPD_SUSPEND_CNF                          = 0x4025, /**< @sa CSDR_CPROC_HRPD_SUSPEND_CNF_STRU */
    ID_CPROC_CSDR_HRPD_RESUME_REQ                           = 0x4026, /**< @sa CPROC_CSDR_HRPD_RESUME_REQ_STRU */
    ID_CSDR_CPROC_HRPD_RESUME_CNF                           = 0x4027, /**< @sa CSDR_CPROC_HRPD_RESUME_CNF_STRU */
    ID_CSDR_CPROC_HRPD_GAP_START_IND                        = 0x4028, /**< @sa CSDR_CPROC_HRPD_GAP_START_IND_STRU */
    ID_CSDR_CPROC_HRPD_GAP_END_IND                          = 0x4029, /**< @sa CSDR_CPROC_HRPD_GAP_END_IND_STRU */
    ID_CSDR_CPROC_HRPD_WAKEUP_IND                           = 0x402A, /**< @sa CSDR_CPROC_HRPD_WAKEUP_IND_STRU */
    ID_CPROC_CSDR_HRPD_INT_REQ                              = 0x402B, /**< @sa CPROC_CSDR_HRPD_INT_REQ_STRU */
    ID_CSDR_CPROC_HRPD_INT2_IND                             = 0x402C, /**< @sa CSDR_CPROC_HRPD_INT2_IND_STRU */
    ID_CSDR_CPROC_HRPD_INT3_IND                             = 0x402D, /**< @sa CSDR_CPROC_HRPD_INT3_IND_STRU */
    ID_CPROC_CSDR_HRPD_AFC_PPM_REQ                          = 0x402E, /**< @sa CPROC_CSDR_HRPD_AFC_PPM_REQ_STRU */
    ID_CSDR_CPROC_HRPD_AFC_PPM_IND                          = 0x402F, /**< @sa CSDR_CPROC_HRPD_AFC_PPM_IND_STRU */
    ID_CSDR_CPROC_HRPD_ERROR_IND                            = 0x4030, /**< @sa CSDR_CPROC_HRPD_ERROR_IND_STRU */
    ID_CSDR_CPROC_HRPD_FRAME_HEAD_IND                       = 0x4031, /**< @sa CSDR_CPROC_HRPD_FRAME_HEAD_IND_STRU */
    ID_CPROC_CSDR_HRPD_REL_ALL_REQ                          = 0x4032, /**< @sa CPROC_CSDR_HRPD_REL_ALL_REQ_STRU */
    ID_CSDR_CPROC_HRPD_REL_ALL_CNF                          = 0x4033, /**< @sa CSDR_CPROC_HRPD_REL_ALL_CNF_STRU */
    ID_CPROC_CSDR_HRPD_TIME_SYNC_REQ                        = 0x4034, /**< @sa CPROC_CSDR_HRPD_TIME_SYNC_REQ_STRU */
    ID_CSDR_CPROC_HRPD_TIME_SYNC_IND                        = 0x4035, /**< @sa CSDR_CPROC_HRPD_TIME_SYNC_IND_STRU */
    ID_CPROC_CSDR_HRPD_CONNECTION_STATUS_REQ                = 0x4036, /**< @sa CPROC_CSDR_HRPD_CONNECTION_STATUS_REQ_STRU */
    ID_CSDRHRPDCM_MSG_TYPE_ENUM_BUTT                        = 0x4037
};
typedef PHY_UINT16 CSDRHRPDCM_MSG_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_CONNECTION_STATUS_ENUM_UINT16
 *
 * Description : status open or closed
 *******************************************************************************/
enum CSDR_HRPD_CONNECTION_STATUS_ENUM
{
    CSDR_HRPD_CONNECTION_OPEN           = 0x0000, /**< connection open */
    CSDR_HRPD_CONNECTION_CLOSE          = 0x0001, /**< connection close */
    CSDR_HRPD_CONNECTION_BUTT           = 0x0002
};
typedef PHY_UINT16 CSDR_HRPD_CONNECTION_STATUS_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_TIME_RESULT_ENUM_UINT16
 *
 * Description : the sync time is invalid or valid
 *******************************************************************************/
enum CSDR_HRPD_TIME_RESULT_ENUM
{
    CSDR_HRPD_TIME_INVALID              = 0x0000, /**< the time result is invalid */
    CSDR_HRPD_TIME_VALID                = 0x0001, /**< the time result is valid */
    CSDR_HRPD_TIME_BUTT                 = 0x0002
};
typedef PHY_UINT16 CSDR_HRPD_TIME_RESULT_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_AC_TYPE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_HRPD_AC_TYPE_ENUM
{
    CSDR_HRPD_AC_TYPE_DEFAULT           = 0x0000, /**< Access according to Default Physical Layer */
    CSDR_HRPD_AC_TYPE_ENHANCED          = 0x0001, /**< Access according to Subtype 1/2 Physical Layer. */
    CSDR_HRPD_AC_TYPE_BUTT              = 0x0002
};
typedef PHY_UINT16 CSDR_HRPD_AC_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_RXON_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_HRPD_RXON_ENUM
{
    CSDR_HRPD_RXON_SLAVE_MEAS           = 0x0000, /**< Slave measurement frequency included in CPROC_CSDR_HRPD_RXON_REQ. */
    CSDR_HRPD_RXON_SLAVE_BSR            = 0x0001, /**< Slave BSR frequency included in CPROC_CSDR_HRPD_RXON_REQ. */
    CSDR_HRPD_RXON_SLAVE_MEAS_AND_BSR   = 0x0002, /**< Slave measurement and BSR frequency included in CPROC_CSDR_HRPD_RXON_REQ. */
    CSDR_HRPD_RXON_MASTER_SF            = 0x0003, /**< CPROC_CSDR_HRPD_RXON_REQ is sent to start serving frequency, potentially at
inter frequency handoff. */
    CSDR_HRPD_RXON_MASTER_SF_TO_NSF     = 0x0004, /**< CPROC_CSDR_HRPD_RXON_REQ is sent to switch from serving frequency to
non-serving frequency. */
    CSDR_HRPD_RXON_MASTER_NSF_TO_SF     = 0x0005, /**< CPROC_CSDR_HRPD_RXON_REQ is sent to switch from non-serving frequency to
serving frequency. */
    CSDR_HRPD_RXON_MASTER_RESUME_SF     = 0x0006, /**< CPROC_CSDR_HRPD_RXON_REQ is sent to resume serving frequency after a gap that
was used for non-HRPD activity. */
    CSDR_HRPD_RXON_MASTER_DRX_WAKEUP    = 0x0007, /**< CPROC_CSDR_HRPD_RXON_REQ is sent at wakeup in DRX. */
    CSDR_HRPD_RXON_BUTT                 = 0x0008
};
typedef PHY_UINT16 CSDR_HRPD_RXON_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_GAP_PURPOSE_ENUM_UINT16
 *
 * Description : Indicates the purpose of a slave gap.
 *******************************************************************************/
enum CSDR_HRPD_GAP_PURPOSE_ENUM
{
    CSDR_HRPD_GAP_PURPOSE_MEASURE       = 0x0000,
    CSDR_HRPD_GAP_PURPOSE_BSR           = 0x0001,
    CSDR_HRPD_GAP_PURPOSE_UNDEF         = 0x0002,
    CSDR_HRPD_GAP_PURPOSE_BUTT          = 0x0003
};
typedef PHY_UINT16 CSDR_HRPD_GAP_PURPOSE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_WORKMODE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_HRPD_WORKMODE_ENUM
{
    CSDR_HRPD_WORKMODE_SLAVE            = 0x0000,
    CSDR_HRPD_WORKMODE_MASTER           = 0x0001,
    CSDR_HRPD_WORKMODE_BUTT             = 0x0002
};
typedef PHY_UINT16 CSDR_HRPD_WORKMODE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_DRC_MODE_ENUM_UINT16
 *
 * Description : CSDR_HRPD_DRC_MODE_ENUM_UINT16 defines the DRC mode.
 * CSDR_HRPD_DRC_MODE_EXTEND_FIXED is sent to CSDR_HRPD when CTTF_HRPD requests
 * to extend the fixed mode period. CSDR_HRPD responds with
 * CSDR_CPROC_HRPD_TCH_MAINTAIN_IND containing the DRCValue.
 *******************************************************************************/
enum CSDR_HRPD_DRC_MODE_ENUM
{
    CSDR_HRPD_DRC_MODE_VARIABLE         = 0x0000,
    CSDR_HRPD_DRC_MODE_FIXED            = 0x0001,
    CSDR_HRPD_DRC_MODE_EXTEND_FIXED     = 0x0002,
    CSDR_HRPD_DRC_MODE_BUTT             = 0x0003
};
typedef PHY_UINT16 CSDR_HRPD_DRC_MODE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_TIME_ADJUST_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_HRPD_TIME_ADJUST_ENUM
{
    CSDR_HRPD_TIME_ADJUST_FAST          = 0x0000, /**< Fast adjustment of  time, in DRX mode */
    CSDR_HRPD_TIME_ADJUST_SLOW          = 0x0001, /**< Slow adjustment of time, in continuous mode */
    CSDR_HRPD_TIME_ADJUST_BUTT          = 0x0002
};
typedef PHY_UINT16 CSDR_HRPD_TIME_ADJUST_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_CC_STATE_ENUM_UINT16
 *
 * Description : Enum used in CPROC_CSDR_HRPD_CC_START_REQ to set which state
 * CC is configured for.
 *******************************************************************************/
enum CSDR_HRPD_CC_STATE_ENUM
{
    CSDR_HRPD_CC_STATE_INITIAL          = 0x0000, /**< Initial state */
    CSDR_HRPD_CC_STATE_IDLE_DRX         = 0x0001, /**< Idle DRX */
    CSDR_HRPD_CC_STATE_CONTINUOUS       = 0x0002, /**< Continuous state */
    CSDR_HRPD_CC_STATE_GET_TIMING       = 0x0003, /**< Continuous state */
    CSDR_HRPD_CC_STATE_BUTT             = 0x0004
};
typedef PHY_UINT16 CSDR_HRPD_CC_STATE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_INT_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_HRPD_INT_ENUM
{
    CSDR_HRPD_INT_1_AND_INT_2           = 0x0000,
    CSDR_HRPD_INT_4                     = 0x0001,
    CSDR_HRPD_INT_5                     = 0x0002,
    CSDR_HRPD_INT_BUTT                  = 0x0003
};
typedef PHY_UINT16 CSDR_HRPD_INT_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_PHYSICAL_LAYER_SUBTYPE_ENUM_UINT16
 *
 * Description : Enum for physical layer substate. Default (subtype 0) and
 * subtype 2 are supported.
 *******************************************************************************/
enum CSDR_HRPD_PHYSICAL_LAYER_SUBTYPE_ENUM
{
    CSDR_HRPD_PHYSICAL_LAYER_SUBTYPE_DEFAULT                = 0x0000, /**< Default (subtype 0) */
    CSDR_HRPD_PHYSICAL_LAYER_SUBTYPE_SUBTYPE2               = 0x0001, /**< Subtype 2 */
    CSDR_HRPD_PHYSICAL_LAYER_SUBTYPE_BUTT                   = 0x0002
};
typedef PHY_UINT16 CSDR_HRPD_PHYSICAL_LAYER_SUBTYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_DRC_TENTATIVE_ENUM_UINT16
 *
 * Description : Enum used to signal if DRC tentative is null in
 * CSDR_CPROC_HRPD_DRC_IND.
 *******************************************************************************/
enum CSDR_HRPD_DRC_TENTATIVE_ENUM
{
    CSDR_HRPD_DRC_TENTATIVE_NULL        = 0x0000, /**< DRC Tentative is null */
    CSDR_HRPD_DRC_TENTATIVE_NOT_NULL    = 0x0001, /**< DRC Tentative is not null */
    CSDR_HRPD_DRC_TENTATIVE_BUTT        = 0x0002
};
typedef PHY_UINT16 CSDR_HRPD_DRC_TENTATIVE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_AC_DATA_SPEED_ENUM_UINT16
 *
 * Description : Enum to set the data speed in AC, used in
 * CPROC_CSDR_HRPD_AC_START_REQ.
 *******************************************************************************/
enum CSDR_HRPD_AC_DATA_SPEED_ENUM
{
    CSDR_HRPD_AC_DATA_SPEED_9K6         = 0x0000,
    CSDR_HRPD_AC_DATA_SPEED_19K2        = 0x0001,
    CSDR_HRPD_AC_DATA_SPEED_38K4        = 0x0002,
    CSDR_HRPD_AC_DATA_SPEED_BUTT        = 0x0003
};
typedef PHY_UINT16 CSDR_HRPD_AC_DATA_SPEED_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_AUX_PILOT_MIN_PAYLOAD_ENUM_UINT16
 *
 * Description : Minimum payload required to transmit Aux pilot.
 *******************************************************************************/
enum CSDR_HRPD_AUX_PILOT_MIN_PAYLOAD_ENUM
{
    CSDR_HRPD_AUX_PILOT_MIN_PAYLOAD_128                     = 0x0000,
    CSDR_HRPD_AUX_PILOT_MIN_PAYLOAD_256                     = 0x0001,
    CSDR_HRPD_AUX_PILOT_MIN_PAYLOAD_512                     = 0x0002,
    CSDR_HRPD_AUX_PILOT_MIN_PAYLOAD_768                     = 0x0003,
    CSDR_HRPD_AUX_PILOT_MIN_PAYLOAD_1024                    = 0x0004,
    CSDR_HRPD_AUX_PILOT_MIN_PAYLOAD_1536                    = 0x0005,
    CSDR_HRPD_AUX_PILOT_MIN_PAYLOAD_2048                    = 0x0006,
    CSDR_HRPD_AUX_PILOT_MIN_PAYLOAD_3072                    = 0x0007,
    CSDR_HRPD_AUX_PILOT_MIN_PAYLOAD_4096                    = 0x0008,
    CSDR_HRPD_AUX_PILOT_MIN_PAYLOAD_6144                    = 0x0009,
    CSDR_HRPD_AUX_PILOT_MIN_PAYLOAD_8192                    = 0x000A,
    CSDR_HRPD_AUX_PILOT_MIN_PAYLOAD_12288                   = 0x000B,
    CSDR_HRPD_AUX_PILOT_MIN_PAYLOAD_BUTT                    = 0x000C
};
typedef PHY_UINT16 CSDR_HRPD_AUX_PILOT_MIN_PAYLOAD_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_RAB_LENGTH_ENUM_UINT16
 *
 * Description : Enum for RAB length.
 *******************************************************************************/
enum CSDR_HRPD_RAB_LENGTH_ENUM
{
    CSDR_HRPD_RAB_LENGTH_8_SLOTS        = 0x0000,
    CSDR_HRPD_RAB_LENGTH_16_SLOTS       = 0x0001,
    CSDR_HRPD_RAB_LENGTH_32_SLOTS       = 0x0002,
    CSDR_HRPD_RAB_LENGTH_64_SLOTS       = 0x0003,
    CSDR_HRPD_RAB_LENGTH_BUTT           = 0x0004
};
typedef PHY_UINT16 CSDR_HRPD_RAB_LENGTH_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_RPC_STEP_ENUM_UINT16
 *
 * Description : RPC Step, 0.5 dB or 1 dB.
 *******************************************************************************/
enum CSDR_HRPD_RPC_STEP_ENUM
{
    CSDR_HRPD_RPC_STEP_HALF_DB          = 0x0000,
    CSDR_HRPD_RPC_STEP_1_DB             = 0x0001,
    CSDR_HRPD_RPC_STEP_BUTT             = 0x0002
};
typedef PHY_UINT16 CSDR_HRPD_RPC_STEP_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_DRC_LENGTH_ENUM_UINT16
 *
 * Description : DRC Length, 1, 2, 4 or 8 slots.
 *******************************************************************************/
enum CSDR_HRPD_DRC_LENGTH_ENUM
{
    CSDR_HRPD_DRC_LENGTH_1_SLOT         = 0x0000,
    CSDR_HRPD_DRC_LENGTH_2_SLOTS        = 0x0001,
    CSDR_HRPD_DRC_LENGTH_4_SLOTS        = 0x0002,
    CSDR_HRPD_DRC_LENGTH_8_SLOTS        = 0x0003,
    CSDR_HRPD_DRC_LENGTH_BUTT           = 0x0004
};
typedef PHY_UINT16 CSDR_HRPD_DRC_LENGTH_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_RA_CHANNEL_GAIN_ENUM_UINT16
 *
 * Description : RA channel gain, -6, -9, -12 or -15 dB.
 *******************************************************************************/
enum CSDR_HRPD_RA_CHANNEL_GAIN_ENUM
{
    CSDR_HRPD_RA_CHANNEL_GAIN_NEG_6_DB  = 0x0000,
    CSDR_HRPD_RA_CHANNEL_GAIN_NEG_9_DB  = 0x0001,
    CSDR_HRPD_RA_CHANNEL_GAIN_NEG_12_DB = 0x0002,
    CSDR_HRPD_RA_CHANNEL_GAIN_NEG_15_DB = 0x0003,
    CSDR_HRPD_RA_CHANNEL_GAIN_BUTT      = 0x0004
};
typedef PHY_UINT16 CSDR_HRPD_RA_CHANNEL_GAIN_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_SHORT_PACKET_EN_THRESH_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_HRPD_SHORT_PACKET_EN_THRESH_ENUM
{
    CSDR_HRPD_SHORT_PACKET_EN_THRESH_1024_BITS              = 0x0000,
    CSDR_HRPD_SHORT_PACKET_EN_THRESH_2048_BITS              = 0x0001,
    CSDR_HRPD_SHORT_PACKET_EN_THRESH_3072_BITS              = 0x0002,
    CSDR_HRPD_SHORT_PACKET_EN_THRESH_4096_BITS              = 0x0003,
    CSDR_HRPD_SHORT_PACKET_EN_THRESH_BUTT                   = 0x0004
};
typedef PHY_UINT16 CSDR_HRPD_SHORT_PACKET_EN_THRESH_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_TL_ACKCH_MOD_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_HRPD_TL_ACKCH_MOD_ENUM
{
    CSDR_HRPD_TL_ACKCH_MOD_DISABLED     = 0x0000, /**< Disabled */
    CSDR_HRPD_TL_ACKCH_MOD_BPSK         = 0x0001, /**< ACK Channel Mode BPSK */
    CSDR_HRPD_TL_ACKCH_MOD_OOK          = 0x0002, /**< ACK Channel Mode OOK */
    CSDR_HRPD_TL_ACKCH_MOD_BUTT         = 0x0003
};
typedef PHY_UINT16 CSDR_HRPD_TL_ACKCH_MOD_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_TL_ACKCH_FIXED_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_HRPD_TL_ACKCH_FIXED_ENUM
{
    CSDR_HRPD_TL_ACKCH_FIXED_0          = 0x0000,
    CSDR_HRPD_TL_ACKCH_FIXED_1          = 0x0001,
    CSDR_HRPD_TL_ACKCH_FIXED_DISABLED   = 0x0002,
    CSDR_HRPD_TL_ACKCH_FIXED_BUTT       = 0x0003
};
typedef PHY_UINT16 CSDR_HRPD_TL_ACKCH_FIXED_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_TL_DRCVALUE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_HRPD_TL_DRCVALUE_ENUM
{
    CSDR_HRPD_TL_DRCVALUE_0x0                               = 0x0000,
    CSDR_HRPD_TL_DRCVALUE_0x1                               = 0x0001,
    CSDR_HRPD_TL_DRCVALUE_0x2                               = 0x0002,
    CSDR_HRPD_TL_DRCVALUE_0x3                               = 0x0003,
    CSDR_HRPD_TL_DRCVALUE_0x4                               = 0x0004,
    CSDR_HRPD_TL_DRCVALUE_0x5                               = 0x0005,
    CSDR_HRPD_TL_DRCVALUE_0x6                               = 0x0006,
    CSDR_HRPD_TL_DRCVALUE_0x7                               = 0x0007,
    CSDR_HRPD_TL_DRCVALUE_0x8                               = 0x0008,
    CSDR_HRPD_TL_DRCVALUE_0x9                               = 0x0009,
    CSDR_HRPD_TL_DRCVALUE_0xA                               = 0x000A,
    CSDR_HRPD_TL_DRCVALUE_0xB                               = 0x000B,
    CSDR_HRPD_TL_DRCVALUE_0xC                               = 0x000C,
    CSDR_HRPD_TL_DRCVALUE_0xD                               = 0x000D, /**< only valid for sub-type 2 */
    CSDR_HRPD_TL_DRCVALUE_0xE                               = 0x000E, /**< only valid for sub-type 2 */
    CSDR_HRPD_TL_DRCVALUE_FIXED_DISABLED                    = 0x000F,
    CSDR_HRPD_TL_DRCVALUE_BUTT                              = 0x0010
};
typedef PHY_UINT16 CSDR_HRPD_TL_DRCVALUE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_INT3_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_HRPD_INT3_ENUM
{
    CSDR_HRPD_INT3_DONT_GENERATE        = 0x0000,
    CSDR_HRPD_INT3_GENERATE             = 0x0001,
    CSDR_HRPD_INT3_BUTT                 = 0x0002
};
typedef PHY_UINT16 CSDR_HRPD_INT3_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_AFC_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_HRPD_AFC_ENUM
{
    CSDR_HRPD_AFC_NOT_LOCKED            = 0x0000,
    CSDR_HRPD_AFC_LOCKED                = 0x0001,
    CSDR_HRPD_AFC_BUTT                  = 0x0002
};
typedef PHY_UINT16 CSDR_HRPD_AFC_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_NULL_RATE_DRC_38K4_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_HRPD_NULL_RATE_DRC_38K4_ENUM
{
    CSDR_HRPD_NULL_RATE_DRC_38K4_DISABLED                   = 0x0000,
    CSDR_HRPD_NULL_RATE_DRC_38K4_ENABLED                    = 0x0001,
    CSDR_HRPD_NULL_RATE_DRC_38K4_BUTT                       = 0x0002
};
typedef PHY_UINT16 CSDR_HRPD_NULL_RATE_DRC_38K4_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_BASECNT_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_HRPD_BASECNT_ENUM
{
    CSDR_HRPD_BASECNT_OFFSET            = 0x0000,
    CSDR_HRPD_BASECNT_FRAME_HEAD        = 0x0001,
    CSDR_HRPD_BASECNT_NOT_VALID         = 0x0002,
    CSDR_HRPD_BASECNT_BUTT              = 0x0003
};
typedef PHY_UINT16 CSDR_HRPD_BASECNT_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_RADIO_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_HRPD_RADIO_ENUM
{
    CSDR_HRPD_RADIO_SRLTE               = 0x0000,
    CSDR_HRPD_RADIO_SVLTE               = 0x0001,
    CSDR_HRPD_RADIO_BUTT                = 0x0002
};
typedef PHY_UINT16 CSDR_HRPD_RADIO_ENUM_UINT16;

/*******************************************************************************
 4. Message Header declaration
*******************************************************************************/

/*******************************************************************************
 5. Message declaration
*******************************************************************************/

/*******************************************************************************
 6. STRUCT and UNION declaration
*******************************************************************************/

/** ****************************************************************************
 * Name        : CSDR_HRPD_FTC_START_CFG_DEFAULT_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwDRCCoverInitial; /**< initial value of DRCCover */
    PHY_UINT16                          uhwDRCLockPeriod;   /**< 8 or 16 */
} CSDR_HRPD_FTC_START_CFG_DEFAULT_STRU;

/** ****************************************************************************
 * Name        : CSDR_HRPD_RTC_DATA_OFFSET_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    PHY_INT16                           shwRtcDataOffsetNom;   /**< range -8..7 in unit of 0.5 dB, logical power -4 to +3.5 dB in steps of 0.5 dB */
    PHY_INT16                           shwRtcDataOffset9k6;   /**< range -8..7 in unit of 0.25 dB, logical power -2 to + 1.75 dB in steps of 0.25 dB */
    PHY_INT16                           shwRtcDataOffset19k2;  /**< range -8..7 in unit of 0.25 dB, logical power -2 to + 1.75 dB in steps of 0.25 dB */
    PHY_INT16                           shwRtcDataOffset38k4;  /**< range -8..7 in unit of 0.25 dB, logical power -2 to + 1.75 dB in steps of 0.25 dB */
    PHY_INT16                           shwRtcDataOffset76k8;  /**< range -8..7 in unit of 0.25 dB, logical power -2 to + 1.75 dB in steps of 0.25 dB */
    PHY_INT16                           shwRtcDataOffset153k6; /**< range -8..7 in unit of 0.25 dB, logical power -2 to + 1.75 dB in steps of 0.25 dB */
} CSDR_HRPD_RTC_DATA_OFFSET_STRU;

/** ****************************************************************************
 * Name        : CSDR_HRPD_FTC_START_CFG_SUBTYPE2_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CSDR_HRPD_BOOL_ENUM_UINT16                              enMultiUserPacketsEnabled;          /**< MAC Index 66-70 */
    CSDR_HRPD_SHORT_PACKET_EN_THRESH_ENUM_UINT16            enShortPacketsEnabledThresh;        /**< Short packets enabled threshold */
    PHY_UINT16                                              uhwDRCCoverInitial;                 /**< initial value of DRCCover */
    PHY_UINT16                                              uhwDSCInitial;                      /**< Initial value of DSC */
    CSDR_HRPD_BOOL_ENUM_UINT16                              bARQMode;                           /**< YES ARQ Mode 0, else ARQ Mode 1 */
    PHY_UINT16                                              uhwReserved;
    PHY_UINT16                                              auhwDRC_TranslationOffsetTable[14]; /**< Used when computing DRC value from Tentative DRCs */
} CSDR_HRPD_FTC_START_CFG_SUBTYPE2_STRU;

/** ****************************************************************************
 * Name        : CSDR_HRPD_RTC_START_CFG_STRU
 *
 * Description : RTC Parameters
 *******************************************************************************/
typedef struct
{
    PHY_UINT32                          auwMIRTCMAC[2];     /**< [0]:31..0 [1]:41..32 */
    PHY_UINT32                          auwMQRTCMAC[2];     /**< [0]:31..0 [1]:41..32 */
    PHY_INT16                           shwACKChannelGain;  /**< -3 to +6 dB in steps of 0.5 dB */
    CSDR_HRPD_RPC_STEP_ENUM_UINT16      enRPCStep;          /**< Reverse Power control step */
    CSDR_HRPD_BOOL_ENUM_UINT16          bDRCGatingEnabled;  /**< DRC Gating Enabled */
    PHY_UINT16                          uhwSilenceDuration; /**< Reverse link silence duration in frames [1..3] */
    PHY_UINT16                          uhwSilencePeriod;   /**< Reverse link silence period, silence period starts at T mod (2048*2^usSilencePeriod - 1) = 0. */
    PHY_UINT16                          uhwFrameOffset;     /**< RTC frame offset */
} CSDR_HRPD_RTC_START_CFG_STRU;

/** ****************************************************************************
 * Name        : CSDR_HRPD_RTC_START_CFG_DEFAULT_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CSDR_HRPD_RTC_DATA_OFFSET_STRU                          stRTCDataOffset;       /**< RTC Data Offset values */
    PHY_INT16                                               shwDRCChannelGainBase; /**< -9 dB to +6 dB in steps of 0.5 dB */
    CSDR_HRPD_NULL_RATE_DRC_38K4_ENUM_UINT16                enNullRateDrc38k4;     /**< Enable/disable, see section 10.6 in 0024 */
} CSDR_HRPD_RTC_START_CFG_DEFAULT_STRU;

/** ****************************************************************************
 * Name        : CSDR_HRPD_RTC_START_CFG_SUBTYPE2_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                                              auhwMaxNumSubPacket[CSDR_HRPD_NUM_HARQ_PROC_SUBTYPE2]; /**< RTC: #sub-packets in sub-frame for each ARQ processes */
    PHY_INT16                                               shwDRCChannelGainBase;                                 /**< -9 to +6 dB in steps of 0.5 dB */
    PHY_UINT16                                              uhwDRCChannelGainBoost;                                /**< 0 to 6 dB in steps of 1 dB */
    PHY_UINT16                                              uhwDRCBoostLength;                                     /**< 0x00 - 0x20, DRC shall be boosted in (2 * uhwDRCBoostLength) slots */
    PHY_UINT16                                              uhwDSCChannelGainBase;                                 /**< 0 to -15.5 dB in steps of 0.5 dB */
    PHY_UINT16                                              uhwDSCChannelGainBoost;                                /**< 0 to 6 dB in steps of 1 dB */
    PHY_UINT16                                              uhwDSCBoostLength;                                     /**< 0x00 - 0x40, DSC shall be boosted in (8 * uhwDRCBoostLength) slots */
    PHY_UINT16                                              uhwDSCLength;                                          /**< 8 to 160 slots in steps of 8 slots */
    PHY_UINT16                                              uhwDeltaACKChannelGainMUP;                             /**< 0 to 9 dB in steps of 0.5 dB */
    CSDR_HRPD_AUX_PILOT_MIN_PAYLOAD_ENUM_UINT16             enAuxiliaryPilotChannelMinPayload;                     /**< Payload required for triggering of Aux pilot transmission */
    PHY_UINT16                                              uhwAuxiliaryPilotChannelGain;                          /**< 0 to -15 dB in steps of -1 dB */
    PHY_UINT16                                              uhwTxT2Pmin;                                           /**< 0 to 63.75 dB in steps of 0.25 dB */
    PHY_INT16                                               shwRRIChannelGainPreTransition3;                       /**< -8 dB to +7 dB, unit 1 dB */
    PHY_UINT16                                              uhwReserved;                                           /**< 32 bit alignment */
} CSDR_HRPD_RTC_START_CFG_SUBTYPE2_STRU;

/** ****************************************************************************
 * Name        : CSDR_HRPD_ACTIVE_SET_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                                              uhwPilotPN_Offset; /**< 0 to 32704 chips in steps of 64 chips */
    PHY_UINT16                                              uhwDRCCover;       /**< 1..6 */
    CSDR_HRPD_RA_CHANNEL_GAIN_ENUM_UINT16                   enRA_ChannelGain;  /**< RA Channel gain */
    CSDR_HRPD_RAB_LENGTH_ENUM_UINT16                        enRAB_Length;      /**< RAB Length */
    CSDR_HRPD_BOOL_ENUM_UINT16                              enSofterHandoff;   /**< if set, this sector shall be combined with the prev sector in the list */
    PHY_UINT16                                              uhwRAB_Offset;     /**< 1..7 */
    PHY_UINT16                                              uhwMACIndex;       /**< 5-63 (default),  5-63, 66-70, 72-127 subtype 2 */
    PHY_UINT16                                              uhwReserved;       /**< 32 bit alignment */
} CSDR_HRPD_ACTIVE_SET_STRU;

/** ****************************************************************************
 * Name        : CSDR_HRPD_CC_STRU
 *
 * Description : CSDR_HRPD_CC_STRU contains the parameters for control channel
 * reception.
 *******************************************************************************/
typedef struct
{
    CSDR_HRPD_PHYSICAL_LAYER_SUBTYPE_ENUM_UINT16            enSubtype;                 /**< Phy layer subtype */
    PHY_UINT16                                              uhwCCShortPacketsMACIndex; /**< only valid if enSubtype = CSDR_HRPD_PHYSICAL_LAYER_SUBTYPE_SUBTYPE2 */
    PHY_UINT16                                              uhwPilotPN_Offset;
    CSDR_HRPD_CC_STATE_ENUM_UINT16                          enCCstate;                 /**< Initial, Idle DRX or cont */
    PHY_UINT16                                              uhwCCcycleOffset;          /**< to identify HARQ process to be monitored, 0..3 only valid for DRX */
    PHY_UINT16                                              uhwPpmReportPeriod;        /**< The period for sending CSDR_CPROC_HRPD_AFC_PPM_IND. Unit: ms. If set to 0 no sending. */
} CSDR_HRPD_CC_STRU;

/** ****************************************************************************
 * Name        : CSDR_HRPD_FTC_START_CFG_STRU
 *
 * Description : FTC Parameters
 *******************************************************************************/
typedef struct
{
    CSDR_HRPD_ACTIVE_SET_STRU           astActiveSet[CSDR_HRPD_MAX_SIZE_ACTIVE_SET]; /**< Active Set */
    PHY_UINT16                          uhwID_ActiveSet;                             /**< Id for active set, echo back to CTTF_HRPD. */
    PHY_UINT16                          uhwSizeOfActiveSet;                          /**< Active Set, 1..CSDR_HRPD_MAX_SIZE_ACTIVE_SET */
    CSDR_HRPD_DRC_LENGTH_ENUM_UINT16    enDRCLength;                                 /**< DRC Length */
    PHY_UINT16                          uhwDRCLockLength;                            /**< DRC Lock Length */
} CSDR_HRPD_FTC_START_CFG_STRU;

/** ****************************************************************************
 * Name        : CSDR_HRPD_TCH_START_CFG_DEFAULT_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CSDR_HRPD_RTC_START_CFG_DEFAULT_STRU                    stRtc; /**< RTC parameters, default */
    CSDR_HRPD_FTC_START_CFG_DEFAULT_STRU                    stFtc; /**< FTC parameters default */
} CSDR_HRPD_TCH_START_CFG_DEFAULT_STRU;

/** ****************************************************************************
 * Name        : CSDR_HRPD_TCH_START_CFG_SUBTYPE2_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CSDR_HRPD_RTC_START_CFG_SUBTYPE2_STRU                   stRtc; /**< RTC parameters, subtype 2 */
    CSDR_HRPD_FTC_START_CFG_SUBTYPE2_STRU                   stFtc; /**< FTC parameters subtype 2 */
} CSDR_HRPD_TCH_START_CFG_SUBTYPE2_STRU;

/** ****************************************************************************
 * Name        : CSDR_HRPD_TCH_START_CFG_UNION
 *
 * Description :
 *******************************************************************************/
typedef union
{
    CSDR_HRPD_TCH_START_CFG_DEFAULT_STRU                    stDefault;  /**< FTC parameters default */
    CSDR_HRPD_TCH_START_CFG_SUBTYPE2_STRU                   stSubtype2; /**< FTC parameters subtype 2 */
} CSDR_HRPD_TCH_START_CFG_UNION;

/*******************************************************************************
 7. OTHER declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_ACTIVE_REQ_STRU
 *
 * Description : CPROC_CSDR_HRPD_ACTIVE_REQ activates HRPD in CSDR_HRPD. This
 * is the initial signal to be sent to CSDR_HRPD at power on and after reset.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_HRPD_RADIO_ENUM_UINT16         enRadioConfig;           /**< Radio configuration */
    PHY_UINT16                          uhwReserved;             /**< 32 bit alignment */
    PHY_UINT32                          uwCsdrCttfBufferAddress; /**< address of the data plane struct */
} CPROC_CSDR_HRPD_ACTIVE_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_ACTIVE_CNF_STRU
 *
 * Description : Confirms CPROC_CSDR_HRPD_ACTIVE_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_ACTIVE_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_SLEEP_REQ_STRU
 *
 * Description : This signal indicates to CSDR_HRPD that CPROC_HRPD is ready
 * for sleep. The expected wake up time is provided.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT32                          auwWakeUpTime; /**< #chips % 10.24s (24 bits) */
} CPROC_CSDR_HRPD_SLEEP_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_SLEEP_CNF_STRU
 *
 * Description : this signal confirms CPROC_CSDR_HRPD_SLEEP_REQ
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_SLEEP_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_SET_MODE_REQ_STRU
 *
 * Description : This signal is sent to set slave or master mode of CPROC_HRPD.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_HRPD_WORKMODE_ENUM_UINT16      enWorkMode;
    PHY_UINT16                          uhwReserved; /**< 32 bit alignment */
} CPROC_CSDR_HRPD_SET_MODE_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_SET_MODE_CNF_STRU
 *
 * Description : Confirms a CPROC_CSDR_HRPD_SET_MODE_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_SET_MODE_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_CM_RESET_REQ_STRU
 *
 * Description : This signal resets CSDR_HRPD_ChannelManager.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CPROC_CSDR_HRPD_CM_RESET_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_CM_RESET_CNF_STRU
 *
 * Description : This signal confirms CPROC_CSDR_HRPD_CM_RESET_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_CM_RESET_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_RXON_REQ_STRU
 *
 * Description : This signal is sent to switch on radio sampling.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT32                          uwRX_OnTime; /**< bit 0-16 unit chips [0..98303], bit 17-23 unit 80ms [0..127] (period 10.24s), or CSDR_HRPD_NOW or CSDR_HRPD_INT_1 */
    CSDR_HRPD_RXON_ENUM_UINT16          enFreqValid; /**< Valid flag for frequency */
    CSDR_HRPD_INT3_ENUM_UINT16          enSendInt3;  /**< Indicates if CSDR shall send INT_3 to LTE, only valid if enFreqValid = CSDR_HRPD_RXON_SLAVE_MEAS, CSDR_HRPD_RXON_SLAVE_BSR or CSDR_HRPD_RXON_SLAVE_MEAS_AND_BSR */
    CSDR_HRPD_FREQ_INFO_STRU            stFreq;      /**< Master or Slave Measurement Frequency (not valid if enFreqValid == CSDR_HRPD_RXON_SLAVE_BSR */
    CSDR_HRPD_FREQ_INFO_STRU            stFreqBSR;   /**< Slave BSR Frequency (only valid if enFreqValid == CSDR_HRPD_RXON_SLAVE_BSR or CSDR_HRPD_RXON_SLAVE_MEAS_AND_BSR */
} CPROC_CSDR_HRPD_RXON_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_RXON_CNF_STRU
 *
 * Description : This signal confirms CPROC_CSDR_HRPD_RXON_REQ
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_RXON_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_RXOFF_REQ_STRU
 *
 * Description : This signal is sent switch off radio.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT32                          uwRX_OffTime; /**< bit 0-16 unit chips [0..98303], bit 17-23 unit 80ms [0..127] (period 10.24s), or CSDR_HRPD_NOW */
} CPROC_CSDR_HRPD_RXOFF_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_RXOFF_CNF_STRU
 *
 * Description : Confirms CPROC_CSDR_HRPD_RXOFF_REQ
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_RXOFF_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_CC_START_REQ_STRU
 *
 * Description : This signal configures CSDR_HRPD for CC reception
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_HRPD_CC_STRU                   stCCparameters; /**< parameters for control channel reception */
} CPROC_CSDR_HRPD_CC_START_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_CC_START_CNF_STRU
 *
 * Description : Confirms CPROC_CSDR_HRPD_CC_START_REQ
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_CC_START_CNF_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_CC_DONE_IND_STRU
 *
 * Description : This signal is sent in IDLE_DRX state when a MAC CC packet is
 * decoded.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_HRPD_BOOL_ENUM_UINT16          bSleepStateCapsuleDone; /**< if true, the complete sleep state capsule is received and ready for sleep. */
    CSDR_HRPD_BOOL_ENUM_UINT16          bLastPacket;            /**< if true, the complete capsule is received and ready for sleep. */
    CSDR_HRPD_BOOL_ENUM_UINT16          bFirstPacket;           /**< if true and not the first packet in according to paging, outside the sleep state capsule and ready for sleep. */
    CSDR_HRPD_BOOL_ENUM_UINT16          bSynchronousCapsule;    /**< if true, outside the sleep state capsule and ready for sleep. */
} CSDR_CPROC_HRPD_CC_DONE_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_CC_STOP_REQ_STRU
 *
 * Description : This signal is used to stop CC reception.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT32                          auwStopTime[2]; /**< CDMA System time, unit HRPD slots [0] low, [1] high, or if immediate [0] = CSDR_HRPD_NOW, [1] = CSDR_HRPD_NOW */
} CPROC_CSDR_HRPD_CC_STOP_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_CC_STOP_CNF_STRU
 *
 * Description : confirms CPROC_CSDR_HRPD_CC_STOP_REQ
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_CC_STOP_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_AC_START_REQ_STRU
 *
 * Description : This signal is used to start AC transmission. It is sent at
 * most 16 slots and at least 1 slot ahead of start time.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_HRPD_AC_TYPE_ENUM_UINT16       enAccessType;      /**< default or enhanced */
    PHY_UINT16                          uhwReserved;       /**< 32 bit alignment */
    PHY_UINT32                          auwMiAcmac[2];     /**< auwMiAcmac[0] 0..31, auwMiAcmac[1] 32...41 */
    PHY_UINT32                          auwMqAcmac[2];     /**< auwMqAcmac[0] 0..31, auwMqAcmac[1] 32...41 */
    PHY_UINT32                          auwACstartTime[2]; /**< CDMA System time, unit HRPD slots [0] low, [1] high */
    CSDR_HRPD_AC_DATA_SPEED_ENUM_UINT16 enAcDataSpeed;     /**< Data speed */
    PHY_UINT16                          uhwPreambleLength; /**< Default: 1..7 frames, enhanced (subtype 1 or 2): 4 or 16 slots */
    PHY_UINT16                          uhwCapsuleLength;  /**< 2..15 frames, number of MAC Packets */
    PHY_INT16                           shwDataOffsetNorm; /**< unit 0.5dB  [-4dB..3.5dB], signed magnitude format */
    PHY_INT16                           shwDataOffset9k6;  /**< unit 0.25dB [-2dB..1,75dB], signed magnitude format */
    PHY_INT16                           shwDataOffset19k2; /**< unit 0.25dB [-2dB..1,75dB], signed magnitude format */
    PHY_INT16                           shwDataOffset38k4; /**< unit 0.25dB [-2dB..1,75dB], signed magnitude format */
    PHY_INT16                           shwPowerAdjust;    /**< unit 0.5dB, = openLoopAdjust + probeInitialAdjust + (i-1)*powerStep, signed magnitude format */
} CPROC_CSDR_HRPD_AC_START_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_AC_START_CNF_STRU
 *
 * Description : Confirms CPROC_CSDR_HRPD_AC_START_REQ
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_AC_START_CNF_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_AC_START_IND_STRU
 *
 * Description : Indicates start of AC transmission requested in
 * CPROC_CSDR_HRPD_AC_START_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_AC_START_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_AC_STOP_REQ_STRU
 *
 * Description : This signal is used to stop AC, which shall be stopped as soon
 * as possible.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CPROC_CSDR_HRPD_AC_STOP_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_AC_STOP_CNF_STRU
 *
 * Description : This signal confirms CPROC_CSDR_HRPD_AC_STOP_REQ
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_AC_STOP_CNF_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_AC_ERROR_IND_STRU
 *
 * Description : CSDR_CPROC_HRPD_AC_ERROR_IND is sent when the access data is
 * not available when it is time to transmit. In this scenario CSDR_HRPD stops
 * the access transmission (continues to receive control channel) and sends
 * CSDR_CPROC_HRPD_AC_ERROR_IND.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_AC_ERROR_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_TCH_START_REQ_STRU
 *
 * Description : This signal configures CSDR_HRPD for TCH reception.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16                         enMsgId;
    PHY_UINT16                                              uhwOpId;
    CSDR_HRPD_PHYSICAL_LAYER_SUBTYPE_ENUM_UINT16            enSubtype;     /**< Phy layer subtype */
    PHY_UINT16                                              uhwConfigId;   /**< Configuration ID for this configuration, echo back to CTTF_HRPD */
    CSDR_HRPD_FTC_START_CFG_STRU                            stFtc;         /**< subtype independent RTC paramters */
    CSDR_HRPD_RTC_START_CFG_STRU                            stRtc;         /**< subtype independent RTC paramters */
    CSDR_HRPD_TCH_START_CFG_UNION                           unTchStartCfg; /**< FTC and RTC parameters, default or subtype 2 */
} CPROC_CSDR_HRPD_TCH_START_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_TCH_START_CNF_STRU
 *
 * Description : Confirms CPROC_CSDR_HRPD_TCH_START_REQ
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_TCH_START_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_TCH_MAINTAIN_REQ_STRU
 *
 * Description : CPROC_CSDR_HRPD_TCH_MAINTAIN_REQ is sent whenever DRCCover or
 * DSC changes and when switching between fixed mode and variable mode, or when
 * fixed mode is extended (to request DRCValue).
 * Note that DRC Cover is always transmitted as null cover in fixed mode, but
 * DRC Cover in this message indicated the selected DRC Cover.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_HRPD_DRC_MODE_ENUM_UINT16      enFixMode;   /**< Fixed / variable rate mode */
    PHY_UINT16                          uhwDRCCover; /**< DRC Cover */
    PHY_UINT16                          uhwDSC;      /**< DSC, only for Subtype 2 */
    PHY_UINT16                          uhwReserve;  /**< 32 bit alignment */
} CPROC_CSDR_HRPD_TCH_MAINTAIN_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_TCH_MAINTAIN_IND_STRU
 *
 * Description : CSDR_CPROC_HRPD_TCH_MAINTAIN_IND is sent
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT16                          uhwDRCCover_DSC; /**< the final DRC Cover or DSC */
    PHY_UINT16                          uhwDRCValue;     /**< the final DRCValue */
} CSDR_CPROC_HRPD_TCH_MAINTAIN_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_TCH_RECONFIG_REQ_STRU
 *
 * Description : CPROC_CSDR_HRPD_TCH_RECONFIG_REQ is used for reconfiguration
 * in connected mode.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16                         enMsgId;
    PHY_UINT16                                              uhwOpId;
    PHY_UINT16                                              uhwReconfigPurpose;                          /**< Bitmask; CSDR_HRPD_ACTIVE_SET_UPDATE, CSDR_HRPD_NON_AS_UPDATE, CSDR_HRPD_TESTLOOP_UPDATE */
    PHY_UINT16                                              uhwSizeOfActiveSet;                          /**< 1..CSDR_HRPD_MAX_SIZE_ACTIVE_SET, only valid if CSDR_HRPD_ACTIVE_SET_UPDATE&uhwReconfigPurpose */
    CSDR_HRPD_ACTIVE_SET_STRU                               astActiveSet[CSDR_HRPD_MAX_SIZE_ACTIVE_SET];
    PHY_UINT16                                              uhwConfigId;                                 /**< Configuration ID for this configuration, echo back to CTTF_HRPD */
    PHY_UINT16                                              uhwID_ActiveSet;                             /**< Id for active set, echo back to CTTF_HRPD, only valid if CSDR_HRPD_ACTIVE_SET_UPDATE&uhwReconfigPurpose */
    PHY_INT16                                               shwACKChannelGain;                           /**< -3 to +6 dB in steps of 0.5 dB, only valid if CSDR_HRPD_NON_AS_UPDATE&uhwReconfigPurpose */
    CSDR_HRPD_DRC_LENGTH_ENUM_UINT16                        enDRCLength;                                 /**< DRC Length, only valid if CSDR_HRPD_NON_AS_UPDATE&uhwReconfigPurpose */
    PHY_UINT16                                              uhwDRCLockLength;                            /**< DRC Lock Length, only valid if CSDR_HRPD_NON_AS_UPDATE&uhwReconfigPurpose */
    CSDR_HRPD_RPC_STEP_ENUM_UINT16                          enRPCStep;                                   /**< Reverse Power control step, only valid if CSDR_HRPD_NON_AS_UPDATE&uhwReconfigPurpose */
    CSDR_HRPD_BOOL_ENUM_UINT16                              bDRCGatingEnabled;                           /**< DRC Gating Enabled, only valid if CSDR_HRPD_NON_AS_UPDATE&uhwReconfigPurpose */
    PHY_UINT16                                              uhwSilenceDuration;                          /**< Reverse link silence duration in frames [1..3], only valid if CSDR_HRPD_NON_AS_UPDATE&uhwReconfigPurpose */
    PHY_UINT16                                              uhwSilencePeriod;                            /**< Reverse link silence period, silence period starts at T mod (2048*2^usSilencePeriod - 1) = 0, only valid if CSDR_HRPD_NON_AS_UPDATE&uhwReconfigPurpose */
    PHY_INT16                                               shwDrcChannelGainBase;                       /**< -9 to +6 dB in steps of 0.5 dB, only valid if CSDR_HRPD_NON_AS_UPDATE&uhwReconfigPurpose */
    PHY_UINT16                                              uhwDrcChannelGainBoost;                      /**< 0 to 6 dB in steps of 1 dB, only valid if CSDR_HRPD_NON_AS_UPDATE&uhwReconfigPurpose */
    PHY_UINT16                                              uhwDrcBoostLength;                           /**< 0x00 - 0x20, DRC shall be boosted in (2 * uhwDRCBoostLength) slots, only valid if CSDR_HRPD_NON_AS_UPDATE&uhwReconfigPurpose */
    PHY_UINT16                                              uhwDscChannelGainBoost;                      /**< 0 to 6 dB in steps of 1 dB, only valid if CSDR_HRPD_NON_AS_UPDATE&uhwReconfigPurpose */
    PHY_UINT16                                              uhwDscBoostLength;                           /**< 0x00 - 0x40, DSC shall be boosted in (8 * uhwDRCBoostLength) slots, only valid if CSDR_HRPD_NON_AS_UPDATE&uhwReconfigPurpose */
    CSDR_HRPD_TL_DRCVALUE_ENUM_UINT16                       enTLDrcValue;                                /**< Test loop parameter, only valid if CSDR_HRPD_TESTLOOP_UPDATE&uhwReconfigPurpose */
    CSDR_HRPD_TL_ACKCH_FIXED_ENUM_UINT16                    enTLAckChFixed;                              /**< Test loop parameter, only valid if CSDR_HRPD_TESTLOOP_UPDATE&uhwReconfigPurpose */
    CSDR_HRPD_TL_ACKCH_MOD_ENUM_UINT16                      enTlAckChModulation;                         /**< Test loop parameter, only valid if CSDR_HRPD_TESTLOOP_UPDATE&uhwReconfigPurpose */
    CSDR_HRPD_BOOL_ENUM_UINT16                              bARQMode;                                    /**< Test loop parameter, only valid if CSDR_HRPD_TESTLOOP_UPDATE&uhwReconfigPurpose && subtype 2 */
} CPROC_CSDR_HRPD_TCH_RECONFIG_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_TCH_RECONFIG_CNF_STRU
 *
 * Description : Confirms CPROC_CSDR_HRPD_TCH_RECONFIG_REQ
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_TCH_RECONFIG_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_TCH_STOP_REQ_STRU
 *
 * Description : This signal is sent to stop TCH reception.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CPROC_CSDR_HRPD_TCH_STOP_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_TCH_STOP_CNF_STRU
 *
 * Description : Confirms CPROC_CSDR_HRPD_TCH_STOP_REQ
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_TCH_STOP_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_SET_SYSTIME_REQ_STRU
 *
 * Description : This signal is used to set system time.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT32                          auwSystemTime[2];     /**< SystemTime from sync message,  auwSystemTime[0] bit[31:0] = systemTime bit[31:0], auwSystemTime[1] bit[4:0] = systemTime bit[36:32] (unit 26.67 ms) */
    PHY_UINT32                          uwBaseCountOfSyncMsg; /**< Base count of the sync channel message */
    PHY_UINT16                          uhwPNOffset;          /**< Pn Offset received in sync msg */
    PHY_UINT16                          uhwReserved;          /**< 32 bit alignment */
} CPROC_CSDR_HRPD_SET_SYSTIME_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_SET_SYSTIME_CNF_STRU
 *
 * Description : Confirms a CPROC_CSDR_HRPD_SET_SYSTIME_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_SET_SYSTIME_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_TIME_REFERENCE_REQ_STRU
 *
 * Description : This signal is sent after a sleep period and after every
 * CSDR_CPROC_HRPD_MPS_IND to adjust which cell to be used as timing reference.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_HRPD_TIME_ADJUST_ENUM_UINT16   enUpdateSpeed; /**< Slow in continuous states, fast in DRX */
    PHY_UINT16                          uhwPNIndex;    /**< 0..511:The PNOffset of the timing reference pilot */
    PHY_UINT32                          uwPNPhase;     /**< The timing reference path of the timing reference pilot. In 1/4 chip */
} CPROC_CSDR_HRPD_TIME_REFERENCE_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_DRCLOCK_IND_STRU
 *
 * Description : This signal is sent at change of DRCLock. The first
 * CSDR_CPROC_HRPD_DRCLOCK_IND is sent first time a DRCLock is received as 0.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT16                          auhwDRCLock[CSDR_HRPD_MAX_SIZE_ACTIVE_SET]; /**< one per sector in active set. */
} CSDR_CPROC_HRPD_DRCLOCK_IND_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_DRC_IND_STRU
 *
 * Description : This signal is sent at change of DRC Tentative.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_HRPD_DRC_TENTATIVE_ENUM_UINT16 enDRCTentative; /**< DRC tentative */
    PHY_UINT16                          uhwReserved;    /**< 32-bit alignment */
} CSDR_CPROC_HRPD_DRC_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_SUSPEND_REQ_STRU
 *
 * Description : This signal requests creation of a gap. When received,
 * CSDR_HRPD suspend reception of all channels and MPS at auwTime. A
 * CPROC_CSDR_HRPD_RESUME_REQ is required to resume reception and MPS.
 *
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT32                          auwTime; /**< bit 0-16 unit chips [0..98303], bit 17-23 unit 80ms [0..127] (period 10.24s), or CSDR_HRPD_NOW */
} CPROC_CSDR_HRPD_SUSPEND_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_SUSPEND_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_SUSPEND_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_RESUME_REQ_STRU
 *
 * Description : This signal resumes reception and MPS after a gap. It is sent
 * after a CPROC_CSDR_HRPD_SUSPEND_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT32                          auwTime; /**< bit 0-16 unit chips [0..98303], bit 17-23 unit 80ms [0..127] (period 10.24s), or CSDR_HRPD_NOW or CSDR_HRPD_INT_1 */
} CPROC_CSDR_HRPD_RESUME_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_RESUME_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_RESUME_CNF_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_GAP_START_IND_STRU
 *
 * Description : This signal is sent to indicate start of gap, i.e. when
 * CSDR_HRPD receives INT_0 from LTE.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_HRPD_GAP_PURPOSE_ENUM_UINT16   enGapPurpose;  /**< Purpose of gap */
    CSDR_HRPD_BASECNT_ENUM_UINT16       enBaseCntType; /**< Type of base cnt, either offset to last basecnt value or to HRPD frame head. */
    PHY_UINT32                          uwBaseCnt;     /**< 1/4 chips 0-(32768*4-1) */
} CSDR_CPROC_HRPD_GAP_START_IND_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_GAP_END_IND_STRU
 *
 * Description : This signal is sent to indicate end of gap, i.e. when
 * CSDR_HRPD receives INT_2 or INT_4 from LTE.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_GAP_END_IND_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_WAKEUP_IND_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_WAKEUP_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_INT_REQ_STRU
 *
 * Description : CPROC_CSDR_HRPD_INT_REQ requests sending of interrupts to LTE.
 * The following interrupts can be requested.
 * -  CSDR_HRPD_INT_1_AND_INT_2 indicating start and end of gap. CSDR_HRPD will
 *    generate INT_0 as well.
 * -  CSDR_HRPD_INT_4 indicating early end of gap, auwTime will always be set
 *    to CSDR_HRPD_NOW.
 * -  CSDR_HRPD_INT_5 indicating measurement report, auwTime will always be set
 *    to CSDR_HRPD_NOW.
 * ( auwTime - current time ) shall always be less than 80 ms.
 * If ( auwTime - current time ) < 3 ms CSDR_HRPD_NOW shall be used.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_HRPD_INT_ENUM_UINT16           enInterrupt;   /**< INT 1 and 2, 4 or 5 */
    CSDR_HRPD_GAP_PURPOSE_ENUM_UINT16   enPurpose;     /**< BSR or meas */
    PHY_UINT32                          auwTime;       /**< HRPD time to generate interrupt, bit 0-16 unit chips [0..98303], bit 17-23 unit 80ms [0..127] (period 10.24s), or CSDR_HRPD_NOW */
    PHY_UINT32                          auwTime_INT_2; /**< HRPD time to generate INT_2, bit 0-16 unit chips [0..98303], bit 17-23 unit 80ms [0..127] (period 10.24s). Only valid when enInterrupt == CSDR_HRPD_INT_1_AND_INT_2. */
} CPROC_CSDR_HRPD_INT_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_INT2_IND_STRU
 *
 * Description : This signal is sent when INT_2 is sent indicating that gap for
 * LTE is ended. It is only used in HRPD master mode.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_INT2_IND_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_INT3_IND_STRU
 *
 * Description : This signal is sent when INT_3 is received indicating that LTE
 * is ready with measurements or BSR. It is only used in HRPD master mode.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_INT3_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_AFC_PPM_REQ_STRU
 *
 * Description : CPROC_CSDR_HRPD_AFC_PPM_REQ  is sent to CSDR_HRPD  to set a
 * new initial PPM value for the AFC.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_INT32                           swInitialPpm;          /**< Initial PPM value to be used by AFC */
    PHY_INT16                           shwCurrentTemperature; /**< Resolution 0.1 degree C */
    PHY_UINT16                          uhwReserved;           /**< 32-bit alignment */
} CPROC_CSDR_HRPD_AFC_PPM_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_AFC_PPM_IND_STRU
 *
 * Description : CSDR_CPROC_HRPD_AFC_PPM_IND is sent from CSDR_HRPD to trigger
 * update of ppm value in NV.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_INT32                           swCurrentPpm; /**< current PPM used by AFC */
    CSDR_HRPD_AFC_ENUM_UINT16           enAfcStatus;  /**< locked or not locked */
    PHY_UINT16                          uhwReserved;  /**< 32-bit alignment */
} CSDR_CPROC_HRPD_AFC_PPM_IND_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_ERROR_IND_STRU
 *
 * Description : CSDR_CPROC_HRPD_ERROR_IND indicates that something not
 * expected occurred in CSDR_HRPD or in any module that CSDR_HRPD controls.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT32                          ulEventId; /**< Signal ID or Event ID that triggered sending of CSDR_CPROC_HRPD_ERROR_IND */
} CSDR_CPROC_HRPD_ERROR_IND_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_FRAME_HEAD_IND_STRU
 *
 * Description : CSDR_CPROC_HRPD_FRAME_HEAD_IND is used to send the relation
 * between basecnt and HRPD frame head in slave mode.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT32                          uwFramePos; /**< 0-(32768*4-1), 1/4chip for base cnt */
} CSDR_CPROC_HRPD_FRAME_HEAD_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_REL_ALL_REQ_STRU
 *
 * Description : CPROC_CSDR_HRPD_REL_ALL_REQ releases MPS, CC, AC and TCH (if
 * active), i.e. it corresponds to sending
 * -  CPROC_CSDR_HRPD_STOP_MPS_REQ
 * -  CPROC_CSDR_HRPD_CC_STOP_REQ
 * -  CPROC_CSDR_HRPD_AC_STOP_REQ
 * -  CPROC_CSDR_HRPD_TCH_STOP_REQ
 * CPROC_CSDR_HRPD_REL_ALL_REQ is accepted in suspended mode, i.e. after
 * CPROC_CSDR_HRPD_SUSPEND_REQ. Note that sending the four stop requests listed
 * above is not supported in suspended mode.
 *
 * CPROC_CSDR_HRPD_REL_ALL_REQ is confirmed with CSDR_CPROC_HRPD_REL_ALL_CNF.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CPROC_CSDR_HRPD_REL_ALL_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_REL_ALL_CNF_STRU
 *
 * Description : CSDR_CPROC_HRPD_REL_ALL_CNF confirms
 * CPROC_CSDR_HRPD_REL_ALL_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_REL_ALL_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_TIME_SYNC_REQ_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CPROC_CSDR_HRPD_TIME_SYNC_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_TIME_SYNC_IND_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_HRPD_TIME_RESULT_ENUM_UINT16   enTimeResult;    /**< the time valid flag */
    PHY_UINT16                          uhwReserved;     /**< 32-bit alignment */
    PHY_UINT32                          auwPulseTime[2]; /**< System time in 1/16chip */
} CSDR_CPROC_HRPD_TIME_SYNC_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_CONNECTION_STATUS_REQ_STRU
 *
 * Description : notify Connection open or close.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDCM_MSG_TYPE_ENUM_UINT16                         enMsgId;
    PHY_UINT16                                              uhwOpId;
    CSDR_HRPD_CONNECTION_STATUS_ENUM_UINT16                 enStatus;    /**< Connection status */
    PHY_UINT16                                              uhwReserved; /**< 32 bit alignment */
} CPROC_CSDR_HRPD_CONNECTION_STATUS_REQ_STRU;

/*******************************************************************************
 8. Global  declaration
*******************************************************************************/

/*******************************************************************************
 9. Function declarations
*******************************************************************************/

#if ((VOS_OS_VER == VOS_WIN32) || (VOS_OS_VER == VOS_NUCLEUS))
#pragma pack()
#else
#pragma pack(0)
#endif

#ifdef __cplusplus
#if __cplusplus
}
#endif /* __cpluscplus */
#endif /* __cpluscplus */

#endif
