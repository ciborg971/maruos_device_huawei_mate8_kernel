/** ****************************************************************************

                    Huawei Technologies Sweden AB (C), 2001-2015

 ********************************************************************************
 * @author    Automatically generated by DAISY
 * @version
 * @date      2015-04-22
 * @file
 * @brief
 * 2013-12-03: updated for B080 release.
 * @copyright Huawei Technologies Sweden AB
 *******************************************************************************/
#ifndef CSDR1XCM_H
#define CSDR1XCM_H

/*******************************************************************************
 1. Other files included
*******************************************************************************/

#include "uphy_type_define.h"
/* EDIT START */
#include "cproc1xapm.h"
/* EDIT END */
#include "csdr1x.h"
#include "csdr1xcttfcproc.h"

#ifdef __cplusplus
#if __cplusplus
    extern "C" {
#endif /* __cpluscplus */
#endif /* __cpluscplus */
#pragma pack(4)

/*******************************************************************************
 2. Macro definitions
*******************************************************************************/

#define CSDR_1X_NUM_PCG_IN_FRAME                            ( 16 )
/**
 * Used when no RPCH gating shall take place
 */
#define CSDR_1X_NO_RPCH_GATING                              ( 0xffff )
#define CSDR_1X_SEND_ESTABLISHMENT_PREAMBLE_FLAG            ( 0xFFFF )
#define CSDR_1X_MAX_NUM_SCH_RATES                           ( 1 )
/**
 * Max nbr of sets of decoding parameters
 */
#define CSDR_1X_MAX_CODING_INDEX_NUM                        ( 4 )
/**
 * Nbr of supported SCH
 */
#define CSDR_1X_SUPPORT_SCH_NUM                             ( 1 )
#define CSDR_1X_SUPPORT_SCCH_NUM                            ( 1 )
/**
 * Max no of forward channels configured using one signal
 */
#define CSDR_1X_MAX_NUM_FWD_CHANNEL                         ( 4 )
/**
 * Max Nbr of channels in one release request.
 */
#define CSDR_1X_MAX_RELEASE_CHANNELS                        ( 12 )
#define CSDR_1X_ACTION_TIME_NOW_32                          ( 0xFFFFFFFF )
/**
 * Max number of reverse channels configured using one signal
 */
#define CSDR_1X_MAX_NUM_REV_CHANNEL                         ( 3 )
#define CSDR_1X_MAX_MODE_SPECIFIC_EACH_PARAMS               ( 8 )
#define CSDR_1X_MAX_NUM_FCH_RATES                           ( 4 )
#define CSDR_1X_MAX_FRAMES_IN_FER                           ( 4 )
#define CSDR_1X_MAX_SCCH_PILOTS                             ( 6 )
#define CSDR_1X_MAX_SCH_CONFIGS                             ( 1 )

/*******************************************************************************
 3. Enumerations declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : CSDR1XCM_MSG_TYPE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR1XCM_MSG_TYPE_ENUM
{
    ID_CPROC_CSDR_1X_LONG_CODE_REQ                          = 0x0040, /**< @sa CPROC_CSDR_1X_LONG_CODE_REQ_STRU */
    ID_CPROC_CSDR_1X_RTCH_HALT_REQ                          = 0x0041, /**< @sa CPROC_CSDR_1X_RTCH_HALT_REQ_STRU */
    ID_CPROC_CSDR_1X_RTCH_RESUME_REQ                        = 0x0042, /**< @sa CPROC_CSDR_1X_RTCH_RESUME_REQ_STRU */
    ID_CPROC_CSDR_1X_SLEEP_REQ                              = 0x0043, /**< @sa CPROC_CSDR_1X_SLEEP_REQ_STRU */
    ID_CSDR_CPROC_1X_SLEEP_IND                              = 0x0044, /**< @sa CSDR_CPROC_1X_SLEEP_IND_STRU */
    ID_CPROC_CSDR_1X_RF_ENVIRONMENT_REQ                     = 0x0045, /**< @sa CPROC_CSDR_1X_RF_ENVIRONMENT_REQ_STRU */
    ID_CPROC_CSDR_1X_SET_WORK_MODE_REQ                      = 0x0046, /**< @sa CPROC_CSDR_1X_SET_WORK_MODE_REQ_STRU */
    ID_CSDR_CPROC_1X_SET_WORK_MODE_CNF                      = 0x0047, /**< @sa CSDR_CPROC_1X_SET_WORK_MODE_CNF_STRU */
    ID_CSDR_CPROC_1X_ACTION_IND                             = 0x0048, /**< @sa CSDR_CPROC_1X_ACTION_IND_STRU */
    ID_CPROC_CSDR_1X_SET_TIMING_REQ                         = 0x0049, /**< @sa CPROC_CSDR_1X_SET_TIMING_REQ_STRU */
    ID_CSDR_CPROC_1X_SET_TIMING_CNF                         = 0x004A, /**< @sa CSDR_CPROC_1X_SET_TIMING_CNF_STRU */
    ID_CSDR_CPROC_1X_QPCH_IND                               = 0x004F, /**< @sa CSDR_CPROC_1X_QPCH_IND_STRU */
    ID_CSDR_CPROC_1X_WAKEUP_IND                             = 0x0050, /**< @sa CSDR_CPROC_1X_WAKEUP_IND_STRU */
    ID_CSDR_CPROC_1X_PUF_IND                                = 0x0051, /**< @sa CSDR_CPROC_1X_PUF_IND_STRU */
    ID_CPROC_CSDR_1X_POWER_CONTROL_CONFIG_REQ               = 0x0052, /**< @sa CPROC_CSDR_1X_POWER_CONTROL_CONFIG_REQ_STRU */
    ID_CPROC_CSDR_1X_F_CHANNEL_CONFIG_REQ                   = 0x0053, /**< @sa CPROC_CSDR_1X_F_CHANNEL_CONFIG_REQ_STRU */
    ID_CSDR_CPROC_1X_F_CHANNEL_CONFIG_CNF                   = 0x0054, /**< @sa CSDR_CPROC_1X_F_CHANNEL_CONFIG_CNF_STRU */
    ID_CPROC_CSDR_1X_R_CHANNEL_CONFIG_REQ                   = 0x0055, /**< @sa CPROC_CSDR_1X_R_CHANNEL_CONFIG_REQ_STRU */
    ID_CSDR_CPROC_1X_R_CHANNEL_CONFIG_CNF                   = 0x0056, /**< @sa CSDR_CPROC_1X_R_CHANNEL_CONFIG_CNF_STRU */
    ID_CPROC_CSDR_1X_CHANNEL_RELEASE_REQ                    = 0x0057, /**< @sa CPROC_CSDR_1X_CHANNEL_RELEASE_REQ_STRU */
    ID_CSDR_CPROC_1X_CHANNEL_RELEASE_CNF                    = 0x0058, /**< @sa CSDR_CPROC_1X_CHANNEL_RELEASE_CNF_STRU */
    ID_CSDR_CPROC_1X_FER_MEAS_REPORT_IND                    = 0x0059, /**< @sa CSDR_CPROC_1X_FER_MEAS_REPORT_IND_STRU */
    ID_CPROC_CSDR_1X_CM_RELEASE_ALL_REQ                     = 0x005A, /**< @sa CPROC_CSDR_1X_CM_RELEASE_ALL_REQ_STRU */
    ID_CSDR_CPROC_1X_CM_RELEASE_ALL_CNF                     = 0x005B, /**< @sa CSDR_CPROC_1X_CM_RELEASE_ALL_CNF_STRU */
    ID_CPROC_CSDR_1X_OLPC_SETPOINT_CFG_REQ                  = 0x005C, /**< @sa CPROC_CSDR_1X_OLPC_SETPOINT_CFG_REQ_STRU */
    ID_CPROC_CSDR_1X_GAP_REQ                                = 0x005D, /**< @sa CPROC_CSDR_1X_GAP_REQ_STRU */
    ID_CSDR_CPROC_1X_GAIN_IND                               = 0x005E, /**< @sa CSDR_CPROC_1X_GAIN_IND_STRU */
    ID_CPROC_CSDR_1X_SET_MESSAGE_MODE_REQ                   = 0x005F, /**< @sa CPROC_CSDR_1X_SET_MESSAGE_MODE_REQ_STRU */
    ID_CSDR_CPROC_1X_SET_MESSAGE_MODE_CNF                   = 0x0060, /**< @sa CSDR_CPROC_1X_SET_MESSAGE_MODE_CNF_STRU */
    ID_CSDR_CPROC_1X_LONG_CODE_CNF                          = 0x0061, /**< @sa CSDR_CPROC_1X_LONG_CODE_CNF_STRU */
    ID_CSDR_CPROC_1X_POWER_CONTROL_CONFIG_CNF               = 0x0062, /**< @sa CSDR_CPROC_1X_POWER_CONTROL_CONFIG_CNF_STRU */
    ID_CPROC_CSDR_1X_QPCH_CFG_REQ                           = 0x0063, /**< @sa CPROC_CSDR_1X_QPCH_CFG_REQ_STRU */
    ID_CSDR_CPROC_1X_QPCH_CFG_CNF                           = 0x0064, /**< @sa CSDR_CPROC_1X_QPCH_CFG_CNF_STRU */
    ID_CSDR_CPROC_1X_ERROR_IND                              = 0x0065, /**< @sa CSDR_CPROC_1X_ERROR_IND_STRU */
    ID_CPROC_CSDR_1X_ACTIVE_REQ                             = 0x0066, /**< @sa CPROC_CSDR_1X_ACTIVE_REQ_STRU */
    ID_CSDR_CPROC_1X_ACTIVE_IND                             = 0x0067, /**< @sa CSDR_CPROC_1X_ACTIVE_IND_STRU */
    ID_CPROC_CSDR_1X_AFC_PPM_REQ                            = 0x0068, /**< @sa CPROC_CSDR_1X_AFC_PPM_REQ_STRU */
    ID_CSDR_CPROC_1X_AFC_PPM_IND                            = 0x0069, /**< @sa CSDR_CPROC_1X_AFC_PPM_IND_STRU */
    ID_CSDR1XCM_MSG_TYPE_ENUM_BUTT                          = 0xFFFF
};
typedef PHY_UINT16 CSDR1XCM_MSG_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_QPCH_INDICATOR_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_1X_QPCH_INDICATOR_ENUM
{
    CSDR_1X_QPCH_INDICATOR_NOT_SET      = 0x0000,
    CSDR_1X_QPCH_INDICATOR_SET          = 0x0001,
    CSDR_1X_QPCH_INDICATOR_UNRELIABLE   = 0x0002,
    CSDR_1X_QPCH_INDICATOR_BUTT         = 0x0003
};
typedef PHY_UINT16 CSDR_1X_QPCH_INDICATOR_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_QPCH_TYPE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_1X_QPCH_TYPE_ENUM
{
    CSDR_1X_QPCH_TYPE_PI                = 0x0000,
    CSDR_1X_QPCH_TYPE_BI                = 0x0001,
    CSDR_1X_QPCH_TYPE_CCI               = 0x0002,
    CSDR_1X_QPCH_TYPE_BUTT              = 0x0003
};
typedef PHY_UINT16 CSDR_1X_QPCH_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_MESSAGE_MODE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_1X_MESSAGE_MODE_ENUM
{
    CSDR_1X_MESSAGE_MODE_PERIODIC       = 0x0000,
    CSDR_1X_MESSAGE_MODE_EVENT          = 0x0001,
    CSDR_1X_MESSAGE_MODE_BUTT           = 0x0002
};
typedef PHY_UINT16 CSDR_1X_MESSAGE_MODE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_RFCH_TYPE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_1X_RFCH_TYPE_ENUM
{
    CSDR_1X_RFCH_TYPE_NORMAL            = 0x0000,
    CSDR_1X_RFCH_TYPE_PUF               = 0x0001,
    CSDR_1X_RFCH_TYPE_BUTT              = 0x0002
};
typedef PHY_UINT16 CSDR_1X_RFCH_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_RPCH_TYPE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_1X_RPCH_TYPE_ENUM
{
    CSDR_1X_RPCH_TYPE_FPC               = 0x0000,
    CSDR_1X_RPCH_TYPE_EIB               = 0x0001,
    CSDR_1X_RPCH_TYPE_QIB               = 0x0002,
    CSDR_1X_RPCH_TYPE_INVALID           = 0x0003,
    CSDR_1X_RPCH_TYPE_BUTT              = 0x0004
};
typedef PHY_UINT16 CSDR_1X_RPCH_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_BLANKING_DUTYCYCLE_ENUM_UINT16
 *
 * Description : This enum tells the forward and reverse blanking duty cycles.
 *******************************************************************************/
enum CSDR_1X_BLANKING_DUTYCYCLE_ENUM
{
    CSDR_1X_BLANKING_DUTYCYCLE_1        = 0x0000, /**< Blanking disabled */
    CSDR_1X_BLANKING_DUTYCYCLE_4        = 0x0001, /**< At least 1 of 4 frames transmitted */
    CSDR_1X_BLANKING_DUTYCYCLE_8        = 0x0002, /**< At least 1 of 8 frames transmitted */
    CSDR_1X_BLANKING_DUTYCYCLE_BUTT     = 0x0003
};
typedef PHY_UINT16 CSDR_1X_BLANKING_DUTYCYCLE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_SCH_CODING_TYPE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_1X_SCH_CODING_TYPE_ENUM
{
    CSDR_1X_SCH_CODING_TYPE_CONVOLUTIONAL                   = 0x0000,
    CSDR_1X_SCH_CODING_TYPE_CONVOLUTIONAL_OR_TURBO          = 0x0001,
    CSDR_1X_SCH_CODING_TYPE_BUTT                            = 0x0002
};
typedef PHY_UINT16 CSDR_1X_SCH_CODING_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_GATING_RATE_ENUM_UINT16
 *
 * Description : PILOT_GATING_RATE in C.S0005-Av6.0
 *******************************************************************************/
enum CSDR_1X_GATING_RATE_ENUM
{
    CSDR_1X_GATING_RATE_1               = 0x0000, /**< Gating Rate = 1 */
    CSDR_1X_GATING_RATE_1_2             = 0x0001, /**< Gating Rate = 1/2 */
    CSDR_1X_GATING_RATE_1_4             = 0x0002, /**< Gating Rate = 1/4 */
    CSDR_1X_GATING_RATE_BUTT            = 0x0003
};
typedef PHY_UINT16 CSDR_1X_GATING_RATE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_TIMING_UPDATE_SPEED_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_1X_TIMING_UPDATE_SPEED_ENUM
{
    CSDR_1X_TIMING_UPDATE_SPEED_SLOW    = 0x0000, /**< Update at most 1 qchip per 200ms */
    CSDR_1X_TIMING_UPDATE_SPEED_FAST    = 0x0001, /**< Update in one shot */
    CSDR_1X_TIMING_UPDATE_SPEED_BUTT    = 0x0002
};
typedef PHY_UINT16 CSDR_1X_TIMING_UPDATE_SPEED_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_CHANNEL_TYPE_ENUM_UINT16
 *
 * Description : This is an ENUM for conveying channel type. The individual
 * values are identical to the ones between CPROC and CAS, except for
 * CSDR_1X_CHANNEL_TYPE_F_SYNC, which is not present in the corresponding Enum
 * between CPROC and CAS (there, this is PHYCH_NONE).
 *******************************************************************************/
enum CSDR_1X_CHANNEL_TYPE_ENUM
{
    CSDR_1X_CHANNEL_TYPE_F_SYNC         = 0x0000,
    CSDR_1X_CHANNEL_TYPE_F_QPCH         = 0x0001,
    CSDR_1X_CHANNEL_TYPE_F_PCH          = 0x0002,
    CSDR_1X_CHANNEL_TYPE_F_CCCH         = 0x0003,
    CSDR_1X_CHANNEL_TYPE_F_BCCH         = 0x0004,
    CSDR_1X_CHANNEL_TYPE_F_FCH          = 0x0005,
    CSDR_1X_CHANNEL_TYPE_F_SCCH         = 0x0006,
    CSDR_1X_CHANNEL_TYPE_F_SCH          = 0x0007,
    CSDR_1X_CHANNEL_TYPE_F_DCCH         = 0x0008,
    CSDR_1X_CHANNEL_TYPE_R_ACH          = 0x0009,
    CSDR_1X_CHANNEL_TYPE_R_EACH         = 0x000A,
    CSDR_1X_CHANNEL_TYPE_R_FCH          = 0x000B,
    CSDR_1X_CHANNEL_TYPE_R_SCCH         = 0x000C,
    CSDR_1X_CHANNEL_TYPE_R_SCH          = 0x000D,
    CSDR_1X_CHANNEL_TYPE_R_DCCH         = 0x000E,
    CSDR_1X_CHANNEL_TYPE_BUTT           = 0x000F
};
typedef PHY_UINT16 CSDR_1X_CHANNEL_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_PWRCTRL_CHANNEL_TYPE_ENUM_UINT16
 *
 * Description : This is an ENUM for conveying channel type. The individual
 * values shall be identical to those of CSDR_1X_CHANNEL_TYPE_ENUM_UINT16. The
 * reason for this ENUM is to get ASN to work correctly.
 *******************************************************************************/
enum CSDR_1X_PWRCTRL_CHANNEL_TYPE_ENUM
{
    CSDR_1X_PWRCTRL_CHANNEL_TYPE_F_SYNC = 0x0000,
    CSDR_1X_PWRCTRL_CHANNEL_TYPE_F_QPCH = 0x0001,
    CSDR_1X_PWRCTRL_CHANNEL_TYPE_F_PCH  = 0x0002,
    CSDR_1X_PWRCTRL_CHANNEL_TYPE_F_CCCH = 0x0003,
    CSDR_1X_PWRCTRL_CHANNEL_TYPE_F_BCCH = 0x0004,
    CSDR_1X_PWRCTRL_CHANNEL_TYPE_F_FCH  = 0x0005,
    CSDR_1X_PWRCTRL_CHANNEL_TYPE_F_SCCH = 0x0006,
    CSDR_1X_PWRCTRL_CHANNEL_TYPE_F_SCH  = 0x0007,
    CSDR_1X_PWRCTRL_CHANNEL_TYPE_F_DCCH = 0x0008,
    CSDR_1X_PWRCTRL_CHANNEL_TYPE_R_ACH  = 0x0009,
    CSDR_1X_PWRCTRL_CHANNEL_TYPE_R_EACH = 0x000A,
    CSDR_1X_PWRCTRL_CHANNEL_TYPE_R_FCH  = 0x000B,
    CSDR_1X_PWRCTRL_CHANNEL_TYPE_R_SCCH = 0x000C,
    CSDR_1X_PWRCTRL_CHANNEL_TYPE_R_SCH  = 0x000D,
    CSDR_1X_PWRCTRL_CHANNEL_TYPE_R_DCCH = 0x000E,
    CSDR_1X_PWRCTRL_CHANNEL_TYPE_BUTT   = 0x000F
};
typedef PHY_UINT16 CSDR_1X_PWRCTRL_CHANNEL_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_R_CHANNEL_TYPE_ENUM_UINT16
 *
 * Description : This is an ENUM for conveying channel type. The individual
 * values shall be identical to those of CSDR_1X_CHANNEL_TYPE_ENUM_UINT16. The
 * reason for this ENUM is to get ASN to work correctly.
 *******************************************************************************/
enum CSDR_1X_R_CHANNEL_TYPE_ENUM
{
    CSDR_1X_R_CHANNEL_TYPE_F_SYNC       = 0x0000,
    CSDR_1X_R_CHANNEL_TYPE_F_QPCH       = 0x0001,
    CSDR_1X_R_CHANNEL_TYPE_F_PCH        = 0x0002,
    CSDR_1X_R_CHANNEL_TYPE_F_CCCH       = 0x0003,
    CSDR_1X_R_CHANNEL_TYPE_F_BCCH       = 0x0004,
    CSDR_1X_R_CHANNEL_TYPE_F_FCH        = 0x0005,
    CSDR_1X_R_CHANNEL_TYPE_F_SCCH       = 0x0006,
    CSDR_1X_R_CHANNEL_TYPE_F_SCH        = 0x0007,
    CSDR_1X_R_CHANNEL_TYPE_F_DCCH       = 0x0008,
    CSDR_1X_R_CHANNEL_TYPE_R_ACH        = 0x0009,
    CSDR_1X_R_CHANNEL_TYPE_R_EACH       = 0x000A,
    CSDR_1X_R_CHANNEL_TYPE_R_FCH        = 0x000B,
    CSDR_1X_R_CHANNEL_TYPE_R_SCCH       = 0x000C,
    CSDR_1X_R_CHANNEL_TYPE_R_SCH        = 0x000D,
    CSDR_1X_R_CHANNEL_TYPE_R_DCCH       = 0x000E,
    CSDR_1X_R_CHANNEL_TYPE_BUTT         = 0x000F
};
typedef PHY_UINT16 CSDR_1X_R_CHANNEL_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_TCH_CHANNEL_ENUM_UINT16
 *
 * Description : This Enum is used in TCH only, and can convey that zero, one
 * or two channels are active.
 *******************************************************************************/
enum CSDR_1X_TCH_CHANNEL_ENUM
{
    CSDR_1X_TCH_CHANNEL_NONE            = 0x0000,
    CSDR_1X_TCH_CHANNEL_FCH             = 0x0001,
    CSDR_1X_TCH_CHANNEL_DCCH            = 0x0002,
    CSDR_1X_TCH_CHANNEL_FCH_DCCH        = 0x0003,
    CSDR_1X_TCH_CHANNEL_BUTT            = 0x0004
};
typedef PHY_UINT16 CSDR_1X_TCH_CHANNEL_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_CODE_TYPE_ENUM_UINT16
 *
 * Description : This is an ENUM for conveying the code type.
 *******************************************************************************/
#if 0
enum CSDR_1X_CODE_TYPE_ENUM
{
    CSDR_1X_CODE_TYPE_CONVOLUTIONAL     = 0x0000,
    CSDR_1X_CODE_TYPE_TURBO             = 0x0001,
    CSDR_1X_CODE_TYPE_ENUM_BUTT         = 0x0002
};
typedef PHY_UINT16 CSDR_1X_CODE_TYPE_ENUM_UINT16;
#endif

/** ****************************************************************************
 * Name        : CSDR_1X_RATE_VAR_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_1X_RATE_VAR_ENUM
{
    CSDR_1X_RATE_VAR_FULL               = 0x0000, /**< Rate 1 */
    CSDR_1X_RATE_VAR_HALF               = 0x0001, /**< Rate 1/2 */
    CSDR_1X_RATE_VAR_QTR                = 0x0002, /**< Rate 1/4 */
    CSDR_1X_RATE_VAR_EIGHTH             = 0x0003, /**< Rate 1/8 */
    CSDR_1X_RATE_VAR_BUTT               = 0x0004
};
typedef PHY_UINT16 CSDR_1X_RATE_VAR_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_QPCH_IND_ENUM_UINT16
 *
 * Description : This enum tells which kind of indicator was received and if it
 * was set or not.
 *******************************************************************************/
enum CSDR_1X_QPCH_IND_ENUM
{
    CSDR_1X_QPCH_IND_PI_SET             = 0x0000,
    CSDR_1X_QPCH_IND_PI_NOT_SET         = 0x0001,
    CSDR_1X_QPCH_IND_BI_SET             = 0x0002,
    CSDR_1X_QPCH_IND_BI_NOT_SET         = 0x0003,
    CSDR_1X_QPCH_IND_CCI_SET            = 0x0004,
    CSDR_1X_QPCH_IND_CCI_NOT_SET        = 0x0005,
    CSDR_1X_QPCH_IND_BUTT               = 0x0006
};
typedef PHY_UINT16 CSDR_1X_QPCH_IND_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_QPCH_RATE_ENUM_UINT16
 *
 * Description : This enum tells the rate on the QPCH.
 *******************************************************************************/
enum CSDR_1X_QPCH_RATE_ENUM
{
    CSDR_1X_QPCH_RATE_4800              = 0x0000,
    CSDR_1X_QPCH_RATE_9600              = 0x0001,
    CSDR_1X_QPCH_RATE_BUTT              = 0x0002
};
typedef PHY_UINT16 CSDR_1X_QPCH_RATE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_PCH_RATE_ENUM_UINT16
 *
 * Description : This enum tells the rate on the PCH.
 *******************************************************************************/
enum CSDR_1X_PCH_RATE_ENUM
{
    CSDR_1X_PCH_RATE_4800               = 0x0000,
    CSDR_1X_PCH_RATE_9600               = 0x0001,
    CSDR_1X_PCH_RATE_BUTT               = 0x0002
};
typedef PHY_UINT16 CSDR_1X_PCH_RATE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_CCCH_RATE_ENUM_UINT16
 *
 * Description : This enum tells the rate on the CCCH.
 *******************************************************************************/
enum CSDR_1X_CCCH_RATE_ENUM
{
    CSDR_1X_CCCH_RATE_9600_20ms         = 0x0000,
    CSDR_1X_CCCH_RATE_19200_20ms        = 0x0001,
    CSDR_1X_CCCH_RATE_19200_10ms        = 0x0002,
    CSDR_1X_CCCH_RATE_38400_20ms        = 0x0003,
    CSDR_1X_CCCH_RATE_38400_10ms        = 0x0004,
    CSDR_1X_CCCH_RATE_38400_5ms         = 0x0005,
    CSDR_1X_CCCH_RATE_BUTT              = 0x0006
};
typedef PHY_UINT16 CSDR_1X_CCCH_RATE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_CCCH_CODE_RATE_ENUM_UINT16
 *
 * Description : This enum tells the code rate on the CCCH.
 *******************************************************************************/
enum CSDR_1X_CCCH_CODE_RATE_ENUM
{
    CSDR_1X_CCCH_CODE_RATE_1_4          = 0x0000, /**< 1/4 code rate */
    CSDR_1X_CCCH_CODE_RATE_1_2          = 0x0001, /**< 1/2 code rate */
    CSDR_1X_CCCH_CODE_RATE_BUTT         = 0x0002
};
typedef PHY_UINT16 CSDR_1X_CCCH_CODE_RATE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_BCCH_RATE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_1X_BCCH_RATE_ENUM
{
    CSDR_1X_BCCH_RATE_4800              = 0x0000, /**< // 160ms */
    CSDR_1X_BCCH_RATE_9600              = 0x0001, /**< // 80ms */
    CSDR_1X_BCCH_RATE_19200             = 0x0002, /**< // 40ms */
    CSDR_1X_BCCH_RATE_BUTT              = 0x0003
};
typedef PHY_UINT16 CSDR_1X_BCCH_RATE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_BCCH_CODE_RATE_ENUM_UINT16
 *
 * Description : This enum tells the code rate on the BCCH.
 *******************************************************************************/
enum CSDR_1X_BCCH_CODE_RATE_ENUM
{
    CSDR_1X_BCCH_CODE_RATE_1_4          = 0x0000, /**< 1/4 code rate */
    CSDR_1X_BCCH_CODE_RATE_1_2          = 0x0001, /**< 1/2 code rate */
    CSDR_1X_BCCH_CODE_RATE_BUTT         = 0x0002
};
typedef PHY_UINT16 CSDR_1X_BCCH_CODE_RATE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_SCH_FRAME_SIZE_ENUM_UINT16
 *
 * Description : This enum tells the frame size on the SCH.
 *******************************************************************************/
enum CSDR_1X_SCH_FRAME_SIZE_ENUM
{
    CSDR_1X_SCH_FRAME_SIZE_20MS         = 0x0000,
    CSDR_1X_SCH_FRAME_SIZE_40MS         = 0x0001,
    CSDR_1X_SCH_FRAME_SIZE_80MS         = 0x0002,
    CSDR_1X_SCH_FRAME_SIZE_BUTT         = 0x0003
};
typedef PHY_UINT16 CSDR_1X_SCH_FRAME_SIZE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_FCH_FRAME_SIZE_ENUM_UINT16
 *
 * Description : This enum tells the frame size on the FCH.
 *******************************************************************************/
enum CSDR_1X_FCH_FRAME_SIZE_ENUM
{
    CSDR_1X_FCH_FRAME_SIZE_20MS         = 0x0000,
    CSDR_1X_FCH_FRAME_SIZE_5MS_20MS     = 0x0001,
    CSDR_1X_FCH_FRAME_SIZE_BUTT         = 0x0002
};
typedef PHY_UINT16 CSDR_1X_FCH_FRAME_SIZE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_DCCH_FRAME_SIZE_ENUM_UINT16
 *
 * Description : This enum tells the frame size on the DCCH.
 *******************************************************************************/
enum CSDR_1X_DCCH_FRAME_SIZE_ENUM
{
    CSDR_1X_DCCH_FRAME_SIZE_5MS         = 0x0000,
    CSDR_1X_DCCH_FRAME_SIZE_20MS        = 0x0001,
    CSDR_1X_DCCH_FRAME_SIZE_5MS_20MS    = 0x0002,
    CSDR_1X_DCCH_FRAME_SIZE_BUTT        = 0x0003
};
typedef PHY_UINT16 CSDR_1X_DCCH_FRAME_SIZE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_CCCH_FRAME_SIZE_ENUM_UINT16
 *
 * Description : This enum tells the frame size on the CCCH.
 *******************************************************************************/
enum CSDR_1X_CCCH_FRAME_SIZE_ENUM
{
    CSDR_1X_CCCH_FRAME_SIZE_5MS         = 0x0000,
    CSDR_1X_CCCH_FRAME_SIZE_10MS        = 0x0001,
    CSDR_1X_CCCH_FRAME_SIZE_20MS        = 0x0002,
    CSDR_1X_CCCH_FRAME_SIZE_BUTT        = 0x0003
};
typedef PHY_UINT16 CSDR_1X_CCCH_FRAME_SIZE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_BCCH_FRAME_SIZE_ENUM_UINT16
 *
 * Description : This enum tells the frame size on the BCCH.
 *******************************************************************************/
enum CSDR_1X_BCCH_FRAME_SIZE_ENUM
{
    CSDR_1X_BCCH_FRAME_SIZE_40MS        = 0x0000,
    CSDR_1X_BCCH_FRAME_SIZE_80MS        = 0x0001,
    CSDR_1X_BCCH_FRAME_SIZE_160MS       = 0x0002,
    CSDR_1X_BCCH_FRAME_SIZE_BUTT        = 0x0003
};
typedef PHY_UINT16 CSDR_1X_BCCH_FRAME_SIZE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_PRIMARY_FPC_ENUM_UINT16
 *
 * Description : This enum tells which channel is the primary channel for
 * forward power control.
 *******************************************************************************/
enum CSDR_1X_PRIMARY_FPC_ENUM
{
    CSDR_1X_PRIMARY_FPC_FCH             = 0x0000,
    CSDR_1X_PRIMARY_FPC_DCCH            = 0x0001,
    CSDR_1X_PRIMARY_FPC_BUTT            = 0x0002
};
typedef PHY_UINT16 CSDR_1X_PRIMARY_FPC_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_CODE_RATE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_1X_CODE_RATE_ENUM
{
    CSDR_1X_SDRC_CODE_RATE_1_4          = 0x0000,
    CSDR_1X_SDRC_CODE_RATE_1_2          = 0x0001,
    CSDR_1X_SDRC_CODE_RATE_BUTT         = 0x0002
};
typedef PHY_UINT16 CSDR_1X_CODE_RATE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_GATING_ENUM_UINT16
 *
 * Description : This enum tells the gating mode.
 *******************************************************************************/
enum CSDR_1X_GATING_ENUM
{
    CSDR_1X_GATING_OFF                  = 0x0000,
    CSDR_1X_GATING_ON                   = 0x0001,
    CSDR_1X_GATING_BUTT                 = 0x0002
};
typedef PHY_UINT16 CSDR_1X_GATING_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_SLEEP_MODE_ENUM_UINT16
 *
 * Description : The enum tills the type of sleep mode to go to.
 *******************************************************************************/
enum CSDR_1X_SLEEP_MODE_ENUM
{
    CSDR_1X_SLEEP_MODE_DEEP_SLEEP       = 0x0000, /**< Used in slotted mode */
    CSDR_1X_SLEEP_MODE_SLAVE_SLEEP      = 0x0001, /**< Used in slave mode */
    CSDR_1X_SLEEP_MODE_BUTT             = 0x0002
};
typedef PHY_UINT16 CSDR_1X_SLEEP_MODE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_CHANNEL_QUAL_ENUM_UINT16
 *
 * Description : This is an ENUM for conveying common channel quality.
 * Note: not used anywhere at the moment. Pending design of "insufficient PCH
 * quality".
 *******************************************************************************/
enum CSDR_1X_CHANNEL_QUAL_ENUM
{
    CSDR_1X_QUAL_GOOD                                       = 0x0000,
    CSDR_1X_QUAL_INSUFFICIENT                               = 0x0001,
    CSDR_1X_QUAL_INSUFFICIENT_RATE_KNOWN                    = 0x0002,
    CSDR_1X_QUAL_BUTT                                       = 0x0003
};
typedef PHY_UINT16 CSDR_1X_CHANNEL_QUAL_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_DEFAULT_RLAG_ENUM_UINT16
 *
 * Description : This is an ENUM for the Reverse Link Attribute Gain to be used
 * after handoff. See DEFAULT_RLAG in C-S0005.
 *******************************************************************************/
enum CSDR_1X_DEFAULT_RLAG_ENUM
{
    CSDR_1X_DEFAULT_RLAG_ENUM_DO_NOT_USE_DEFAULT_AG         = 0x0000,
    CSDR_1X_DEFAULT_RLAG_ENUM_USE_DEFAULT_AG                = 0x0001,
    CSDR_1X_DEFAULT_RLAG_ENUM_BUTT                          = 0x0002
};
typedef PHY_UINT16 CSDR_1X_DEFAULT_RLAG_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_GAP_TYPE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_1X_GAP_TYPE_ENUM
{
    CSDR_1X_GAP_TYPE_FWD                = 0x0000,
    CSDR_1X_GAP_TYPE_REV                = 0x0001,
    CSDR_1X_GAP_TYPE_BOTH               = 0x0002,
    CSDR_1X_GAP_TYPE_BUTT               = 0x0003
};
typedef PHY_UINT16 CSDR_1X_GAP_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_AFC_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_1X_AFC_ENUM
{
    CSDR_1X_AFC_NOT_LOCKED              = 0x0000,
    CSDR_1X_AFC_LOCKED                  = 0x0001,
    CSDR_1X_AFC_BUTT                    = 0x0002
};
typedef PHY_UINT16 CSDR_1X_AFC_ENUM_UINT16;

/*******************************************************************************
 4. Message Header declaration
*******************************************************************************/

/*******************************************************************************
 5. Message declaration
*******************************************************************************/

/*******************************************************************************
 6. STRUCT and UNION declaration
*******************************************************************************/

/** ****************************************************************************
 * Name        : CSDR_1X_OLPC_SCH_STRU
 *
 * Description : Open Loop Power Control Parameter Configuration for F-SCH.
 * Data from CPROC_1X_OLPC_SCH_CFG_STRU in
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwSchInd;    /**< 0..1, SCH Indicator SCH_ID */
    PHY_UINT16                          uhwReserved1; /**< 32 bit alignment */
    PHY_INT32                           swSetPoint;   /**< -2097152..2080768, resolution 1/16384dB. OLPC setpoint for F-SCH */
} CSDR_1X_OLPC_SCH_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_F_SYNC_PARA_STRU
 *
 * Description : Parameters for F-SYNC read. At neighbor F-SYNC read the PN
 * offset is given. After initial pilot search, the PN offset is not known, and
 * CSDR_1X_PN_INDEX_NOT_KNOWN is given.
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwConfigID; /**< 0..64/128, number given by L3 at each activation of F-SYNC */
    PHY_UINT16                          uhwPNIndex;  /**< 0..511, CSDR_1X_PN_INDEX_NOT_KNOWN, PNOffset to read SYNC from */
} CSDR_1X_F_SYNC_PARA_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_SCH_ACT_SET_INFO_STRU
 *
 * Description : Info from CPROC_1X_SCH_ACT_SET_INFO_STRU.
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwSchId;         /**< 0..1, FOR_SCH_ID */
    PHY_UINT16                          uhwWalshIndexSch; /**< 0..2047, CODE_CHAN_SCH */
    PHY_UINT16                          uhwQoFMaskIdSch;  /**< 0..3, QOF_MASK_ID_SCH */
    PHY_UINT16                          uhwReserved;      /**< 32 bit alignment */
} CSDR_1X_SCH_ACT_SET_INFO_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_NONFCH_DECODING_PARA_INFO_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwInfoLength; /**< Number of bits */
    PHY_UINT16                          uhwCRCLength;  /**< CRC length. 0,6,8,10,12,16,24 or 32 */
} CSDR_1X_NONFCH_DECODING_PARA_INFO_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_MODE_PARAMS_STRU
 *
 * Description : Info from CPROC_1X_MODE_PARA_STRU.
 *******************************************************************************/
typedef struct
{
    CSDR_1X_BOOL_ENUM_UINT16            enPreambleEnabled;       /**< C.S0005: EACH_PREAMBLE_ENABLED */
    PHY_UINT16                          uhwPreambleNumFrac;      /**< 0..15, C.S0005: EACH_PREAMBLE_NUM_FRAC */
    PHY_UINT16                          uhwPreambleFracDuration; /**< 0..15, C.S0005: EACH_PREAMBLE_FRAC_DURATION */
    PHY_UINT16                          uhwPreambleOffDuration;  /**< 0..15, C.S0005: EACH_PREAMBLE_OFF_DURATION */
    PHY_UINT16                          uhwPreambleAddDuration;  /**< 0..15, C.S0005: EACH_PREAMBLE_ADD_DURATION */
    PHY_UINT16                          uhwEachSlot;             /**< 0..63, C.S0005: EACH_SLOT */
    PHY_UINT16                          uhwEachSlotOffset1;      /**< 0..63, C.S0005: EACH_SLOT_OFFSET1 */
    PHY_UINT16                          uhwEachSlotOffset2;      /**< 0..63, C.S0005: EACH_SLOT_OFFSET2 */
} CSDR_1X_MODE_PARAMS_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_R_ACH_PARA_STRU
 *
 * Description : Parameterss from CPROC_1X_ACH_PARA_STRU.
 * Note: ACN removed. Comes from MAC, called RA.
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwConfigID; /**< 0..64/128, number given by L3 at each activation of ACH */
    PHY_UINT16                          uhwPNIndex;  /**< 0..511, PILOT_PN */
    PHY_UINT16                          uhwPCN;      /**< From CPROC_1X_PCH_PARA_STRU, Page channel number, part of ACH long code mask */
    PHY_UINT16                          uhwBaseId;   /**< 0..65535, Part of ACH long code mask. Remove? present from MAC */
} CSDR_1X_R_ACH_PARA_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_R_SCCH_PARA_STRU
 *
 * Description : No corresponding parameters in PROC-CAS interface.
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwConfigID;    /**< 0..64/128, number given by L3 at each activation of R-SCCH */
    PHY_UINT16                          uhwRC;          /**< Set to RC of R-FCH. If no FCH is configured set to RC of R-DCCH */
    PHY_UINT16                          uhwWalshLength; /**< Range? */
    PHY_UINT16                          uhwFrameOffset; /**< 0..15, resolution 1.25ms, FRAME_OFFSET */
} CSDR_1X_R_SCCH_PARA_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_R_SCH_CONFIG_STRU
 *
 * Description : Info from CPROC_1X_REV_SCH_INFO_STRU.
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwSCHId;    /**< 0..1, REV_SCH_ID */
    PHY_UINT16                          uhwWalshId;  /**< 0..1, REV_WALSH_ID, see table 3.7.3.3.2.37-1 */
    PHY_UINT16                          uhwRC;       /**< 3,4 Set to RC of R-FCH. REV_SCH_RC/SCH_RC */
    PHY_UINT16                          uhwReserved; /**< 32 bit aligmnet */
} CSDR_1X_R_SCH_CONFIG_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_ACH_PWR_CTRL_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwPwrStep;
    PHY_INT16                           shwPwrOffset; /**< Res 0,5dB, -217..-132, Calculated as sNomPwr-16*SNomPwrExt + PowerOffset (from table 2.1.2.3.1-1 in  C.S0002-Av6.0) */
    PHY_INT16                           shwInitPwr;   /**< Res 1dB, -16 .. 15. INIT_PWR */
    PHY_UINT16                          uhwReserved;  /**< 32 bit alignment */
} CSDR_1X_ACH_PWR_CTRL_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_EACH_PWR_PARAMS_STRU
 *
 * Description : Parameters from CPROC_1X_MODE_PARA_STRU
 *******************************************************************************/
typedef struct
{
    PHY_INT16                           shwPwrOffset;   /**< Res 0,5dB, -187..-132, Calculated as sNomPwr + PowerOffset (from table 2.1.2.3.1-1 in  C.S0002-Av6.0) */
    PHY_INT16                           shwInitPwr;     /**< Res 1dB, -16 .. 15. EACH_INIT_PWR */
    PHY_UINT16                          uhwEachPwrStep; /**< 0 .. 7. EACH_PWR_STEP */
    PHY_UINT16                          uhwReserved1;   /**< 32 bit alignment */
} CSDR_1X_EACH_PWR_PARAMS_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_REVERSE_CHANNEL_ADJ_GAIN_STRU
 *
 * Description : Reverse_Channel_Adjustment_Gain Table.
 *******************************************************************************/
typedef struct
{
    CSDR_1X_BOOL_ENUM_UINT16            enFchAdjFlag;   /**< TRUE if uhwFchAdjGain is valid */
    CSDR_1X_BOOL_ENUM_UINT16            enDcchAdjFlag;  /**< TRUE if uhwDcchAdjGain is valid */
    CSDR_1X_BOOL_ENUM_UINT16            enSch0AdjFlag;  /**< TRUE if uhwSch0AdjGain is valid */
    CSDR_1X_BOOL_ENUM_UINT16            enSch1AdjFlag;  /**< TRUE if uhwSch1AdjGain is valid */
    PHY_INT16                           shwFchAdjGain;  /**< -48..48, 0.125dB resolution. Offset from R PICH power for R FCH, FCH_CHAN_ADJ_GAIN */
    PHY_INT16                           shwDcchAdjGain; /**< -48..48, 0.125dB resolution. Offset from R PICH power for R DCCH*, DCCH_CHAN_ADJ_GAIN */
    PHY_INT16                           shwSch0AdjGain; /**< -48..48, 0.125dB resolution. Offset from R PICH power for R SCH0, SCH0_CHAN_ADJ_GAIN */
    PHY_INT16                           shwSch1AdjGain; /**< -48..48, 0.125dB resolution. Offset from R PICH power for R SCH1, SCH1_CHAN_ADJ_GAIN */
} CSDR_1X_REVERSE_CHANNEL_ADJ_GAIN_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_PILOT_QUALITY_STRU
 *
 * Description : The parameter shwEcIo shall be set as follows:
 * For the serving cell in non-TCH state, it shall be set to the ecIo of the
 * serving cell.
 * In TCH state, it shall be set to the TotalEcIo of the radio link set the
 * pilot belongs to (which will be the pilot EcIo if the pilot is the only one
 * in its radio link set).
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwPNIndex; /**< 0..511:The PNOffset of the pilot */
    PHY_INT16                           shwEcIo;    /**< See above. */
} CSDR_1X_PILOT_QUALITY_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_GAP_TIME_STRU
 *
 * Description : This struct carries time information about the CF gap. This
 * includes the start PCG of the frame the gap starts in and start PCG for the
 * first full frame after the gap.
 * All parameter are given in system time.
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhw5msFrameStartPcg;     /**< 0..63, in PCG */
    PHY_UINT16                          uhw5msNextFullFramePcg;  /**< 0..63, in PCG */
    PHY_UINT16                          uhw20msFrameStartPcg;    /**< 0..63, in PCG */
    PHY_UINT16                          uhw20msNextFullFramePcg; /**< 0..63, in PCG */
    PHY_UINT16                          uhw40msFrameStartPcg;    /**< 0..63, in PCG */
    PHY_UINT16                          uhw40msNextFullFramePcg; /**< 0..63, in PCG */
    PHY_UINT16                          uhw80msFrameStartPcg;    /**< 0..63, in PCG */
    PHY_UINT16                          uhw80msNextFullFramePcg; /**< 0..63, in PCG */
} CSDR_1X_GAP_TIME_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_GAP_GAIN_ADJ_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhw5msCorrPre;   /**< 0 or 18, in 1/8dB. 5ms frame before gap, set as in C.S0002-Ev3.0, 2.1.2.3.3.7 and 2.1.3.1.15.2 */
    PHY_UINT16                          uhw20msCorrPre;  /**< 0 or 10..28, in 1/8dB. 20ms frame before gap, set as in C.S0002-Ev3.0, 2.1.2.3.3.7 and 2.1.3.1.15.2 */
    PHY_UINT16                          uhw40msCorrPre;  /**< 0 or 9..31, in 1/8dB. SCH frame before gap, set as in C.S0002-Ev3.0, 2.1.2.3.3.7 and 2.1.3.1.15.2 */
    PHY_UINT16                          uhw80msCorrPre;  /**< 0 or 9..31, in 1/8dB. SCH frame before gap, set as in C.S0002-Ev3.0, 2.1.2.3.3.7 and 2.1.3.1.15.2 */
    PHY_UINT16                          uhw5msCorrPost;  /**< 0 or 18, in 1/8dB. 5ms frame after gap, set as in C.S0002-Ev3.0, 2.1.2.3.3.7 and 2.1.3.1.15.2 */
    PHY_UINT16                          uhw20msCorrPost; /**< 0 or 10..28, in 1/8dB. 20ms frame after gap, set as in C.S0002-Ev3.0, 2.1.2.3.3.7 and 2.1.3.1.15.2 */
    PHY_UINT16                          uhw40msCorrPost; /**< 0 or 9..31, in 1/8dB. SCH frame after gap, set as in C.S0002-Ev3.0, 2.1.2.3.3.7 and 2.1.3.1.15.2 */
    PHY_UINT16                          uhw80msCorrPost; /**< 0 or 9..31, in 1/8dB. SCH frame after gap, set as in C.S0002-Ev3.0, 2.1.2.3.3.7 and 2.1.3.1.15.2 */
} CSDR_1X_GAP_GAIN_ADJ_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_OLPC_SCH_CONFIG_STRU
 *
 * Description : Number of F-SCH and the Master F-SCH
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwMasterSchInd;                     /**< 0..1, FPC_SEC_CHAN */
    PHY_UINT16                          uhwSchNum;
    CSDR_1X_OLPC_SCH_STRU               astOlpcSch[CSDR_1X_SUPPORT_SCH_NUM];
} CSDR_1X_OLPC_SCH_CONFIG_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_F_QPCH_PARA_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwConfigID;       /**< 0..64/128, number given by L3 at each activation of QPCH */
    PHY_UINT16                          uhwPNIndex;
    PHY_UINT16                          uhwQPCN;           /**< QPCH channel number. 1->W80,128, 2->W48,128, 3->W112,128 */
    CSDR_1X_QPCH_RATE_ENUM_UINT16       enQpchRate;
    CSDR_1X_BOOL_ENUM_UINT16            enReceivePI;       /**< When set to true the PI(s) at position uhwPiPos shall be received */
    CSDR_1X_BOOL_ENUM_UINT16            enFirstPiAttempt;  /**< TRUE => first attempt in a QPCH slot, FALSE => second attempt, combine with result of first attempt. */
    PHY_UINT16                          uhwPiPcg;          /**< 0..63 PCG number relative to system time in which the PI shall be received */
    PHY_UINT16                          uhwPiPos;          /**< 0..5 (QPCH rate 4800) or 0..12 (QPCH rate 9600). PI bit position within a PCG */
    CSDR_1X_BOOL_ENUM_UINT16            enReceiveCCI;      /**< When set to true the CCI shall be received */
    CSDR_1X_BOOL_ENUM_UINT16            enFirstCciAttempt; /**< TRUE => first attempt in a QPCH slot, FALSE => second attempt, combine with result of first attempt. */
    PHY_UINT16                          uhwCciPcg;         /**< 0..63 PCG number relative to system time in which the CCI shall be received */
    CSDR_1X_BOOL_ENUM_UINT16            enReceiveBI;       /**< When set to true the BI shall be received */
    CSDR_1X_BOOL_ENUM_UINT16            enFirstBiAttempt;  /**< TRUE => first attempt in a QPCH slot, FALSE => second attempt, combine with result of first attempt. */
    PHY_UINT16                          uhwBiPcg;          /**< 0..63 PCG number relative to system time in which the BI shall be received */
} CSDR_1X_F_QPCH_PARA_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_ACTIVE_SET_STRU
 *
 * Description : Info from CPROC_1X_ACT_SET_INFO_PILOT_STRU.
 *******************************************************************************/
typedef struct
{
    CSDR_1X_TCH_CHANNEL_ENUM_UINT16     enTchChannelType;                             /**< FCH, DCCH, FCH and DCCH. */
    PHY_UINT16                          uhwPNIndex;                                   /**< 0..511 */
    CSDR_1X_BOOL_ENUM_UINT16            enPwrCombinInd;                               /**< Combine pwr ctrl with previous pilot? PWR_COMB_IND */
    PHY_UINT16                          uhwWalshIndexFch;                             /**< 0..2047, valid if enChannelType points out FCH. CODE_CHAN_FCH */
    PHY_UINT16                          uhwQofMaskIdFch;                              /**< 0..3, valid if enChannelType points out FCH. QOF_MASK_ID_FCH */
    PHY_UINT16                          uhwWalshIndexDcch;                            /**< 0..2047, valid if enChannelType points out DCCH. CODE_CHAN_DCCH */
    PHY_UINT16                          uhwQoFMaskIdDcch;                             /**< 0..3, valid if enChannelType points out DCCH. QOF_MASK_ID_DCCH */
    CSDR_1X_BOOL_ENUM_UINT16            enInSchActiveSetFlag;                         /**< is the pilot in the SCH active set ? */
    CSDR_1X_SCH_ACT_SET_INFO_STRU       astSchActSetInfo[CSDR_1X_SUPPORT_SCH_NUM];    /**< valid if pilot is in the SCH active set */
    PHY_UINT16                          auhwScchWalshIndex[CSDR_1X_SUPPORT_SCCH_NUM]; /**< 1..63, Code channel(s) to use on the SCCH. valid only if SCCH is active. From  SUP_CODE_CHAN or BASE_CODE_CHAN and channel number. */
    PHY_UINT16                          uhwReserved1;                                 /**< 32 bit alignment */
} CSDR_1X_ACTIVE_SET_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_FCH_DECODING_PARA_INFO_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CSDR_1X_RATE_VAR_ENUM_UINT16        enVarRateMode;
    PHY_UINT16                          uhwInfoLength; /**< Number of bits */
    PHY_UINT16                          uhwCRCLength;  /**< CRC length. 0,6,8,10,12,16,24 or 32 */
    PHY_UINT16                          uhwReserved;   /**< 32 bit alignment */
} CSDR_1X_FCH_DECODING_PARA_INFO_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_NONFCH_DECODING_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CSDR_1X_CODE_RATE_ENUM_UINT16                           enCodeRate;
    PHY_UINT16                                              uhwReserved1; /**< 32 bit alignment */
    CSDR_1X_NONFCH_DECODING_PARA_INFO_STRU                  stCodingPara;
} CSDR_1X_NONFCH_DECODING_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_R_DCCH_PARA_STRU
 *
 * Description : info from CPROC_1X_DCCH_PARA_STRU.
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwConfigID;    /**< 0..64/128, number given by L3 at each activation of R-DCCH */
    PHY_UINT16                          uhwRC;          /**< Reverse Link RC */
    CSDR_1X_DCCH_FRAME_SIZE_ENUM_UINT16 enFrameLength;  /**< 5, 20 , 5 or 20, DCCH_FRAME_SIZE */
    PHY_UINT16                          uhwFrameOffset; /**< 0..15, resolution 1.25ms, FRAME_OFFSET */
} CSDR_1X_R_DCCH_PARA_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_R_EACH_PARA_STRU
 *
 * Description : Info from CPROC_1X_EACH_PARA_STRU.
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwConfigID;                                          /**< 0..64/128, number given by L3 at each activation of R-EACH */
    PHY_UINT16                          uhwPNIndex;                                           /**< 0..511, PILOT_PN */
    PHY_INT16                           shwRlGainCommonPilot;                                 /**< -32 .. 31. Res. 0.125dB. RLGAIN_COMMON_PILOT */
    PHY_INT16                           shwIcThresh;                                          /**< 0 .. 15. IC_THRESH. */
    PHY_INT16                           shwIcMax;                                             /**< 0 .. 15. IC_MAX. */
    PHY_INT16                           uhwNumModeParams;                                     /**< 1 .. 8. NUM_MODE_PARM_REC + 1 */
    CSDR_1X_MODE_PARAMS_STRU            astModeParams[CSDR_1X_MAX_MODE_SPECIFIC_EACH_PARAMS];
} CSDR_1X_R_EACH_PARA_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_R_FCH_PARA_STRU
 *
 * Description : Info from CPROC_1X_FCH_PARA_STRU and
 * CPROC_1X_REV_POWER_CTRL_STRU.
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                                              uhwConfigID;               /**< 0..64/128, number given by L3 at each activation of R-FCH */
    PHY_UINT16                                              uhwRC;                     /**< Reverse Link RC */
    CSDR_1X_FCH_FRAME_SIZE_ENUM_UINT16                      enFrameLength;
    CSDR_1X_BOOL_ENUM_UINT16                                enRevFchGatingMode;        /**< C.S0005 REV_FCH_GATING_MODE */
    PHY_UINT16                                              uhwFrameOffset;            /**< 0..15, resolution 1.25ms, FRAME_OFFSET */
    CSDR_1X_BOOL_ENUM_UINT16                                enRevFchAckMaskFlag;       /**< Is usRevFchAckMask included ? */
    PHY_UINT16                                              uhwRevFchAckMask;          /**< 0..0xffff, REV_FCH_ACK_MASK. Only valid if uhwRC=8, and enRevFchAckMaskFlag is set */
    CSDR_1X_BLANKING_DUTYCYCLE_ENUM_UINT16                  enRevFchBlankingDutycycle; /**< REV_FCH_BLANKING_DUTYCYCLE, Only valid if uhwRC=8 */
    CSDR_1X_RFCH_TYPE_ENUM_UINT16                           enRfchOrPuf;               /**< Normal transmission or PUF pulse? */
    PHY_UINT16                                              uhwPufSetupSize;           /**< 1..64, PUF_SETUP_SIZE +1 */
    PHY_UINT16                                              uhwPufPulseSize;           /**< 1..128,  PUF_PULSE_SIZE +1 */
    PHY_UINT16                                              uhwPufRecoverySize;        /**< 1..15, in PCG */
    PHY_UINT16                                              uhwPufRlPowGain;           /**< 0..63+16*31 Calculated as PUF_INIT_PWR+ProbenNbr*PUF_PWR_STEP */
    PHY_UINT16                                              uhwReserved;               /**< 32 bit alignment */
} CSDR_1X_R_FCH_PARA_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_R_SCH_PARA_STRU
 *
 * Description : Parameters from CPROC_1X_REV_SCH_PARA_STRU.
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwConfigID;                           /**< 0..64/128, number given by L3 at each activation of R-SCH */
    PHY_UINT16                          uhwNumSCH;
    CSDR_1X_R_SCH_CONFIG_STRU           astSCHConfig[CSDR_1X_MAX_SCH_CONFIGS];
    PHY_UINT16                          uhwSchFrameOffset;                     /**< [0,3] in 20ms increment */
    PHY_UINT16                          uhwFrameOffset;                        /**< 0..15, in 1.25ms */
    CSDR_1X_SCH_FRAME_SIZE_ENUM_UINT16  enFrameSize;                           /**< 0,1, or 2 */
    PHY_UINT16                          uhwRevDTXDuration;                     /**< 0..14 in 20ms resolution. 15 = any time. REV_SCH_DTX_DURATION */
    CSDR_1X_SCH_CODING_TYPE_ENUM_UINT16 enCoding;                              /**< "Conv" or "Turbo or Conv" */
    PHY_UINT16                          uhwReserved;                           /**< 32 bit alignment */
} CSDR_1X_R_SCH_PARA_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_FORWARD_POWER_CONTROL_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwFpcMode;           /**< 0..7, FPC_MODE */
    CSDR_1X_PRIMARY_FPC_ENUM_UINT16     enPrimaryFPC;
    PHY_UINT16                          uhwFpcSecChan;        /**< FPC_SEC_CHAN, 0: F-SCH0, 1: F-SCH1 */
    CSDR_1X_BOOL_ENUM_UINT16            enFpcSubChanGainFlag; /**< Is the fpc sub chan gain included? */
    PHY_UINT16                          uhwFpcSubChanGain;    /**< 0..31, resolution 0.25db, FPC_SUBCHAN_GAIN */
    PHY_UINT16                          uhwReserved1;         /**< 32 bit alignment */
} CSDR_1X_FORWARD_POWER_CONTROL_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_EACH_PWR_CTRL_STRU
 *
 * Description : Parameters from CPROC_1X_EACH_PARA_STRU
 *******************************************************************************/
typedef struct
{
    CSDR_1X_EACH_PWR_PARAMS_STRU        astEachPwrParams[CSDR_1X_MAX_MODE_SPECIFIC_EACH_PARAMS];
    PHY_INT16                           shwIcThresh;                                             /**< 0 .. 15. IC_THRESH. */
    PHY_INT16                           shwIcMax;                                                /**< 0 .. 15. IC_MAX. */
} CSDR_1X_EACH_PWR_CTRL_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_REVERSE_POWER_CONTROL_STRU
 *
 * Description : Data from CPROC_1X_REV_POWER_CTRL_STRU in
 * CAS_CPROC_1X_PWRCTRL_CONFIG_REQ
 * Reverse Power Control Parameters.
 *
 * uhwPichGatingPattern shall just be set according to C.S0002-Av6.0, Figure
 * 2.1.3.2.3-1, i.e. set to either 0xFFFF, 0xAAAA or 0x8888.
 * uhwPrimaryRpchAlloc and uhwSecondaryRpchAlloc shall be set according to
 * C.S0002-Ev3.0, tables 2.1.3.1.15.1-1 and 2.1.3.1.15.1-2.
 * uhwPrimaryRpchType and uhwSecondaryRpchType shall be set according to
 * section C.S0002-Ev3.0 section 2.1.3.1.15.1.
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                                              uhwRPCMode;                    /**< Valid in Rev RC8 only */
    CSDR_1X_BOOL_ENUM_UINT16                                enRchAdjGainIncluded;
    CSDR_1X_REVERSE_CHANNEL_ADJ_GAIN_STRU                   stRchAdjGain;
    PHY_INT16                                               shwRlGainAdjToAccess;          /**< -8..7,  res 1dB. RLGAIN_ADJs to ACH or EACH */
    PHY_INT16                                               shwRlGainAdjTchPilot;          /**< -32..31, res 0.125dB, RLGAIN_TRAFFIC_PILOT */
    PHY_INT16                                               shwRlGainAdjSchPilotSch0;      /**< -32..31, res 0.125dB, RLGAIN_SCH_PILOT */
    PHY_INT16                                               shwRlGainAdjSchPilotSch1;      /**< (not supported) -32..31, res 0.125dB, RLGAIN_SCH_PILOT */
    PHY_INT16                                               shwPwrOffset;                  /**< Res 0,5dB, -217..-132, At HHO calculated as sNomPwr-16*SNomPwrExt + PowerOffset (from table 2.1.2.3.1-1 in C.S0002-Av6.0). At Establishment, Revert and Reconfiguration: from CSDR_CPROC_1X_GAIN_IND */
    PHY_INT16                                               shwInitPwr;                    /**< Res 1dB, -16 .. 15. from e.g. INIT_PWR */
    PHY_INT16                                               shwRtCNomPwr;                  /**< -16..15, res 1dB. RTC_NOM_PWR */
    CSDR_1X_BOOL_ENUM_UINT16                                enRtcNomPwrUseInd;             /**< RTC_NOM_PWR_USE_IND */
    PHY_UINT16                                              uhwRevPwrCtrlDelay;            /**< 1..4, res 1PCG, REV_PWR_CNTL_DELAY +1 */
    /* help to judge whether the power control bit is valid in RC3-6 R-FCH gating */
    PHY_UINT16                                              uhwPichGatingPattern;          /**< Set acc to C.S0002-Av6.0, Figure 2.1.3.2.3-1 to 0xFFFF, 0xAAAA or 0x5555 */
    PHY_UINT16                                              uhwPrimaryRpchAlloc;           /**< See how to set in struct header */
    PHY_UINT16                                              uhwSecondaryRpchAlloc;         /**< See how to set in struct header */
    CSDR_1X_RPCH_TYPE_ENUM_UINT16                           enPrimaryRpchType;             /**< See how to set in struct header */
    CSDR_1X_RPCH_TYPE_ENUM_UINT16                           enSecondaryRpchType;           /**< See how to set in struct header */
    CSDR_1X_BOOL_ENUM_UINT16                                enRevAckChGainAdjACS1Flag;     /**< is sRevAckChGainAdjAcs1 included? REV_ACKCH_GAIN_ADJ_ACS1_INC. Used in 1xAdv */
    PHY_INT16                                               shwRevAckChGainAdjAcs1;        /**< -64..63, res 1/8dB. REV_ACKCH_GAIN_ADJ_ACS1, Used in 1xAdv */
    CSDR_1X_BOOL_ENUM_UINT16                                enRevAckChGainAdjACS2PlusFlag; /**< is is sRevAckChGainAdjAcs2Plus included? REV_ACKCH_GAIN_ADJ_ACS2PLUS_INC. Used in 1xAdv */
    PHY_INT16                                               shwRevAckChGainAdjACS2Plus;    /**< -64..63, res 1/8dB. REV_ACKCH_GAIN_ADJ_ACS2PLUS. Used in 1xAdv */
} CSDR_1X_REVERSE_POWER_CONTROL_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_FER_MEAS_STRU
 *
 * Description : The Number of Bad Frames and Sum of Frames Measured and SIR
 * for SIR target calculation.
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          auhwSIR[CSDR_1X_NUM_PCG_IN_FRAME];       /**< Linear SIR per PCG in the 20ms frame */
    PHY_UINT16                          uhwReserved;                             /**< 32 bit alignment */
    PHY_UINT16                          uhwNumFrames;
    CSDR_1X_BOOL_ENUM_UINT16            aenGoodFrame[CSDR_1X_MAX_FRAMES_IN_FER]; /**< TRUE:Good Frame, FALSE:Bad Frame */
} CSDR_1X_FER_MEAS_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_QUALITY_STRU
 *
 * Description : The astPilotQuality array shall be used as follows:
 * In non-TCH state, only 1 pilot is included - this is the serving cell.
 * In TCH state, one entry per pilot in the active set shall be included.
 *******************************************************************************/
typedef struct
{
    PHY_INT16                           shwRSSI;                                     /**< -880..0, Resolution 0.125dB. For open loop power control */
    PHY_INT16                           shwAsTotalEcIo;                              /**< -200..0.res 0.125dBTotal Ec/Io of the active set. */
    PHY_UINT16                          uwhReserved;                                 /**< 32 bit alignment */
    PHY_UINT16                          uwhNbrPilots;                                /**< 1..6, number of pilots in the astPilotQuality array. */
    CSDR_1X_PILOT_QUALITY_STRU          astPilotQuality[CSDR_1X_MAX_ACTIVE_SET_NUM];
} CSDR_1X_QUALITY_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_UPDATE_TIMING_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CSDR_1X_TIMING_UPDATE_SPEED_ENUM_UINT16                 enUpdateSpeed; /**< Slow in continuous states, fast in DRX and at handoff */
    PHY_UINT16                                              uhwPNIndex;    /**< 0..511:The PNOffset of the timing reference pilot */
    PHY_UINT32                                              uwPNPhase;     /**< The timing reference path of the timing reference pilot. In 1/4 chip */
} CSDR_1X_UPDATE_TIMING_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_F_PCH_PARA_STRU
 *
 * Description : From CPROC_1X_PARA_STRU.
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwConfigID;          /**< 0..64/128, number given by L3 at each activation of PCH */
    PHY_UINT16                          uhwPNIndex;           /**< 0..511 */
    PHY_UINT16                          uhwPCN;
    CSDR_1X_PCH_RATE_ENUM_UINT16        enPchRate;            /**< enPRate */
    CSDR_1X_NONFCH_DECODING_STRU        stDecodingParameters;
} CSDR_1X_F_PCH_PARA_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_F_CCCH_PARA_STRU
 *
 * Description : This struct carries the F-CCCH configuration.
 * Data from CPROC_1X_FCCH_PARA_STRU.
 * uhwWalshLength shall be set as follows:
 * If the Code Rate = 1/4
 * * If the Ccch Rate = 9600 => uhwWalshLength = 64
 * * If the Ccch Rate = 19200 => uhwWalshLength = 32
 * * If the Ccch Rate = 38400 => uhwWalshLength = 16
 * If the Code Rate = 1/2
 * * If the Ccch Rate = 9600 => uhwWalshLength = 128
 * * If the Ccch Rate = 19200 => uhwWalshLength = 64
 * * If the Ccch Rate = 38400 => uhwWalshLength = 32
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwConfigID;          /**< 0..64/128, number given by L3 at each activation of CCCH */
    PHY_UINT16                          uhwPNIndex;           /**< 0..511 */
    CSDR_1X_CCCH_RATE_ENUM_UINT16       enCcchRate;           /**< from FCCCH_RATE */
    CSDR_1X_CCCH_CODE_RATE_ENUM_UINT16  enCcchCodeRate;       /**< from FCCCH_CODE_RATE */
    CSDR_1X_CCCH_FRAME_SIZE_ENUM_UINT16 enFrameSize;
    PHY_UINT16                          uhwWalshLength;       /**< 16, 32, 64 or 128, see above */
    PHY_UINT16                          uhwWalshIndex;        /**< 1..256. Used range depends on enCCCH_Rate and enCCCH_CodeRate. From FCCCH_CODE_CHAN */
    PHY_UINT16                          uhwReserved1;         /**< 32 bit alignment */
    CSDR_1X_NONFCH_DECODING_STRU        stDecodingParameters;
} CSDR_1X_F_CCCH_PARA_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_F_BCCH_PARA_STRU
 *
 * Description : BCCH configuration. From CPROC_1x_BCCH_PARA_STRU.
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwConfigID;          /**< 0..64/128, number given by L3 at each activation of BCCH */
    PHY_UINT16                          uhwPNIndex;           /**< 0..511 */
    PHY_UINT16                          uhwBCN;               /**< 0..7, Broadcast Contol ChannelNumber , BCN */
    CSDR_1X_BCCH_RATE_ENUM_UINT16       enBcchRate;           /**< from enSR1BratNonTd */
    CSDR_1X_BCCH_CODE_RATE_ENUM_UINT16  enBcchCodeRate;       /**< from en sR1CratNonTd */
    CSDR_1X_BCCH_FRAME_SIZE_ENUM_UINT16 enFrameSize;
    PHY_UINT16                          uhwWalshLength;       /**< 32 if rate = 1/4, 64 if rate = 1/2, see c.S0002 tables 3.1.3.1.2.1-3 and -4 */
    PHY_UINT16                          uhwWalshIndex;        /**< [1..63] for enBCodeRATE = 1/2 _RULE_ RANGE:1..63 _RULE_ */
    /* [1..31] for enBCodeRATE = 1/4. from SR1_BCCH_CODE_CHAN_NON_TD */
    CSDR_1X_NONFCH_DECODING_STRU        stDecodingParameters;
} CSDR_1X_F_BCCH_PARA_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_F_DCCH_PARA_STRU
 *
 * Description : Parameters from CPROC_1X_DCCH_PARA_STRU and
 * CPROC_1X_OLPC_CFG_STRU.
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwConfigID;          /**< 0..64/128, number given by L3 at each activation of DCCH */
    PHY_UINT16                          uhwRC;                /**< Forward Link RC */
    PHY_UINT16                          uhwFrameOffset;
    CSDR_1X_DCCH_FRAME_SIZE_ENUM_UINT16 enFrameSize;          /**< from DCCH_FRAME_SIZE */
    PHY_UINT16                          uhwReserved1;         /**< 32 bit alignment */
    PHY_UINT16                          uhwWalshLength;       /**< 64 if RC = 3 or 5, 128 if RC = 4 */
    CSDR_1X_NONFCH_DECODING_STRU        stDecodingParameters;
} CSDR_1X_F_DCCH_PARA_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_F_SCCH_PARA_STRU
 *
 * Description : Parameters not present in the PROC-CAS interface, hence no
 * references.
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwConfigID;          /**< 0..64/128, number given by L3 at each activation of SCCH */
    PHY_UINT16                          uhwFrameOffset;
    PHY_UINT16                          uhwRC;                /**< Set to RC of F-FCH. If no FCH is configured set to RC of F-DCCH */
    PHY_UINT16                          uhwWalshLength;       /**< 64 if RC= 2, If RC = 1? */
    CSDR_1X_NONFCH_DECODING_STRU        stDecodingParameters;
} CSDR_1X_F_SCCH_PARA_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_F_SCH_CONFIG_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwConfigID;          /**< 0..64/128, number given by L3 at each activation of SCH */
    PHY_UINT16                          uhwSCHId;
    CSDR_1X_NONFCH_DECODING_STRU        stDecodingParameters;
} CSDR_1X_F_SCH_CONFIG_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_ACT_SET_INFO_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwPilotNum;                                       /**< 0..6. Number of pilots in the active set. Set to 0 when common channels are configured. 1..6 for TCH channels */
    PHY_UINT16                          uhwReserved;                                       /**< 32 bit alignment */
    CSDR_1X_ACTIVE_SET_STRU             astActiveSetPilotInfo[CSDR_1X_MAX_ACTIVE_SET_NUM];
} CSDR_1X_ACT_SET_INFO_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_FCH_DECODING_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CSDR_1X_CODE_RATE_ENUM_UINT16       enCodeRate;
    PHY_UINT16                          uhwRevFchAckMask;                         /**< Only for FCH in RC11, RC12 */
    PHY_UINT16                          uhwReserved1;
    PHY_UINT16                          uhwNumCodingPara;                         /**< 1 (fixed)or 4 (variable) */
    CSDR_1X_FCH_DECODING_PARA_INFO_STRU astCodingPara[CSDR_1X_MAX_NUM_FCH_RATES];
} CSDR_1X_FCH_DECODING_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_R_CHANNEL_UNION
 *
 * Description :
 *******************************************************************************/
typedef union
{
    CSDR_1X_R_ACH_PARA_STRU             stACH;
    CSDR_1X_R_EACH_PARA_STRU            stEACH;
    CSDR_1X_R_FCH_PARA_STRU             stFCH;
    CSDR_1X_R_SCCH_PARA_STRU            stSCCH;
    CSDR_1X_R_SCH_PARA_STRU             stSCH;
    CSDR_1X_R_DCCH_PARA_STRU            stDCCH;
} CSDR_1X_R_CHANNEL_UNION;

/** ****************************************************************************
 * Name        : CSDR_1X_COMMON_CH_PWR_CTRL_UNION
 *
 * Description :
 *******************************************************************************/
typedef union
{
    CSDR_1X_ACH_PWR_CTRL_STRU           stACH;
    CSDR_1X_EACH_PWR_CTRL_STRU          stEACH;
} CSDR_1X_COMMON_CH_PWR_CTRL_UNION;

/** ****************************************************************************
 * Name        : CSDR_1X_F_FCH_PARA_STRU
 *
 * Description : Parameters from CPROC_1X_FCH_PARA_STRU and
 * CPROC_1X_OLPC_CFG_STRU.
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                                              uhwConfigID;                     /**< 0..64/128, number given by L3 at each activation of FCH */
    PHY_UINT16                                              uhwRC;                           /**< Forward Link RC */
    PHY_UINT16                                              uhwFrameOffset;                  /**< 0..15, in 1.25ms. Offset of the F-FCH relative to system time. FRAME_OFFSET */
    CSDR_1X_FCH_FRAME_SIZE_ENUM_UINT16                      enFrameSize;                     /**< FCH_FRAME_SIZE */
    PHY_UINT16                                              uhwWalshLength;                  /**< 64 if uhwRC = 1,2 3 or 5, 128 if uhwRC = 4 */
    PHY_UINT16                                              uhwReserved1;                    /**< 32 bit alignment */
    CSDR_1X_FCH_DECODING_STRU                               stDecodingParameters;
    CSDR_1X_BOOL_ENUM_UINT16                                enForFchAckMaskRlBlankingFlag;   /**< Is usForFchAckMaskRlBlanking included ? */
    PHY_UINT16                                              uhwForFchAckMaskRlBlanking;      /**< 0..0xffff, FOR_FCH_ACK_MASK_RL_BLANKING, only valid if uhwRC = 11 and enForFchAckMaskRlBlankingFlag is set */
    CSDR_1X_BOOL_ENUM_UINT16                                enForFchAckMaskNoRlBlankingFlag; /**< Is usForFchAckMaskNoRlBlanking included ? */
    PHY_UINT16                                              uhwForFchAckMaskNoRlBlanking;    /**< 0..0xffff, FOR_FCH_ACK_MASK_NO_RL_BLANKING , only valid if uhwRC = 11 and enForFchAckMaskNoRlBlankingFlag is set */
    CSDR_1X_BLANKING_DUTYCYCLE_ENUM_UINT16                  enForFchBlankingDutycycle;       /**< FOR_FCH_BLANKING_DUTYCYCLE,  only valid if uhwRC = 11 */
    PHY_UINT16                                              uhwReserved2;                    /**< 32 bit alignment */
} CSDR_1X_F_FCH_PARA_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_F_SCH_PARA_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CSDR_1X_SCH_FRAME_SIZE_ENUM_UINT16  enFrameSize;                           /**< 20, 40 or 80 ms, from enRate */
    PHY_UINT16                          uhwSchFrameOffset;                     /**< [0,3] in 20ms */
    PHY_UINT16                          uhwFrameOffset;                        /**< 0..15, in 1.25ms */
    PHY_UINT16                          uhwWalshLength;                        /**< 64 if uhwRC = 3 or 5, 128 if uhwRC = 4 */
    PHY_UINT16                          uhwRC;                                 /**< 3..5, FOR_SCH_RC/SCH_RC */
    PHY_UINT16                          uhwNumSCH;                             /**< Number of configured SCH */
    CSDR_1X_F_SCH_CONFIG_STRU           astSCHConfig[CSDR_1X_MAX_SCH_CONFIGS];
    PHY_UINT16                          uhwSecPwrCtrlChIdx;                    /**< Index of F-SCH associated with the 2nd pwr ctrl subch */
    CSDR_1X_SCH_CODING_TYPE_ENUM_UINT16 enCodingType;                          /**< "Conv" or "Turbo or Conv" */
} CSDR_1X_F_SCH_PARA_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_R_CHANNEL_PARA_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    /* Channel unique parameters */
    CSDR_1X_R_CHANNEL_TYPE_ENUM_UINT16  enChannelType;
    PHY_UINT16                          uhwReserved1;      /**< 32 bit alignment */
    CSDR_1X_R_CHANNEL_UNION             unChannelSpecific;
} CSDR_1X_R_CHANNEL_PARA_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_R_COMMON_CH_POWER_CONTROL_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CSDR_1X_PWRCTRL_CHANNEL_TYPE_ENUM_UINT16                enChannelType;
    PHY_UINT16                                              uhwReserved;    /**< 32 bit alignment */
    CSDR_1X_COMMON_CH_PWR_CTRL_UNION                        unPowerControl;
} CSDR_1X_R_COMMON_CH_POWER_CONTROL_STRU;

/** ****************************************************************************
 * Name        : CSDR_1X_F_CHANNEL_UNION
 *
 * Description :
 *******************************************************************************/
typedef union
{
    CSDR_1X_F_SYNC_PARA_STRU            stSYNC;
    CSDR_1X_F_QPCH_PARA_STRU            stQPCH;
    CSDR_1X_F_PCH_PARA_STRU             stPCH;
    CSDR_1X_F_CCCH_PARA_STRU            stCCCH;
    CSDR_1X_F_BCCH_PARA_STRU            stBCCH;
    CSDR_1X_F_FCH_PARA_STRU             stFCH;
    CSDR_1X_F_SCCH_PARA_STRU            stSCCH;
    CSDR_1X_F_SCH_PARA_STRU             stSCH;
    CSDR_1X_F_DCCH_PARA_STRU            stDCCH;
} CSDR_1X_F_CHANNEL_UNION;

/** ****************************************************************************
 * Name        : CSDR_1X_F_CHANNEL_PARA_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CSDR_1X_CHANNEL_TYPE_ENUM_UINT16    enChannelType;
    PHY_UINT16                          uhwReserved;
    CSDR_1X_F_CHANNEL_UNION             unChannelSpecific;
} CSDR_1X_F_CHANNEL_PARA_STRU;

/*******************************************************************************
 7. OTHER declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : CPROC_CSDR_1X_LONG_CODE_REQ_STRU
 *
 * Description : This signal is sent from CPROC to set the long code mask.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT16                          uhwActiveTime;      /**< In PCG, range 0..63. Also uses CSDR_1X_ACTIVATE_AT_ONCE */
    PHY_UINT16                          uhwReserved;        /**< 32 bit alignment */
    PHY_UINT32                          auwLongCodeMask[2]; /**< The long code mask to use. */
} CPROC_CSDR_1X_LONG_CODE_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_1X_RTCH_HALT_REQ_STRU
 *
 * Description : This signal requests CSDR to halt reverse link transmission.
 * It is sent by CPROC when N2m*20ms of insufficient forward TCH has been
 * detected. The activation time is immediately.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
} CPROC_CSDR_1X_RTCH_HALT_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_1X_RTCH_RESUME_REQ_STRU
 *
 * Description : This signal requests CSDR to resume reverse link transmission
 * after it has been halted. It is sent by CPROC when N3m*20ms of sufficient
 * forward TCH has been detected. The activation time is immediately.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
} CPROC_CSDR_1X_RTCH_RESUME_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_1X_SLEEP_REQ_STRU
 *
 * Description : This signal indicates to CSDR that CPROC is ready for sleep.
 * The required wake up time is provided.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_1X_SLEEP_MODE_ENUM_UINT16      enSleepMode;
    PHY_UINT16                          uhwReserved;
    PHY_UINT32                          auwWakeUpTime[2]; /**< System time when the wake up shall take place */
} CPROC_CSDR_1X_SLEEP_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_1X_SLEEP_IND_STRU
 *
 * Description : This signal is sent when CSDR has decided to go to sleep.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_1X_SLEEP_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_1X_RF_ENVIRONMENT_REQ_STRU
 *
 * Description : CPROC tells CSDR RSSI and the Ec/Io of the serving cell -
 * including the reference phase for timing updates - using this signal. In the
 * states IDLE_NON_SLOTTED_MODE and TCH it is sent every time a new MPS result
 * for the serving/timing reference pilot has been received by CPROC.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_1X_QUALITY_STRU                stServiceCellQuality;
    CSDR_1X_UPDATE_TIMING_STRU          stUpdateTiming;
} CPROC_CSDR_1X_RF_ENVIRONMENT_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_1X_SET_WORK_MODE_REQ_STRU
 *
 * Description : This is a request from CPROC to CSDR to go to either Slave or
 * Master Mode.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_1X_WORK_MODE_ENUM_UINT16       enWorkMode;
    PHY_UINT16                          uhwReserved; /**< 32 bit alignment */
} CPROC_CSDR_1X_SET_WORK_MODE_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_1X_SET_WORK_MODE_CNF_STRU
 *
 * Description : This signal is sent from CSDR to CPROC when CSDR has set the
 * work mode.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_1X_SET_WORK_MODE_CNF_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_1X_ACTION_IND_STRU
 *
 * Description : This signal is sent from CSDR 1X_ChannelManager to CPROC_1X_
 * ChannelManager to indicate activation of a channel.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_1X_BOOL_ENUM_UINT16            enLongCodeConfigured;                         /**< Set if this ActionInd is for configuration of Long Code Mask */
    CSDR_1X_BOOL_ENUM_UINT16            enPowerCtrlConfigured;                        /**< Set if this ActionInd is for configuration of Power Control */
    PHY_UINT16                          uhwReserved;                                  /**< 32 bit alignment */
    PHY_UINT16                          uhwChannelNum;
    CSDR_1X_CHANNEL_TYPE_ENUM_UINT16    aenChannelRslt[CSDR_1X_MAX_RELEASE_CHANNELS];
} CSDR_CPROC_1X_ACTION_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_1X_SET_TIMING_REQ_STRU
 *
 * Description : This signals is used to set timing after a pilot has been
 * successfully detected (see Timing Change Substate, 2.6.1.4 in
 * C.S0005-A_v6.0).
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT32                          auwLongCodeState[2];  /**< Long code state , LC_STATE */
    PHY_UINT32                          auwSystime[2];        /**< System time from NW, Systime[0] = 32 lsbs, Systime[1] = 4 msbs, SYS_TIME */
    PHY_UINT32                          uwBaseCountOfSyncMsg; /**< Base count of the sync channel message */
    PHY_UINT16                          uhwPNIndex;           /**< 0..511, PNOffset of the pilot, PILOT_PN */
    PHY_UINT16                          uhwReserved;          /**< 32 bit alignment */
} CPROC_CSDR_1X_SET_TIMING_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_1X_SET_TIMING_CNF_STRU
 *
 * Description : This signal confirms that the timing was set successfully.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_1X_SUCCESS_ENUM_UINT16         enResult;    /**< SUCCESS or FAILURE */
    PHY_UINT16                          uhwReserved; /**< 32 bit alignment */
} CSDR_CPROC_1X_SET_TIMING_CNF_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_1X_QPCH_IND_STRU
 *
 * Description : This signal is sent to PROC each time a PI, BCI or CCI has
 * been decoded.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_1X_QPCH_TYPE_ENUM_UINT16       enIndicator;      /**< PI, BI or CCI */
    CSDR_1X_QPCH_INDICATOR_ENUM_UINT16  enIndicatorValue; /**< Set, not set or unreliable */
} CSDR_CPROC_1X_QPCH_IND_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_1X_WAKEUP_IND_STRU
 *
 * Description : This signal is sent to CPROC when CSDR has woken up after deep
 * sleep - only when the DRX timer has expired.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_1X_WAKEUP_IND_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_1X_PUF_IND_STRU
 *
 * Description : This signal is sent from CSDR to CPROC at the end of a PUF
 * probe.
 * In order for CPROC to count probes transmitted at maximum power, CSDR shall
 * tell whether the probe was at maximum power or not.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_1X_BOOL_ENUM_UINT16            enWasAtMaxPower; /**< FALSE: the probe was below max power, TRUE: the probe was at max power */
    PHY_UINT16                          uhwReserved1;
} CSDR_CPROC_1X_PUF_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_1X_POWER_CONTROL_CONFIG_REQ_STRU
 *
 * Description : This signal carries the Power Control Parameters
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT16                          uhwActionTime;       /**< 0..63, (PCG mod 80 ms) */
    PHY_UINT16                          uhwPowerControlStep; /**< Resolution: 0.25dB. Allowed values: 1,2,4,6,8 (0.25, 0.5, 1, 1.5 and 2dB, where 1.5 and 2dB are for RC8 only), PWR_CNTL_STEP */
    CSDR_1X_GATING_ENUM_UINT16          enPilotGatingMode;
    CSDR_1X_GATING_RATE_ENUM_UINT16     enPilotGatingRate;
    CSDR_1X_BOOL_ENUM_UINT16            enFpcFlag;           /**< Is the forward power control struct included */
    CSDR_1X_BOOL_ENUM_UINT16            enRpcFlag;           /**< Is the reverse power control struct included */
    CSDR_1X_FORWARD_POWER_CONTROL_STRU  stFpcConfig;         /**< Forward Power Control _RULE_ OPT:enFpcFlag=CSDR_1X_TRUE _RULE_ */
    CSDR_1X_REVERSE_POWER_CONTROL_STRU  stRpcConfig;         /**< Reverse Power Control _RULE_ OPT:enRpcFlag=CSDR_1X_TRUE _RULE_ */
} CPROC_CSDR_1X_POWER_CONTROL_CONFIG_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_1X_F_CHANNEL_CONFIG_REQ_STRU
 *
 * Description : This signal is used to configure and activate forward
 * channels.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT16                          uhwActiveTime;                                 /**< In PCG, range 0..63. Also uses CSDR_1X_ACTIVATE_AT_ONCE */
    CSDR_1X_BOOL_ENUM_UINT16            enActiveSetIncluded;                           /**< Shall stActiveSet also be used at this ActionTime */
    CSDR_1X_ANTENNA_IND_ENUM_UINT16     enUseAntenna;                                  /**< In TCH Main and diversity antenna can be used. In other states only Main antenna */
    PHY_UINT16                          uhwPpmReportPeriod;                            /**< The period for sending CSDR_CPROC_1X_AFC_PPM_IND. Unit: ms. If set to 0 no sending. */
    PHY_UINT16                          uhwReserved1;                                  /**< 32 bit alignment */
    /* Channel unique parameters */
    PHY_UINT16                          uhwNumChannel;
    CSDR_1X_F_CHANNEL_PARA_STRU         astChannelConfig[CSDR_1X_MAX_NUM_FWD_CHANNEL];
    CSDR_1X_ACT_SET_INFO_STRU           stActiveSet;
} CPROC_CSDR_1X_F_CHANNEL_CONFIG_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_1X_F_CHANNEL_CONFIG_CNF_STRU
 *
 * Description : CSDR_CPROC_1X_F_CHANNEL_CONFIG_CNF confirms a configuration of
 * forward channels. It contains a list of the affected channels. No failure
 * case is foreseen.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT16                          uhwReserved;                              /**< 32 bit alignment */
    PHY_UINT16                          uhwChannelNum;
    CSDR_1X_CHANNEL_TYPE_ENUM_UINT16    aenChannel[CSDR_1X_MAX_RELEASE_CHANNELS];
} CSDR_CPROC_1X_F_CHANNEL_CONFIG_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_1X_R_CHANNEL_CONFIG_REQ_STRU
 *
 * Description : This signal carries the reverse channel configuration.
 *
 * uhwNumPreambles is set as follows:
 * At TCH establishment, uhwNumPreambles
 * =CSDR_1X_SEND_ESTABLISHMENT_PREAMBLE_FLAG
 * At handoff in RC1-2: uhwNumPreambles =0..7, resolution 20ms . See
 * NUM_PREAMBLE in C.S0005.
 * At handoff in RC3-12: 0..6 in 2*1.25ms resolution and 7 =>16*1.25ms. See
 * NUM_PREAMBLE in C.S0005.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16                           enMsgId;
    PHY_UINT16                                              uhwOpId;
    PHY_UINT16                                              uhwActiveTime;                                 /**< In PCG, range 0..63. Also uses CSDR_1X_ACTIVATE_AT_ONCE */
    PHY_UINT16                                              uhwCfgIdActionTimePcg;                         /**< 0..63, in PCG, CSDR_1X_ ACTIVATE_AT_ONCE */
    PHY_UINT16                                              uhwCfgIdActionTimeFrame;                       /**< 0..63, in 80ms frames, CSDR_1X_ACTIVATE_AT_ONCE */
    PHY_UINT16                                              uhwReserved;                                   /**< 32 bit alignment */
    CSDR_1X_R_COMMON_CH_POWER_CONTROL_STRU                  stAccessPowerCfg;                              /**< ACH and EACH open loop power control parameters */
    PHY_UINT16                                              uhwNumPreambles;                               /**< Valid at TCH activations. See above for range and use */
    PHY_UINT16                                              uhwChannelNum;
    CSDR_1X_R_CHANNEL_PARA_STRU                             astChannelConfig[CSDR_1X_MAX_NUM_REV_CHANNEL];
} CPROC_CSDR_1X_R_CHANNEL_CONFIG_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_1X_R_CHANNEL_CONFIG_CNF_STRU
 *
 * Description : CSDR_CPROC_1X_R_CHANNEL_CONFIG_CNF confirms a configuration of
 * reverse channels. It contains a list of the affected channels. No failure
 * case is foreseen.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT16                          uhwReserved;                              /**< 32 bit alignment */
    PHY_UINT16                          uhwChannelNum;
    CSDR_1X_CHANNEL_TYPE_ENUM_UINT16    aenChannel[CSDR_1X_MAX_RELEASE_CHANNELS];
} CSDR_CPROC_1X_R_CHANNEL_CONFIG_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_1X_CHANNEL_RELEASE_REQ_STRU
 *
 * Description : This signal is used to release selected channels.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT16                          uhwActiveTime;                                /**< In PCG, range 0..63. Also uses CSDR_1X_ACTIVATE_AT_ONCE */
    CSDR_1X_BOOL_ENUM_UINT16            enReleaseRevSchAtDtx;                         /**< TRUE: keep the R-SCH until CTF indicates DTX. FALSE: Release R-SCH at the given ActiveTime. */
    PHY_UINT16                          uhwReserved;                                  /**< 32 bit alignment */
    PHY_UINT16                          uhwNumChannels;                               /**< The number of channels to release */
    CSDR_1X_CHANNEL_TYPE_ENUM_UINT16    aenChannelType[CSDR_1X_MAX_RELEASE_CHANNELS]; /**< Array of channels to release */
} CPROC_CSDR_1X_CHANNEL_RELEASE_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_1X_CHANNEL_RELEASE_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_1X_SUCCESS_ENUM_UINT16         enResult;    /**< SUCCESS or FAILURE */
    PHY_UINT16                          uhwReserved; /**< 32 bit alignment */
} CSDR_CPROC_1X_CHANNEL_RELEASE_CNF_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_1X_FER_MEAS_REPORT_IND_STRU
 *
 * Description : This is a report of the received frames on F-TCH.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_1X_BOOL_ENUM_UINT16            enFchPowerMeasFlag;
    CSDR_1X_BOOL_ENUM_UINT16            enDcchPowerMeasFlag;
    CSDR_1X_BOOL_ENUM_UINT16            enSchPowerMeasFlag;
    PHY_UINT16                          uhwSchNum;
    CSDR_1X_BOOL_ENUM_UINT16            enFpcPriChanSufficient;                   /**< Was the quality if the FPC_PRI_CHAN sufficient the last 20ms */
    CSDR_1X_BOOL_ENUM_UINT16            enTransmissionGuaranteed;                 /**< Was transmission of this frame guaranteed? Only used in RC11 */
    CSDR_1X_FER_MEAS_STRU               stFchPowerMeas;                           /**< Report of Good/Bad frames on the FCH */
    CSDR_1X_FER_MEAS_STRU               stDcchPowerMeas;                          /**< Report of Good/Bad frames on the DCCH */
    CSDR_1X_FER_MEAS_STRU               astSchPowerMeas[CSDR_1X_SUPPORT_SCH_NUM]; /**< Report of Good/Bad frames on the SCH */
} CSDR_CPROC_1X_FER_MEAS_REPORT_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_1X_CM_RELEASE_ALL_REQ_STRU
 *
 * Description : This signal is used to request CSDR to release all channels.
 * The signal does not carry any parameters. The action time is always
 * immediately.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
} CPROC_CSDR_1X_CM_RELEASE_ALL_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_1X_CM_RELEASE_ALL_CNF_STRU
 *
 * Description : This signal is used to confirm the a release all request. No
 * failure case is foreseen.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_1X_CM_RELEASE_ALL_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_1X_OLPC_SETPOINT_CFG_REQ_STRU
 *
 * Description : This signal carries the outer loop setpoints for the F-TCH.
 * The action time is always "NOW".
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_1X_BOOL_ENUM_UINT16            enOlpcFchFlag;   /**< TRUE, FALSE */
    CSDR_1X_BOOL_ENUM_UINT16            enOlpcDcchFlag;  /**< TRUE, FALSE */
    CSDR_1X_BOOL_ENUM_UINT16            enOlpcSchFlag;   /**< TRUE, FALSE */
    PHY_UINT16                          uhwReserved1;    /**< 32 bit alignment */
    PHY_INT32                           swFchSetPoint;   /**< -2097152..2080768, resolution 1/16384dB. OLPC setpoint for F-FCH */
    PHY_INT32                           swDcchSetPoint;  /**< -2097152..2080768, resolution 1/16384dB. OLPC setpoint for F-DCCH */
    CSDR_1X_OLPC_SCH_CONFIG_STRU        stOlpcSchConfig; /**< OLPC setpoints for F-SCH */
} CPROC_CSDR_1X_OLPC_SETPOINT_CFG_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_1X_GAP_REQ_STRU
 *
 * Description : CPROC_CSDR_1X_GAP_REQ is sent from CPROC to CSDR before each
 * gap intended for CF measurements. It contains the gap start time in PCG, gap
 * length in PCG and the reverse power and OLPC setpoint compensation values.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT16                          uhwActionTime;    /**< In PCG, does NOT use CSDR_1X_ACTIVATE_AT_ONCE or CSDR_1X_START_AFTER_ONGOING */
    PHY_UINT16                          uhwCFGapLength;   /**< In PCG, i.e. 1.25ms increments */
    CSDR_1X_GAP_TYPE_ENUM_UINT16        enRevFwdGapValid; /**< Is the gap for FWD and/or REV links? */
    PHY_UINT16                          uhwReserved;      /**< 32 bit alignment */
    CSDR_1X_GAP_TIME_STRU               stFrameTimes;     /**< Start times in PCG for the frame the gap starts in, and the first full frame after the gap */
    CSDR_1X_GAP_GAIN_ADJ_STRU           stGainAdj;        /**< Gain adjustment to be used for the remainder fo the frame(s) */
} CPROC_CSDR_1X_GAP_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_1X_GAIN_IND_STRU
 *
 * Description : CSDR_CPROC_1X_GAIN_IND is sent from CSDR to CPROC at the start
 * of each access probe transmission (both ACH and EACH). The message contains
 * the pwrOffset and InitPwr used by CSDR.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_INT16                           shwUsedPwrOffset; /**< -217..-132, resolution 0.5dB. pwrOffset used */
    PHY_INT16                           shwUsedInitPwr;   /**< -16..15, resolution 1dB, InitPwr used */
} CSDR_CPROC_1X_GAIN_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_1X_SET_MESSAGE_MODE_REQ_STRU
 *
 * Description : This signal is used by CPROC to set the message mode - either
 * periodic (i.e. CPROC will be triggered every 10ms) or event triggered (i.e.
 * CPROC is triggered immediately each time a message is availaible).
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_1X_MESSAGE_MODE_ENUM_UINT16    enMessageMode; /**< desired message mode */
    PHY_UINT16                          uhwReserved;   /**< 32 bit alignment */
} CPROC_CSDR_1X_SET_MESSAGE_MODE_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_1X_SET_MESSAGE_MODE_CNF_STRU
 *
 * Description : This signal is used to confirm that the message mode has been
 * changed according to the request.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_1X_SET_MESSAGE_MODE_CNF_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_1X_LONG_CODE_CNF_STRU
 *
 * Description : CSDR_CPROC_1X_LONG_CODE_CNF is sent from CSDR_1X to confirma
 * long code change. It carries no parameters. No failure cases are foreseen.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_1X_LONG_CODE_CNF_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_1X_POWER_CONTROL_CONFIG_CNF_STRU
 *
 * Description : CSDR_CPROC_1X_POWER_CONTROL_CONFIG_CNF is sent from CSDR_1X to
 * confirm a long code change. It carries no parameters. No failure cases are
 * foreseen.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_1X_POWER_CONTROL_CONFIG_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_1X_QPCH_CFG_REQ_STRU
 *
 * Description : CPROC_CSDR_1X_QPCH_CFG_REQ is used to configure QPCH
 * reception.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT16                          uhwActiveTime; /**< In PCG, range 0..63. Also uses CSDR_1X_ACTIVATE_AT_ONCE */
    PHY_UINT16                          uhwReserved;   /**< 32 bit alignment */
    CSDR_1X_F_QPCH_PARA_STRU            stQpchCfg;
} CPROC_CSDR_1X_QPCH_CFG_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_1X_QPCH_CFG_CNF_STRU
 *
 * Description : CSDR_CPROC_1X_QPCH_CFG_CNF is used to confirm that the
 * requested QPCH reception will be performed. No failure cas is foreseen. The
 * signal does not carry any parameters.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_1X_QPCH_CFG_CNF_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_1X_ERROR_IND_STRU
 *
 * Description : CSDR_CPROC_1X_ERROR_IND is sent from CSDR_1X when an abnormal
 * situation has been detected. It can be sent at any time. It carries no
 * parameters.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_1X_ERROR_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_1X_ACTIVE_REQ_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
} CPROC_CSDR_1X_ACTIVE_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_1X_ACTIVE_IND_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_1X_ACTIVE_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_1X_AFC_PPM_REQ_STRU
 *
 * Description : CPROC_CSDR_1X_AFC_PPM_REQ is sent to CSDR_1X to trigger update
 * of ppm value.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_INT32                           swInitialPpm;          /**< ppm value to be used by afc */
    PHY_INT16                           shwCurrentTemperature; /**< Resolution 0.1degreee */
    PHY_UINT16                          uhwReserved;           /**< 32-bit alignment */
} CPROC_CSDR_1X_AFC_PPM_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_1X_AFC_PPM_IND_STRU
 *
 * Description : CSDR_CPROC_1X_AFC_PPM_IND is sent from CSDR_1X to trigger
 * update of ppm value in NV.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XCM_MSG_TYPE_ENUM_UINT16       enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_INT32                           swCurrentPpm;    /**< current ppm used by afc */
    CSDR_1X_AFC_ENUM_UINT16             enAfcLockStatus; /**< locked or not locked */
    PHY_UINT16                          uhwReserved;     /**< 32-bit alignment */
} CSDR_CPROC_1X_AFC_PPM_IND_STRU;

/*******************************************************************************
 8. Global  declaration
*******************************************************************************/

/*******************************************************************************
 9. Function declarations
*******************************************************************************/

#if ((VOS_OS_VER == VOS_WIN32) || (VOS_OS_VER == VOS_NUCLEUS))
#pragma pack()
#else
#pragma pack(0)
#endif

#ifdef __cplusplus
#if __cplusplus
}
#endif /* __cpluscplus */
#endif /* __cpluscplus */

#endif
