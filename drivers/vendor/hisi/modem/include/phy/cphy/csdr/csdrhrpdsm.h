/** ****************************************************************************

                    Huawei Technologies Sweden AB (C), 2001-2015

 ********************************************************************************
 * @author    Automatically generated by DAISY
 * @version
 * @date      2015-10-08
 * @file
 * @brief
 * CSDRHRPDSM is the interface between CSDR_HRPD_SearchMeasurer and
 * CPROC_HRPD_SearchMeasurer. It includes:
 * -  Input: Pilot Search request.
 * -  Input: Measurement requests. Frequency: Once per 80 ms period,
 *    reconfiguration and candidate frequency measurement.
 * -  Input: MPS start and stop requests. Frequency: at (re-)configuration of
 *    active set and/or Interference Cancellation cells.
 * -  Output: MPS stop confirm to the requester. Frequency: Once per
 *    deactivation.
 * -  Output: MPS Indication. Frequency: every 26.67 ms.
 * -  Output: Pilot search ind. Frequency: once per request.
 * -  Output: Meas Indication. Frequency: once per
 *    CSDR_HRPD_MAX_MEAS_IND_PN_LIST_NUM measurements or at least once per
 *    measurement period (80 ms).
 * @copyright Huawei Technologies Sweden AB
 *******************************************************************************/
#ifndef CSDRHRPDSM_H
#define CSDRHRPDSM_H

/*******************************************************************************
 1. Other files included
*******************************************************************************/

#include "uphy_type_define.h"
#include "csdr_hrpd.h"

#ifdef __cplusplus
#if __cplusplus
    extern "C" {
#endif /* __cpluscplus */
#endif /* __cpluscplus */
#pragma pack(4)

/*******************************************************************************
 2. Macro definitions
*******************************************************************************/

/**
 * Maximum number of pilots in pilot search results
 */
#define CSDR_HRPD_MAX_PILOT_SEARCH_RESULT                   ( 32 )
/**
 * Indicates that the value is not valid.
 */
#define CSDR_HRPD_NOT_VALID_SW                              ( 0x7FFFFFFF )
/**
 * Used for shwRlsEcIo in measurement indications.
 */
#define CSDR_HRPD_NOT_VALID_SHW                             ( 0x7fff )
/**
 * Maximum size of Active Set.
 */
#define CSDR_HRPD_MAX_AS_SIZE                               ( 6 )
/**
 * Maximum size of Active Set in CSDR_CPROC_HRPD_MPS_IND
 */
#define CSDR_HRPD_MAX_AS_SIZE_MPS_IND                       ( 4 )
/**
 * Max Number of pilots in a CPROC_CSDR_HRPD_MEAS_REQ.
 */
#define CSDR_HRPD_MAX_MEAS_REQ_PN_LIST_NUM                  ( 108 )
/**
 * Maximum number of cells reported in a CSDR_CPROC_HRPD_MEAS_IND.
 * At maximum three CSDR_CPROC_HRPD_MEAS_INDs are send per
 * CPROC_CSDR_HRPD_MEAS_REQ.
 */
#define CSDR_HRPD_MAX_MEAS_IND_PN_LIST_NUM                  ( CSDR_HRPD_MAX_MEAS_REQ_PN_LIST_NUM/3 )

/*******************************************************************************
 3. Enumerations declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : CSDRHRPDSM_MSG_TYPE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDRHRPDSM_MSG_TYPE_ENUM
{
    ID_CPROC_CSDR_HRPD_PILOT_SEARCH_REQ                     = 0x4100, /**< @sa CPROC_CSDR_HRPD_PILOT_SEARCH_REQ_STRU */
    ID_CSDR_CPROC_HRPD_PILOT_SEARCH_IND                     = 0x4101, /**< @sa CSDR_CPROC_HRPD_PILOT_SEARCH_IND_STRU */
    ID_CPROC_CSDR_HRPD_PILOT_SEARCH_STOP_REQ                = 0x4102, /**< @sa CPROC_CSDR_HRPD_PILOT_SEARCH_STOP_REQ_STRU */
    ID_CSDR_CPROC_HRPD_PILOT_SEARCH_STOP_CNF                = 0x4103, /**< @sa CSDR_CPROC_HRPD_PILOT_SEARCH_STOP_CNF_STRU */
    ID_CPROC_CSDR_HRPD_SIGNAL_LEVEL_REQ                     = 0x4104, /**< @sa CPROC_CSDR_HRPD_SIGNAL_LEVEL_REQ_STRU */
    ID_CSDR_CPROC_HRPD_SIGNAL_LEVEL_IND                     = 0x4105, /**< @sa CSDR_CPROC_HRPD_SIGNAL_LEVEL_IND_STRU */
    ID_CPROC_CSDR_HRPD_MEAS_REQ                             = 0x4106, /**< @sa CPROC_CSDR_HRPD_MEAS_REQ_STRU */
    ID_CPROC_CSDR_HRPD_STOP_MEAS_REQ                        = 0x4107, /**< @sa CPROC_CSDR_HRPD_STOP_MEAS_REQ_STRU */
    ID_CSDR_CPROC_HRPD_MEAS_IND                             = 0x4108, /**< @sa CSDR_CPROC_HRPD_MEAS_IND_STRU */
    ID_CSDR_CPROC_HRPD_MEAS_REPORT_IND                      = 0x4109, /**< @sa CSDR_CPROC_HRPD_MEAS_REPORT_IND_STRU */
    ID_CPROC_CSDR_HRPD_MPS_REQ                              = 0x410A, /**< @sa CPROC_CSDR_HRPD_MPS_REQ_STRU */
    ID_CSDR_CPROC_HRPD_MPS_IND                              = 0x410B, /**< @sa CSDR_CPROC_HRPD_MPS_IND_STRU */
    ID_CPROC_CSDR_HRPD_STOP_MPS_REQ                         = 0x410C, /**< @sa CPROC_CSDR_HRPD_STOP_MPS_REQ_STRU */
    ID_CSDR_CPROC_HRPD_STOP_MPS_CNF                         = 0x410D, /**< @sa CSDR_CPROC_HRPD_STOP_MPS_CNF_STRU */
    ID_CPROC_CSDR_HRPD_SM_RESET_REQ                         = 0x410E, /**< @sa CPROC_CSDR_HRPD_SM_RESET_REQ_STRU */
    ID_CSDR_CPROC_HRPD_SM_RESET_CNF                         = 0x410F, /**< @sa CSDR_CPROC_HRPD_SM_RESET_CNF_STRU */
    ID_CPROC_CSDR_HRPD_SLAVE_TIMING_REQ                     = 0x4110, /**< @sa CPROC_CSDR_HRPD_SLAVE_TIMING_REQ_STRU */
    ID_CSDR_CPROC_HRPD_SLAVE_TIMING_CNF                     = 0x4111, /**< @sa CSDR_CPROC_HRPD_SLAVE_TIMING_CNF_STRU */
    ID_CSDRHRPDSM_MSG_TYPE_ENUM_BUTT                        = 0x4112
};
typedef PHY_UINT16 CSDRHRPDSM_MSG_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_ANTENNA_ENUM_UINT16
 *
 * Description : Used to indicate usage of samples from Ant1 or Ant2 for
 * measurements.
 *******************************************************************************/
enum CSDR_HRPD_ANTENNA_ENUM
{
    CSDR_HRPD_ANT1                      = 0x0000,
    CSDR_HRPD_ANT2                      = 0x0001,
    CSDR_HRPD_ANTENNA_BUTT              = 0x0002
};
typedef PHY_UINT16 CSDR_HRPD_ANTENNA_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_MPS_STOP_REASON_ENUM_UINT16
 *
 * Description : Used to indicate if mps was finished or stopped.
 *******************************************************************************/
enum CSDR_HRPD_MPS_STOP_REASON_ENUM
{
    CSDR_HRPD_MPS_STOP_REASON_FINISHED                      = 0x0000, /**< The mps finished normally, i.e. not stopped. */
    CSDR_HRPD_MPS_STOP_REASON_UNFINISHED                    = 0x0001, /**< MPS is not finished and not stopped. */
    CSDR_HRPD_MPS_STOP_REASON_CPROC                         = 0x0002, /**< CPROC reconfigs mps or cproc indicates csdr to change SC */
    CSDR_HRPD_MPS_STOP_REASON_BUTT                          = 0x0003
};
typedef PHY_UINT16 CSDR_HRPD_MPS_STOP_REASON_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_LTE_CDMA_TIME_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_HRPD_LTE_CDMA_TIME_ENUM
{
    CSDR_HRPD_LTE_CDMA_TIME_NOT_PRESENT = 0x0000,
    CSDR_HRPD_LTE_CDMA_TIME_PRESENT     = 0x0001,
    CSDR_HRPD_LTE_CDMA_TIME_BUTT        = 0x0002
};
typedef PHY_UINT16 CSDR_HRPD_LTE_CDMA_TIME_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_STOP_REASON_ENUM_UINT16
 *
 * Description : Used to indicate if measurements was finished or stopped.
 *******************************************************************************/
enum CSDR_HRPD_STOP_REASON_ENUM
{
    CSDR_HRPD_STOP_REASON_FINISHED      = 0x0000, /**< The measurements finished normally, i.e. not stopped. */
    CSDR_HRPD_STOP_REASON_CPROC         = 0x0001, /**< CPROC stopped measurements. */
    CSDR_HRPD_STOP_REASON_MASTER        = 0x0002, /**< Mater RAT stopped measurements. */
    CSDR_HRPD_STOP_REASON_NOT_STOPPED   = 0x0003, /**< Measurements are not finished and not stopped. */
    CSDR_HRPD_STOP_REASON_BUTT          = 0x0004
};
typedef PHY_UINT16 CSDR_HRPD_STOP_REASON_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_MEAS_FREQ_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_HRPD_MEAS_FREQ_ENUM
{
    CSDR_HRPD_MEAS_FREQ_CF_FREQ         = 0x0000,
    CSDR_HRPD_MEAS_FREQ_SF_FREQ         = 0x0001,
    CSDR_HRPD_MEAS_FREQ_BUTT            = 0x0002
};
typedef PHY_UINT16 CSDR_HRPD_MEAS_FREQ_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_PILOT_SEARCH_RES_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_HRPD_PILOT_SEARCH_RES_ENUM
{
    CSDR_HRPD_PILOT_SEARCH_RES_NOT_FOUND                    = 0x0000,
    CSDR_HRPD_PILOT_SEARCH_RES_FOUND                        = 0x0001,
    CSDR_HRPD_PILOT_SEARCH_RES_BUTT                         = 0x0002
};
typedef PHY_UINT16 CSDR_HRPD_PILOT_SEARCH_RES_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_TIMING_ENUM_UINT16
 *
 * Description : Enum for timing to be used in initial cell search.
 *******************************************************************************/
enum CSDR_HRPD_TIMING_ENUM
{
    CSDR_HRPD_TIMING_HRPD               = 0x0000, /**< No timing */
    CSDR_HRPD_TIMING_1X                 = 0x0001, /**< 1x timing */
    CSDR_HRPD_TIMING_BUTT               = 0x0002
};
typedef PHY_UINT16 CSDR_HRPD_TIMING_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_MPS_TYPE_ENUM_UINT16
 *
 * Description : Enum for type of CSDR_HRPD_MPS.
 *******************************************************************************/
enum CSDR_HRPD_MPS_TYPE_ENUM
{
    CSDR_HRPD_MPS_TYPE_CONTINUOUS       = 0x0000, /**< Continuous MPS */
    CSDR_HRPD_MPS_TYPE_QUICK            = 0x0001, /**< Quick start, start sharing MPS results with demodulation after first half slot */
    CSDR_HRPD_MPS_TYPE_ONE_SHOT         = 0x0002, /**< Run MPS once and report results. Will be used in Pilot Search sequence */
    CSDR_HRPD_MPS_TYPE_WINDOW_UPDATE    = 0x0003, /**< Update PN Phase only */
    CSDR_HRPD_MPS_TYPE_BUTT             = 0x0004
};
typedef PHY_UINT16 CSDR_HRPD_MPS_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_MEAS_TYPE_ENUM_UINT16
 *
 * Description : Enum for measurement type.
 *******************************************************************************/
enum CSDR_HRPD_MEAS_TYPE_ENUM
{
    CSDR_HRPD_MEAS_TYPE_MEAS_AFTER_ONGOING                  = 0x0000, /**< Measure using the existing buffer. Potentially the buffer is filled when
receiving the request.  No new buffering shall be done after the measurements. 
This is only used for serving frequency measurements. */
    CSDR_HRPD_MEAS_TYPE_BUFFER_MEAS                         = 0x0001, /**< Fill the buffer and measure when the buffer is filled. */
    CSDR_HRPD_MEAS_TYPE_BUFFER_MEAS_BUFFER                  = 0x0002, /**< Fill the buffer and measure when the buffer is filled. When all measurements
are done fill the buffer again. This is only used for serving frequency
measurements. */
    CSDR_HRPD_MEAS_TYPE_MEAS_BUFFER_AFTER_ONGOING           = 0x0003, /**< Measure using the existing buffer. Potentially the buffer is filled when
receiving the request. The measurements shall be started when the ongoing
buffering is finished. When all measurements are done fill the buffer again. 
This is only used for serving frequency measurements. */
    CSDR_HRPD_MEAS_TYPE_BUTT                                = 0x0004
};
typedef PHY_UINT16 CSDR_HRPD_MEAS_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_CDMA_EUTRA_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_HRPD_CDMA_EUTRA_ENUM
{
    CSDR_HRPD_CDMA_EUTRA_SYNCHRONIZED                       = 0x0000,
    CSDR_HRPD_CDMA_EUTRA_NOT_SYNCHRONIZED                   = 0x0001,
    CSDR_HRPD_CDMA_EUTRA_BUTT                               = 0x0002
};
typedef PHY_UINT16 CSDR_HRPD_CDMA_EUTRA_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_HRPD_FRAM_HEAD_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_HRPD_FRAM_HEAD_ENUM
{
    CSDR_HRPD_FRAME_HEAD_NOT_PRESENT    = 0x0000,
    CSDR_HRPD_FRAME_HEAD_PRESENT        = 0x0001,
    CSDR_HRPD_FRAME_HEAD_BUTT           = 0x0002
};
typedef PHY_UINT16 CSDR_HRPD_FRAM_HEAD_ENUM_UINT16;

/*******************************************************************************
 4. Message Header declaration
*******************************************************************************/

/*******************************************************************************
 5. Message declaration
*******************************************************************************/

/*******************************************************************************
 6. STRUCT and UNION declaration
*******************************************************************************/

/** ****************************************************************************
 * Name        : CSDR_HRPD_PILOT_STRU
 *
 * Description : This struct includes the pilot search result of one pilot.
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwPNOffset;         /**< the PN Offset of the pilot. Note: If the system time is not known the PN Offset might not be correct. Range 0..511 */
    PHY_UINT16                          uhwEnergy;           /**< 0..65535, correlation energy */
    PHY_UINT32                          uwFirstPathFramePos; /**< 0-(32768*4-1), 1/4chip for base cnt */
} CSDR_HRPD_PILOT_STRU;

/** ****************************************************************************
 * Name        : CSDR_HRPD_MEASUREMENT_STRU
 *
 * Description : This struct carries measured values for one cell. If the cell
 * is not found shwRscp is set to CSDR_HRPD_NOT_VALID_SW.
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwPNOffset;         /**< PN Offset */
    PHY_INT16                           shwRscp;             /**< -1080..-8, resolution 1/8dBm, RSCP or if cell is not found CSDR_HRPD_NOT_VALID_SHW */
    PHY_INT16                           shwEcN0;             /**< -200..0, resolution 1/8dB, EcN0 */
    PHY_UINT16                          uhwReserved;         /**< 32 bit alignment */
    PHY_UINT32                          uwFirstPathFramePos; /**< 0-(32768*4-1), 1/4chip for base cnt , use the strong path but not change the name */
} CSDR_HRPD_MEASUREMENT_STRU;

/** ****************************************************************************
 * Name        : CSDR_HRPD_SIGNAL_LEVEL_STRU
 *
 * Description : This struct carries measured signal level values for one
 * frequency.
 *******************************************************************************/
typedef struct
{
    PHY_INT16                           shwFreqRssi; /**< -880..0, resolution 0.125dBm. Measured RSSI on the frequency */
    PHY_UINT16                          uhwReserved; /**< 32 bit alignment */
} CSDR_HRPD_SIGNAL_LEVEL_STRU;

/** ****************************************************************************
 * Name        : CSDR_HRPD_MPS_STRU
 *
 * Description : This struct carries MPS values for one cell. If the cell is
 * not found shwRscp is set to CSDR_HRPD_NOT_VALID_SW.
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwPNOffset;         /**< PN Offset 0..511 */
    PHY_INT16                           shwRscp;             /**< -1080..-8, resolution 1/8dBm, RSCP, or if cell is not found CSDR_HRPD_NOT_VALID_SHW */
    PHY_INT16                           shwRscpFilter;       /**< -1080..-8, resolution 1/8dBm, RSCP, or if cell is not found CSDR_HRPD_NOT_VALID_SHW */
    PHY_INT16                           shwEcN0;             /**< -200..0, resolution 1/8dB. EcN0 */
    PHY_UINT32                          uwDelaySpreadRMS;    /**< The RMS of the delay spread in 1/4 chips. Used for window placement. */
    PHY_UINT32                          uwFirstPathFramePos; /**< Frame Pos of the first used path. Used for timing maintenance and window placement. In 1/4 chips 0-(32768*4-1) in base cnt */
    PHY_UINT32                          uwLastPathFramePos;  /**< Frame Pos of the last used path. Used for window placement. In 1/4 chips 0-(32768*4-1) in base cnt */
    PHY_UINT32                          uwNoiseEnergy;       /**< The sum energy of noise */
    PHY_INT16                           shwRelativeStrength; /**< -200..0, resolution 1/8dB, or . Relative strength of the pilot. */
    PHY_INT16                           shwReserved;         /**< 32 bit alignment */
} CSDR_HRPD_MPS_STRU;

/** ****************************************************************************
 * Name        : CSDR_HRPD_PN_CFG_STRU
 *
 * Description : This struct contains pairs of PNOffset, DataOffset in buffer
 * and window position.
 *******************************************************************************/
typedef struct
{
    PHY_UINT16                          uhwPNOffset;      /**< the PN Offset of the pilot to be measured. Range 0..511 */
    PHY_UINT16                          uhwDataOffset;    /**< Range 0..1787, unit 1/4 chips */
    PHY_UINT32                          uwWindowPosition; /**< Tail of the search window, unit 1/4 chips in base cnt, PICH frame head */
} CSDR_HRPD_PN_CFG_STRU;

/** ****************************************************************************
 * Name        : CSDR_HRPD_CDMA_TIME_STRU
 *
 * Description : The CDMA system time in SIB8 (IE SystemTimeInfoCDMA2000 in
 * 36.331)
 *******************************************************************************/
typedef struct
{
    CSDR_HRPD_CDMA_EUTRA_ENUM_UINT16    uhwSystemTimeType;          /**< Sync or Async asynchronousSystemTime The CDMA2000 system time corresponding to the SFN boundary at or after the ending boundary of the SI-Window in which SystemInformationBlockType8 is transmitted. If not synchronized then the size is 49 bits and the unit is [8 CDMA2000 chips based on 1.2288 Mcps].
synchronousSystemTime CDMA2000 system time corresponding to the SFN boundary at or after the ending boundary of the SI-window in which SystemInformationBlockType8 is transmitted. If synchronized to CDMA2000 system time then the size is 39 bits and the unit is 10 ms based on a 1.2288 Mcps chip rate.
 */
    PHY_UINT16                          uhwReserved;                /**< 32 bit alignment */
    PHY_UINT32                          uwSystemTimeLow32BitsValue; /**< The lower 32 bits value of system time */
    PHY_UINT32                          uwSystemTimeHighBitsValue;  /**< The higher bits value of system time */
} CSDR_HRPD_CDMA_TIME_STRU;

/** ****************************************************************************
 * Name        : CSDR_HRPD_LTE_CDMA_TIME_STRU
 *
 * Description : Parameters for synchronization between LTE and CDMA time used
 * in HRPD slave mode.
 *******************************************************************************/
typedef struct
{
    CSDR_HRPD_CDMA_TIME_STRU            stSystemTimeInfoCDMA; /**< absolute time in the current cell */
    PHY_UINT16                          uhwLteSfn;            /**< SFN boundary at or after the ending boundary of the SI-Window in which SystemInformationBlockType8 is transmitted */
    PHY_UINT16                          uhwReserved;          /**< 32 bit alignment */
    PHY_UINT32                          auwTimeStamp[2];      /**< the time stamp when Lrrc proc sib8 was received  auwTimeStamp[0]:LET timing;auwTimeStamp[1]:32K comm timing */
} CSDR_HRPD_LTE_CDMA_TIME_STRU;

/*******************************************************************************
 7. OTHER declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_PILOT_SEARCH_REQ_STRU
 *
 * Description : Pilot search request.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDSM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_INT32                           swInitialPpm; /**< initial ppm value or CSDR_HRPD_NOT_VALID_SW */
} CPROC_CSDR_HRPD_PILOT_SEARCH_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_PILOT_SEARCH_IND_STRU
 *
 * Description : Returns the result of a pilot search started by
 * CPROC_CSDR_HRPD_PILOT_SEARCH_REQ.
 *
 * CSDR_CPROC_HRPD_PILOT_SEARCH_IND is sent from CSDR_HRPD to CPROC_HRPD
 * -  when pilot search for one frequency requested in a
 *    CPROC_CSDR_HRPD_PILOT_SEARCH_REQ is finished. enStopReason is set to
 *    CSDR_HRPD_STOP_REASON_FINISHED.
 * -  when pilot search is stopped by a CPROC_CSDR_HRPD_PILOT_SEARCH_STOP_REQ
 *    requesting a stop. enStopReason is set to CSDR_HRPD_STOP_REASON_CPROC.
 * -  when slave BSR is stopped by the master RAT. enStopReason is set to
 *    CSDR_HRPD_STOP_REASON_MASTER.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDSM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_HRPD_PILOT_STRU                stResult[32]; /**< results in decreasing energy order */
    PHY_UINT16                          uhwNumPilots; /**< number of pilots, 0..32 */
    CSDR_HRPD_STOP_REASON_ENUM_UINT16   enStopReason; /**< Indicates why meas was reported */
} CSDR_CPROC_HRPD_PILOT_SEARCH_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_PILOT_SEARCH_STOP_REQ_STRU
 *
 * Description : Requests stop of pilot search.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDSM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CPROC_CSDR_HRPD_PILOT_SEARCH_STOP_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_PILOT_SEARCH_STOP_CNF_STRU
 *
 * Description : Confirms CPROC_CSDR_HRPD_PILOT_SEARCH_STOP_REQ. In slave mode
 * it is used to indicate end of gap (CSDR_HRPD received INT_2 or INT_4 from
 * LTE).
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDSM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_PILOT_SEARCH_STOP_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_SIGNAL_LEVEL_REQ_STRU
 *
 * Description : Signal level request.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDSM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CPROC_CSDR_HRPD_SIGNAL_LEVEL_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_SIGNAL_LEVEL_IND_STRU
 *
 * Description : Returns the result of a signal level started by
 * CPROC_CSDR_HRPD_SIGNAL_LEVEL_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDSM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_HRPD_STOP_REASON_ENUM_UINT16   enStopReason; /**< finished or stopped by master */
    PHY_UINT16                          uhwReserved;  /**< 32 bit alignment */
    CSDR_HRPD_SIGNAL_LEVEL_STRU         stResult;     /**< results */
} CSDR_CPROC_HRPD_SIGNAL_LEVEL_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_MEAS_REQ_STRU
 *
 * Description : This signal is used to request measurements from CSDR_HRPD.
 * The measurement request shall be performed once, and then reported.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDSM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_HRPD_MEAS_TYPE_ENUM_UINT16     enBufferMeas;                                  /**< buffer before and/or after meas  or no buffering */
    PHY_UINT16                          uhwCorrelatorNum;                              /**< Number of correlators to be used */
    PHY_UINT32                          uwBufferWindow;                                /**< head of buffer window, unit 1/4 chip 0..4095. Buffering shall start when (base_cnt - uwBufferWindow % 4*1024 = 0 */
    CSDR_HRPD_MEAS_FREQ_ENUM_UINT16     enSFFlag;                                      /**< Candidate Frequency, Serving Frequency */
    CSDR_HRPD_ANTENNA_ENUM_UINT16       enAntSel;                                      /**< Measure using samples from Ant1 or Ant2 */
    CSDR_HRPD_FREQ_INFO_STRU            stFreq;                                        /**< This parameter shall be ignored when uhwSFFlag=1 */
    PHY_UINT16                          uhwRsv;                                        /**< 32 bit alignment */
    PHY_UINT16                          uhwPNNum;                                      /**< Number of pilots to measure. */
    CSDR_HRPD_PN_CFG_STRU               astPNList[CSDR_HRPD_MAX_MEAS_REQ_PN_LIST_NUM]; /**< Cells to be measured */
} CPROC_CSDR_HRPD_MEAS_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_STOP_MEAS_REQ_STRU
 *
 * Description : This signal tells CSDR_HRPD to stop any ongoing measurements.
 * Upon reception, CSDR_HRPD stops any ongoing measurements immediately. The
 * results that were already finished shall be sent to CPROC_HRPD with a
 * CSDR_CPROC_HRPD_MEAS_IND. If no results were ready, a
 * CSDR_CPROC_HRPD_MEAS_IND shall be sent with number of PNs = 0.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDSM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CPROC_CSDR_HRPD_STOP_MEAS_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_MEAS_IND_STRU
 *
 * Description : CSDR_CPROC_HRPD_MEAS_IND is sent from CSDR_HRPD to CPROC_HRPD
 * -  when measurements of cells requested in a CPROC_CSDR_1X_START_MEAS_REQ
 *    are finished. enStopReason is set to CSDR_HRPD_STOP_REASON_FINISHED.
 * -  when measurements are stopped by a CPROC_CSDR_1X_STOP_MEAS_REQ requesting
 *    a report. The signal contains the results of measurements that were
 *    finished before the stop and enStopReason is set to
 *    CSDR_HRPD_STOP_REASON_CPROC.
 * -  when slave measurements are stopped by the master RAT. The signal
 *    contains the results of measurements that were finished before the stop
 *    and enStopReason is set to CSDR_HRPD_STOP_REASON_MASTER.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDSM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_HRPD_MEAS_FREQ_ENUM_UINT16     enSFFlag;                                           /**< Candidate Frequency, Serving Frequency */
    PHY_UINT16                          uhwPNNum;                                           /**< Number of measured PNs in this indication */
    CSDR_HRPD_STOP_REASON_ENUM_UINT16   enStopReason;                                       /**< Indicates why meas was reported */
    PHY_UINT16                          uhwReserved;                                        /**< 32 bit alignment */
    CSDR_HRPD_FREQ_INFO_STRU            stFreq;                                             /**< CDMA frequency */
    CSDR_HRPD_MEASUREMENT_STRU          astMeasurement[CSDR_HRPD_MAX_MEAS_IND_PN_LIST_NUM]; /**< PN list */
} CSDR_CPROC_HRPD_MEAS_IND_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_MEAS_REPORT_IND_STRU
 *
 * Description : CSDR_CPROC_HRPD_MEAS_REPORT_IND is sent when master RAT orders
 * a report of measurement results, i.e. INT5. This is only used in slave mode.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDSM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_MEAS_REPORT_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_MPS_REQ_STRU
 *
 * Description : This signal is used to request multipath search from
 * CSDR_HRPD. The signal always carries the complete list of MPS's to perform.
 *
 * The request contains 1-6 cells whereof
 * 1-6 Active set cells, type CSDR_HRPD_CELL_TYPE_AS or
 * CSDR_HRPD_CELL_TYPE_AS_IC
 * 1-6 Potential interference cancellation cells, type
 * CSDR_HRPD_CELL_TYPE_AS_IC or CSDR_HRPD_CELL_TYPE_IC
 * After pilot search MPS is used to detect false identified pilots. The
 * request contains 2 cells to measure both of type CSDR_HRPD_CELL_TYPE_MEAS.
 *
 * Serving cell, SC, is one of the active set cells. The selection is
 * communicated within CSDR.
 * CSDR selects 0, 1, or 2 interference cancellation cells named IC1 and IC2
 * using the first cells in the astMPSList which are potential interference
 * cancellation cells and not SC.
 * PC, power control cells only, are the active set cells that are not SC and
 * not IC1 or IC2.
 *
 * The MPS shall be performed in the following order:
 * SC is performed first in every MPS cycle (26.67 ms).
 * All ICs are performed in every MPS cycle (26.67 ms).
 * All PCs are performed at least every 80 ms.
 * SC is performed when no IC or PC are performed, i.e. no idle periods.
 *
 * The MPS period is then (with period for SC, IC, PC respectively)
 * SC (6.67ms, -, -):
 * SC + SC + SC + SC
 *
 * SC + PC (max 13.33ms, 26.67ms, -):
 * SC + PC1 + SC + SC
 *
 * SC + 2 PC (max 20ms, 26.67ms, -):
 * SC + PC1 + PC2 + SC
 *
 * SC + 3 PC (26.67ms, 26.67ms, -):
 * SC + PC1 + PC2 + PC3
 *
 * SC + 4 PC (max 26.67ms, 53.33ms, -):
 * SC + PC1 + PC2 + PC3 + SC + PC4 + SC + SC
 *
 * SC + 5 PC (max 26.67ms, 53.33ms, -):
 * SC + PC1 + PC2 + PC3 + SC + PC4 + PC5 + SC
 *
 * SC + IC (max 13.33ms, -, 26.67ms):
 * SC + IC1 + SC + SC
 *
 * SC + PC + IC (max 20ms, 26.67ms, 26.67ms):
 * SC + IC1 + PC1 + SC
 *
 * SC + 2 PC + IC (26.67ms, 26.67ms, 26.67ms):
 * SC + IC1 + PC1 + PC2
 *
 * SC + 3 PC + IC (max 26.67ms, 53.33ms, 26.67ms):
 * SC + IC1 + PC1 + PC2 + SC + IC1 + PC3 + SC
 *
 * SC + 4 PC + IC (26.67ms, 53.33ms, 26.67ms):
 * SC + IC1 + PC1 + PC2 + SC + IC1 + PC3 + PC4
 *
 * SC + 2 IC (max 20ms, -, 26.67ms):
 * SC + IC1 + IC2 + SC
 *
 * SC + PC + 2 IC (max 20ms, 26.67ms, 26.67ms):
 * SC + IC1 + IC2 + PC1
 *
 * SC + 2 PC + 2 IC (26.67ms, 53.33ms, 26.67ms):
 * SC + IC1 + IC2 + PC1 + SC + IC1 + IC2 + PC2
 *
 * SC + 3 PC + 2 IC (26.67ms, 80ms, 26.67ms):
 * SC + IC1 + IC2 + PC1 + SC + IC1 + IC2 + PC2 + SC + IC1 + IC2 + PC3
 *
 * The results are reported every 26.67 ms after SC.
 *
 * If the enMPSType is not set to CSDR_HRPD_MPS_TYPE_WINDOW_UPDATE, the
 * sequence is restarted. The available results are reported.
 * If the enMPSType is set to CSDR_HRPD_MPS_TYPE_WINDOW_UPDATE only the windows
 * are updated and all other parameters shall be ignored. The sequence is not
 * restarted.
 *
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDSM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT16                          uhwUnitNum;                        /**< number of correlator units to be used for MPS 1..2 */
    CSDR_HRPD_MPS_TYPE_ENUM_UINT16      enMPSType;                         /**< Continuous, Continuous with quick MPS, One shot, Window Position Update */
    PHY_UINT16                          uhwUseDiversityAntenna;            /**< diversity antenna enable/disable */
    PHY_UINT16                          uhwMPSPNNum;                       /**< Number of cells/sectors on which to perform MPS. 1..CSDR_HRPD_MAX_AS_SIZE */
    CSDR_HRPD_MPS_PN_CFG_STRU           astMPSList[CSDR_HRPD_MAX_AS_SIZE]; /**< MPS list */
} CPROC_CSDR_HRPD_MPS_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_MPS_IND_STRU
 *
 * Description : This signal is sent from CSDR_HRPD to CPROC_HRPD
 * - When a one shot MPS has been performed
 * - Every 26.67ms directly after the serving cell has been measured
 * - When MPS has been stopped by a CPROC_CSDR_HRPD_STOP_MPS_REQ requesting a
 * report. In this case the signal contains the results of measurements that
 * were finished before the stop.
 *
 * shwAsTotalEcIo and shwAsTotalEc includes results from cells of type
 * CSDR_HRPD_CELL_TYPE_AS and CSDR_HRPD_CELL_TYPE_AS_IC. If all cells are not
 * measured the parameters are set to CSDR_HRPD_NOT_VALID_SHW.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDSM_MSG_TYPE_ENUM_UINT16                         enMsgId;
    PHY_UINT16                                              uhwOpId;
    PHY_UINT32                                              uwFramePos;                                      /**< the base cnt of Frame head  0..512*64*16-1 resolution 1/16chip */
    PHY_INT16                                               shwFreqRssi;                                     /**< -880..0, resolution 0.125dBm. Measured RSSI on the frequency */
    PHY_INT16                                               shwAsTotalEcIo;                                  /**< -25..15, CSDR_HRPD_NOT_VALID_SHW resolution 0.125dBm. Total EcIo of the Active set, from main antenna */
    PHY_INT16                                               shwAsTotalEc;                                    /**< -, CSDR_HRPD_NOT_VALID_SHW resolution 0.125dBm. total Ec of the Active set */
    CSDR_HRPD_MPS_STOP_REASON_ENUM_UINT16                   enStopReason;                                    /**< stop reason */
    PHY_UINT16                                              uhwReserve;
    PHY_UINT16                                              uhwNumOfPilots;                                  /**< Number of pilots in MPS result [1..CSDR_HRPD_MAX_AS_SIZE_MPS_IND] */
    CSDR_HRPD_MPS_STRU                                      astMPSResultMain[CSDR_HRPD_MAX_AS_SIZE_MPS_IND]; /**< MPS result main antenna */
    CSDR_HRPD_MPS_STRU                                      astMPSResultDiv[CSDR_HRPD_MAX_AS_SIZE_MPS_IND];  /**< MPS result diversity antenna */
} CSDR_CPROC_HRPD_MPS_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_STOP_MPS_REQ_STRU
 *
 * Description : This signal tells CSDR_HRPD to stop any ongoing MPS. Upon
 * reception, CSDR_HRPD stops any ongoing MPS immediately. The results that
 * were already finished shall be sent to CPROC_HRPD.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDSM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CPROC_CSDR_HRPD_STOP_MPS_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_STOP_MPS_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDSM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_STOP_MPS_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_SM_RESET_REQ_STRU
 *
 * Description : This signal resets CSDR_HRPD_SearchMeasurer.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDSM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CPROC_CSDR_HRPD_SM_RESET_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_SM_RESET_CNF_STRU
 *
 * Description : This signal confirms CPROC_CSDR_HRPD_SM_RESET_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDSM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CPROC_HRPD_SM_RESET_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CSDR_HRPD_SLAVE_TIMING_REQ_STRU
 *
 * Description : CPROC_CSDR_HRPD_SLAVE_TIMING_REQ requests basecnt value for
 * HRPD frame head in slave mode to be used for measurement configuration.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDSM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT16                          uhwRsv;           /**< 32 bit alignment */
    CSDR_HRPD_LTE_CDMA_TIME_ENUM_UINT16 enSystimePresent; /**< valid flag for stLteCdmaTime */
    CSDR_HRPD_LTE_CDMA_TIME_STRU        stLteCdmaTime;    /**< LTE - CDMA system time relation */
} CPROC_CSDR_HRPD_SLAVE_TIMING_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CPROC_HRPD_SLAVE_TIMING_CNF_STRU
 *
 * Description : Confirms CPROC_CSDR_HRPD_SLAVE_TIMING_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDRHRPDSM_MSG_TYPE_ENUM_UINT16     enMsgId;
    PHY_UINT16                          uhwOpId;
    PHY_UINT16                          uhwRsv;                 /**< 32 bit alignment */
    CSDR_HRPD_FRAM_HEAD_ENUM_UINT16     enHrpdFrameHeadPresent; /**< valid flag for uwBaseCnt of HRPD frame head */
    PHY_UINT32                          uwBaseCnt;              /**< HRPD frame head in basecnt 1/4 chips 0-(32768*4-1) */
} CSDR_CPROC_HRPD_SLAVE_TIMING_CNF_STRU;

/*******************************************************************************
 8. Global  declaration
*******************************************************************************/

/*******************************************************************************
 9. Function declarations
*******************************************************************************/

#if ((VOS_OS_VER == VOS_WIN32) || (VOS_OS_VER == VOS_NUCLEUS))
#pragma pack()
#else
#pragma pack(0)
#endif

#ifdef __cplusplus
#if __cplusplus
}
#endif /* __cpluscplus */
#endif /* __cpluscplus */

#endif
