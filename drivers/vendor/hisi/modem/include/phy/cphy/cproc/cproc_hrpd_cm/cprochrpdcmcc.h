/** ****************************************************************************

                    Huawei Technologies Sweden AB (C), 2001-2015

 ********************************************************************************
 * @author    Automatically generated by DAISY
 * @version
 * @date      2015-10-13
 * @file
 * @brief
 * CPROCHRPDCMCC carries control channel configurations, pilot search requests
 * and system time updates from HRPD_Layer_3_AS to CPROC_HRPD. It includes:
 * -  Input: Set mode requests.
 * -  Input: Pilot Search requests. Frequency: Once per list of frequencies to
 *    perform pilot search on.
 * -  Input: Control Channel Configuration requests. Frequency: Once per
 *    configuration.
 * -  Input: Release requests. Frequency: Once per release.
 * -  Input: System Time update. Frequency: Once per system acquisition.
 * -  Output: Confirms to the requester. Frequency: Once per
 *    configuration/release.
 * -  Output: CPROC_CAS_HRPD_WAKEUP_IND. Frequency: Once per paging cycle in
 *    IDLE_DRX.
 * -  Output: CPROC_CAS_HRPD_SLEEP_IND. Frequency: When end of sleep capsule is
 *    detected in CPROC_HRPD.
 * -  Output: CPROC_CAS_HRPD_SEARCH_PILOT_IND. Frequency: Once per Pilot Search
 *    request.
 * @copyright Huawei Technologies Sweden AB
 *******************************************************************************/
#ifndef CPROCHRPDCMCC_H
#define CPROCHRPDCMCC_H

/*******************************************************************************
 1. Other files included
*******************************************************************************/

#include "vos.h"
#include "cproc_hrpd.h"

#ifdef __cplusplus
#if __cplusplus
    extern "C" {
#endif /* __cpluscplus */
#endif /* __cpluscplus */
#pragma pack(4)

/*******************************************************************************
 2. Macro definitions
*******************************************************************************/

/**
 * Maximum number of PN offsets to be avoided in pilot search.
 */
#define CPROC_HRPD_MAX_AVOID_PN                             ( 0xA )
#define CPROC_HRPD_NOT_VALID_US                             ( 0xFFFF )
/**
 * Maximum number of channels in one request of HRPD Initial Pilot Search.
 */
#define CPROC_HRPD_CS_MAX_CHANNEL_NUM                       ( 20 )
/**
 * The maximum number of pilots in the signal level request.
 */
#define CPROC_HRPD_MAX_FREQ_IN_PILOT_SEARCH                 ( 20 )
/**
 * The maximum number of pilots in the signal level request.
 */
#define CPROC_HRPD_MAX_FREQ_IN_SIGNAL_LEVEL                 ( 16 )
/**
 * Max number of paging masks.
 * One for PI, one for BCI (and CCI).
 */
#define CPROC_HRPD_MAX_NBR_PAGING_MASK                      ( 2 )
/**
 * Maximum number of LTE measurement frequencies to schedule gaps for.
 */
#define CPROC_HRPD_MAX_LTE_MEAS_FQ                          ( 20 )

/*******************************************************************************
 3. Enumerations declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROCHRPDCMCC_MSG_TYPE_ENUM
{
    ID_CAS_CPROC_HRPD_SIGNAL_LEVEL_REQ                      = 0x4200, /**< @sa CAS_CPROC_HRPD_SIGNAL_LEVEL_REQ_STRU */
    ID_CPROC_CAS_HRPD_SIGNAL_LEVEL_IND                      = 0x4201, /**< @sa CPROC_CAS_HRPD_SIGNAL_LEVEL_IND_STRU */
    ID_CAS_CPROC_HRPD_RESET_REQ                             = 0x4202, /**< @sa CAS_CPROC_HRPD_RESET_REQ_STRU */
    ID_CPROC_CAS_HRPD_RESET_CNF                             = 0x4203, /**< @sa CPROC_CAS_HRPD_RESET_CNF_STRU */
    ID_CAS_CPROC_HRPD_SET_MODE_REQ                          = 0x4204, /**< @sa CAS_CPROC_HRPD_SET_MODE_REQ_STRU */
    ID_CPROC_CAS_HRPD_SET_MODE_CNF                          = 0x4205, /**< @sa CPROC_CAS_HRPD_SET_MODE_CNF_STRU */
    ID_CPROC_CAS_HRPD_WAKEUP_IND                            = 0x4206, /**< @sa CPROC_CAS_HRPD_WAKEUP_IND_STRU */
    ID_CPROC_CAS_HRPD_SLEEP_IND                             = 0x4207, /**< @sa CPROC_CAS_HRPD_SLEEP_IND_STRU */
    ID_CAS_CPROC_HRPD_CC_CONFIG_REQ                         = 0x4208, /**< @sa CAS_CPROC_HRPD_CC_CONFIG_REQ_STRU */
    ID_CPROC_CAS_HRPD_CC_CONFIG_CNF                         = 0x4209, /**< @sa CPROC_CAS_HRPD_CC_CONFIG_CNF_STRU */
    ID_CPROC_CAS_HRPD_ACTIVE_CELL_IND                       = 0x420A, /**< @sa CPROC_CAS_HRPD_ACTIVE_CELL_IND_STRU */
    ID_CAS_CPROC_HRPD_SEARCH_PILOT_REQ                      = 0x420B, /**< @sa CAS_CPROC_HRPD_SEARCH_PILOT_REQ_STRU */
    ID_CPROC_CAS_HRPD_SEARCH_PILOT_IND                      = 0x420C, /**< @sa CPROC_CAS_HRPD_SEARCH_PILOT_IND_STRU */
    ID_CAS_CPROC_HRPD_SEARCH_PILOT_STOP_REQ                 = 0x420D, /**< @sa CAS_CPROC_HRPD_SEARCH_PILOT_STOP_REQ_STRU */
    ID_CPROC_CAS_HRPD_SEARCH_PILOT_STOP_CNF                 = 0x420E, /**< @sa CPROC_CAS_HRPD_SEARCH_PILOT_STOP_CNF_STRU */
    ID_CAS_CPROC_HRPD_SYSTIME_UPDATE_REQ                    = 0x420F, /**< @sa CAS_CPROC_HRPD_SYSTIME_UPDATE_REQ_STRU */
    ID_CPROC_CAS_HRPD_SYSTIME_UPDATE_IND                    = 0x4210, /**< @sa CPROC_CAS_HRPD_SYSTIME_UPDATE_IND_STRU */
    ID_CPROC_CAS_HRPD_ERROR_IND                             = 0x4211, /**< @sa CPROC_CAS_HRPD_ERROR_IND_STRU */
    ID_CPROC_CAS_HRPD_NO_RF_IND                             = 0x4212, /**< @sa CPROC_CAS_HRPD_NO_RF_IND_STRU */
    ID_CPROC_CAS_HRPD_RF_IND                                = 0x4213, /**< @sa CPROC_CAS_HRPD_RF_IND_STRU */
    ID_CAS_CPROC_HRPD_LTE_MEAS_REQ                          = 0x4214, /**< @sa CAS_CPROC_HRPD_LTE_MEAS_REQ_STRU */
    ID_CPROC_CAS_HRPD_LTE_MEAS_CNF                          = 0x4215, /**< @sa CPROC_CAS_HRPD_LTE_MEAS_CNF_STRU */
    ID_CAS_CPROC_HRPD_STOP_LTE_MEAS_REQ                     = 0x4216, /**< @sa CAS_CPROC_HRPD_STOP_LTE_MEAS_REQ_STRU */
    ID_CPROC_CAS_HRPD_STOP_LTE_MEAS_CNF                     = 0x4217, /**< @sa CPROC_CAS_HRPD_STOP_LTE_MEAS_CNF_STRU */
    ID_CAS_CPROC_HRPD_LTE_BSR_REQ                           = 0x4218, /**< @sa CAS_CPROC_HRPD_LTE_BSR_REQ_STRU */
    ID_CPROC_CAS_HRPD_LTE_BSR_CNF                           = 0x4219, /**< @sa CPROC_CAS_HRPD_LTE_BSR_CNF_STRU */
    ID_CAS_CPROC_HRPD_STOP_LTE_BSR_REQ                      = 0x421A, /**< @sa CAS_CPROC_HRPD_STOP_LTE_BSR_REQ_STRU */
    ID_CPROC_CAS_HRPD_STOP_LTE_BSR_CNF                      = 0x421B, /**< @sa CPROC_CAS_HRPD_STOP_LTE_BSR_CNF_STRU */
    ID_CAS_CPROC_HRPD_READ_LTE_NL_REQ                       = 0x421C, /**< @sa CAS_CPROC_HRPD_READ_LTE_NL_REQ_STRU */
    ID_CPROC_CAS_HRPD_READ_LTE_NL_CNF                       = 0x421D, /**< @sa CPROC_CAS_HRPD_READ_LTE_NL_CNF_STRU */
    ID_CAS_CPROC_HRPD_STOP_LTE_NL_REQ                       = 0x421E, /**< @sa CAS_CPROC_HRPD_STOP_LTE_NL_REQ_STRU */
    ID_CPROC_CAS_HRPD_STOP_LTE_NL_CNF                       = 0x421F, /**< @sa CPROC_CAS_HRPD_STOP_LTE_NL_CNF_STRU */
    ID_CAS_CPROC_HRPD_REL_ALL_REQ                           = 0x4220, /**< @sa CAS_CPROC_HRPD_REL_ALL_REQ_STRU */
    ID_CPROC_CAS_HRPD_REL_ALL_CNF                           = 0x4221, /**< @sa CPROC_CAS_HRPD_REL_ALL_CNF_STRU */
    ID_CAS_CPROC_HRPD_SEARCH_PILOT_SUSPEND_REQ              = 0x4222, /**< @sa CAS_CPROC_HRPD_SEARCH_PILOT_SUSPEND_REQ_STRU */
    ID_CPROC_CAS_HRPD_SEARCH_PILOT_SUSPEND_CNF              = 0x4223, /**< @sa CPROC_CAS_HRPD_SEARCH_PILOT_SUSPEND_CNF_STRU */
    ID_CAS_CPROC_HRPD_SEARCH_PILOT_RESUME_REQ               = 0x4224, /**< @sa CAS_CPROC_HRPD_SEARCH_PILOT_RESUME_REQ_STRU */
    ID_CPROC_CAS_HRPD_SEARCH_PILOT_RESUME_CNF               = 0x4225, /**< @sa CPROC_CAS_HRPD_SEARCH_PILOT_RESUME_CNF_STRU */
    ID_CAS_CPROC_HRPD_CC_STOP_REQ                           = 0x4226, /**< @sa CAS_CPROC_HRPD_CC_STOP_REQ_STRU */
    ID_CPROC_CAS_HRPD_CC_STOP_CNF                           = 0x4227, /**< @sa CPROC_CAS_HRPD_CC_STOP_CNF_STRU */
    ID_CAS_CPROC_HRPD_TIME_SYNC_REQ                         = 0x4228, /**< @sa CAS_CPROC_HRPD_TIME_SYNC_REQ_STRU */
    ID_CPROC_CAS_HRPD_TIME_SYNC_IND                         = 0x4229, /**< @sa CPROC_CAS_HRPD_TIME_SYNC_IND_STRU */
    ID_CAS_CPROC_HRPD_CONNECTION_STATUS_REQ                 = 0x422A, /**< @sa CAS_CPROC_HRPD_CONNECTION_STATUS_REQ_STRU */
    ID_CPROCHRPDCMCC_MSG_TYPE_ENUM_BUTT                     = 0x422B
};
typedef VOS_UINT16 CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_IDP_SUBTYPE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_HRPD_IDP_SUBTYPE_ENUM
{
    CPROC_HRPD_IDP_SUBTYPE_DEFAULT      = 0x0000,
    CPROC_HRPD_IDP_SUBTYPE_NOT_DEFAULT  = 0x0001,
    CPROC_HRPD_IDP_SUBTYPE_ENUM_BUTT    = 0x0002
};
typedef VOS_UINT16 CPROC_HRPD_IDP_SUBTYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_CONNECTION_STATUS_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_HRPD_CONNECTION_STATUS_ENUM
{
    CPROC_HRPD_CONNECTION_STATUS_OPEN   = 0x0000,
    CPROC_HRPD_CONNECTION_STATUS_CLOSED = 0x0001,
    CPROC_HRPD_CONNECTION_STATUS_BUTT   = 0x0002
};
typedef VOS_UINT16 CPROC_HRPD_CONNECTION_STATUS_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_RSLT_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_HRPD_RSLT_ENUM
{
    CPROC_HRPD_RSLT_SUCC                = 0x0000,
    CPROC_HRPD_RSLT_FAIL                = 0x0001,
    CPROC_HRPD_RSLT_ENUM_BUTT           = 0x0002
};
typedef VOS_UINT16 CPROC_HRPD_RSLT_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_CC_CFG_RESULT_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_HRPD_CC_CFG_RESULT_ENUM
{
    CPROC_HRPD_CC_CFG_RESULT_SUCCESS                        = 0x0000,
    CPROC_HRPD_CC_CFG_RESULT_CELL_NOT_FOUND                 = 0x0001,
    CPROC_HRPD_CC_CFG_RESULT_FAIL_TX_ACC                    = 0x0002,
    CPROC_HRPD_CC_CFG_RESULT_BUTT                           = 0x0003
};
typedef VOS_UINT16 CPROC_HRPD_CC_CFG_RESULT_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_PILOT_SEARCH_RES_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_HRPD_PILOT_SEARCH_RES_ENUM
{
    CPROC_HRPD_PILOT_SEARCH_RES_FOUND                       = 0x0000,
    CPROC_HRPD_PILOT_SEARCH_RES_NOT_FOUND                   = 0x0001,
    CPROC_HRPD_PILOT_SEARCH_RES_ERROR                       = 0x0002,
    CPROC_HRPD_PILOT_SEARCH_RES_BUTT                        = 0x0003
};
typedef VOS_UINT16 CPROC_HRPD_PILOT_SEARCH_RES_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_CC_SETUP_STATE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_HRPD_CC_SETUP_STATE_ENUM
{
    CPROC_HRPD_CC_SETUP_STATE_IDLE_DRX                      = 0x0000,
    CPROC_HRPD_CC_SETUP_STATE_CONTINUOUS                    = 0x0001,
    CPROC_HRPD_CC_SETUP_STATE_BUTT                          = 0x0002
};
typedef VOS_UINT16 CPROC_HRPD_CC_SETUP_STATE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_CDMA_EUTRA_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_HRPD_CDMA_EUTRA_ENUM
{
    CPROC_HRPD_CDMA_EUTRA_SYNCHRONIZED                      = 0x0000,
    CPROC_HRPD_CDMA_EUTRA_NOT_SYNCHRONIZED                  = 0x0001,
    CPROC_HRPD_CDMA_EUTRA_BUTT                              = 0x0002 /**< Indicates if CDMA and EUTRA networks are synchronized or not. */
};
typedef VOS_UINT16 CPROC_HRPD_CDMA_EUTRA_ENUM_UINT16;

/*******************************************************************************
 4. Message Header declaration
*******************************************************************************/

/*******************************************************************************
 5. Message declaration
*******************************************************************************/

/*******************************************************************************
 6. STRUCT and UNION declaration
*******************************************************************************/

/** ****************************************************************************
 * Name        : CPROC_HRPD_SIGNAL_LEVEL_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CPROC_HRPD_CHANNEL_RECORD_STRU      stFreqInfo;    /**< Frequency */
    VOS_INT16                           sFreqRssi;     /**< -880..0, Resolution 0.125dB */
    VOS_UINT8                           aucReserve[2]; /**< 32 bit alginment */
} CPROC_HRPD_SIGNAL_LEVEL_STRU;

/** ****************************************************************************
 * Name        : CPROC_HRPD_CC_SETUP_CONT_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usPhySubType;           /**< phy layer's sub type */
    VOS_UINT16                          usShortPacketsMacIndex; /**< [0x00, 0x06-0x3f, 0x48-0x7f] Only valid if  enPhySubtype is not 0 */
} CPROC_HRPD_CC_SETUP_CONT_STRU;

/** ****************************************************************************
 * Name        : CPROC_HRPD_PAGINGMASK_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usPreMaskDuration;  /**< value in units of 4 slots */
    VOS_UINT16                          usMaskDuration;     /**< value in units of 4 slots */
    VOS_UINT16                          usPostMaskDuration; /**< value in units of 4 slots */
    VOS_UINT8                           aucReserve[2];      /**< 32-bit alignment */
} CPROC_HRPD_PAGINGMASK_STRU;

/** ****************************************************************************
 * Name        : CPROC_HRPD_CC_SETUP_DRX_STATE_REQ_STRU
 *
 * Description : Structure to setup the Control Channel in state DRX Idle. The
 * same struct is used both for the Default Idle Protocol and the Enhanced Idle
 * Protocol.
 *
 * Parameters valid for Default and Enhanced Idle Protocols:
 * usR is the offset within a Sleep Period when the CC shall be received, see
 * 8.4.6.1.4 and 8.5.6.1.5 in 3GPP2 C.S0024-A v3.0: "cdma2000 High Rate Packet
 * Data Air Interface Specification".
 *
 * Parameters valid only for Enhanced Idle Protocol:
 * usOffset is the offset within a Control Channel Cycle in slots, see
 * 10.2.6.1.4.1.2 in 3GPP2 C.S0024-A v3.0: "cdma2000 High Rate Packet Data Air
 * Interface Specification".
 * usSlotCycleX, usWakeCountX are used to calculate T12 and T23, see 8.5.6.1.5
 * and 8.5.7.2.2 in 3GPP2 C.S0024-A v3.0: "cdma2000 High Rate Packet Data Air
 * Interface Specification".
 *******************************************************************************/
typedef struct
{
    CPROC_HRPD_IDP_SUBTYPE_ENUM_UINT16  enIdpSubtype; /**< indicate cproc it is default idle or not */
    VOS_UINT16                          usR;          /**< Offset within 5.12 ms cycle in units of Control Channel cycles (16 * 26.67 ms = 426.72 ms), [0,11] */
    VOS_UINT16                          usOffset;     /**< Offset from Control Channel cycle in slots, [0..3], enhanced parameter */
    VOS_UINT16                          usSlotCycle1; /**< [0x00..0x1c], enhanced parameter */
    VOS_UINT16                          usSlotCycle2; /**< [usSlotCycle1..0x1c], enhanced parameter */
    VOS_UINT16                          usSlotCycle3; /**< [usSlotCycle2..0x1c], enhanced parameter */
    VOS_UINT16                          usWakeCount1; /**< [0..15], enhanced parameter */
    VOS_UINT16                          usWakeCount2; /**< [usWakeCount1..15], enhanced parameter */
} CPROC_HRPD_CC_SETUP_DRX_STATE_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_HRPD_PAGINGMASK_PARAM_STRU
 *
 * Description : Mask when the Control Channel shall be monitored. See
 * 8.5.6.1.6 and 8.5.7.3 in 3GPP2 C.S0024-A v3.0: "cdma2000 High Rate Packet
 * Data Air Interface Specification".
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usMaskCount;                             /**< number of masks */
    VOS_UINT8                           aucReserve[2];                           /**< 32 bit alignment */
    CPROC_HRPD_PAGINGMASK_STRU          astMask[CPROC_HRPD_MAX_NBR_PAGING_MASK]; /**< masks */
} CPROC_HRPD_PAGINGMASK_PARAM_STRU;

/*******************************************************************************
 7. OTHER declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : CAS_CPROC_HRPD_SIGNAL_LEVEL_REQ_STRU
 *
 * Description : This signal is used by HRPD_Layer_3_AS to request CPROC_HRPD
 * to measure signal level of a set of frequencies.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT16                          usFreqNum;                                    /**< number of frequencies 1..CPROC_HRPD_MAX_FREQ_IN_SIGNAL_LEVEL */
    VOS_UINT16                          usReserved;                                   /**< 32 bit alignment */
    CPROC_HRPD_CHANNEL_RECORD_STRU      astFreq[CPROC_HRPD_MAX_FREQ_IN_SIGNAL_LEVEL]; /**< frequencies to be searched */
} CAS_CPROC_HRPD_SIGNAL_LEVEL_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_SIGNAL_LEVEL_IND_STRU
 *
 * Description : This signal is used by CPROC_HRPD to send results of a
 * CAS_CPROC_HRPD_SIGNAL_LEVEL_REQ to HRPD_Layer_3_AS.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT16                          usFreqNum;                                       /**< number of frequencies 1..CPROC_HRPD_MAX_FREQ_IN_SIGNAL_LEVEL */
    VOS_UINT16                          usReserved;                                      /**< 32 bit alignment */
    CPROC_HRPD_SIGNAL_LEVEL_STRU        astResults[CPROC_HRPD_MAX_FREQ_IN_SIGNAL_LEVEL]; /**< results per frequency */
} CPROC_CAS_HRPD_SIGNAL_LEVEL_IND_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_HRPD_RESET_REQ_STRU
 *
 * Description : This signal is sent from HRPD_Layer_3_AS to CPROC_HRPD to
 * request soft reset. CPROC_HRPD will reset CSDR_HRPD and
 * itself.HRPD_Layer_3_AS  will send this signal in abnormal case;
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CAS_CPROC_HRPD_RESET_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_RESET_CNF_STRU
 *
 * Description : This signal confirms that CPROC_HRPD and CSDR_HRPD are reset
 * as requested by CAS_CPROC_HRPD_RESET_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_HRPD_RESET_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_HRPD_SET_MODE_REQ_STRU
 *
 * Description : This signal is sent from HRPD_Layer_3_AS to CPROC_HRPD to
 * request work mode, either Master or Slave mode.
 *
 * The signal with argument Master mode is only accepted by CPROC_HRPD when in
 * SET_MODE or SLAVE_FREE state.
 * The signal with argument Slave mode is only accepted by CPROC_HRPD when in
 * SET_MODE or MASTER_FREE state.
 *
 * HRPD_Layer_3_AS will use this signal when power on(set to master mode
 * directly),power off(set to slave mode after rel all signal),IRAT from Evdo
 * to Lte(set to slave mode after rel all signal),IRAT from Lte to Evdo(set
 * master mode directly),power saving entry(set to slave mode after rel all
 * signal);
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
    CPROC_HRPD_WORKMODE_ENUM_UINT16     enWorkMode;    /**< Master mode or Slave mode */
    VOS_UINT8                           aucReserve[2]; /**< 32 bit alignment */
} CAS_CPROC_HRPD_SET_MODE_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_SET_MODE_CNF_STRU
 *
 * Description : This signal is sent from CPROC_HRPD to HRPD_Layer_3_AS to
 * confirm that mode is set as requested by CAS_CPROC_HRPD_SET_MODE_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_HRPD_SET_MODE_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_WAKEUP_IND_STRU
 *
 * Description : This signal is sent from CPROC_HRPD to HRPD_Layer_3_AS to
 * indicate that CPROC_HRPD is receiving CC channel in IDLE_DRX state. The
 * signal does not indicate that sleep was actually entered.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_HRPD_WAKEUP_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_SLEEP_IND_STRU
 *
 * Description : This signal is sent from CPROC_HRPD to HRPD_Layer_3_AS to
 * indicate that CPROC_HRPD has detected end of sleep state capsule or end of
 * sub-synchronous capsule. This signal is only sent if SleepStateCapsuleDone
 * flag was not detected, e.g. due to incorrect decoding of the MAC packet
 * carrying SleepStateCapsuleDone.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_HRPD_SLEEP_IND_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_HRPD_CC_CONFIG_REQ_STRU
 *
 * Description : This signal is sent from HRPD_Layer_3_AS to CPROC_HRPD to
 * request reconfiguration of CC reception in IDLE_DRX and CC_MONITOR states.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16                      enMsgId;
    VOS_UINT16                                              usOpId;
    CPROC_HRPD_CHANNEL_RECORD_STRU                          stChannelInfo;  /**< Frequency */
    VOS_UINT16                                              usPnOffset;     /**< 0..511 */
    CPROC_HRPD_CC_SETUP_STATE_ENUM_UINT16                   enCcSetupState; /**< DRX or Continuous */
    CPROC_HRPD_CC_SETUP_DRX_STATE_REQ_STRU                  stDRXPara;      /**< Parameters for IDLE_DRX */
    CPROC_HRPD_CC_SETUP_CONT_STRU                           stContPara;     /**< Parameters for CC Continuous */
} CAS_CPROC_HRPD_CC_CONFIG_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_CC_CONFIG_CNF_STRU
 *
 * Description : Confirms reception of CAS_CPROC_HRPD_CC_CONFIG_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16                      enMsgId;
    VOS_UINT16                                              usOpId;
    CPROC_HRPD_CC_CFG_RESULT_ENUM_UINT16                    ulResult;
    VOS_UINT8                                               aucReserve[2]; /**< 32 bit alignment */
} CPROC_CAS_HRPD_CC_CONFIG_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_ACTIVE_CELL_IND_STRU
 *
 * Description : CPROC_CAS_HRPD_ACTIVE_CELL_IND is sent to indicate the PN
 * Offset of the active cell when transit from CONNECTED to CC_MONITOR.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT16                          usPnOffset;    /**< 0..511 */
    VOS_UINT8                           aucReserve[2]; /**< 32 bit alignment */
} CPROC_CAS_HRPD_ACTIVE_CELL_IND_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_HRPD_SEARCH_PILOT_REQ_STRU
 *
 * Description : This signal is sent from HRPD_Layer_3_AS to CPROC_HRPD to
 * start pilot search on one or several frequencies. The signal is only
 * accepted by CPROC_HRPD when in MASTER_FREE state or in PILOT_SEARCH state.
 *
 * At handoff from LTE only one channel and usPnOffset are included.
 *
 * If not handoff from LTE usPnOffset is set to CPROC_HRPD_NOT_VALID_US.
 *
 * PN offsets to be avoided shall not be considered when selecting the
 * strongest cell for control channel reading.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT16                          usNbrOfChannels;                                   /**< number of channels 1..CPROC_HRPD_CS_MAX_CHANNEL_NUM */
    VOS_UINT16                          usPnOffset;                                        /**< Only valid at LTE handoff. The PNOffset to search for. If not valid CPROC_HRPD_NOT_VALID_US */
    CPROC_HRPD_CHANNEL_RECORD_STRU      astChannelInfoList[CPROC_HRPD_CS_MAX_CHANNEL_NUM]; /**< channels */
    VOS_UINT16                          usNbrOfAvoidPn;                                    /**< 0..CPROC_HRPD_MAX_AVOID_PN Number of PN offsets to be avoided */
    VOS_UINT16                          usReserved;                                        /**< 32 bit alignment */
    VOS_UINT16                          ausAvoidPn[CPROC_HRPD_MAX_AVOID_PN];               /**< PN offsets to be avoided */
} CAS_CPROC_HRPD_SEARCH_PILOT_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_SEARCH_PILOT_IND_STRU
 *
 * Description : This signal returns the result of a pilot search requested in
 * CAS_CPROC_HRPD_SEARCH_PILOT_REQ; Pilot found (including frequency), No pilot
 * found or error.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16                      enMsgId;
    VOS_UINT16                                              usOpId;
    CPROC_HRPD_PILOT_SEARCH_RES_ENUM_UINT16                 enPilotFound;  /**< No pilot found, Pilot found, Error */
    VOS_UINT8                                               aucReserve[2]; /**< 32 bit alignment */
    CPROC_HRPD_CHANNEL_RECORD_STRU                          stChannelInfo; /**< the frequency, only valid if pilot found */
} CPROC_CAS_HRPD_SEARCH_PILOT_IND_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_HRPD_SEARCH_PILOT_STOP_REQ_STRU
 *
 * Description : This signal is sent to stop an ongoing pilot search requested
 * by CAS_CPROC_HRPD_SEARCH_PILOT_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CAS_CPROC_HRPD_SEARCH_PILOT_STOP_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_SEARCH_PILOT_STOP_CNF_STRU
 *
 * Description : Confirms a CAS_CPROC_HRPD_SEARCH_PILOT_STOP_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT32                          ulResult; /**< 0-success, others-failure */
} CPROC_CAS_HRPD_SEARCH_PILOT_STOP_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_HRPD_SYSTIME_UPDATE_REQ_STRU
 *
 * Description : This signal is sent to align AT timing to CDMA System Time
 * received in a sync message together with PN Offset.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT32                          aulSystemTime[2]; /**< SystemTime from sync message,  aulSystemTime[0] bit[31:0] = systemTime bit[31:0], aulSystemTime[1] bit[4:0] = systemTime bit[36:32] (unit 26.67 ms) */
    VOS_UINT32                          ulBaseTime;       /**< Time stamp of receiving the  F-SYNC message */
    VOS_UINT16                          usPNOffset;       /**< PN Offset from system msg */
    VOS_UINT8                           aucReserve[2];    /**< 32 bit alignment */
} CAS_CPROC_HRPD_SYSTIME_UPDATE_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_SYSTIME_UPDATE_IND_STRU
 *
 * Description : This signal indicates that system time is set according to
 * CAS_CPROC_HRPD_SYSTIME_UPDATE_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_HRPD_SYSTIME_UPDATE_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_ERROR_IND_STRU
 *
 * Description : CPROC_CAS_HRPD_ERROR_IND indicates that something not expected
 * occurred in CPROC_HRPD or in any module that CPROC_HRPD controls.
 * CPROC_CAS_HRPD_ERROR_IND shall be sent to PID UEPS_PID_HALMP.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT32                          ulEventId; /**< Signal ID or Event ID that triggered sending of CPROC_CAS_HRPD_ERROR_IND */
} CPROC_CAS_HRPD_ERROR_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_NO_RF_IND_STRU
 *
 * Description : CPROC_CAS_HRPD_NO_RF_IND is sent when RF allocation is not
 * granted for paging reception.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_HRPD_NO_RF_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_RF_IND_STRU
 *
 * Description : CPROC_CAS_HRPD_RF_IND is sent when RF allocation is granted
 * for paging reception.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_HRPD_RF_IND_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_HRPD_LTE_MEAS_REQ_STRU
 *
 * Description : CPROC_HRPD will schedule LTE measurements when this signal is
 * received. It is only accepted when CPROC_HRPD is in state IDLE_DRX.
 *
 * The length of the measurement gaps is defined in NV. At each period end a
 * measurement report interrupt INT_5 will be generated.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT8                           enBackoffValid;          /**< 1: backoff valid, 0: not valid */
    VOS_UINT8                           ucMinMeasurementBackoff; /**< LTE measurement period >= 2^ucMinMeasurementBackoff */
    VOS_UINT8                           ucMaxMeasurementBackoff; /**< LTE measurement period <= 2^ucMaxMeasurementBackoff */
    VOS_UINT8                           ucReserved;              /**< 32 bit alignment */
} CAS_CPROC_HRPD_LTE_MEAS_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_LTE_MEAS_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_HRPD_LTE_MEAS_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_HRPD_STOP_LTE_MEAS_REQ_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CAS_CPROC_HRPD_STOP_LTE_MEAS_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_STOP_LTE_MEAS_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_HRPD_STOP_LTE_MEAS_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_HRPD_LTE_BSR_REQ_STRU
 *
 * Description : CPROC_HRPD will schedule LTE BSR when this signal is received.
 * It is only accepted when CPROC_HRPD is in state IDLE_DRX.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CAS_CPROC_HRPD_LTE_BSR_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_LTE_BSR_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_HRPD_LTE_BSR_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_HRPD_STOP_LTE_BSR_REQ_STRU
 *
 * Description : CPROC_HRPD will stop scheduling LTE BSR when this signal is
 * received. It is only accepted after a CAS_CPROC_HRPD_LTE_BSR_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CAS_CPROC_HRPD_STOP_LTE_BSR_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_STOP_LTE_BSR_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_HRPD_STOP_LTE_BSR_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_HRPD_READ_LTE_NL_REQ_STRU
 *
 * Description : CAS_CPROC_HRPD_READ_LTE_NL_REQ is only accepted in IDLE_DRX
 * state. CPROC_HRPD will schedule reading of control channel when
 * C mod (ucOtherRatTxCycle) == 0;
 * where C is number of control channel cycles since the beginning of CDMA
 * system time.
 *
 * The control channel will be received from the same cell as the paging, i.e.
 * on the same frequency and PNOffset as the paging cell.
 *
 * Reception will be canceled or stopped by:
 * -  CAS_CPROC_HRPD_STOP_LTE_NL_REQ - normal stop, remain in idle and continue
 *    with paging reception etc.
 * -  CAS_CPROC_HRPD_SEARCH_PILOT_REQ - pilot search is started
 * -  CAS_CPROC_HRPD_CC_CONFIG_REQ - switch to continuous mode
 * -  CAS_CPROC_HRPD_REL_ALL_REQ - expected to be followed by
 *    CAS_CPROC_HRPD_SET_MODE_REQ, CAS_CPROC_HRPD_SIGNAL_LEVEL_REQ or
 *    CAS_CPROC_HRPD_SEARCH_PILOT_REQ
 * -  CAS_CPROC_HRPD_RESET_REQ
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT8                           ucOtherRatTxCycle; /**< [2, 3, 6, 10, 14, 24, 40, 64] */
    VOS_UINT8                           aucReserve[3];     /**< 32 bit alignment */
} CAS_CPROC_HRPD_READ_LTE_NL_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_READ_LTE_NL_CNF_STRU
 *
 * Description : Confirms reception of CAS_CPROC_HRPD_READ_LTE_NL_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_HRPD_READ_LTE_NL_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_HRPD_STOP_LTE_NL_REQ_STRU
 *
 * Description : Stops reception requested in CAS_CPROC_HRPD_READ_LTE_NL_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CAS_CPROC_HRPD_STOP_LTE_NL_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_STOP_LTE_NL_CNF_STRU
 *
 * Description : Confirms stop of reception.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_HRPD_STOP_LTE_NL_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_HRPD_REL_ALL_REQ_STRU
 *
 * Description : This signal is sent from HRPD_Layer_3_AS to CPROC_HRPD to
 * request NORMALLY release all the resource and stop all the flow.
 * HRPD_Layer_3_AS want to release normally,HRPD_Layer_3_AS  will use this
 * signal;
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CAS_CPROC_HRPD_REL_ALL_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_REL_ALL_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_HRPD_REL_ALL_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_HRPD_SEARCH_PILOT_SUSPEND_REQ_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CAS_CPROC_HRPD_SEARCH_PILOT_SUSPEND_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_SEARCH_PILOT_SUSPEND_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_HRPD_SEARCH_PILOT_SUSPEND_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_HRPD_SEARCH_PILOT_RESUME_REQ_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CAS_CPROC_HRPD_SEARCH_PILOT_RESUME_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_SEARCH_PILOT_RESUME_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_HRPD_SEARCH_PILOT_RESUME_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_HRPD_CC_STOP_REQ_STRU
 *
 * Description : This signal is used to control channel in slave mode.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CAS_CPROC_HRPD_CC_STOP_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_CC_STOP_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_HRPD_CC_STOP_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_HRPD_TIME_SYNC_REQ_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
} CAS_CPROC_HRPD_TIME_SYNC_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_HRPD_TIME_SYNC_IND_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16  enMsgId;
    VOS_UINT16                          usOpId;
    CPROC_HRPD_RSLT_ENUM_UINT16         enResult;
    VOS_UINT16                          usReserved;      /**< 32 bit alignment */
    VOS_UINT32                          auwPulseTime[2]; /**< System time in 1/16 chip */
} CPROC_CAS_HRPD_TIME_SYNC_IND_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_HRPD_CONNECTION_STATUS_REQ_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMCC_MSG_TYPE_ENUM_UINT16                      enMsgId;
    VOS_UINT16                                              usOpId;
    CPROC_HRPD_CONNECTION_STATUS_ENUM_UINT16                enConnectionStatus;
    VOS_UINT16                                              usReserved;         /**< 32 bit alignment */
} CAS_CPROC_HRPD_CONNECTION_STATUS_REQ_STRU;

/*******************************************************************************
 8. Global  declaration
*******************************************************************************/

/*******************************************************************************
 9. Function declarations
*******************************************************************************/

#if ((VOS_OS_VER == VOS_WIN32) || (VOS_OS_VER == VOS_NUCLEUS))
#pragma pack()
#else
#pragma pack(0)
#endif

#ifdef __cplusplus
#if __cplusplus
}
#endif /* __cpluscplus */
#endif /* __cpluscplus */

#endif
