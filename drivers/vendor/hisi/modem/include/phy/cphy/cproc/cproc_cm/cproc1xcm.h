/** ****************************************************************************

                    Huawei Technologies Sweden AB (C), 2001-2015

 ********************************************************************************
 * @author    Automatically generated by DAISY
 * @version
 * @date      2015-09-28
 * @file
 * @brief
 * This interface carries control information for the entire 1x_Layer_1. It
 * includes:
 * -  Input: Configuration requests. Frequency: Once per
 *    configuration/reconfiguration.
 * -  Input: Deactivation requests. Frequency: Once per deactivation.
 * -  Output: Confirms to the requester. Frequency: Once per
 *    configuration/reconfiguration/deactivation.
 * @copyright Huawei Technologies Sweden AB
 *******************************************************************************/
#ifndef CPROC1XCM_H
#define CPROC1XCM_H

/*******************************************************************************
 1. Other files included
*******************************************************************************/
 
#include "vos.h"
#include "cproc1x.h"

#ifdef __cplusplus
#if __cplusplus
    extern "C" {
#endif /* __cpluscplus */
#endif /* __cpluscplus */
#pragma pack(4)

/*******************************************************************************
 2. Macro definitions
*******************************************************************************/

#define CPROC_1X_PN_OFFSET_NOT_KNOWN                        ( 0xFFFF )
#define CPROC_1X_MAX_FREQ_IN_LEVEL_SCAN                     ( 50 )
#define CPROC_1X_MAX_REV_PC_REC_NUM                         ( 4 )
#define CPROC_1X_MAX_MODE_PARA_NUM                          ( 8 )
#define CPROC_1X_SUPPORT_SCH_NUM                            ( 1 )
#define CPROC_1X_MAX_DCCH_RATES_NUM                         ( 1 )
#define CPROC_1X_MAX_SCH_RATES_NUM                          ( 1 )
#define CPROC_1X_MAX_FCH_RATES_NUM                          ( 4 )
#define CPROC_1X_MAX_SCH_ACT_SET_NUM                        ( 2 )
#define CPROC_1X_SUPPORT_ACTIVE_SET_NUM                     ( 6 )
#define CPROC_1X_MAX_PHYCHAN_NUM                            ( 6 )
#define CPROC_1X_MAX_FREQ_IN_PILOT_SEARCH                   ( 32 )
#define CPROC_1X_MAX_REPORT_PILOT_NUM                       ( 1 )
/**
 * Maximum number of broadcast Slots that can be configured using one
 * CAS_CPROC_1X_START_COMMON_CH_MONITOR_REQ signal.
 */
#define CPROC_1X_MAX_NUM_BROADCAST_SLOTS                    ( 4 )

/*******************************************************************************
 3. Enumerations declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : CPROC1XCM_MSG_TYPE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC1XCM_MSG_TYPE_ENUM
{
    ID_CAS_CPROC_1X_LONG_CODE_CFG_REQ                       = 0x2000, /**< @sa CAS_CPROC_1X_LONG_CODE_CFG_REQ_STRU */
    ID_CPROC_CAS_1X_LONG_CODE_CFG_CNF                       = 0x2001, /**< @sa CPROC_CAS_1X_LONG_CODE_CFG_CNF_STRU */
    ID_CAS_CPROC_1X_REL_ALL_REQ                             = 0x2002, /**< @sa CAS_CPROC_1X_REL_ALL_REQ_STRU */
    ID_CPROC_CAS_1X_REL_ALL_CNF                             = 0x2003, /**< @sa CPROC_CAS_1X_REL_ALL_CNF_STRU */
    ID_CAS_CPROC_1X_SET_WORK_MODE_REQ                       = 0x2008, /**< @sa CAS_CPROC_1X_SET_WORK_MODE_REQ_STRU */
    ID_CPROC_CAS_1X_SET_WORK_MODE_CNF                       = 0x2009, /**< @sa CPROC_CAS_1X_SET_WORK_MODE_CNF_STRU */
    ID_CPROC_CAS_1X_GOOD_FRAME_IND                          = 0x200A, /**< @sa CPROC_CAS_1X_GOOD_FRAME_IND_STRU */
    ID_CPROC_CAS_1X_HANDOFF_FAIL_IND                        = 0x200B, /**< @sa CPROC_CAS_1X_HANDOFF_FAIL_IND_STRU */
    ID_CPROC_CAS_1X_TCH_LOST_IND                            = 0x200C, /**< @sa CPROC_CAS_1X_TCH_LOST_IND_STRU */
    ID_CAS_CPROC_1X_SIGNAL_LEVEL_REQ                        = 0x2040, /**< @sa CAS_CPROC_1X_SIGNAL_LEVEL_REQ_STRU */
    ID_CPROC_CAS_1X_SIGNAL_LEVEL_CNF                        = 0x2041, /**< @sa CPROC_CAS_1X_SIGNAL_LEVEL_CNF_STRU */
    ID_CAS_CPROC_1X_SIGNAL_LEVEL_STOP_REQ                   = 0x2042, /**< @sa CAS_CPROC_1X_SIGNAL_LEVEL_STOP_REQ_STRU */
    ID_CPROC_CAS_1X_SIGNAL_LEVEL_STOP_CNF                   = 0x2043, /**< @sa CPROC_CAS_1X_SIGNAL_LEVEL_STOP_CNF_STRU */
    ID_CAS_CPROC_1X_SIGNAL_LEVEL_SUSPEND_REQ                = 0x2044, /**< @sa CAS_CPROC_1X_SIGNAL_LEVEL_SUSPEND_REQ_STRU */
    ID_CPROC_CAS_1X_SIGNAL_LEVEL_SUSPEND_CNF                = 0x2045, /**< @sa CPROC_CAS_1X_SIGNAL_LEVEL_SUSPEND_CNF_STRU */
    ID_CAS_CPROC_1X_SIGNAL_LEVEL_RESUME_REQ                 = 0x2046, /**< @sa CAS_CPROC_1X_SIGNAL_LEVEL_RESUME_REQ_STRU */
    ID_CPROC_CAS_1X_SIGNAL_LEVEL_RESUME_CNF                 = 0x2047, /**< @sa CPROC_CAS_1X_SIGNAL_LEVEL_RESUME_CNF_STRU */
    ID_CAS_CPROC_1X_PILOT_SEARCH_RESUME_REQ                 = 0x2048, /**< @sa CAS_CPROC_1X_PILOT_SEARCH_RESUME_REQ_STRU */
    ID_CPROC_CAS_1X_PILOT_SEARCH_RESUME_CNF                 = 0x2049, /**< @sa CPROC_CAS_1X_PILOT_SEARCH_RESUME_CNF_STRU */
    ID_CAS_CPROC_1X_PILOT_SEARCH_STOP_REQ                   = 0x204A, /**< @sa CAS_CPROC_1X_PILOT_SEARCH_STOP_REQ_STRU */
    ID_CPROC_CAS_1X_PILOT_SEARCH_STOP_CNF                   = 0x204B, /**< @sa CPROC_CAS_1X_PILOT_SEARCH_STOP_CNF_STRU */
    ID_CAS_CPROC_1X_PILOT_SEARCH_SUSPEND_REQ                = 0x204C, /**< @sa CAS_CPROC_1X_PILOT_SEARCH_SUSPEND_REQ_STRU */
    ID_CPROC_CAS_1X_PILOT_SEARCH_SUSPEND_CNF                = 0x204D, /**< @sa CPROC_CAS_1X_PILOT_SEARCH_SUSPEND_CNF_STRU */
    ID_CAS_CPROC_1X_PILOT_SEARCH_REQ                        = 0x204E, /**< @sa CAS_CPROC_1X_PILOT_SEARCH_REQ_STRU */
    ID_CPROC_CAS_1X_PILOT_SEARCH_IND                        = 0x204F, /**< @sa CPROC_CAS_1X_PILOT_SEARCH_IND_STRU */
    ID_CPROC_CAS_1X_PILOT_SEARCH_DONE_IND                   = 0x2050, /**< @sa CPROC_CAS_1X_PILOT_SEARCH_DONE_IND_STRU */
    ID_CPROC_CAS_1X_ACTION_IND                              = 0x2051, /**< @sa CPROC_CAS_1X_ACTION_IND_STRU */
    ID_CAS_CPROC_1X_CCI_REQ                                 = 0x2052, /**< @sa CAS_CPROC_1X_CCI_REQ_STRU */
    ID_CPROC_CAS_1X_CCI_CNF                                 = 0x2053, /**< @sa CPROC_CAS_1X_CCI_CNF_STRU */
    ID_CPROC_CAS_1X_CCI_IND                                 = 0x2054, /**< @sa CPROC_CAS_1X_CCI_IND_STRU */
    ID_CAS_CPROC_1X_FSYNC_START_REQ                         = 0x2055, /**< @sa CAS_CPROC_1X_FSYNC_START_REQ_STRU */
    ID_CPROC_CAS_1X_FSYNC_START_CNF                         = 0x2056, /**< @sa CPROC_CAS_1X_FSYNC_START_CNF_STRU */
    ID_CAS_CPROC_1X_FSYNC_STOP_REQ                          = 0x2057, /**< @sa CAS_CPROC_1X_FSYNC_STOP_REQ_STRU */
    ID_CPROC_CAS_1X_FSYNC_STOP_CNF                          = 0x2058, /**< @sa CPROC_CAS_1X_FSYNC_STOP_CNF_STRU */
    ID_CAS_CPROC_1X_TCH_CONFIG_REQ                          = 0x2059, /**< @sa CAS_CPROC_1X_TCH_CONFIG_REQ_STRU */
    ID_CPROC_CAS_1X_TCH_CONFIG_CNF                          = 0x205A, /**< @sa CPROC_CAS_1X_TCH_CONFIG_CNF_STRU */
    ID_CAS_CPROC_1X_COMMON_CH_CONFIG_REQ                    = 0x205D, /**< @sa CAS_CPROC_1X_COMMON_CH_CONFIG_REQ_STRU */
    ID_CPROC_CAS_1X_COMMON_CH_CONFIG_CNF                    = 0x205E, /**< @sa CPROC_CAS_1X_COMMON_CH_CONFIG_CNF_STRU */
    ID_CAS_CPROC_1X_CHANNEL_REL_REQ                         = 0x205F, /**< @sa CAS_CPROC_1X_CHANNEL_REL_REQ_STRU */
    ID_CPROC_CAS_1X_CHANNEL_REL_CNF                         = 0x2060, /**< @sa CPROC_CAS_1X_CHANNEL_REL_CNF_STRU */
    ID_CAS_CPROC_1X_STOP_COMMON_CH_MONITOR_REQ              = 0x2061, /**< @sa CAS_CPROC_1X_STOP_COMMON_CH_MONITOR_REQ_STRU */
    ID_CPROC_CAS_1X_STOP_COMMON_CH_MONITOR_CNF              = 0x2062, /**< @sa CPROC_CAS_1X_STOP_COMMON_CH_MONITOR_CNF_STRU */
    ID_CPROC_CAS_1X_SET_TIMING_CNF                          = 0x2063, /**< @sa CPROC_CAS_1X_SET_TIMING_CNF_STRU */
    ID_CAS_CPROC_1X_SET_TIMING_REQ                          = 0x2064, /**< @sa CAS_CPROC_1X_SET_TIMING_REQ_STRU */
    ID_CAS_CPROC_1X_PWRCTRL_CONFIG_REQ                      = 0x2065, /**< @sa CAS_CPROC_1X_PWRCTRL_CONFIG_REQ_STRU */
    ID_CPROC_CAS_1X_PWRCTRL_CONFIG_CNF                      = 0x2066, /**< @sa CPROC_CAS_1X_PWRCTRL_CONFIG_CNF_STRU */
    ID_CPROC_CAS_1X_PWRCTRL_IND                             = 0x2067, /**< @sa CPROC_CAS_1X_PWRCTRL_IND_STRU */
    ID_CAS_CPROC_1X_OLPC_RSLT_RPT_REQ                       = 0x2068, /**< @sa CAS_CPROC_1X_OLPC_RSLT_RPT_REQ_STRU */
    ID_CPROC_CAS_1X_ERROR_IND                               = 0x2069, /**< @sa CPROC_CAS_1X_ERROR_IND_STRU */
    ID_CAS_CPROC_1X_START_COMMON_CH_MONITOR_REQ             = 0x206A, /**< @sa CAS_CPROC_1X_START_COMMON_CH_MONITOR_REQ_STRU */
    ID_CPROC_CAS_1X_START_COMMON_CH_MONITOR_CNF             = 0x206B, /**< @sa CPROC_CAS_1X_START_COMMON_CH_MONITOR_CNF_STRU */
    ID_CPROC_CAS_1X_RF_IND                                  = 0x206C, /**< @sa CPROC_CAS_1X_RF_IND_STRU */
    ID_CPROC_CAS_1X_NO_RF_IND                               = 0x206D, /**< @sa CPROC_CAS_1X_NO_RF_IND_STRU */
    ID_CAS_CPROC_1X_TIME_SYNC_REQ                           = 0x206E, /**< @sa CAS_CPROC_1X_TIME_SYNC_REQ_STRU */
    ID_CPROC_CAS_1X_TIME_SYNC_IND                           = 0x206F, /**< @sa CPROC_CAS_1X_TIME_SYNC_IND_STRU */
    ID_CPROC1XCM_MSG_TYPE_ENUM_BUTT                         = 0x2070
};
typedef VOS_UINT16 CPROC1XCM_MSG_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_OLPC_REPORT_REQ_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_1X_OLPC_REPORT_REQ_ENUM
{
    CPROC_1X_OLPC_REPORT_REQ_ONCE       = 0x0000, /**< A one shot report of the current values is requested */
    CPROC_1X_OLPC_REPORT_REQ_PERIODIC   = 0x0001, /**< Send an OLPC report on every change in OLPC setpoints */
    CPROC_1X_OLPC_REPORT_REQ_NORMAL     = 0x0002, /**< Send reports only on triggers as configured in the OLPC cfg */
    CPROC_1X_OLPC_REPORT_REQ_BUTT       = 0x0003
};
typedef VOS_UINT16 CPROC_1X_OLPC_REPORT_REQ_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_BLANKING_DUTYCYCLE_ENUM_UINT16
 *
 * Description : This enum tells the forward and reverse blanking duty cycles.
 *******************************************************************************/
enum CPROC_1X_BLANKING_DUTYCYCLE_ENUM
{
    CPROC_1X_BLANKING_DUTYCYCLE_1       = 0x0000, /**< Blanking disabled */
    CPROC_1X_BLANKING_DUTYCYCLE_4       = 0x0001, /**< At least 1 of 4 frames transmitted */
    CPROC_1X_BLANKING_DUTYCYCLE_8       = 0x0002, /**< At least 1 of 8 frames transmitted */
    CPROC_1X_BLANKING_DUTYCYCLE_BUTT    = 0x0003
};
typedef VOS_UINT16 CPROC_1X_BLANKING_DUTYCYCLE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_FOR_N2M_ENUM_UINT16
 *
 * Description : This enum tells the N2m value to use in RC11.
 *******************************************************************************/
enum CPROC_1X_FOR_N2M_ENUM
{
    CPROC_1X_FOR_N2M_2                  = 0x0000,
    CPROC_1X_FOR_N2M_4                  = 0x0001,
    CPROC_1X_FOR_N2M_6                  = 0x0002,
    CPROC_1X_FOR_N2M_8                  = 0x0003,
    CPROC_1X_FOR_N2M_BUTT               = 0x0004
};
typedef VOS_UINT16 CPROC_1X_FOR_N2M_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_RPC_MODE_ENUM_UINT16
 *
 * Description : This enum tells the power control rate on the reverse link.
 *******************************************************************************/
enum CPROC_1X_RPC_MODE_ENUM
{
    CPROC_1X_RPC_MODE_200_400           = 0x0000,
    CPROC_1X_RPC_MODE_200               = 0x0001,
    CPROC_1X_RPC_MODE_BUTT              = 0x0002
};
typedef VOS_UINT16 CPROC_1X_RPC_MODE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_PHYCH_ENUM_UINT16
 *
 * Description : This is an ENUM for conveying channel type.
 *******************************************************************************/
enum CPROC_1X_PHYCH_ENUM
{
    CPROC_1X_PHYCH_NONE                 = 0x0000,
    CPROC_1X_PHYCH_F_QPCH               = 0x0001,
    CPROC_1X_PHYCH_F_PCH                = 0x0002,
    CPROC_1X_PHYCH_F_FCCCH              = 0x0003,
    CPROC_1X_PHYCH_F_BCCH               = 0x0004,
    CPROC_1X_PHYCH_F_FCH                = 0x0005,
    CPROC_1X_PHYCH_F_SCCH               = 0x0006,
    CPROC_1X_PHYCH_F_SCH                = 0x0007,
    CPROC_1X_PHYCH_F_DCCH               = 0x0008,
    CPROC_1X_PHYCH_R_ACH                = 0x0009,
    CPROC_1X_PHYCH_R_EACH               = 0x000A,
    CPROC_1X_PHYCH_R_FCH                = 0x000B,
    CPROC_1X_PHYCH_R_SCCH               = 0x000C,
    CPROC_1X_PHYCH_R_SCH                = 0x000D,
    CPROC_1X_PHYCH_R_DCCH               = 0x000E,
    CPROC_1X_PHYCH_BUTT                 = 0x000F
};
typedef VOS_UINT16 CPROC_1X_PHYCH_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_GATING_RATE_ENUM_UINT16
 *
 * Description : PILOT_GATING_RATE in C.S0005-Av6.0
 *******************************************************************************/
enum CPROC_1X_GATING_RATE_ENUM
{
    CPROC_1X_GATING_RATE_1              = 0x0000, /**< Gating Rate = 1 */
    CPROC_1X_GATING_RATE_1_2            = 0x0001, /**< Gating Rate = 1/2 */
    CPROC_1X_GATING_RATE_1_4            = 0x0002, /**< Gating Rate = 1/4 */
    CPROC_1X_GATING_RATE_BUTT           = 0x0003
};
typedef VOS_UINT16 CPROC_1X_GATING_RATE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_WORK_MODE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_1X_WORK_MODE_ENUM
{
    CPROC_1X_WORK_MODE_SLAVE            = 0x0000,
    CPROC_1X_WORK_MODE_MASTER           = 0x0001,
    CPROC_1X_WORK_MODE_BUTT             = 0x0002
};
typedef VOS_UINT16 CPROC_1X_WORK_MODE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_CCI_INFO_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_1X_CCI_INFO_ENUM
{
    CPROC_1X_CCI_INFO_ON                = 0x0000,
    CPROC_1X_CCI_INFO_OFF               = 0x0001,
    CPROC_1X_CCI_INFO_BUTT              = 0x0002
};
typedef VOS_UINT16 CPROC_1X_CCI_INFO_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_FCH_FRAME_SIZE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_1X_FCH_FRAME_SIZE_ENUM
{
    CPROC_1X_FCH_FRAME_SIZE_20MS        = 0x0000,
    CPROC_1X_FCH_FRAME_SIZE_5MS_20MS    = 0x0001,
    CPROC_1X_FCH_FRAME_SIZE_BUTT        = 0x0002
};
typedef VOS_UINT16 CPROC_1X_FCH_FRAME_SIZE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_DCCH_FRAME_SIZE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_1X_DCCH_FRAME_SIZE_ENUM
{
    CPROC_1X_DCCH_FRAME_SIZE_5MS        = 0x0000,
    CPROC_1X_DCCH_FRAME_SIZE_20MS       = 0x0001,
    CPROC_1X_DCCH_FRAME_SIZE_5MS_20MS   = 0x0002,
    CPROC_1X_DCCH_FRAME_SIZE_BUTT       = 0x0003
};
typedef VOS_UINT16 CPROC_1X_DCCH_FRAME_SIZE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_SCH_FRAME_SIZE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_1X_SCH_FRAME_SIZE_ENUM
{
    CPROC_1X_SCH_FRAME_SIZE_20MS        = 0x0000,
    CPROC_1X_SCH_FRAME_SIZE_40MS        = 0x0001,
    CPROC_1X_SCH_FRAME_SIZE_80MS        = 0x0002,
    CPROC_1X_SCH_FRAME_SIZE_BUTT        = 0x0003
};
typedef VOS_UINT16 CPROC_1X_SCH_FRAME_SIZE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_SCH_CODING_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_1X_SCH_CODING_ENUM
{
    CPROC_1X_SCH_CODING_CONVOLUTION                         = 0x0000, /**< Convolution coding only */
    CPROC_1X_SCH_CODING_CONVOLUTION_OR_TURBO                = 0x0001, /**< Convolution coding if less than 360 bits, Turbo if 360 or more */
    CPROC_1X_SCH_CODING_BUTT                                = 0x0002
};
typedef VOS_UINT16 CPROC_1X_SCH_CODING_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_TCH_PROCESS_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_1X_TCH_PROCESS_ENUM
{
    CPROC_1X_TCH_PROCESS_INIT                               = 0x0000, /**< Used ad TCH Establishment */
    CPROC_1X_TCH_PROCESS_HANDOFF_WITH_JUDGEMENT             = 0x0001, /**< Used at Hard Handoff where CPROC shall judge if the HO is successful */
    CPROC_1X_TCH_PROCESS_HANDOFF_WITHOUT_JUDGEMENT          = 0x0002, /**< Used at HHO when CPROC shall not judge if the HO is succesful */
    CPROC_1X_TCH_PROCESS_HANDOFF_REVERT                     = 0x0003, /**< Used at REVERT after Handoff Fail */
    CPROC_1X_TCH_PROCESS_OTHER                              = 0x0004, /**< Used at Soft Handoff and reconfiguration */
    CPROC_1X_TCH_PROCESS_BUTT                               = 0x0005
};
typedef VOS_UINT16 CPROC_1X_TCH_PROCESS_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_TCH_CHANNEL_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_1X_TCH_CHANNEL_ENUM
{
    CPROC_1X_TCH_CHANNEL_NONE           = 0x0000,
    CPROC_1X_TCH_CHANNEL_FCH            = 0x0001,
    CPROC_1X_TCH_CHANNEL_DCCH           = 0x0002,
    CPROC_1X_TCH_CHANNEL_FCH_DCCH       = 0x0003,
    CPROC_1X_TCH_CHANNEL_BUTT           = 0x0004
};
typedef VOS_UINT16 CPROC_1X_TCH_CHANNEL_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_DATA_RATE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_1X_DATA_RATE_ENUM
{
    CPROC_1X_DATA_RATE_4800             = 0x0000,
    CPROC_1X_DATA_RATE_9600             = 0x0001,
    CPROC_1X_DATA_RATE_19200            = 0x0002,
    CPROC_1X_DATA_RATE_BUTT             = 0x0003
};
typedef VOS_UINT16 CPROC_1X_DATA_RATE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_SLOTTED_MODE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_1X_SLOTTED_MODE_ENUM
{
    CPROC_1X_SLOTTED_MODE_SLOTTED       = 0x0000,
    CPROC_1X_SLOTTED_MODE_NON_SLOTTED   = 0x0001,
    CPROC_1X_SLOTTED_MODE_BUTT          = 0x0002
};
typedef VOS_UINT16 CPROC_1X_SLOTTED_MODE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_FCCCH_DATA_RATE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_1X_FCCCH_DATA_RATE_ENUM
{
    CPROC_1X_FCCCH_DATA_RATE_9600_20MS  = 0x0000,
    CPROC_1X_FCCCH_DATA_RATE_19200_20MS = 0x0001,
    CPROC_1X_FCCCH_DATA_RATE_19200_10MS = 0x0002,
    CPROC_1X_FCCCH_DATA_RATE_38400_20MS = 0x0003,
    CPROC_1X_FCCCH_DATA_RATE_38400_10MS = 0x0004,
    CPROC_1X_FCCCH_DATA_RATE_38400_5MS  = 0x0005,
    CPROC_1X_FCCCH_DATA_RATE_BUTT       = 0x0006
};
typedef VOS_UINT16 CPROC_1X_FCCCH_DATA_RATE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_CODE_RATE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_1X_CODE_RATE_ENUM
{
    CPROC_1X_CODE_RATE_QUARTER          = 0x0000,
    CPROC_1X_CODE_RATE_HALF             = 0x0001,
    CPROC_1X_CODE_RATE_BUTT             = 0x0002
};
typedef VOS_UINT16 CPROC_1X_CODE_RATE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_SLOTTED_PROCESS_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_1X_SLOTTED_PROCESS_ENUM
{
    CPROC_1X_SLOTTED_PROCESS_PAGE       = 0x0000,
    CPROC_1X_SLOTTED_PROCESS_BC         = 0x0001,
    CPROC_1X_SLOTTED_PROCESS_PAGE_BC    = 0x0002,
    CPROC_1X_SLOTTED_PROCESS_BUTT       = 0x0003
};
typedef VOS_UINT16 CPROC_1X_SLOTTED_PROCESS_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_FPC_PRI_CH_ENUM_UINT16
 *
 * Description : See FPC_PRI_CHAN in C.S0005-Av6.0.
 *******************************************************************************/
enum CPROC_1X_FPC_PRI_CH_ENUM
{
    CPROC_1X_FPC_PRI_CH_FCH             = 0x0000,
    CPROC_1X_FPC_PRI_CH_DCCH            = 0x0001,
    CPROC_1X_FPC_PRI_CH_BUTT            = 0x0002
};
typedef VOS_UINT16 CPROC_1X_FPC_PRI_CH_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_CODE_TYPE_ENUM_UINT16
 *
 * Description : From C.S0005-Av6.0, 3.7.3.3.2.25. CODE_TYPE.
 *******************************************************************************/
enum CPROC_1X_CODE_TYPE_ENUM
{
    CPROC_1X_CODE_TYPE_CONVOLUTION      = 0x0000,
    CPROC_1X_CODE_TYPE_TURBO            = 0x0001,
    CPROC_1X_CODE_TYPE_BUTT             = 0x0002
};
typedef VOS_UINT16 CPROC_1X_CODE_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_ATT_ADJ_GAIN_ENUM_UINT16
 *
 * Description : From C.S0005-Av6.0, 3.7.3.3.2.25. RL_ATT_ADJ_GAIN_TYPE.
 *******************************************************************************/
enum CPROC_1X_ATT_ADJ_GAIN_ENUM
{
    CPROC_1X_ATT_ADJ_GAIN_NOM_ATT_GAIN                      = 0x0000,
    CPROC_1X_ATT_ADJ_GAIN_PILOT_REF_LEVEL                   = 0x0001,
    CPROC_1X_ATT_ADJ_GAIN_BUTT                              = 0x0002
};
typedef VOS_UINT16 CPROC_1X_ATT_ADJ_GAIN_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_RPC_ADJ_TYPE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_1X_RPC_ADJ_TYPE_ENUM
{
    CPROC_1X_RPC_ADJ_TYPE_REV_CH_ADJ_GAIN                   = 0x0000,
    CPROC_1X_RPC_ADJ_TYPE_ATT_ADJ_GAIN_BASIC_RATE           = 0x0001,
    CPROC_1X_RPC_ADJ_TYPE_ATT_ADJ_GAIN_HIGH_RATE            = 0x0002,
    CPROC_1X_RPC_ADJ_TYPE_BUTT                              = 0x0003
};
typedef VOS_UINT16 CPROC_1X_RPC_ADJ_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_PC_STEP_ENUM_UINT16
 *
 * Description : See PWR_CNTL_STEP in C.S0005-A-v6.0 and C.S0005-E-v3.0.
 * CPROC_1X_PC_STEP_15 and CPROC_1X_PC_STEP_2 may only be used in RC8.
 *******************************************************************************/
enum CPROC_1X_PC_STEP_ENUM
{
    CPROC_1X_PC_STEP_1                  = 0x0000,
    CPROC_1X_PC_STEP_05                 = 0x0001,
    CPROC_1X_PC_STEP_025                = 0x0002,
    CPROC_1X_PC_STEP_15                 = 0x0003,
    CPROC_1X_PC_STEP_2                  = 0x0004,
    CPROC_1X_PC_STEP_BUTT               = 0x0005
};
typedef VOS_UINT16 CPROC_1X_PC_STEP_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_ACTION_TYPE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_1X_ACTION_TYPE_ENUM
{
    CPROC_1X_ACTION_TYPE_START          = 0x0000,
    CPROC_1X_ACTION_TYPE_STOP           = 0x0001,
    CPROC_1X_ACTION_TYPE_BUTT           = 0x0002
};
typedef VOS_UINT16 CPROC_1X_ACTION_TYPE_ENUM_UINT16;

/*******************************************************************************
 4. Message Header declaration
*******************************************************************************/

/*******************************************************************************
 5. Message declaration
*******************************************************************************/

/*******************************************************************************
 6. STRUCT and UNION declaration
*******************************************************************************/

/** ****************************************************************************
 * Name        : CPROC_1X_SYSTEM_TIME_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_UINT32                          ulFirstSegment; /**< 32 least significant bits of system time from F-SYNC message */
    VOS_UINT32                          ulLastSegment;  /**< 4 most significant bits of system time from F-SYNC message */
} CPROC_1X_SYSTEM_TIME_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_PILOT_SEARCH_INFO_STRU
 *
 * Description : This struct carries information on the found pilot. For
 * initial pilot search, the PN Offset cannot be deteremined.
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usPNOffset;     /**< 0..511, CPROC_1X_PN_OFFSET_NOT_KNOWN. */
    VOS_INT16                           sPilotStrength;
} CPROC_1X_PILOT_SEARCH_INFO_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_FREQ_INFO_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usBandClass; /**< 0..31, BAND_CLASS */
    VOS_UINT16                          usFreq;      /**< 0..2047, CDMA_FREQ */
} CPROC_1X_FREQ_INFO_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_BITS_INFO_STRU
 *
 * Description : From C.S0005-Av6.0, 3.7.5.20, 3.7.3.3.2.39 (list not complete
 * yet ).
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usInformationBitsNum; /**< 0..65535, NUM_BITS */
    VOS_UINT16                          usCrcBitsNum;         /**< 0..5, see table 3.7.5.20-4, CRC_LEN_IDX */
} CPROC_1X_BITS_INFO_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_SCH_ACT_SET_INFO_STRU
 *
 * Description : This struct carries parameters from C.S0005, 3.7.3.3.2.36,
 * 3.7.2.3.2.21.
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usSchId;          /**< 0..1, FOR_SCH_ID */
    VOS_UINT16                          usCodeChannelSch; /**< 0..2047, CODE_CHAN_SCH */
    VOS_UINT16                          usQofMaskIdSch;   /**< 0..3, QOF_MASK_ID_SCH */
    VOS_UINT16                          usReserved;       /**< 32 bit alignment */
} CPROC_1X_SCH_ACT_SET_INFO_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_MODE_PARA_STRU
 *
 * Description : For parameter definition see section 3.7.2.3.2.33 in
 * C.S0005-A_v6.0.
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usParamId;                 /**< 0~8 */
    VOS_INT16                           sNomPwr;                   /**< -16 .. 15. EACH_NOM_PWR */
    VOS_INT16                           sInitPwr;                  /**< -16 .. 15. EACH_INIT_PWR */
    VOS_UINT16                          usPwrStep;                 /**< 0 .. 7. EACH_PWR_STEP */
    VOS_UINT16                          usProbeNum;                /**< 0 .. 15. EACH_NUM_STEP */
    CPROC_1X_BOOL_ENUM_UINT16           enPreambleFlag;            /**< yes,no, EACH_PREAMBLE_ENABLED */
    VOS_UINT16                          usFracPreambleNum;         /**< 0 .. 15. EACH_PREAMBLE_NUM_FRAC */
    VOS_UINT16                          usFracPreambleDuration;    /**< 0 .. 15. EACH_PREAMBLE_FRAC_DURATION */
    VOS_UINT16                          usFracPreambleOffDuration; /**< 0 .. 15. EACH_PREAMBLE_OFF_DURATION */
    VOS_UINT16                          usFracPreambleAddDuration; /**< 0 .. 15. EACH_PREAMBLE_ADD_DURATION */
    VOS_UINT16                          usEachSlot;                /**< 0.. 63. EACH_SLOT */
    VOS_UINT16                          usEachSlotOffset1;         /**< 0.. 63. EACH_SLOT_OFFSET1 */
    VOS_UINT16                          usEachSlotOffset2;         /**< 0.. 63. EACH_SLOT_OFFSET2 */
    VOS_UINT16                          usReserved;                /**< 32 bit alignment */
} CPROC_1X_MODE_PARA_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_FWD_TCH_POWER_MEAS_STRU
 *
 * Description : The parameters in this struct are taken from C.S0005-Av6.0,
 * 3.7.3.3.2.10.
 *******************************************************************************/
typedef struct
{
    CPROC_1X_BOOL_ENUM_UINT16           enPowerRptThreshFlag; /**< Use threshold to generate reports. PWR_THRESH_ENABLE */
    CPROC_1X_BOOL_ENUM_UINT16           enPowerRptPeriodFlag; /**< Generate periodic reports. PWR_PERIOD_ENABLE */
    CPROC_1X_BOOL_ENUM_UINT16           enResetFpc;           /**< Reset counters?, RESET_FPC */
    VOS_UINT16                          usPowerRptThresh;     /**< 1..31,in frames. PWR_REP_THRESH */
    VOS_UINT16                          usPowerRptPeriod;     /**< 0..15, PWR_REP_FRAMES */
    VOS_UINT16                          usPowerRptDelay;      /**< 0..31, resolution 4 frames, PWR_REP_DELAY */
} CPROC_1X_FWD_TCH_POWER_MEAS_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_OLPC_CFG_STRU
 *
 * Description : Parameters from C.S0005-Av6.0, section 3.7.3.3.2.25,
 * 3.7.2.3.2.21, 3.7.3.3.2.37.
 * Note: for each parameter xxx = FCH, SCH or DCCH in the comments.
 * The range of sInitSetpoint is as follows:
 * * FCH, DCCH: 0..255
 * * SCH: 0..255 if enFpcSchInitSetptOption in CPROC_1X_OLPC_SCH_INFO_STRU ==
 * INVALID
 * * SCH: -128..127 if enFpcSchInitSetptOption in CPROC_1X_OLPC_SCH_INFO_STRU
 * == VALID
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usFER;         /**< 0..30, see Table 3.7.3.3.2.25-2, FPC_xxx_FER */
    VOS_INT16                           sInitSetpoint; /**< 0..255 or -128..127 resolution 0.125dB. FPC_xxx_INIT_SETPT. */
    VOS_UINT16                          usMaxSetpoint; /**< 0..254, resolution 0.125dB. 255=set current. FPC_xxx_MAX_SETP */
    VOS_UINT16                          usMinSetpoint; /**< 0..254, resolution 0.125dB. 255=set current. FPC_xxx_MIN_SETP */
} CPROC_1X_OLPC_CFG_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_REV_CH_ADJ_GAIN_STRU
 *
 * Description : Parameters from C.S0005-Av6.0, section 3.7.2.3.2.25
 *******************************************************************************/
typedef struct
{
    CPROC_1X_BOOL_ENUM_UINT16           enFchAdjFlag;
    CPROC_1X_BOOL_ENUM_UINT16           enDcchAdjFlag;
    CPROC_1X_BOOL_ENUM_UINT16           enSch0AdjFlag;
    CPROC_1X_BOOL_ENUM_UINT16           enSch1AdjFlag;
    VOS_INT16                           sFchAdjGain;   /**< -48..48, resolution 0.125dB. FCH_CHAN_ADJ_GAIN */
    VOS_INT16                           sDcchAdjGain;  /**< -48..48, resolution 0.125dB. DCCH_CHAN_ADJ_GAIN */
    VOS_INT16                           sSch0AdjGain;  /**< -48..48, resolution 0.125dB. SCH0_CHAN_ADJ_GAIN */
    VOS_INT16                           sSch1AdjGain;  /**< -48..48, resolution 0.125dB. SCH1_CHAN_ADJ_GAIN */
} CPROC_1X_REV_CH_ADJ_GAIN_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_POWER_MEAS_STRU
 *
 * Description : This struct carries parameters from C.S0005-Av6.0, section
 * 2.7.2.3.2.6.
 * The same parameters are used for FCH, DCCH and SCH. Two ranges are given for
 * the parameters, where the latter is for SCH.
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usPowerMeasFrames; /**< 0..1023. 0..65535. PWR_MEAS_FRAMES, DCCH_PWR_MEAS_FRAMES, SCH_PWR_MEAS_FRAMES , */
    VOS_UINT16                          usErrorFrames;     /**< 0..1023, 0..65535. ERRORS_DETECTED, DCCH_ERRORS_DETECTED, SCH_ERRORS_DETECTED */
} CPROC_1X_POWER_MEAS_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_SCH_CUR_SETPOINT_STRU
 *
 * Description : This struct carries parameters from C.S0005-Av6.0,
 * 2.7.2.3.2.22.
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usSchInd;         /**< 0..1, SCH_ID */
    VOS_UINT16                          usSchCurSetpoint; /**< 0..254, resolution 0.125dB. FPC_SCH_CURR_SETPT */
} CPROC_1X_SCH_CUR_SETPOINT_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_CHANNEL_RESULT_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CPROC_1X_PHYCH_ENUM_UINT16          enChannelType;
    CPROC_1X_RSLT_ENUM_UINT16           enConfigRslt;
} CPROC_1X_CHANNEL_RESULT_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_ACT_SET_INFO_PILOT_STRU
 *
 * Description : This struct carries all info on the pilot/sector in the active
 * set, including SCH information. See C.S0005, 3.7.3.3.2.36, 3.7.2.3.2.21.
 *******************************************************************************/
typedef struct
{
    CPROC_1X_TCH_CHANNEL_ENUM_UINT16    enChannelType;
    VOS_UINT16                          usPilotPN;                                 /**< PN Offset, 0..511. PILOT_PN */
    CPROC_1X_BOOL_ENUM_UINT16           enPwrCombinInd;                            /**< Combine pwr ctrl with previous pilot? PWR_COMB_IND */
    VOS_UINT16                          usCodeChannelFch;                          /**< 0..255, CODE_CHAN_FCH */
    VOS_UINT16                          usQofMaskIdFch;                            /**< 0..3, QOF_MASK_ID_FCH */
    VOS_UINT16                          usCodeChannelDcch;                         /**< 0..255, CODE_CHAN_DCCH */
    VOS_UINT16                          usQofMaskIdDcch;                           /**< 0..3, QOF_MASK_ID_DCCH */
    VOS_UINT16                          usSchActSetNum;
    CPROC_1X_SCH_ACT_SET_INFO_STRU      astSchActSetIfo[CPROC_1X_SUPPORT_SCH_NUM];
} CPROC_1X_ACT_SET_INFO_PILOT_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_1XADV_FCH_STRU
 *
 * Description : This strcut carries FCH related parameters used in 1xAdvanced.
 * All parameters come from the RCPM message, see 3.7.3.3.2.51 in C.S0005-E
 * v3.0.
 * The Ack masks are bitfields, where each bit corresponds to a PCG in a 20ms
 * frame, see table 3.7.3.3.2.51-1.
 *******************************************************************************/
typedef struct
{
    CPROC_1X_BOOL_ENUM_UINT16                               enForFchAckMaskRlBlankingFlag;   /**< Is usForFchAckMaskRlBlanking included ? */
    VOS_UINT16                                              usForFchAckMaskRlBlanking;       /**< 0..0xffff, FOR_FCH_ACK_MASK_RL_BLANKING */
    CPROC_1X_BOOL_ENUM_UINT16                               enForFchAckMaskNoRlBlankingFlag; /**< Is usForFchAckMaskNoRlBlanking included ? */
    VOS_UINT16                                              usForFchAckMaskNoRlBlanking;     /**< 0..0xffff, FOR_FCH_ACK_MASK_NO_RL_BLANKING */
    CPROC_1X_BOOL_ENUM_UINT16                               enRevFchAckMaskFlag;             /**< Is usRevFchAckMask included ? */
    VOS_UINT16                                              usRevFchAckMask;                 /**< 0..0xffff, REV_FCH_ACK_MASK */
    CPROC_1X_FOR_N2M_ENUM_UINT16                            enForN2m;                        /**< The N2m value to use, FOR_N2M_IND */
    CPROC_1X_BLANKING_DUTYCYCLE_ENUM_UINT16                 enForFchBlankingDutycycle;       /**< FOR_FCH_BLANKING_DUTYCYCLE */
    CPROC_1X_BLANKING_DUTYCYCLE_ENUM_UINT16                 enRevFchBlankingDutycycle;       /**< REV_FCH_BLANKING_DUTYCYCLE */
    VOS_UINT16                                              usReserved;                      /**< 32 bit alignment */
} CPROC_1X_1XADV_FCH_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_DCCH_PARA_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CPROC_1X_PHYCH_ENUM_UINT16                              enChannelType;
    VOS_UINT16                                              usReserved;                                         /**< 32 bit alignment */
    CPROC_1X_DCCH_FRAME_SIZE_ENUM_UINT16                    enFrameSize;                                        /**< 5, 20 , 5 or 20, DCCH_FRAME_SIZE */
    VOS_UINT16                                              usRC;                                               /**< Radio configuration number */
    VOS_UINT16                                              usNumBitsInfo;                                      /**< 1, Number of rates included */
    VOS_UINT16                                              ausInformationBitsNum[CPROC_1X_MAX_DCCH_RATES_NUM]; /**< 0..65535, NUM_BITS */
} CPROC_1X_DCCH_PARA_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_FWD_SCH_INFO_STRU
 *
 * Description : This struct carries parameters from C.S0005, 3.7.3.3.2.36,
 * 3.7.3.3.2.38, 3.7.3.3.2.37
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usSchId;
    VOS_UINT16                          usForSchRc;                              /**< 3..5,11. RC of the forward SCH, SCH_RC */
    CPROC_1X_SCH_CODING_ENUM_UINT16     enCodingType;                            /**< Convolution Coding, Convolution Coding and Turbo Coding. CODING */
    CPROC_1X_SCH_FRAME_SIZE_ENUM_UINT16 enFrameSize;                             /**< 20, 40 or 80 ms */
    VOS_UINT16                          usMaxRate;                               /**< 0..8, FOR_MAX_RATE, see Table 2.7.4.27.3-2 */
    VOS_UINT16                          usSchDuration;                           /**< 0..15, see table 3.7.3.3.2.37-3. FOR_SCH_DURATION */
    CPROC_1X_BOOL_ENUM_UINT16           enSchStartTimeFlag;                      /**< yes, no */
    VOS_UINT16                          usSchStartTime;                          /**< 0..31,FOR_SCH_START_TIME */
    VOS_UINT16                          usFwdSCHFrameOffset;                     /**< [0,3] */
    VOS_UINT16                          usNumBitsInfo;
    CPROC_1X_BITS_INFO_STRU             astBitsInfo[CPROC_1X_MAX_SCH_RATES_NUM];
} CPROC_1X_FWD_SCH_INFO_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_REV_SCH_INFO_STRU
 *
 * Description : This struct carries parameters from C.S0005, 3.7.3.3.2.36,
 * 3.7.3.3.2.38, 3.7.3.3.2.37
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usSchId;                                 /**< 0..1, REV_SCH_ID */
    VOS_UINT16                          usWalshCode;                             /**< 0..1, REV_WALSH_ID, see table 3.7.3.3.2.37-1 */
    CPROC_1X_SCH_CODING_ENUM_UINT16     enCodingType;                            /**< Convolution Coding, Convolution Coding and Turbo Coding. CODING */
    VOS_UINT16                          usMaxRate;                               /**< 0..8, REV_MAX_RATE, see Table 2.7.4.27.3-2 */
    CPROC_1X_SCH_FRAME_SIZE_ENUM_UINT16 enFrameSize;                             /**< 20, 40 or 80 ms */
    VOS_UINT16                          usSchDuration;                           /**< 0..15, see table 3.7.3.3.2.37-3. REV_SCH_DURATION */
    CPROC_1X_BOOL_ENUM_UINT16           enSchStartTimeFlag;                      /**< yes, no */
    VOS_UINT16                          usSchStartTime;                          /**< 0..31,REV_SCH_START_TIME */
    VOS_UINT16                          usRevSCHFrameOffset;                     /**< 0..3, REV_SCH_FRAME_OFFSET */
    VOS_UINT16                          usRevSchRc;                              /**< 3..4, 8. RC of the reverse SCH, SCH_RC */
    VOS_UINT16                          usReserved;                              /**< 32 bit alignment */
    VOS_UINT16                          usNumBitsInfo;
    CPROC_1X_BITS_INFO_STRU             astBitsInfo[CPROC_1X_MAX_SCH_RATES_NUM];
} CPROC_1X_REV_SCH_INFO_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_TCH_COMMON_STRU
 *
 * Description : This struct carries parameters from C.S0005-Av6.0,
 * 3.7.3.3.2.34, 3.7.3.3.2.31, 3.7.3.3.2.17, 3.7.2.3.2.21,
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usActionTime;          /**< 0..63, system time in 80ms MOD 64 = ActionTime => activate, or CPROC_1X_ACTIVATE_AT_ONCE. ACTION_TIME */
    VOS_UINT16                          usBandClass;           /**< 0..31, BAND_CLASS */
    VOS_UINT16                          usFrequency;           /**< 0..2047, CDMA_FREQ */
    CPROC_1X_TCH_PROCESS_ENUM_UINT16    enProcessFlag;         /**< Trch Init;hard handoff with judgment,hard handoff without judgment,hard handoff Revert,other process */
    VOS_UINT16                          usFrameOffset;         /**< 0..15, resolution 1.25ms, FRAME_OFFSET */
    CPROC_1X_FPC_PRI_CH_ENUM_UINT16     enFpcPriChan;          /**< FCH or DCCH */
    VOS_UINT16                          usHhoPreambleNum;      /**< 0..7 RC1-2 => resolution 20ms. otherwise 0..6 in 2*1.25ms resolution and 7 =>16*1.25ms. See NUM_PREAMBLE */
    CPROC_1X_BOOL_ENUM_UINT16           enCompleteSearch;      /**< Perform complete measurement before return on fail. COMPLETE_SEARCH */
    CPROC_1X_BOOL_ENUM_UINT16           enPilotGatingRateFlag; /**< TRUE: gating shall be used. FALSE: gating shall not be used. PILOT_GATING_USE_RATE */
    CPROC_1X_GATING_RATE_ENUM_UINT16    enPilotGatingRate;     /**< PILOT_GATING_RATE */
    VOS_UINT16                          usTFWaitTime;          /**< 0..15, max time to get good frame in target freq after Handoff. TF_WAIT_TIME,only valid when handoff */
    VOS_UINT16                          usSrchWinBlind;        /**< 0..15, search window to use at blind hard handoff */
} CPROC_1X_TCH_COMMON_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_QPCH_PARA_STRU
 *
 * Description : Parameters from C.S0005-Av6.0, 3.7.2.3.2.13, 3.7.2.3.2.31
 *******************************************************************************/
typedef struct
{
    CPROC_1X_PHYCH_ENUM_UINT16          enChannelType;
    VOS_UINT16                          usBandClass;       /**< 0..31, BAND_CLASS */
    VOS_UINT16                          usFrequency;       /**< 0..2047, CDMA_FREQ */
    VOS_UINT16                          usPilotPN;         /**< 0..511, PILOT_PN */
    VOS_UINT16                          usQPageCH;         /**< 1..3, which QPCH Channel to receive */
    VOS_UINT16                          usPgSlot;          /**< 0..2047, Calculated from hash function. PGSLOT */
    VOS_UINT16                          usSlotCycleIndex;  /**< 0..7. slot cycle index "i" */
    CPROC_1X_DATA_RATE_ENUM_UINT16      enRate;            /**< QPCH data rate,9600bps,4800bps */
    VOS_UINT16                          usQpchPiPwrLevel;  /**< 0..7, resolution 1dB, offset -5dB, QPCH_POWER_LEVEL_PAGE see 3.7.2.3.2.13-3 */
    CPROC_1X_BOOL_ENUM_UINT16           enReceiveCci;      /**< Indicate L1 to receive the CCI */
    VOS_UINT16                          usQpchCciPwrLevel; /**< 0..7, resolution 1dB, offset -5dB, QPCH_POWER_LEVEL_CONFIG see  3.7.2.3.2.13-3 */
    CPROC_1X_BOOL_ENUM_UINT16           enReceiveBi;       /**< Indicate L1 to receive the BI */
    VOS_UINT16                          usQpchBiPwrLevel;  /**< 0..7, resolution 1dB, offset -5dB, QPCH_POWER_LEVEL_BCAST see 3.7.2.3.2.31-3 */
    CPROC_1X_BOOL_ENUM_UINT16           enReceivePi;       /**< Indicate L1 to receive the PI */
    VOS_UINT32                          ulHashKey;         /**< Hash Key for calculating PI position */
} CPROC_1X_QPCH_PARA_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_PCH_PARA_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CPROC_1X_PHYCH_ENUM_UINT16          enChannelType;
    VOS_UINT16                          usBandClass;        /**< 0..31, BAND_CLASS */
    VOS_UINT16                          usFrequency;        /**< 0..2047, CDMA_FREQ */
    VOS_UINT16                          usPilotPN;          /**< 0..511, PILOT_PN */
    CPROC_1X_SLOTTED_MODE_ENUM_UINT16   enSlotted;          /**< Channel in slotted mode ? */
    VOS_UINT16                          usPagingCh;
    CPROC_1X_DATA_RATE_ENUM_UINT16      enPRate;            /**< Paging Channel data rate,9600bps,4800bps */
    VOS_UINT16                          usPagingCycleIndex; /**< Valid if enSlotted = yes, SLOT_CYCLE_INDEX */
    VOS_UINT16                          usPGSLOT;           /**< 0..2047 From hash function. Valid if enSlotted = yes */
    VOS_UINT16                          usBcastIndex;       /**< Valid if enSlotted = yes */
} CPROC_1X_PCH_PARA_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_FCCCH_PARA_STRU
 *
 * Description : This struct contains parameters from C.C0005-Av6.0,
 * 3.7.2.3.2.31,
 *******************************************************************************/
typedef struct
{
    CPROC_1X_PHYCH_ENUM_UINT16                              enChannelType;
    VOS_UINT16                                              usReserved;         /**< 32 bit alignment */
    VOS_UINT16                                              usBandClass;        /**< 0..31, BAND_CLASS */
    VOS_UINT16                                              usFrequency;        /**< 0..2047, CDMA_FREQ */
    VOS_UINT16                                              usPilotPN;          /**< 0..511, PILOT_PN */
    CPROC_1X_SLOTTED_MODE_ENUM_UINT16                       enSlotted;
    VOS_UINT16                                              usFccchCodeChan;    /**< 1..256, FCCCH_CODE_CHAN */
    CPROC_1X_FCCCH_DATA_RATE_ENUM_UINT16                    enFccchRate;        /**< FCCCH_RATE */
    CPROC_1X_CODE_RATE_ENUM_UINT16                          enFccchCodeRate;    /**< FCCCH_CODE_RATE */
    VOS_UINT16                                              usPagingCycleIndex; /**< Valid if enSlotted = yes */
    VOS_UINT16                                              usPGSLOT;           /**< Valid if enSlotted = yes */
    VOS_UINT16                                              usBcastIndex;       /**< Valid if enSlotted = yes */
} CPROC_1X_FCCCH_PARA_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_BCCH_PARA_STRU
 *
 * Description : This struct contains parameters from C.S0005-Av6.0,
 * 3.7.2.3.2.36, 3.7.2.3.2.26
 *******************************************************************************/
typedef struct
{
    CPROC_1X_PHYCH_ENUM_UINT16          enChannelType;
    VOS_UINT16                          usFrequency;         /**< 0..2047, CDMA_FREQ */
    VOS_UINT16                          usBandClass;         /**< 0..31, BAND_CLASS */
    VOS_UINT16                          usPilotPN;           /**< 0..511, PILOT_PN */
    VOS_UINT16                          usBCN;               /**< 0..7, Broadcast Control Channel Number, BCN */
    CPROC_1X_BOOL_ENUM_UINT16           enUseStartTime;      /**< Use the action time. If not set, start NOW */
    VOS_UINT16                          usActionTime;        /**< BCCH start time. Valid when enUseStartTime = Yes */
    CPROC_1X_BOOL_ENUM_UINT16           enUseRepeat;         /**< Yes/No. Valid when enUseStartTime = Yes */
    VOS_UINT16                          usRepeatTimeOffset;  /**< BCCH offset of repeat. Valid if enUseRepeat = Yes, REPEAT_TIME_OFFSET */
    CPROC_1X_DATA_RATE_ENUM_UINT16      enSR1BratNonTd;      /**< BCCH data rate in non TD mode for SR1, SR1_BRAT_NON_TD */
    CPROC_1X_CODE_RATE_ENUM_UINT16      enSR1CratNonTD;      /**< Code rate, SR1_CRAT_NON_TD */
    VOS_UINT16                          usSR1WalshCodeNonTD; /**< 0..63 , SR1_BCCH_CODE_CHAN_NON_TD */
} CPROC_1X_BCCH_PARA_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_ACH_PARA_STRU
 *
 * Description : For parameter definition see section 3.7.2.3.2.2 and
 * 3.7.2.3.2.1 in C.S0005-A_v6.0.
 *******************************************************************************/
typedef struct
{
    CPROC_1X_PHYCH_ENUM_UINT16          enChannelType;
    VOS_UINT16                          usReserved;    /**< 32 bit alignment */
    VOS_UINT16                          usFrequency;   /**< 0..2047, CDMA_FREQ */
    VOS_UINT16                          usBandClass;   /**< 0..31, BAND_CLASS */
    VOS_UINT16                          usPilotPN;     /**< 0..511, PILOT_PN */
    VOS_UINT16                          usBaseId;      /**< 16 bit value. BASE_ID */
    VOS_INT16                           sNomPwr;       /**< -8 .. 7. NOM_PWR */
    VOS_INT16                           sInitPwr;      /**< -16 .. 15. INIT_PWR */
    VOS_UINT16                          usPwrStep;     /**< 0 .. 7. PWR_STEP */
    VOS_UINT16                          usNomPwrExt;   /**< 0 or 1. NOM_PWR_EXT */
} CPROC_1X_ACH_PARA_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_EACH_PARA_STRU
 *
 * Description : For parameter definition see section 3.7.2.3.2.33 and
 * 3.7.2.3.2.30 in C.S0005-A_v6.0.
 *******************************************************************************/
typedef struct
{
    CPROC_1X_PHYCH_ENUM_UINT16          enChannelType;
    VOS_UINT16                          usReserved;                                /**< 32 bit alignment */
    VOS_UINT16                          usFrequency;                               /**< 0..2047, CDMA_FREQ */
    VOS_UINT16                          usBandClass;                               /**< 0..31, BAND_CLASS */
    VOS_UINT16                          usPilotPN;                                 /**< 0..511, PILOT_PN */
    VOS_UINT16                          usBaseId;                                  /**< 16 bit value. BASE_ID */
    VOS_INT16                           sRlGainCommonPilot;                        /**< -32 .. 31. res. 0.125dB. RLGAIN_COMMON_PILOT */
    VOS_UINT16                          usIcThresh;                                /**< 0 .. 15. IC_THRESH. */
    VOS_UINT16                          usIcMax;                                   /**< 0 .. 15. IC_MAX. */
    VOS_UINT16                          usNumModeParams;                           /**< 1 .. 8. NUM_MODE_PARM_REC + 1 */
    CPROC_1X_MODE_PARA_STRU             astModeParams[CPROC_1X_MAX_MODE_PARA_NUM];
} CPROC_1X_EACH_PARA_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_OLPC_SCH_CFG_STRU
 *
 * Description : Parameters from C.S0005-Av6.0, section 3.7.3.3.2.25,
 * 3.7.3.3.2.37.
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usSchInd;   /**< 0..1, SCH_ID */
    CPROC_1X_OLPC_CFG_STRU              stOlpcInfo;
} CPROC_1X_OLPC_SCH_CFG_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_RL_ATT_ADJ_GAIN_BASIC_RATE_STRU
 *
 * Description : All non-enum parameters in this struct have resolution
 * 0.125dB.
 * The range is -48..48 if Nominal Attribute Gain is used, otherwise more or
 * less unknown (unspecified in the spec.).
 * See C.S0005-Av6.0 3.7.3.3.2.25.
 *******************************************************************************/
typedef struct
{
    CPROC_1X_ATT_ADJ_GAIN_ENUM_UINT16   enAttAdjGainType;     /**< Nominal_Attribute_Gain,Pilot_Reference_Level */
    CPROC_1X_BOOL_ENUM_UINT16           en20msRc35Flag;       /**< Are the below 4 parameters included */
    VOS_INT16                           s20msAttAdjGain1500;  /**< RL_ATT_ADJ_GAIN_1500 */
    VOS_INT16                           s20msAttAdjGain2700;  /**< RL_ATT_ADJ_GAIN_2700 */
    VOS_INT16                           s20msAttAdjGain4800;  /**< RL_ATT_ADJ_GAIN_4800 */
    VOS_INT16                           s20msAttAdjGain9600;  /**< RL_ATT_ADJ_GAIN_9600 */
    CPROC_1X_BOOL_ENUM_UINT16           en20msRc46Flag;       /**< Are the below 4 parameters included */
    VOS_INT16                           s20msAttAdjGain1800;  /**< RL_ATT_ADJ_GAIN_1800 */
    VOS_INT16                           s20msAttAdjGain3600;  /**< RL_ATT_ADJ_GAIN_3600 */
    VOS_INT16                           s20msAttAdjGain7200;  /**< RL_ATT_ADJ_GAIN_7200 */
    VOS_INT16                           s20msAttAdjGain14400; /**< RL_ATT_ADJ_GAIN_14400 */
    CPROC_1X_BOOL_ENUM_UINT16           en5msFlag;            /**< Is the below parameter included */
    VOS_INT16                           s5msAttAdjGain9600;   /**< RL_ATT_ADJ_GAIN_9600_5MS */
    CPROC_1X_BOOL_ENUM_UINT16           en40msRc35Flag;       /**< Are the below 4 parameters included */
    VOS_INT16                           s40msAttAdjGain1350;  /**< RL_ATT_ADJ_GAIN_1350_40MS */
    VOS_INT16                           s40msAttAdjGain2400;  /**< RL_ATT_ADJ_GAIN_2400_40MS */
    VOS_INT16                           s40msAttAdjGain4800;  /**< RL_ATT_ADJ_GAIN_4800_40MS */
    VOS_INT16                           s40msAttAdjGain9600;  /**< RL_ATT_ADJ_GAIN_9600_40MS */
    CPROC_1X_BOOL_ENUM_UINT16           en40msRc46Flag;       /**< Are the below 4 parameters included */
    VOS_INT16                           s40msAttAdjGain1800;  /**< RL_ATT_ADJ_GAIN_1800_40MS */
    VOS_INT16                           s40msAttAdjGain3600;  /**< RL_ATT_ADJ_GAIN_3600_40MS */
    VOS_INT16                           s40msAttAdjGain7200;  /**< RL_ATT_ADJ_GAIN_7200_40MS */
    VOS_INT16                           s40msAttAdjGain14400; /**< RL_ATT_ADJ_GAIN_14400_40MS */
    CPROC_1X_BOOL_ENUM_UINT16           en80msRc35Flag;       /**< Are the below 4 parameters included */
    VOS_INT16                           s80msAttAdjGain1200;  /**< RL_ATT_ADJ_GAIN_1200_80MS */
    VOS_INT16                           s80msAttAdjGain2400;  /**< RL_ATT_ADJ_GAIN_2400_80MS */
    VOS_INT16                           s80msAttAdjGain4800;  /**< RL_ATT_ADJ_GAIN_4800_80MS */
    VOS_INT16                           s80msAttAdjGain9600;  /**< RL_ATT_ADJ_GAIN_9600_80MS */
    CPROC_1X_BOOL_ENUM_UINT16           en80msRc46Flag;       /**< Are the below 4 parameters included */
    VOS_INT16                           s80msAttAdjGain1800;  /**< RL_ATT_ADJ_GAIN_1800_80MS */
    VOS_INT16                           s80msAttAdjGain3600;  /**< RL_ATT_ADJ_GAIN_3600_80MS */
    VOS_INT16                           s80msAttAdjGain7200;  /**< RL_ATT_ADJ_GAIN_7200_80MS */
    VOS_INT16                           s80msAttAdjGain14400; /**< RL_ATT_ADJ_GAIN_14400_80MS */
} CPROC_1X_RL_ATT_ADJ_GAIN_BASIC_RATE_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_RL_ATT_ADJ_GAIN_HIGH_RATE_STRU
 *
 * Description : All non-enum parameters in this struct have resolution
 * 0.125dB.
 * The range is -48..48 if Nominal Attribute Gain is used, otherwise more or
 * less unknown (unspecified in the spec.).
 * See C.S0005-Av6.0 3.7.3.3.2.25.
 *******************************************************************************/
typedef struct
{
    CPROC_1X_CODE_TYPE_ENUM_UINT16      enCodeType;             /**< convolutional orTurbo, CODE_TYPE */
    CPROC_1X_ATT_ADJ_GAIN_ENUM_UINT16   enAttAdjGainType;       /**< Nominal_Attribute_Gain,Pilot_Reference_Level */
    CPROC_1X_BOOL_ENUM_UINT16           en20msRc35Flag;         /**< Are the below 6 parameters valid */
    VOS_INT16                           s20msAttAdjGain19200;   /**< RL_ATT_ADJ_GAIN_19200 */
    VOS_INT16                           s20msAttAdjGain38400;   /**< RL_ATT_ADJ_GAIN_38400 */
    VOS_INT16                           s20msAttAdjGain76800;   /**< RL_ATT_ADJ_GAIN_76800 */
    VOS_INT16                           s20msAttAdjGain153600;  /**< RL_ATT_ADJ_GAIN_153600 */
    VOS_INT16                           s20msAttAdjGain307200;  /**< RL_ATT_ADJ_GAIN_307200 */
    VOS_INT16                           s20msAttAdjGain614400;  /**< RL_ATT_ADJ_GAIN_614400 */
    CPROC_1X_BOOL_ENUM_UINT16           en20msRc46Flag;         /**< Are the below 6 parameters valid */
    VOS_INT16                           s20msAttAdjGain28800;   /**< RL_ATT_ADJ_GAIN_28800 */
    VOS_INT16                           s20msAttAdjGain57600;   /**< RL_ATT_ADJ_GAIN_57600 */
    VOS_INT16                           s20msAttAdjGain115200;  /**< RL_ATT_ADJ_GAIN_115200 */
    VOS_INT16                           s20msAttAdjGain230400;  /**< RL_ATT_ADJ_GAIN_230400 */
    VOS_INT16                           s20msAttAdjGain460800;  /**< RL_ATT_ADJ_GAIN_460800 */
    VOS_INT16                           s20msAttAdjGain1036800; /**< RL_ATT_ADJ_GAIN_1036800 */
    CPROC_1X_BOOL_ENUM_UINT16           en40msRc35Flag;         /**< Are the below 5 parameters valid */
    VOS_INT16                           s40msAttAdjGain19200;   /**< RL_ATT_ADJ_GAIN_19200_40MS */
    VOS_INT16                           s40msAttAdjGain38400;   /**< RL_ATT_ADJ_GAIN_38400_40MS */
    VOS_INT16                           s40msAttAdjGain76800;   /**< RL_ATT_ADJ_GAIN_76800_40MS */
    VOS_INT16                           s40msAttAdjGain153600;  /**< RL_ATT_ADJ_GAIN_153600_40MS */
    VOS_INT16                           s40msAttAdjGain307200;  /**< RL_ATT_ADJ_GAIN_307200_40MS */
    CPROC_1X_BOOL_ENUM_UINT16           en40msRc46Flag;         /**< Are the below 5 parameters valid */
    VOS_INT16                           s40msAttAdjGain28800;   /**< RL_ATT_ADJ_GAIN_28800_40MS */
    VOS_INT16                           s40msAttAdjGain57600;   /**< RL_ATT_ADJ_GAIN_57600_40MS */
    VOS_INT16                           s40msAttAdjGain115200;  /**< RL_ATT_ADJ_GAIN_115200_40MS */
    VOS_INT16                           s40msAttAdjGain230400;  /**< RL_ATT_ADJ_GAIN_230400_40MS */
    VOS_INT16                           s40msAttAdjGain518400;  /**< RL_ATT_ADJ_GAIN_518400_40MS */
    CPROC_1X_BOOL_ENUM_UINT16           en80msRc35Flag;         /**< Are the below 4 parameters valid */
    VOS_INT16                           s80msAttAdjGain19200;   /**< RL_ATT_ADJ_GAIN_19200_80MS */
    VOS_INT16                           s80msAttAdjGain38400;   /**< RL_ATT_ADJ_GAIN_38400_80MS */
    VOS_INT16                           s80msAttAdjGain76800;   /**< RL_ATT_ADJ_GAIN_76800_80MS */
    VOS_INT16                           s80msAttAdjGain153600;  /**< RL_ATT_ADJ_GAIN_153600_80MS */
    CPROC_1X_BOOL_ENUM_UINT16           en80msRc46Flag;         /**< Are the below 4 parameters valid */
    VOS_INT16                           s80msAttAdjGain28800;   /**< RL_ATT_ADJ_GAIN_28800_80MS */
    VOS_INT16                           s80msAttAdjGain57600;   /**< RL_ATT_ADJ_GAIN_57600_80MS */
    VOS_INT16                           s80msAttAdjGain115200;  /**< RL_ATT_ADJ_GAIN_115200_80MS */
    VOS_INT16                           s80msAttAdjGain259200;  /**< RL_ATT_ADJ_GAIN_259200_80MS */
} CPROC_1X_RL_ATT_ADJ_GAIN_HIGH_RATE_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_1XADV_POWER_CTRL_STRU
 *
 * Description : This struct carries power control parameters to be used with
 * 1x Advanced only. The parameters come from  the message RCPM, see section
 * 3.7.3.3.2.51 in C.S0005-E v3.0.
 *******************************************************************************/
typedef struct
{
    CPROC_1X_RPC_MODE_ENUM_UINT16       enRpcMode;                     /**< RPC_MODE */
    CPROC_1X_BOOL_ENUM_UINT16           enRevAckChGainAdjACS1Flag;     /**< is sRevAckChGainAdjAcs1 included? REV_ACKCH_GAIN_ADJ_ACS1_INC */
    VOS_INT16                           sRevAckChGainAdjAcs1;          /**< -64..63, res 1/8dB.  REV_ACKCH_GAIN_ADJ_ACS1 */
    CPROC_1X_BOOL_ENUM_UINT16           enRevAckChGainAdjACS2PlusFlag; /**< is is sRevAckChGainAdjAcs2Plus included? REV_ACKCH_GAIN_ADJ_ACS2PLUS_INC */
    VOS_INT16                           sRevAckChGainAdjACS2Plus;      /**< -64..63, res 1/8dB.  REV_ACKCH_GAIN_ADJ_ACS2PLUS */
    VOS_INT16                           sReserved;                     /**< 32 bit alignment */
} CPROC_1X_1XADV_POWER_CTRL_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_POWER_UP_CTRL_PARA_STRU
 *
 * Description : This struct contains parameters from C.S0005-Av6.0,
 * 3.7.3.3.2.29
 *******************************************************************************/
typedef struct
{
    CPROC_1X_ACTION_TYPE_ENUM_UINT16    enAction;          /**< start,stop */
    VOS_UINT16                          usActionTimeFrame; /**< 0..3, resolution 20ms (offset within 80ms slot), ACTION_TIME_FRAME */
    VOS_UINT16                          usPUFSetupSize;    /**< 0..63,(offset = 1) PUF_SETUP_SIZE */
    VOS_UINT16                          usPUFPulseSize;    /**< 0..127, (offset = 1) PUF_PULSE_SIZE */
    VOS_UINT16                          usPUFInterval;     /**< 0..1023, PUF_INTERVAL */
    VOS_UINT16                          usPUFInitPower;    /**< 0..63, Resolution 1dB PUF_INIT_PWR */
    VOS_UINT16                          usPUFPowerStep;    /**< 0..31, Resolution 1dB, PUF_PWR_STEP */
    VOS_UINT16                          usPUFTotalProbe;   /**< 0..15, (offset = 1) TOTAL_PUF_PROBES */
    VOS_UINT16                          usMaxPowerPUF;     /**< 0..15, (offset = 1) MAX_PWR_PUF */
    CPROC_1X_BOOL_ENUM_UINT16           enPUFFreqFlag;     /**< yes,no */
    VOS_UINT16                          usBandClass;       /**< 0..31, PUF_BAND_CLASS */
    VOS_UINT16                          usFrequency;       /**< 0..2047, PUF_CDMA_FREQ */
} CPROC_1X_POWER_UP_CTRL_PARA_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_POWER_MEAS_RPT_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CPROC_1X_BOOL_ENUM_UINT16           enFchPowerMeasExist;
    CPROC_1X_BOOL_ENUM_UINT16           enDcchPowerMeasExist;
    CPROC_1X_BOOL_ENUM_UINT16           enSchPowerMeasExist;
    VOS_UINT16                          usSchNum;
    CPROC_1X_POWER_MEAS_STRU            astSchPowerMeas[CPROC_1X_SUPPORT_SCH_NUM];
    CPROC_1X_POWER_MEAS_STRU            stFchPowerMeas;
    CPROC_1X_POWER_MEAS_STRU            stDcchPowerMeas;
} CPROC_1X_POWER_MEAS_RPT_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_OLPC_RPT_STRU
 *
 * Description : This struct carries parameters from C.S0005-Av6.0,
 * 2.7.2.3.2.22.
 *******************************************************************************/
typedef struct
{
    CPROC_1X_BOOL_ENUM_UINT16           enPeriodicReport;                            /**< TRUE: the report is a requested oneshot or was sent due to an update of a setpt, FALSE: the report was triggered by configured thresholds */
    CPROC_1X_BOOL_ENUM_UINT16           enFchCurSetpointFlag;
    VOS_UINT16                          usFchCurSetpoint;                            /**< 0..254, resolution 0.125dB. FPC_FCH_CURR_SETPT */
    CPROC_1X_BOOL_ENUM_UINT16           enDcchCurSetpointFlag;
    VOS_UINT16                          usDcchCurSetpoint;                           /**< 0.254, resolution 0.125dB. FPC_DCCH_CURR_SETPT */
    VOS_UINT16                          usSchNum;                                    /**< 0..2, NUM_SUP */
    CPROC_1X_SCH_CUR_SETPOINT_STRU      astSchCurSetpoint[CPROC_1X_SUPPORT_SCH_NUM];
} CPROC_1X_OLPC_RPT_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_FREQ_SIGNAL_INFO_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CPROC_1X_FREQ_INFO_STRU             stFreqInfo;
    VOS_INT16                           sFreqRssi;  /**< -880..0, Resolution 0.125dB */
    VOS_UINT16                          usReserve1;
} CPROC_1X_FREQ_SIGNAL_INFO_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_FREQ_LIST_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usFreqNum;
    VOS_UINT16                          usReserved;                                 /**< 32 bit alignment */
    CPROC_1X_FREQ_INFO_STRU             astFreq[CPROC_1X_MAX_FREQ_IN_PILOT_SEARCH];
} CPROC_1X_FREQ_LIST_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_POWER_UNION
 *
 * Description :
 *******************************************************************************/
typedef union
{
    CPROC_1X_REV_CH_ADJ_GAIN_STRU                           stRCHAdjGain;
    CPROC_1X_RL_ATT_ADJ_GAIN_BASIC_RATE_STRU                stRlAttAdjGainBasicRate;
    CPROC_1X_RL_ATT_ADJ_GAIN_HIGH_RATE_STRU                 stRlAttAdjGainHighRate;
} CPROC_1X_POWER_UNION;

/** ****************************************************************************
 * Name        : CPROC_1X_ACT_SET_INFO_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usPilotNum;
    VOS_UINT16                          usReserved;                                         /**< 32 bit alignment */
    CPROC_1X_ACT_SET_INFO_PILOT_STRU    stActSetPilotInfo[CPROC_1X_SUPPORT_ACTIVE_SET_NUM];
} CPROC_1X_ACT_SET_INFO_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_FCH_PARA_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CPROC_1X_PHYCH_ENUM_UINT16          enChannelType;
    VOS_UINT16                          usReserved;                                        /**< 32 bit alignment */
    CPROC_1X_FCH_FRAME_SIZE_ENUM_UINT16 enFrameSize;                                       /**< 20,5 or 20 FCH_FRAME_SIZE */
    VOS_UINT16                          usRC;                                              /**< Radio configuration number */
    CPROC_1X_BOOL_ENUM_UINT16           enstFchAdvancedParamsFlag;                         /**< Are the 1xAdvanced parameters included? */
    VOS_UINT16                          usNumBitsInfo;                                     /**< 1 or 4 */
    VOS_UINT16                          ausInformationBitsNum[CPROC_1X_MAX_FCH_RATES_NUM]; /**< 0..65535, NUM_BITS */
    CPROC_1X_1XADV_FCH_STRU             stFchAdvancedParams;                               /**< FCH parameters for 1x Advanced */
} CPROC_1X_FCH_PARA_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_FWD_SCH_PARA_STRU
 *
 * Description : This struct carries parameters from C.S0005, 3.7.3.3.2.36,
 * 3.7.3.3.2.38, 3.7.3.3.2.37.
 *******************************************************************************/
typedef struct
{
    CPROC_1X_PHYCH_ENUM_UINT16          enChannelType;
    VOS_UINT16                          usStartTimeUnit;                         /**< 0..7 => 20ms..160ms START_TIME_UNIT */
    VOS_UINT16                          usReserved;                              /**< 32 bit alignment */
    VOS_UINT16                          usFwdSchNum;
    CPROC_1X_FWD_SCH_INFO_STRU          astFwdSchInfo[CPROC_1X_SUPPORT_SCH_NUM];
} CPROC_1X_FWD_SCH_PARA_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_REV_SCH_PARA_STRU
 *
 * Description : This struct carries parameters from C.S0005, 3.7.3.3.2.36,
 * 3.7.3.3.2.38, 3.7.3.3.2.37
 *******************************************************************************/
typedef struct
{
    CPROC_1X_PHYCH_ENUM_UINT16          enChannelType;
    VOS_UINT16                          usRevSCHTXDuration;                      /**< 0..14 in 20ms resolution. 15 = any time. REV_SCH_DTX_DURATION */
    VOS_UINT16                          usStartTimeUnit;                         /**< 0..7 => 20ms..160ms START_TIME_UNIT */
    VOS_UINT16                          usRevSchNum;
    CPROC_1X_REV_SCH_INFO_STRU          astRevSchInfo[CPROC_1X_SUPPORT_SCH_NUM];
} CPROC_1X_REV_SCH_PARA_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_OLPC_SCH_INFO_STRU
 *
 * Description : Parameters from C.S0005 3.7.3.3.2.25, 3.7.3.3.2.37.
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usMasterSchInd;                       /**< 0..1, FPC_SEC_CHAN */
    VOS_UINT16                          usSchNum;
    CPROC_1X_BOOL_ENUM_UINT16           enFpcSchInitSetptOption;              /**< FALSE: The init setpoints are absolute: TRUE: init setpoints are offset to current setpoint, FCP:SCH_INIT_SETPT_OP */
    CPROC_1X_OLPC_SCH_CFG_STRU          astOlpcSch[CPROC_1X_SUPPORT_SCH_NUM];
} CPROC_1X_OLPC_SCH_INFO_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_FWD_POWER_CTRL_STRU
 *
 * Description : Parameters from C.S0005-Av6.0, section 3.7.3.3.2.25,
 * 3.7.3.3.2.37, 3.7.2.3.2.21, 3.7.3.3.2.31, 3.7.3.3.2.36
 *******************************************************************************/
typedef struct
{
    CPROC_1X_BOOL_ENUM_UINT16           enOlpcFchExist;
    CPROC_1X_BOOL_ENUM_UINT16           enOlpcDcchExist;
    CPROC_1X_BOOL_ENUM_UINT16           enOlpcSchExist;
    CPROC_1X_BOOL_ENUM_UINT16           enFpcThreshExist;
    CPROC_1X_BOOL_ENUM_UINT16           enSchFpcThreshExist;
    CPROC_1X_BOOL_ENUM_UINT16           enFpcSubChanGainExist;
    CPROC_1X_BOOL_ENUM_UINT16           enFpcGainActionTimeExist;
    VOS_UINT16                          usFpcModeNoSch;           /**< 0..7, FPC_MODE_NO_SCH in C.S0002 and C.S0005 */
    VOS_UINT16                          usFpcModeSch;             /**< 0..7, FPC_MODE_SCH */
    CPROC_1X_FPC_PRI_CH_ENUM_UINT16     enFpcPriChan;
    CPROC_1X_OLPC_CFG_STRU              stOlpcFchConfig;
    CPROC_1X_OLPC_CFG_STRU              stOlpcDcchConfig;
    CPROC_1X_OLPC_SCH_INFO_STRU         stOlpcSchConfig;
    VOS_UINT16                          usFpcSetpointThresh;      /**< 0..255, in 0.125dB. FPC_SETPT_THRESH */
    VOS_UINT16                          usSchFpcSetpointThresh;   /**< 0..255, in 0.125dB. FPC_SETPT_THRESH_SCH */
    VOS_UINT16                          usFpcSubChanGain;         /**< 0..31, resolution 0.25dB. FPC_SUBCHAN_GAIN */
    VOS_UINT16                          usFpcGainActionTime;      /**< 0..63, ACTION_TIME, or CPROC_1X_ACTIVATE_AT_ONCE */
} CPROC_1X_FWD_POWER_CTRL_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_REV_POWER_CTRL_REC_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usReserve1;
    CPROC_1X_RPC_ADJ_TYPE_ENUM_UINT16   enRpcAdjRecType;
    CPROC_1X_POWER_UNION                uU;
} CPROC_1X_REV_POWER_CTRL_REC_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_REV_POWER_CTRL_STRU
 *
 * Description : Parameters from C.S0005-Av6.0, section 3.7.3.3.2.31,
 * 3.7.2.3.2.2, 3.7.3.3.2.17, 3.7.3.3.2.36
 *******************************************************************************/
typedef struct
{
    CPROC_1X_BOOL_ENUM_UINT16           enRlGainAdjTchPilotFlag;                  /**< Is sRlGainAdjTchPilot included */
    CPROC_1X_BOOL_ENUM_UINT16           enRlGainAdjSchPilotFlag;                  /**< Is sRlGainAdjSchPilo included */
    CPROC_1X_BOOL_ENUM_UINT16           enRevPwrCtrlDelayFlag;                    /**< Is usRevPwrCtrlDelay included */
    VOS_INT16                           sRlGainAdjToAccess;                       /**< -8..7, RLGAIN_ADJ */
    CPROC_1X_BOOL_ENUM_UINT16           enNomPwrExtend;                           /**< NOM_PWR_EXT */
    VOS_INT16                           sNomPwr;                                  /**< -8..7, resolution 1dB NOM_PWR */
    VOS_INT16                           sRlGainAdjTchPilot;                       /**< -32..31, resolution 0.125dB RLGAIN_TRAFFIC_PILOT */
    VOS_INT16                           sRlGainAdjSchPilot;                       /**< -32..31, resolution 0.125dB RLGAIN_SCH_PILOT */
    CPROC_1X_BOOL_ENUM_UINT16           enRevFchGatingMode;                       /**< Reverse eighth gating mode indicator, REV_FCH_GATING_MODE */
    VOS_UINT16                          usRevPwrCtrlDelay;                        /**< 0..3, resolution 1 PCG. Offset -1. (0=>1PCG, 1=>2PCG etc) REV_PWR_CNTL_DELAY */
    CPROC_1X_BOOL_ENUM_UINT16           enDefaultRlAgFlag;                        /**< Use default values after handoff, DEFAULT_RLAG */
    VOS_UINT16                          usRevPcRecNum;
    CPROC_1X_REV_POWER_CTRL_REC_STRU    astRevPcRec[CPROC_1X_MAX_REV_PC_REC_NUM];
    VOS_UINT16                          usReserved2;                              /**< 32 bit alignment */
    CPROC_1X_BOOL_ENUM_UINT16           enAdvancedPwrCntrlFlag;                   /**< Are the 1x Advanced power control parameters included? */
    CPROC_1X_1XADV_POWER_CTRL_STRU      stAdvPowerCtrl;                           /**< Power control parameters used with 1x Advanced */
    VOS_INT16                           shwRtCNomPwr;                             /**< -16..15, res 1dB. RTC_NOM_PWR */
    CPROC_1X_BOOL_ENUM_UINT16           enRtcNomPwrUseInd;                        /**< RTC_NOM_PWR_USE_IND */
} CPROC_1X_REV_POWER_CTRL_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_POWER_CTRL_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CPROC_1X_PC_STEP_ENUM_UINT16        enPowerControlStep; /**< PWR_CNTL_STEP */
    CPROC_1X_BOOL_ENUM_UINT16           enFpcFlag;          /**< Is FWD power control included */
    CPROC_1X_BOOL_ENUM_UINT16           enRpcFlag;          /**< Is REV power control included */
    VOS_UINT16                          usReserved1;
    CPROC_1X_FWD_POWER_CTRL_STRU        stFpcConfig;
    CPROC_1X_REV_POWER_CTRL_STRU        stRpcConfig;
} CPROC_1X_POWER_CTRL_STRU;

/*******************************************************************************
 7. OTHER declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_LONG_CODE_CFG_REQ_STRU
 *
 * Description : This signal is sent by CAS to set the long code mask in L1.
 * Cproc will send the cfg cnf and active ind to CAS.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT16                          usActionTime;          /**< 0..63, system time in 80ms MOD 64 = ActionTime => activate, or CPROC_1X_ACTIVATE_AT_ONCE. ACTION_TIME */
    CPROC_1X_BOOL_ENUM_UINT16           enBelongsToChannelCfg; /**< FALSE: no channel config done at the same time, TRUE: channel config done at the same time. */
    VOS_UINT32                          auwLongCodeMask[2];    /**< The long code mask to use */
} CAS_CPROC_1X_LONG_CODE_CFG_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_LONG_CODE_CFG_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_1X_LONG_CODE_CFG_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_REL_ALL_REQ_STRU
 *
 * Description : This signal is sent from Layer 3 to Layer 1 at abnormal
 * situations (i.e. when an error has been detected) and at power down. The
 * signal will cause a soft reset of L1.
 * The signal does not carry any parameters.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CAS_CPROC_1X_REL_ALL_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_REL_ALL_CNF_STRU
 *
 * Description : This signal is sent from Layer 1 to Layer 3 when L1 has
 * performed a soft reset following a CAS_CPROC_1X_REL_ALL_REQ.
 * The signal does not carry any parameters.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_1X_REL_ALL_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_SET_WORK_MODE_REQ_STRU
 *
 * Description : This is a request from L3 to L1 to go to either Slave or
 * Master Mode. If the signal is received when any channels or measurements are
 * active, L1 will implicitly release them.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    CPROC_1X_WORK_MODE_ENUM_UINT16      enWorkMode; /**< 0: Slave Mode, 1: MasterMode */
    VOS_UINT16                          usReserved; /**< 32 bit alignment */
} CAS_CPROC_1X_SET_WORK_MODE_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_SET_WORK_MODE_CNF_STRU
 *
 * Description : This signal is sent from Layer 1 to Layer 3 when L1 has set
 * the work mode.
 * No failure case is foreseen.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_1X_SET_WORK_MODE_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_GOOD_FRAME_IND_STRU
 *
 * Description : This signal is sent from Layer 1 to Layer 3 when L1 monitor
 * enough Good Frame depend on procedures which is indicated by L3 in the
 * CAS_CPROC_1X_TCH_CONFIG_REQ signal.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_1X_GOOD_FRAME_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_HANDOFF_FAIL_IND_STRU
 *
 * Description : This signal is sent from Layer 1 to Layer 3 when L1 finds the
 * hard handoff is unsuccessful.
 *
 * If L3 configures a hard handoff with judgment procedure, L1 may declare the
 * handoff attempt to be unsuccessful if any of the following conditions are
 * true:
 * 1. (target_freq_pwr - avg_serving_freq_pwr) is less than (-30 + 2 *
 * DIFF_RX_PWR_THRESHs) dB.
 * 2. The total EcIo of the target frequency is greater than
 * MIN_TOTAL_PILOT_EC_IO
 * 3. The handoff timer expires and the mobile station has not received a
 * period of (N11m *20) ms with sufficient signal quality.
 *
 * The signal itself does not carry any parameters.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_1X_HANDOFF_FAIL_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_TCH_LOST_IND_STRU
 *
 * Description : If T5m (fade timer) expires, L1 will send this signal to
 * indicate to L3 what TCH is lost. the signal does not carry any parameters.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_1X_TCH_LOST_IND_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_SIGNAL_LEVEL_REQ_STRU
 *
 * Description : With this signal, CAS requests a level scan of an array of
 * frequencies.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    CPROC_1X_FREQ_LIST_STRU             stFreqList;
} CAS_CPROC_1X_SIGNAL_LEVEL_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_SIGNAL_LEVEL_CNF_STRU
 *
 * Description : L1 sends this signal to CAS when it has finished ascan
 * requested by a CAS_CPROC_1X_SIGNAL_LEVEL_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT16                          usFreqNum;
    VOS_UINT16                          usReserved;                               /**< 32 bit alignment */
    CPROC_1X_FREQ_SIGNAL_INFO_STRU      astFreq[CPROC_1X_MAX_FREQ_IN_LEVEL_SCAN];
} CPROC_CAS_1X_SIGNAL_LEVEL_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_SIGNAL_LEVEL_STOP_REQ_STRU
 *
 * Description : This signal is used to stop an ongoing signal level scan. Any
 * outstanding results will be discarded by L1.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CAS_CPROC_1X_SIGNAL_LEVEL_STOP_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_SIGNAL_LEVEL_STOP_CNF_STRU
 *
 * Description : This signal confirms that L1 has stopped any ongoing signal
 * level scan. It does not carry any parameters.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_1X_SIGNAL_LEVEL_STOP_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_SIGNAL_LEVEL_SUSPEND_REQ_STRU
 *
 * Description : This signal is used to suspend an ongoing signal level scan to
 * perform higher prioritized tasks. It is assumed that the scan will be
 * resumed. Any outstanding results will be stored by L1 until the scan is
 * resumed and finished.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CAS_CPROC_1X_SIGNAL_LEVEL_SUSPEND_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_SIGNAL_LEVEL_SUSPEND_CNF_STRU
 *
 * Description : This signal confirms that L1 has suspended any ongoing signal
 * level scan. It does not carry any parameters.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_1X_SIGNAL_LEVEL_SUSPEND_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_SIGNAL_LEVEL_RESUME_REQ_STRU
 *
 * Description : This signal is used to resume a suspended signal level scan.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CAS_CPROC_1X_SIGNAL_LEVEL_RESUME_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_SIGNAL_LEVEL_RESUME_CNF_STRU
 *
 * Description : This signal confirms that L1 has resumed a suspended signal
 * level scan. It does not carry any parameters.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_1X_SIGNAL_LEVEL_RESUME_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_PILOT_SEARCH_RESUME_REQ_STRU
 *
 * Description : This signal is used to resume a suspended pilot search.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CAS_CPROC_1X_PILOT_SEARCH_RESUME_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_PILOT_SEARCH_RESUME_CNF_STRU
 *
 * Description : This signal confirms that L1 has resumed a suspended pilot
 * search. It does not carry any parameters.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_1X_PILOT_SEARCH_RESUME_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_PILOT_SEARCH_STOP_REQ_STRU
 *
 * Description : This signal is used to stop an ongoing pilot search. Any
 * outstanding results will be discarded by L1.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CAS_CPROC_1X_PILOT_SEARCH_STOP_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_PILOT_SEARCH_STOP_CNF_STRU
 *
 * Description : This signal confirms that L1 has stopped any ongoing pilot
 * search. It does not carry any parameters.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_1X_PILOT_SEARCH_STOP_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_PILOT_SEARCH_SUSPEND_REQ_STRU
 *
 * Description : This signal is used to suspend an ongoing signal level scan to
 * perform higher prioritized tasks. It is assumed that the scan will be
 * resumed. L1 will remember which frequency it was performing pilot search on.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CAS_CPROC_1X_PILOT_SEARCH_SUSPEND_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_PILOT_SEARCH_SUSPEND_CNF_STRU
 *
 * Description : This signal confirms that L1 has suspended any ongoing pilot
 * search. It does not carry any parameters.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_1X_PILOT_SEARCH_SUSPEND_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_PILOT_SEARCH_REQ_STRU
 *
 * Description : This signal is used to request Layer 1 to perform a pilot
 * search. The search will be performed on the requested frequencies in the
 * order they appear in the array
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    CPROC_1X_FREQ_LIST_STRU             stFreqList;
} CAS_CPROC_1X_PILOT_SEARCH_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_PILOT_SEARCH_IND_STRU
 *
 * Description : This signal is sent to layer 3 when Layer 1 has found a cell
 * on a frequency, and has decided to read F-SYNC.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT16                          usBandClass;
    VOS_UINT16                          usFrequency;
    VOS_INT16                           sTotalRxPower;                               /**< --880..0, Resolution 0.125dB */
    VOS_UINT16                          usSearchedPilotNum;
    CPROC_1X_PILOT_SEARCH_INFO_STRU     astPilotInfo[CPROC_1X_MAX_REPORT_PILOT_NUM];
} CPROC_CAS_1X_PILOT_SEARCH_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_PILOT_SEARCH_DONE_IND_STRU
 *
 * Description : This signal is sent from Layer 1 to Layer 3 when all
 * frequencies in a CAS_CPHYPROC_PILOT_SEARCH_REQ have been searched and there
 * is no pilot searched in all of the frequencies. The signal does not carry
 * any parameters.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_1X_PILOT_SEARCH_DONE_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_ACTION_IND_STRU
 *
 * Description : This signal is sent from CPROC to CAS when one or more
 * channels have been activated or released, i.e. at or just after the
 * activation boundary. The signal carries an array of affected channels.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    CPROC_1X_BOOL_ENUM_UINT16           enPwrCtrl;                                /**< Set to VALID if the Action Indication is for power control configuration */
    CPROC_1X_BOOL_ENUM_UINT16           enLongCode;                               /**< Set to VALID if the Action Indication is for a long code change */
    VOS_UINT16                          usChannelNum;
    VOS_UINT16                          usReserved;                               /**< 32 bit alignment */
    CPROC_1X_CHANNEL_RESULT_STRU        astChannelRslt[CPROC_1X_MAX_PHYCHAN_NUM];
} CPROC_CAS_1X_ACTION_IND_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_CCI_REQ_STRU
 *
 * Description : This signal is used to request reading of one CCI on the
 * configured QPCH.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT16                          usFrequency;       /**< 0..2047, CDMA_FREQ */
    VOS_UINT16                          usBandClass;       /**< 0..31, BAND_CLASS */
    VOS_UINT16                          usPilotPN;         /**< 0..511, PILOT_PN */
    VOS_UINT16                          usQPageCH;         /**< Calculated from hash function */
    CPROC_1X_DATA_RATE_ENUM_UINT16      enRAT;             /**< QPCH data rate,9600bps,4800bps */
    VOS_UINT16                          usQpchCciPwrLevel; /**< 0..7, resolution 1dB, offset -5dB, QPCH_POWER_LEVEL_CONFIG see  3.7.2.3.2.13-3 */
} CAS_CPROC_1X_CCI_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_CCI_CNF_STRU
 *
 * Description : The signal is send to confirm reception of
 * CAS_CPROC_1X_CCI_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_1X_CCI_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_CCI_IND_STRU
 *
 * Description : This signal is used to indicate configuration change indicator
 * from the QPCH.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    CPROC_1X_CCI_INFO_ENUM_UINT16       enCCIInfo;  /**< ON,OFF */
    VOS_UINT16                          usReserved; /**< 32 bit alignment */
} CPROC_CAS_1X_CCI_IND_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_FSYNC_START_REQ_STRU
 *
 * Description : This signal is used to start F-SYNC reception on a certain
 * pilot/cell.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT16                          usBandClass; /**< 0..31, BAND_CLASS */
    VOS_UINT16                          usFrequency; /**< 0..2047, CDMA_FREQ */
    VOS_UINT16                          usPilotPN;   /**< 0..511, PILOT_PN */
    VOS_UINT16                          usCfgId;     /**< 0..255, Configuration identity */
} CAS_CPROC_1X_FSYNC_START_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_FSYNC_START_CNF_STRU
 *
 * Description : This signal confirms that L1 will start F-SYNC read.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    CPROC_1X_RSLT_ENUM_UINT16           enRslt;
    VOS_UINT16                          usReserved; /**< 32 bit alignment */
} CPROC_CAS_1X_FSYNC_START_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_FSYNC_STOP_REQ_STRU
 *
 * Description : This signal is used to stop F-SYNC reception. It is the
 * responsibility of CAS to ensure that only one F-SYNC is active at a time, so
 * that no confusion about which F-SYNC to stop can occur.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CAS_CPROC_1X_FSYNC_STOP_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_FSYNC_STOP_CNF_STRU
 *
 * Description : This signal confirms that L1 has stopped F-SYNC read and is
 * ready for the next F-SYNC read.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    CPROC_1X_RSLT_ENUM_UINT16           enRslt;
    VOS_UINT16                          usReserved; /**< 32 bit alignment */
} CPROC_CAS_1X_FSYNC_STOP_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_TCH_CONFIG_REQ_STRU
 *
 * Description : This signal is sent whenever any TCH channels are affected,
 * i.e. at setup, reconfiguration or relase of channels, and at change of
 * active set.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    CPROC_1X_BOOL_ENUM_UINT16           enOpstTchCommon;  /**< is the TCH common part included ? */
    CPROC_1X_BOOL_ENUM_UINT16           enOpstActSetInfo; /**< Is the active set info included ? */
    VOS_UINT16                          usCfgId;          /**< 0..255, Configuration identity */
    CPROC_1X_TCH_COMMON_STRU            stTchCommon;
    CPROC_1X_ACT_SET_INFO_STRU          stActSetInfo;
    VOS_UINT16                          usCfgChannelNum;  /**< 0..6? Number of affected channels */
    CPROC_1X_BOOL_ENUM_UINT16           enFwdFchCfgFlag;
    CPROC_1X_BOOL_ENUM_UINT16           enRevFchCfgFlag;
    CPROC_1X_BOOL_ENUM_UINT16           enFwdDcchCfgFlag;
    CPROC_1X_BOOL_ENUM_UINT16           enRevDcchCfgFlag;
    CPROC_1X_BOOL_ENUM_UINT16           enFwdSchCfgFlag;
    CPROC_1X_BOOL_ENUM_UINT16           enRevSchCfgFlag;
    CPROC_1X_FCH_PARA_STRU              stFwdFchPara;
    CPROC_1X_FCH_PARA_STRU              stRevFchPara;
    CPROC_1X_DCCH_PARA_STRU             stFwdDcchPara;
    CPROC_1X_DCCH_PARA_STRU             stRevDcchPara;
    CPROC_1X_FWD_SCH_PARA_STRU          stFwdSchPara;
    CPROC_1X_REV_SCH_PARA_STRU          stRevSchPara;
} CAS_CPROC_1X_TCH_CONFIG_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_TCH_CONFIG_CNF_STRU
 *
 * Description : This signal confirms the TCH configuration. It is sent by
 * CPROC
 * a) when the forward link configuration has been confirmed by CSDR in case
 * both FWD and REV links are affected
 * b) the reverse link configuration has been confirmed by CSDR in case only
 * REV link is affected.
 * One and only one signal is sent containing all signals included in the
 * corresponding TCH configuration request.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT16                          usChannelNum;
    VOS_UINT16                          usReserved;                               /**< 32 bit alignment */
    CPROC_1X_CHANNEL_RESULT_STRU        astChannelRslt[CPROC_1X_MAX_PHYCHAN_NUM];
} CPROC_CAS_1X_TCH_CONFIG_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_COMMON_CH_CONFIG_REQ_STRU
 *
 * Description : This signal is used to configure common channels. It can carry
 * any number of channels.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT16                          usCfgChannelNum;
    VOS_UINT16                          usCfgId;         /**< 0..255, Configuration identity */
    CPROC_1X_BOOL_ENUM_UINT16           enPchCfgFlag;
    CPROC_1X_BOOL_ENUM_UINT16           enFccchCfgFlag;
    CPROC_1X_BOOL_ENUM_UINT16           enBcchCfgFlag;
    CPROC_1X_BOOL_ENUM_UINT16           enQpchCfgFlag;
    CPROC_1X_BOOL_ENUM_UINT16           enAchCfgFlag;
    CPROC_1X_BOOL_ENUM_UINT16           enEachCfgFlag;
    CPROC_1X_PCH_PARA_STRU              stPchPara;
    CPROC_1X_FCCCH_PARA_STRU            stFccchPara;
    CPROC_1X_BCCH_PARA_STRU             stBcchPara;
    CPROC_1X_QPCH_PARA_STRU             stQpchPara;
    CPROC_1X_ACH_PARA_STRU              stAchPara;
    CPROC_1X_EACH_PARA_STRU             stEachPara;
} CAS_CPROC_1X_COMMON_CH_CONFIG_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_COMMON_CH_CONFIG_CNF_STRU
 *
 * Description : This signal is sent from CPROC to CAS to confirm the
 * configuration of common channels. On and only one confirm is sent per
 * request.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT16                          usChannelNum;
    VOS_UINT16                          usReserved;                               /**< 32 bit alignment */
    CPROC_1X_CHANNEL_RESULT_STRU        astChannelRslt[CPROC_1X_MAX_PHYCHAN_NUM];
} CPROC_CAS_1X_COMMON_CH_CONFIG_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_CHANNEL_REL_REQ_STRU
 *
 * Description : This signal is used to request the release of one or more
 * channels.
 * In Idle or Access states usActionTime shall always be set to
 * CPROC_1X_ACTIVATE_AT_ONCE.
 * In TCH state,  also a 80ms system time boundary can be set.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT16                          usActionTime;                                /**< 0..63 in 80 ms or CPROC_1X_ACTIVATE_AT_ONCE */
    CPROC_1X_BOOL_ENUM_UINT16           enRelActiveChannels;                         /**< When VALID, all active channels shall be released. CPROC will then ignore usRelChannelNum and ausRelChannelType */
    VOS_UINT16                          usReserved1;                                 /**< 32 bit alignment */
    VOS_UINT16                          usRelChannelNum;
    CPROC_1X_PHYCH_ENUM_UINT16          aenRelChannelType[CPROC_1X_MAX_PHYCHAN_NUM];
} CAS_CPROC_1X_CHANNEL_REL_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_CHANNEL_REL_CNF_STRU
 *
 * Description : This signal confirms that the requested channels will be
 * released. Each channel from the release request is indicated once, even if
 * the corresponding channel was not active prior to the release.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT16                          usChannelNum;
    VOS_UINT16                          usReserved;                               /**< 32 bit alignment */
    CPROC_1X_CHANNEL_RESULT_STRU        astChannelRslt[CPROC_1X_MAX_PHYCHAN_NUM];
} CPROC_CAS_1X_CHANNEL_REL_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_STOP_COMMON_CH_MONITOR_REQ_STRU
 *
 * Description : Stop channel reception of PCH or F-CCCH in slotted mode. If
 * 1x_Layer_1 is configured in slotted mode PCH or F-CCCH, 1x_Layer_1 resume
 * reception in the next assigned slot or broadcast slot.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16                          enMsgId;
    VOS_UINT16                                              usOpId;
    CPROC_1X_SLOTTED_PROCESS_ENUM_UINT16                    enRelProcess;       /**< page, bc, or page_and_bc */
    CPROC_1X_PHYCH_ENUM_UINT16                              enRelChannelType;
    VOS_UINT16                                              usLastSlotSTopTime; /**< 0..63, in 80ms. System time of the slot which triggered the stop. */
    VOS_UINT16                                              usReserved;         /**< 32 bit aligment */
} CAS_CPROC_1X_STOP_COMMON_CH_MONITOR_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_STOP_COMMON_CH_MONITOR_CNF_STRU
 *
 * Description : This signal confirms that L1 has stopped monitoring the
 * requested common channel.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_1X_STOP_COMMON_CH_MONITOR_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_SET_TIMING_CNF_STRU
 *
 * Description : This signal is sent from SPROC to CAS when CSDR has confirmed
 * that it has set timing as per the set timing request.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    CPROC_1X_RSLT_ENUM_UINT16           enResult;
    VOS_UINT16                          usPNOffset;
} CPROC_CAS_1X_SET_TIMING_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_SET_TIMING_REQ_STRU
 *
 * Description : This signal is sent from CAS when it has decided to camp on a
 * cell on which it has read F-SYNC. The signal contains information from
 * C.S0005-Av6.0, section 3.7.3.2.3.26.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT32                          aulLongCodeState[2];    /**< Long code state, LC_STATE */
    VOS_UINT32                          ulBaseTime;             /**< System time of receiving the  F-SYNC message */
    VOS_UINT32                          aulSystimeOfSyncMsg[2]; /**< System time extracted from the F-SYNC message, SYS_TIME */
    VOS_UINT16                          usPNOffset;             /**< 0..511, PILOT_PN */
    VOS_UINT16                          usReserved;             /**< 32 bit alignment */
} CAS_CPROC_1X_SET_TIMING_REQ_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_PWRCTRL_CONFIG_REQ_STRU
 *
 * Description : This signal is used to configure FWD and REV power control. It
 * also carries PUF configuration.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT16                          usActionTime;                /**< 0..63, activate when time mod 80ms == ACTION_TIME, or CPROC_1X_ACTIVATE_AT_ONCE */
    CPROC_1X_BOOL_ENUM_UINT16           enBelongsToChannelCfg;       /**< FALSE: no channel config done at the same time, TRUE: channel config done at the same time. */
    VOS_UINT16                          usReserved;                  /**< 32 bit alignment */
    CPROC_1X_BOOL_ENUM_UINT16           enFwdTchPowerMeasCfgExist;
    CPROC_1X_BOOL_ENUM_UINT16           enPowerControlCfgExist;
    CPROC_1X_BOOL_ENUM_UINT16           enPowerUpControlParaCfgFlag;
    CPROC_1X_FWD_TCH_POWER_MEAS_STRU    stFwdTchPowerMeasConfig;
    CPROC_1X_POWER_CTRL_STRU            stPowerControlConfig;
    CPROC_1X_POWER_UP_CTRL_PARA_STRU    stPowerUpControlParaConfig;
} CAS_CPROC_1X_PWRCTRL_CONFIG_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_PWRCTRL_CONFIG_CNF_STRU
 *
 * Description : This signal is used to confirm configuration of PUF FWD and
 * REV power control configuration.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    CPROC_1X_RSLT_ENUM_UINT16           enRslt;
    VOS_UINT16                          usReserved; /**< 32 bit alignment */
} CPROC_CAS_1X_PWRCTRL_CONFIG_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_PWRCTRL_IND_STRU
 *
 * Description : This signal carries Open loop Power Control report and/or
 * Power Measurement report from CPROC to CAS. It is sent when the reporting
 * criteria have been fulfilled.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    CPROC_1X_BOOL_ENUM_UINT16           enPowerMeasRptFlag; /**< is the power measurement report included ? */
    CPROC_1X_BOOL_ENUM_UINT16           enOLPCRptFlag;      /**< is the open loop power control report included ? */
    CPROC_1X_POWER_MEAS_RPT_STRU        stPowerMeasRpt;
    CPROC_1X_OLPC_RPT_STRU              stOlpcRpt;
} CPROC_CAS_1X_PWRCTRL_IND_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_OLPC_RSLT_RPT_REQ_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16                          enMsgId;
    VOS_UINT16                                              usOpId;
    CPROC_1X_OLPC_REPORT_REQ_ENUM_UINT16                    enReportType; /**< once, periodic or normal report */
    VOS_UINT16                                              usReserved;   /**< 32 bit alignment */
} CAS_CPROC_1X_OLPC_RSLT_RPT_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_ERROR_IND_STRU
 *
 * Description : This signal is sent from CPROC to CAS when an error for which
 * there is no success/fail field has been detected. The OpId is, when
 * possible, set to the OpId of the failed request.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_1X_ERROR_IND_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_START_COMMON_CH_MONITOR_REQ_STRU
 *
 * Description : CAS_CPROC_1X_START_COMMON_CH_MONITOR_REQ is used to start
 * monitoring of the PCH channel for broadcast message reception in slotted
 * mode.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT16                          usNumActionTimes;                                 /**< Number of Broadcast slots to be received */
    VOS_UINT16                          usReserved1;                                      /**< 32 bit alignment */
    VOS_UINT16                          ausActionTimes[CPROC_1X_MAX_NUM_BROADCAST_SLOTS]; /**< Array of ActionTimes for Broadcast Slots to be received. Range: 0..63 */
} CAS_CPROC_1X_START_COMMON_CH_MONITOR_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_START_COMMON_CH_MONITOR_CNF_STRU
 *
 * Description : CPROC_CAS_1X_START_COMMON_CH_MONITOR_CNF confirms that CPROC
 * will start monitoring as requested in the
 * CAS_CPROC_1X_START_COMMON_CH_MONITOR_REQ.  The signal does not carry any
 * parameters.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_1X_START_COMMON_CH_MONITOR_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_RF_IND_STRU
 *
 * Description : CPROC_CAS_1X_RF_IND is sent from CPROC to CAS in slotted mode
 * each time paging has been taken.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_1X_RF_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_NO_RF_IND_STRU
 *
 * Description : CPROC_CAS_1X_NO_RF_IND is sent from CPROC each time RF
 * allocation for receiving paging was not granted. Thus, the signal is only
 * sent in slotted mode.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
} CPROC_CAS_1X_NO_RF_IND_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_TIME_SYNC_REQ_STRU
 *
 * Description : CAS_CPROC_1X_TIME_SYNC_REQ is sent from CAS in order to
 * request an AGPS time synch pulse. In case this is done under No NW
 * conditions, the pulse shall be generated, but the system time of the pulse
 * does not need to be provided.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    CPROC_1X_BOOL_ENUM_UINT16           enForcePulse; /**< TRUE => pulse is even if there is no system timing available */
    VOS_UINT16                          uhwReserved;  /**< 32 bit alignment */
} CAS_CPROC_1X_TIME_SYNC_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_TIME_SYNC_IND_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XCM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    CPROC_1X_RSLT_ENUM_UINT16           enResult;
    CPROC_1X_BOOL_ENUM_UINT16           enTimeIncluded;  /**< is the auwPulseTime included or not */
    VOS_UINT32                          auwPulseTime[2]; /**< System time in 1/16 chip */
} CPROC_CAS_1X_TIME_SYNC_IND_STRU;

/*******************************************************************************
 8. Global  declaration
*******************************************************************************/

/*******************************************************************************
 9. Function declarations
*******************************************************************************/

#if ((VOS_OS_VER == VOS_WIN32) || (VOS_OS_VER == VOS_NUCLEUS))
#pragma pack()
#else
#pragma pack(0)
#endif

#ifdef __cplusplus
#if __cplusplus
}
#endif /* __cpluscplus */
#endif /* __cpluscplus */

#endif
