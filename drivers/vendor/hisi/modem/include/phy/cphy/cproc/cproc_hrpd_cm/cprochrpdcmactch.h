/** ****************************************************************************

                    Huawei Technologies Sweden AB (C), 2001-2015

 ********************************************************************************
 * @author    Automatically generated by DAISY
 * @version
 * @date      2015-09-02
 * @file
 * @brief
 * This interface carries Access Channel and Traffic Channel configurations for
 * CPROC_HRPD. It includes:
 * -  Input: Access Channel Configuration requests. Frequency: Once per access
 *    probe.
 * -  Input: Traffic Channel Re-/Configuration requests. Frequency: Once per
 *    re-/configuration.
 * -  Input: AC/TCH Release requests. Frequency: Once per release.
 * -  Output: Confirms to the requester. Frequency: Once per
 *    release/re-/configuration request.
 * -  Output: Indication of final DRC selection when switching from variable to
 *    fixed DRC.
 * The requests shall be sent to CPROC_HRPD only when CPROC_HRPD is in the
 * correct state(s). If not, an CPROC_CAS_HRPD_ERROR_IND will be sent to
 * HRPD_Layer_3_AS.
 * @copyright Huawei Technologies Sweden AB
 *******************************************************************************/
#ifndef CPROCHRPDCMACTCH_H
#define CPROCHRPDCMACTCH_H

/*******************************************************************************
 1. Other files included
*******************************************************************************/

#include "vos.h"
#include "cproc_hrpd.h"

#ifdef __cplusplus
#if __cplusplus
    extern "C" {
#endif /* __cpluscplus */
#endif /* __cpluscplus */
#pragma pack(4)

/*******************************************************************************
 2. Macro definitions
*******************************************************************************/

/**
 * Number of HARQ processes for subtype 2.
 */
#define CPROC_HRPD_NUM_HARQ_PROC_SUBTYPE2                   ( 3 )
/**
 * Defines maximum number of pilots in the Active Set
 */
#define CPROC_HRPD_MAX_NUM_PILOTS_IN_ACTIVE_SET             ( 6 )

/*******************************************************************************
 3. Enumerations declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : CPROCHRPDCMACTCH_MSG_TYPE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROCHRPDCMACTCH_MSG_TYPE_ENUM
{
    ID_CTTF_CPROC_HRPD_AC_CONFIG_REQ                        = 0x4300, /**< @sa CTTF_CPROC_HRPD_AC_CONFIG_REQ_STRU */
    ID_CPROC_CTTF_HRPD_AC_CONFIG_CNF                        = 0x4301, /**< @sa CPROC_CTTF_HRPD_AC_CONFIG_CNF_STRU */
    ID_CPROC_CTTF_HRPD_AC_PROBE_IND                         = 0x4302, /**< @sa CPROC_CTTF_HRPD_AC_PROBE_IND_STRU */
    ID_CTTF_CPROC_HRPD_AC_RELEASE_REQ                       = 0x4303, /**< @sa CTTF_CPROC_HRPD_AC_RELEASE_REQ_STRU */
    ID_CPROC_CTTF_HRPD_AC_RELEASE_CNF                       = 0x4304, /**< @sa CPROC_CTTF_HRPD_AC_RELEASE_CNF_STRU */
    ID_CPROC_CTTF_HRPD_AC_ERROR_IND                         = 0x4305, /**< @sa CPROC_CTTF_HRPD_AC_ERROR_IND_STRU */
    ID_CTTF_CPROC_HRPD_TCH_CONFIG_REQ                       = 0x4306, /**< @sa CTTF_CPROC_HRPD_TCH_CONFIG_REQ_STRU */
    ID_CPROC_CTTF_HRPD_TCH_CONFIG_CNF                       = 0x4307, /**< @sa CPROC_CTTF_HRPD_TCH_CONFIG_CNF_STRU */
    ID_CTTF_CPROC_HRPD_TCH_RECONFIG_REQ                     = 0x4308, /**< @sa CTTF_CPROC_HRPD_TCH_RECONFIG_REQ_STRU */
    ID_CPROC_CTTF_HRPD_TCH_RECONFIG_CNF                     = 0x4309, /**< @sa CPROC_CTTF_HRPD_TCH_RECONFIG_CNF_STRU */
    ID_CTTF_CPROC_HRPD_DRC_MODE_REQ                         = 0x430A, /**< @sa CTTF_CPROC_HRPD_DRC_MODE_REQ_STRU */
    ID_CPROC_CTTF_HRPD_DRC_MODE_CNF                         = 0x430B, /**< @sa CPROC_CTTF_HRPD_DRC_MODE_CNF_STRU */
    ID_CTTF_CPROC_HRPD_TCH_RELEASE_REQ                      = 0x430C, /**< @sa CTTF_CPROC_HRPD_TCH_RELEASE_REQ_STRU */
    ID_CPROC_CTTF_HRPD_TCH_RELEASE_CNF                      = 0x430D, /**< @sa CPROC_CTTF_HRPD_TCH_RELEASE_CNF_STRU */
    ID_CPROC_CTTF_HRPD_SUSPENDED_IND                        = 0x430E, /**< @sa CPROC_CTTF_HRPD_SUSPENDED_IND_STRU */
    ID_CPROC_CTTF_HRPD_RESUMED_IND                          = 0x430F, /**< @sa CPROC_CTTF_HRPD_RESUMED_IND_STRU */
    ID_CPROCHRPDCMACTCH_MSG_TYPE_ENUM_BUTT                  = 0x4310
};
typedef VOS_UINT16 CPROCHRPDCMACTCH_MSG_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_ACC_PROBE_ENUM_UINT16
 *
 * Description : Indicates status of access probe transmission.
 *******************************************************************************/
enum CPROC_HRPD_ACC_PROBE_ENUM
{
    CPROC_HRPD_ACC_PROBE_TRANSMITTED                        = 0x0000, /**< Probe is fully transmitted. */
    CPROC_HRPD_ACC_PROBE_NW_ABLE_TO_DECODE                  = 0x0001, /**< Probe is partly transmitted, potentially possible for network to decode. */
    CPROC_HRPD_ACC_PROBE_NW_NOT_ABLE_TO_DECODE              = 0x0002, /**< Probe partly transmitted, not possible for NW to decode */
    CPROC_HRPD_ACC_PROBE_NOT_TRANSMITTED                    = 0x0003, /**< No Probe transmitted. */
    CPROC_HRPD_ACC_PROBE_BUTT                               = 0x0004
};
typedef VOS_UINT16 CPROC_HRPD_ACC_PROBE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_AC_CONFIG_CNF_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_HRPD_AC_CONFIG_CNF_ENUM
{
    CPROC_HRPD_AC_CONFIG_CNF_SUCCESS    = 0x0000,
    CPROC_HRPD_AC_CONFIG_CNF_BAD_TIME   = 0x0001, /**< CTTF_CPROC_HRPD_AC_CONFIG_REQ was received too early or too late compared with
start time (>16 slots or <2 slots ahead of start time). */
    CPROC_HRPD_AC_CONFIG_CNF_BUTT       = 0x0002
};
typedef VOS_UINT16 CPROC_HRPD_AC_CONFIG_CNF_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_CHANNEL_ENUM_UINT16
 *
 * Description : Flag to indicate if channel info is included or not.
 *******************************************************************************/
enum CPROC_HRPD_CHANNEL_ENUM
{
    CPROC_HRPD_CHANNEL_NOT_INCLUDED     = 0x0000,
    CPROC_HRPD_CHANNEL_INCLUDED         = 0x0001,
    CPROC_HRPD_CHANNEL_BUTT             = 0x0002
};
typedef VOS_UINT16 CPROC_HRPD_CHANNEL_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_DRC_MODE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_HRPD_DRC_MODE_ENUM
{
    CPROC_HRPD_DRC_MODE_VARIABLE        = 0x0000,
    CPROC_HRPD_DRC_MODE_FIXED           = 0x0001,
    CPROC_HRPD_DRC_MODE_BUTT            = 0x0002
};
typedef VOS_UINT16 CPROC_HRPD_DRC_MODE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_TL_IDLE_ASP_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_HRPD_TL_IDLE_ASP_ENUM
{
    CPROC_HRPD_TL_IDLE_ASP_DO_NOT_RESET = 0x0000, /**< Don't reset counter */
    CPROC_HRPD_TL_IDLE_ASP_RESET        = 0x0001, /**< Reset counter */
    CPROC_HRPD_TL_IDLE_ASP_BUTT         = 0x0002
};
typedef VOS_UINT16 CPROC_HRPD_TL_IDLE_ASP_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_TL_SS_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_HRPD_TL_SS_ENUM
{
    CPROC_HRPD_TL_SS_DO_NOT_RESET       = 0x0000, /**< Don't reset counter */
    CPROC_HRPD_TL_SS_RESET              = 0x0001, /**< Reset counter */
    CPROC_HRPD_TL_SS_BUTT               = 0x0002
};
typedef VOS_UINT16 CPROC_HRPD_TL_SS_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_SOFTER_HANDOFF_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_HRPD_SOFTER_HANDOFF_ENUM
{
    CPROC_HRPD_SOFTER_HANDOFF_FALSE     = 0x0000,
    CPROC_HRPD_SOFTER_HANDOFF_TRUE      = 0x0001,
    CPROC_HRPD_SOFTER_HANDOFF_BUTT      = 0x0002
};
typedef VOS_UINT16 CPROC_HRPD_SOFTER_HANDOFF_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_MULTIUSER_PACKET_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_HRPD_MULTIUSER_PACKET_ENUM
{
    CPROC_HRPD_MULTIUSER_PACKET_DISABLED                    = 0x0000,
    CPROC_HRPD_MULTIUSER_PACKET_ENABLED                     = 0x0001,
    CPROC_HRPD_MULTIUSER_PACKET_BUTT                        = 0x0002
};
typedef VOS_UINT16 CPROC_HRPD_MULTIUSER_PACKET_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_NULL_RATE_DRC_38K4_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_HRPD_NULL_RATE_DRC_38K4_ENUM
{
    CPROC_HRPD_NULL_RATE_DRC_38K4_DISABLED                  = 0x0000,
    CPROC_HRPD_NULL_RATE_DRC_38K4_ENABLED                   = 0x0001,
    CPROC_HRPD_NULL_RATE_DRC_38K4_BUTT                      = 0x0002
};
typedef VOS_UINT16 CPROC_HRPD_NULL_RATE_DRC_38K4_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_AUX_PILOT_MIN_PAYLOAD_ENUM_UINT16
 *
 * Description : This enum is used to define minimum RTC payload size for which
 * AUX PILOT is required to be transmitted.
 *******************************************************************************/
enum CPROC_HRPD_AUX_PILOT_MIN_PAYLOAD_ENUM
{
    CPROC_HRPD_AUX_PILOT_MIN_PAYLOAD_RATE_128               = 0x0000,
    CPROC_HRPD_AUX_PILOT_MIN_PAYLOAD_RATE_256               = 0x0001,
    CPROC_HRPD_AUX_PILOT_MIN_PAYLOAD_RATE_512               = 0x0002,
    CPROC_HRPD_AUX_PILOT_MIN_PAYLOAD_RATE_768               = 0x0003,
    CPROC_HRPD_AUX_PILOT_MIN_PAYLOAD_RATE_1024              = 0x0004,
    CPROC_HRPD_AUX_PILOT_MIN_PAYLOAD_RATE_1536              = 0x0005,
    CPROC_HRPD_AUX_PILOT_MIN_PAYLOAD_RATE_2048              = 0x0006,
    CPROC_HRPD_AUX_PILOT_MIN_PAYLOAD_RATE_3072              = 0x0007,
    CPROC_HRPD_AUX_PILOT_MIN_PAYLOAD_RATE_4096              = 0x0008,
    CPROC_HRPD_AUX_PILOT_MIN_PAYLOAD_RATE_6144              = 0x0009,
    CPROC_HRPD_AUX_PILOT_MIN_PAYLOAD_RATE_8192              = 0x000A,
    CPROC_HRPD_AUX_PILOT_MIN_PAYLOAD_RATE_12288             = 0x000B,
    CPROC_HRPD_AUX_PILOT_MIN_PAYLOAD_BUTT                   = 0x000C
};
typedef VOS_UINT16 CPROC_HRPD_AUX_PILOT_MIN_PAYLOAD_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_DRC_TENTATIVE_ENUM_UINT16
 *
 * Description : This enum is used to define tentative DRC (null or not null)
 *******************************************************************************/
enum CPROC_HRPD_DRC_TENTATIVE_ENUM
{
    CPROC_HRPD_DRC_TENTATIVE_NULL       = 0x0000,
    CPROC_HRPD_DRC_TENTATIVE_NOT_NULL   = 0x0001,
    CPROC_HRPD_DRC_TENTATIVE_BUTT       = 0x0002
};
typedef VOS_UINT16 CPROC_HRPD_DRC_TENTATIVE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_AC_STOP_CNF_ENUM_UINT16
 *
 * Description : This enum type is used to communicate if tx was ongoing or not
 * in indication upon access channel stop request.
 *******************************************************************************/
enum CPROC_HRPD_AC_STOP_CNF_ENUM
{
    CPROC_HRPD_AC_STOP_CNF_TX_ONGOING   = 0x0000, /**< Tx was ongoing */
    CPROC_HRPD_AC_STOP_CNF_TX_STOPPED   = 0x0001, /**< TX was already stopped */
    CPROC_HRPD_AC_STOP_CNF_BUTT         = 0x0002
};
typedef VOS_UINT16 CPROC_HRPD_AC_STOP_CNF_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_PHYSICAL_LAYER_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_HRPD_PHYSICAL_LAYER_ENUM
{
    CPROC_HRPD_PHYSICAL_LAYER_DEFAULT                       = 0x0000,
    CPROC_HRPD_PHYSICAL_LAYER_SUBTYPE_2                     = 0x0001,
    CPROC_HRPD_PHYSICAL_LAYER_SUBTYPE_BUTT                  = 0x0002
};
typedef VOS_UINT16 CPROC_HRPD_PHYSICAL_LAYER_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_ARQ_MODE_ENUM_UINT16
 *
 * Description : This enum defines the ARQ mode in use.
 *******************************************************************************/
enum CPROC_HRPD_ARQ_MODE_ENUM
{
    CPROC_HRPD_ARQ_MODE_BI_POLAR_KEYING                     = 0x0000,
    CPROC_HRPD_ARQ_MODE_ACK_ORIENTED_KEYING                 = 0x0001,
    CPROC_HRPD_ARQ_MODE_BUTT                                = 0x0002
};
typedef VOS_UINT16 CPROC_HRPD_ARQ_MODE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_DRC_GATING_ENUM_UINT16
 *
 * Description : This enum is used to define continous, discontinous DRC mode.
 *******************************************************************************/
enum CPROC_HRPD_DRC_GATING_ENUM
{
    CPROC_HRPD_DRC_GATING_CONTINOUS     = 0x0000,
    CPROC_HRPD_DRC_GATING_DISCONTINOUS  = 0x0001,
    CPROC_HRPD_DRC_GATING_BUTT          = 0x0002
};
typedef VOS_UINT16 CPROC_HRPD_DRC_GATING_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_DRC_LENGTH_ENUM_UINT16
 *
 * Description : CPROC_HRPD_DRC_LENGTH_ENUM_UINT16 is used to defined DRC
 * lenght in slots.
 *******************************************************************************/
enum CPROC_HRPD_DRC_LENGTH_ENUM
{
    CPROC_HRPD_DRC_LENGTH_1_SLOT        = 0x0000,
    CPROC_HRPD_DRC_LENGTH_2_SLOT        = 0x0001,
    CPROC_HRPD_DRC_LENGTH_4_SLOT        = 0x0002,
    CPROC_HRPD_DRC_LENGTH_8_SLOT        = 0x0003,
    CPROC_HRPD_DRC_LENGTH_BUTT          = 0x0004
};
typedef VOS_UINT16 CPROC_HRPD_DRC_LENGTH_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_DRC_LOCK_PERIOD_ENUM_UINT16
 *
 * Description : DRC Lock period, only for Default Physical Layer.
 *******************************************************************************/
enum CPROC_HRPD_DRC_LOCK_PERIOD_ENUM
{
    CPROC_HRPD_DRC_LOCK_PERIOD_8_SLOTS  = 0x0000,
    CPROC_HRPD_DRC_LOCK_PERIOD_16_SLOTS = 0x0001,
    CPROC_HRPD_DRC_LOCK_PERIOD_BUTT     = 0x0002
};
typedef VOS_UINT16 CPROC_HRPD_DRC_LOCK_PERIOD_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_AC_DATA_SPEED_ENUM_UINT16
 *
 * Description : Enum to set the data speed in AC, used in
 * CPROC_CSDR_HRPD_AC_START_REQ.
 *******************************************************************************/
enum CPROC_HRPD_AC_DATA_SPEED_ENUM
{
    CPROC_HRPD_AC_DATA_SPEED_9K6        = 0x0000,
    CPROC_HRPD_AC_DATA_SPEED_19K2       = 0x0001,
    CPROC_HRPD_AC_DATA_SPEED_38K4       = 0x0002,
    CPROC_HRPD_AC_DATA_SPEED_BUTT       = 0x0003
};
typedef VOS_UINT16 CPROC_HRPD_AC_DATA_SPEED_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_RA_CHANNEL_GAIN_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_HRPD_RA_CHANNEL_GAIN_ENUM
{
    CPROC_HRPD_RA_CHANNEL_GAIN_NOT_APPLICABLE               = 0x0000,
    CPROC_HRPD_RA_CHANNEL_GAIN_NEG_6_DB                     = 0x0001,
    CPROC_HRPD_RA_CHANNEL_GAIN_NEG_9_DB                     = 0x0002,
    CPROC_HRPD_RA_CHANNEL_GAIN_NEG_12_DB                    = 0x0003,
    CPROC_HRPD_RA_CHANNEL_GAIN_NEG_15_DB                    = 0x0004,
    CPROC_HRPD_RA_CHANNEL_GAIN_BUTT                         = 0x0005
};
typedef VOS_UINT16 CPROC_HRPD_RA_CHANNEL_GAIN_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_RPC_STEP_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_HRPD_RPC_STEP_ENUM
{
    CPROC_HRPD_RPC_STEP_HALF_DB         = 0x0000,
    CPROC_HRPD_RPC_STEP_ONE_DB          = 0x0001,
    CPROC_HRPD_RPC_STEP_BUTT            = 0x0002
};
typedef VOS_UINT16 CPROC_HRPD_RPC_STEP_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_SHORT_PACKET_EN_THRESH_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_HRPD_SHORT_PACKET_EN_THRESH_ENUM
{
    CPROC_HRPD_SHORT_PACKET_EN_THRESH_1024_BITS             = 0x0000,
    CPROC_HRPD_SHORT_PACKET_EN_THRESH_2048_BITS             = 0x0001,
    CPROC_HRPD_SHORT_PACKET_EN_THRESH_3072_BITS             = 0x0002,
    CPROC_HRPD_SHORT_PACKET_EN_THRESH_4096_BITS             = 0x0003,
    CPROC_HRPD_SHORT_PACKET_EN_THRESH_BUTT                  = 0x0004
};
typedef VOS_UINT16 CPROC_HRPD_SHORT_PACKET_EN_THRESH_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_RAB_LENGTH_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_HRPD_RAB_LENGTH_ENUM
{
    CPROC_HRPD_RAB_LENGTH_8_SLOTS       = 0x0000,
    CPROC_HRPD_RAB_LENGTH_16_SLOTS      = 0x0001,
    CPROC_HRPD_RAB_LENGTH_32_SLOTS      = 0x0002,
    CPROC_HRPD_RAB_LENGTH_64_SLOTS      = 0x0003,
    CPROC_HRPD_RAB_LENGTH_BUTT          = 0x0004
};
typedef VOS_UINT16 CPROC_HRPD_RAB_LENGTH_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_HRPD_TCH_RECONFIG_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_HRPD_TCH_RECONFIG_ENUM
{
    CPROC_HRPD_TCH_RECONFIG_SUBTYPE_NOT_CHANGED             = 0x0000,
    CPROC_HRPD_TCH_RECONFIG_SUBTYPE_CHANGED                 = 0x0001,
    CPROC_HRPD_TCH_RECONFIG_BUTT                            = 0x0002
};
typedef VOS_UINT16 CPROC_HRPD_TCH_RECONFIG_ENUM_UINT16;

/*******************************************************************************
 4. Message Header declaration
*******************************************************************************/

/*******************************************************************************
 5. Message declaration
*******************************************************************************/

/*******************************************************************************
 6. STRUCT and UNION declaration
*******************************************************************************/

/** ****************************************************************************
 * Name        : CPROC_HRPD_RTC_PARAMS_DEFAULT_STRU
 *
 * Description : Default RTC specific input parameters
 *******************************************************************************/
typedef struct
{
    VOS_INT16                           sDataOffsetNorm;     /**< range [-8..7] in unit of 0.5dB, the logical power is in range -4 to 3.5dB */
    VOS_INT16                           sDataOffset9k6;      /**< range [-8..7] in unit of 0.25dB, the logical power is in range -2 to 1.75dB */
    VOS_INT16                           sDataOffset19k2;     /**< range [-8..7] in unit of 0.25dB, the logical power is in range -2 to 1.75dB */
    VOS_INT16                           sDataOffset38k4;     /**< range [-8..7] in unit of 0.25dB, the logical power is in range -2 to 1.75dB */
    VOS_INT16                           sDataOffset76k8;     /**< range [-8..7] in unit of 0.25dB, the logical power is in range -2 to 1.75dB */
    VOS_INT16                           sDataOffset156k3;    /**< range [-8..7] in unit of 0.25dB, the logical power is in range -2 to 1.75dB */
    VOS_INT16                           sDrcChannelGainBase; /**< range [-18..12] in unit of 0.5dB, the logical power is in range -9dB to 6dB */
    VOS_UINT16                          ausReserved[1];      /**< 32 bit alignment */
} CPROC_HRPD_RTC_PARAMS_DEFAULT_STRU;

/** ****************************************************************************
 * Name        : CPROC_HRPD_FTC_RECONFIG_PARAMETERS_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CPROC_HRPD_DRC_GATING_ENUM_UINT16                       enDrcGating;                 /**< Continous, Discontinous */
    VOS_UINT16                                              usDrcLockLength;             /**< 4 (default only), 8, 16, 32, 64 (subtype 2 only) */
    CPROC_HRPD_DRC_LENGTH_ENUM_UINT16                       enDrcLength;                 /**< 1_SLOT, 2_SLOTS, 4_SLOTS, 8_SLOTS */
    VOS_UINT16                                              usSofterHandoffDelay;        /**< in units of 8 slots */
    VOS_UINT16                                              usSoftHandoffDelay;          /**< in units of 8 slots */
    VOS_INT16                                               sAckChannelGain;             /**< range [-6..12] in unit of 0.5dB, the logical power is in range -3dB to +6dB */
    CPROC_HRPD_MULTIUSER_PACKET_ENUM_UINT16                 enMultiUserPacketEnable;     /**< Multi User Packet enabled */
    CPROC_HRPD_SHORT_PACKET_EN_THRESH_ENUM_UINT16           enShortPacketsEnabledThresh; /**< Short packets enabled threshold */
} CPROC_HRPD_FTC_RECONFIG_PARAMETERS_STRU;

/** ****************************************************************************
 * Name        : CPROC_HRPD_FTC_PARAMS_DEFAULT_STRU
 *
 * Description : Default FTC specific parameters
 *******************************************************************************/
typedef struct
{
    CPROC_HRPD_DRC_LOCK_PERIOD_ENUM_UINT16                  enDrcLockPeriod;   /**< 8_SLOTS, 16_SLOTS */
    CPROC_HRPD_NULL_RATE_DRC_38K4_ENUM_UINT16               enNullRateDRC38k4; /**< DISABLED, ENABLED */
} CPROC_HRPD_FTC_PARAMS_DEFAULT_STRU;

/** ****************************************************************************
 * Name        : CPROC_HRPD_FTC_PARAMS_SUBTYPE2_STRU
 *
 * Description : Subtype2 FTC specific parameters:
 *******************************************************************************/
typedef struct
{
    CPROC_HRPD_MULTIUSER_PACKET_ENUM_UINT16                 enMultiUserPacketEnable;     /**< Multi User Packet enabled */
    VOS_UINT16                                              usDeltaAckChannelGainMUP;    /**< Additional gain for Multi User Ack; in units of 0.5dB; 0 to 9dB */
    CPROC_HRPD_SHORT_PACKET_EN_THRESH_ENUM_UINT16           enShortPacketsEnabledThresh; /**< Short packets enabled threshold */
    VOS_UINT16                                              ausReserve[1];
} CPROC_HRPD_FTC_PARAMS_SUBTYPE2_STRU;

/** ****************************************************************************
 * Name        : CPROC_HRPD_FTC_PARAMS_STRU
 *
 * Description : FTC setup parameters
 *******************************************************************************/
typedef struct
{
    CPROC_HRPD_DRC_GATING_ENUM_UINT16   enDrcGating;          /**< Continous, Discontinous */
    VOS_UINT16                          usDrcLockLength;      /**< 4 (default only), 8, 16, 32, 64 (subtype 2 only) */
    CPROC_HRPD_DRC_LENGTH_ENUM_UINT16   enDrcLength;          /**< 1_SLOT, 2_SLOTS, 4_SLOTS, 8_SLOTS */
    VOS_UINT16                          usSofterHandoffDelay; /**< in units of 8 slots */
    VOS_UINT16                          usSoftHandoffDelay;   /**< in units of 8 slots */
    VOS_INT16                           sAckChannelGain;      /**< range [-6..12] in unit of 0.5dB, the logical power is in range -3dB to +6dB */
} CPROC_HRPD_FTC_PARAMS_STRU;

/** ****************************************************************************
 * Name        : CPROC_HRPD_RTC_RECONFIG_PARAMETERS_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CPROC_HRPD_RPC_STEP_ENUM_UINT16     enRpcStep;                        /**< HALF_DB, ONE_DB */
    VOS_UINT16                          usSilenceDuration;                /**< Reverse link silence duration in frames [1..3] */
    VOS_UINT16                          usSilencePeriod;                  /**< Reverse link silence period, silence period starts at T mod (2048*2^usSilencePeriod - 1) = 0. */
    
    CPROC_HRPD_ARQ_MODE_ENUM_UINT16     enArqMode;                        /**< Bi Polar or ACK oriented */
    VOS_UINT16                          ausDrcTranslationOffsetTable[14]; /**< Used when computing DRC value from Tentative DRCs */
    VOS_INT16                           sDrcChannelGainBase;              /**< range [-18..12] in unit of 0.5dB, the logical power is in range -9dB to 6dB */
    VOS_UINT16                          usDrcChannelGainBoost;            /**< range [0..6] in units of 1 dB, 0 to 6dB */
    VOS_UINT16                          usDrcBoostLength;                 /**< range [0..32] in units of 2 slots; the logical range is 0..64 slots */
    VOS_UINT16                          usDscChannelGainBoost;            /**< range [0..6] in units of 1 dB, 0 to 6dB */
    VOS_UINT16                          usDscBoostLength;                 /**< range [0..64] in units of 8 slots; the logical range is 0 to 512 slots */
    VOS_UINT16                          ausReserve[1];                    /**< 32 bit alignment */
} CPROC_HRPD_RTC_RECONFIG_PARAMETERS_STRU;

/** ****************************************************************************
 * Name        : CPROC_HRPD_RTC_PARAMS_SUBTYPE2_STRU
 *
 * Description : Subtype2 RTC parameters
 *******************************************************************************/
typedef struct
{
    CPROC_HRPD_ARQ_MODE_ENUM_UINT16                         enArqMode;                                             /**< Bi Polar or ACK oriented */
    VOS_UINT16                                              usAuxililaryPilotChannelGain;                          /**< in units of -1 dB, range 0 to -15dB */
    CPROC_HRPD_AUX_PILOT_MIN_PAYLOAD_ENUM_UINT16            enAuxililaryPilotChannelMinPayload;                    /**< minimum payload for tx of Aux pilot. */
    VOS_INT16                                               sRRIChannelGainPreTransition3;                         /**< -8 dB to +7 dB, unit 1 dB */
    VOS_UINT16                                              ausMaxNumSubPacket[CPROC_HRPD_NUM_HARQ_PROC_SUBTYPE2]; /**< RTC: #sub-packets in sub-frame for each ARQ processes */
    VOS_UINT16                                              ausDrcTranslationOffsetTable[14];                      /**< Used when computing DRC value from Tentative DRCs */
    VOS_INT16                                               sDrcChannelGainBase;                                   /**< -9dB to 6dB; 2's complement in units of 0.5dB */
    VOS_UINT16                                              usDrcChannelGainBoost;                                 /**< in units of 1 dB, 0 to 6dB */
    VOS_UINT16                                              usDrcBoostLength;                                      /**< in units of 2 slots; 0..64 slots */
    VOS_UINT16                                              usDscLength;                                           /**< length of DSC transm. in units of 8 slots */
    VOS_UINT16                                              usDscChannelGainBase;                                  /**< 0dB to -15.5dB; in units of -0.5dB */
    VOS_UINT16                                              usDscChannelGainBoost;                                 /**< in units of 1dB,  0 to 6dB */
    VOS_UINT16                                              usDscBoostLength;                                      /**< in units of 8 slots; 0 to 512 slots */
    VOS_UINT16                                              usTxT2Pmin;                                            /**< 0dB to 63.75 dB in steps of 0.25 dB */
    VOS_UINT8                                               aucReserved[2];                                        /**< 32 bit alignment */
} CPROC_HRPD_RTC_PARAMS_SUBTYPE2_STRU;

/** ****************************************************************************
 * Name        : CPROC_HRPD_RTC_PARAMETERS_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_UINT32                          aulMiRtcMac[2];    /**< [0]: 31..0 [1]:41..32 */
    VOS_UINT32                          aulMqRtcMac[2];    /**< [0]: 31..0 [1]:41..32 */
    CPROC_HRPD_RPC_STEP_ENUM_UINT16     enRpcStep;         /**< HALF_DB, ONE_DB */
    VOS_UINT16                          usFrameOffset;     /**< RTC and RRI delay offset in slots [0..15] */
    VOS_UINT16                          usSilenceDuration; /**< Reverse link silence duration in frames [1..3] */
    VOS_UINT16                          usSilencePeriod;   /**< Reverse link silence period, silence period starts at T mod (2048*2^usSilencePeriod - 1) = 0. */
} CPROC_HRPD_RTC_PARAMETERS_STRU;

/** ****************************************************************************
 * Name        : CPROC_HRPD_TCH_PILOT_PARAMETERS_STRU
 *
 * Description : TCH setup pilot parameters for one sector.
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                                              usPilotPN;       /**< Pilot PN */
    VOS_UINT16                                              usMacIndex;      /**< Assigned MAC_Index 5-63 for subtype0; 5-63, 66-70, 72-127 for subtype2 */
    CPROC_HRPD_SOFTER_HANDOFF_ENUM_UINT16                   enSofterHandoff; /**< Sector is in softer handoff  with the previous sector */
    CPROC_HRPD_RA_CHANNEL_GAIN_ENUM_UINT16                  enRaChannelGain; /**< RA channel gain */
    VOS_UINT16                                              usDrcCover;      /**< DRC Cover index */
    CPROC_HRPD_RAB_LENGTH_ENUM_UINT16                       enRabLength;     /**< Default only: 8_SLOTS, 16_SLOTS, 32_SLOTS, 64_SLOTS */
    VOS_UINT16                                              usRabSlotOffset; /**< Default only: Corresponds to RAB_Offset * RAB_Lenth / 8 */
    VOS_UINT16                                              usDscCover;      /**< Subtype2 only: Only applicable if softerhandoff parameter is set to 0 */
} CPROC_HRPD_TCH_PILOT_PARAMETERS_STRU;

/** ****************************************************************************
 * Name        : CPROC_HRPD_ACTIVE_SET_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                                              usIdActiveSet;                                               /**< Id for the Active Set, echoed back in Slot buffer */
    VOS_UINT16                                              usNumPilotsInActiveSet;                                      /**< number of pilots in active set. [1..6] */
    CPROC_HRPD_TCH_PILOT_PARAMETERS_STRU                    astPilotParameters[CPROC_HRPD_MAX_NUM_PILOTS_IN_ACTIVE_SET]; /**< Active Set */
} CPROC_HRPD_ACTIVE_SET_STRU;

/** ****************************************************************************
 * Name        : CPROC_HRPD_FTC_RTC_DEFAULT_PARAMETERS_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CPROC_HRPD_FTC_PARAMS_DEFAULT_STRU  stFtc; /**< Default FTC specific parameters */
    CPROC_HRPD_RTC_PARAMS_DEFAULT_STRU  stRtc; /**< Default RTC specific parameters */
} CPROC_HRPD_FTC_RTC_DEFAULT_PARAMETERS_STRU;

/** ****************************************************************************
 * Name        : CPROC_HRPD_FTC_RTC_SUBTYPE2_PARAMETERS_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CPROC_HRPD_FTC_PARAMS_SUBTYPE2_STRU stFtc; /**< Subtype 2 FTC specific parameters */
    CPROC_HRPD_RTC_PARAMS_SUBTYPE2_STRU stRtc; /**< Subtype 2 RTC specific parameters */
} CPROC_HRPD_FTC_RTC_SUBTYPE2_PARAMETERS_STRU;

/** ****************************************************************************
 * Name        : CPROC_HRPD_TCH_RECONFIG_STRU
 *
 * Description : CPROC_HRPD_TCH_RECONFIG_STRU is used for reconfiguration when
 * subtype is not changed.
 *******************************************************************************/
typedef struct
{
    CPROC_HRPD_PHYSICAL_LAYER_ENUM_UINT16                   enSubtype;       /**< Default, Subtype 2 */
    VOS_UINT16                                              ausReserve[1];   /**< 32 bit alignment */
    CPROC_HRPD_FTC_RECONFIG_PARAMETERS_STRU                 stFTCParameters; /**< FTC Parameters */
    CPROC_HRPD_RTC_RECONFIG_PARAMETERS_STRU                 stRTCParameters; /**< RTC Parameters */
} CPROC_HRPD_TCH_RECONFIG_STRU;

/** ****************************************************************************
 * Name        : CPROC_HRPD_FTC_RTC_PARAMETERS_UNION
 *
 * Description :
 *******************************************************************************/
typedef union
{
    CPROC_HRPD_FTC_RTC_DEFAULT_PARAMETERS_STRU              stDefault;
    CPROC_HRPD_FTC_RTC_SUBTYPE2_PARAMETERS_STRU             stSubtype2;
} CPROC_HRPD_FTC_RTC_PARAMETERS_UNION;

/** ****************************************************************************
 * Name        : CPROC_HRPD_TCH_CONFIG_STRU
 *
 * Description : This struct is used as setup of TCH and when reconfiguration
 * includes a change of subtype.
 *******************************************************************************/
typedef struct
{
    CPROC_HRPD_PHYSICAL_LAYER_ENUM_UINT16                   enSubtype;     /**< Default, Subtype 2 */
    VOS_UINT16                                              ausReserve[1]; /**< 32 bit alignment */
    CPROC_HRPD_RTC_PARAMETERS_STRU                          stRtcParams;   /**< RTC params */
    CPROC_HRPD_FTC_PARAMS_STRU                              stFtcParam;    /**< FTC params */
    CPROC_HRPD_FTC_RTC_PARAMETERS_UNION                     stStParam;     /**< Subtype dependent params */
} CPROC_HRPD_TCH_CONFIG_STRU;

/** ****************************************************************************
 * Name        : CPROC_HRPD_TCH_RECONFIG_UNION
 *
 * Description : If reconfiguration includes change of subtype stConfigParam is
 * used, otherwise stReconfigParam.
 *******************************************************************************/
typedef union
{
    CPROC_HRPD_TCH_CONFIG_STRU          stConfigParam;
    CPROC_HRPD_TCH_RECONFIG_STRU        stReconfigParam;
} CPROC_HRPD_TCH_RECONFIG_UNION;

/*******************************************************************************
 7. OTHER declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : CTTF_CPROC_HRPD_AC_CONFIG_REQ_STRU
 *
 * Description : This signal is sent from CTTF_HRPD to CPROC_HRPD to configure
 * transmission of one Access Channel probe. This signal is only accepted by
 * CPROC_HRPD in CC_MONITOR state. The signal shall be sent 8 to 12 slots
 * before ulACstartTime.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMACTCH_MSG_TYPE_ENUM_UINT16                   enMsgId;
    VOS_UINT16                                              usOpId;
    VOS_UINT32                                              aulMiAcmac[2];     /**< aulMiAcmac[0] 31..0, aulMiAcmac[1] 41..32 */
    VOS_UINT32                                              aulMqAcmac[2];     /**< aulMqAcmac[0] 31..0, aulMqAcmac[1] 41..32 */
    VOS_UINT32                                              ulACstartTime[2];  /**< Probe start time in units of slots [0] low, [1] high */
    VOS_UINT16                                              usPreambleLength;  /**< Preamble length in frames [1..7] */
    VOS_UINT16                                              usNbrOfMACPackets; /**< Length of transmission in frames <= CapsuleLengthMax */
    VOS_INT16                                               sDataOffsetNorm;   /**< unit 0.5dB, signed magnitude format */
    VOS_INT16                                               sDataOffset9k6;    /**< unit 0.25dB, signed magnitude format */
    VOS_INT16                                               sPowerAdjust;      /**< unit 0.5dB, signed magnitude format = openLoopAdjust + probeInitialAdjust + (i-1)*powerStep */
    CPROC_HRPD_AC_DATA_SPEED_ENUM_UINT16                    enAcDataSpeed;     /**< Rate */
} CTTF_CPROC_HRPD_AC_CONFIG_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CTTF_HRPD_AC_CONFIG_CNF_STRU
 *
 * Description : This signal is sent from CPROC_HRPD to CTTF_HRPD to indicate
 * start of transmission of access probe as requested in
 * CTTF_CPROC_HRPD_AC_CONFIG_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMACTCH_MSG_TYPE_ENUM_UINT16                   enMsgId;
    VOS_UINT16                                              usOpId;
    CPROC_HRPD_AC_CONFIG_CNF_ENUM_UINT16                    enResult;      /**< Success or bad time */
    VOS_UINT16                                              ausReserve[1]; /**< 32 bit alignment */
} CPROC_CTTF_HRPD_AC_CONFIG_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CTTF_HRPD_AC_PROBE_IND_STRU
 *
 * Description : CPROC_CTTF_HRPD_AC_PROBE_IND is sent when transmission of Acc
 * probe is done or stopped.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMACTCH_MSG_TYPE_ENUM_UINT16                   enMsgId;
    VOS_UINT16                                              usOpId;
    CPROC_HRPD_ACC_PROBE_ENUM_UINT16                        enProbeStatus; /**< Fully, partly or not transmitted */
    VOS_UINT16                                              ausReserve[1]; /**< 32 bit alignment */
} CPROC_CTTF_HRPD_AC_PROBE_IND_STRU;

/** ****************************************************************************
 * Name        : CTTF_CPROC_HRPD_AC_RELEASE_REQ_STRU
 *
 * Description : This signal is sent from CTTF_HRPD to CPROC_HRPD and is used
 * to stop ongoing or pending AC transmission. This signal is only accepted in
 * ACCESS state and in CC_MONITOR state. Potentially, this signal is sent from
 * CTTF_HRPD after finishing transmission of AC.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMACTCH_MSG_TYPE_ENUM_UINT16                   enMsgId;
    VOS_UINT16                                              usOpId;
} CTTF_CPROC_HRPD_AC_RELEASE_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CTTF_HRPD_AC_RELEASE_CNF_STRU
 *
 * Description : This signal is sent from CPROC_HRPD to CTTF_HRPD to indicate
 * that AC is released as requested in CTTF_CPROC_HRPD_AC_RELEASE_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMACTCH_MSG_TYPE_ENUM_UINT16                   enMsgId;
    VOS_UINT16                                              usOpId;
    CPROC_HRPD_AC_STOP_CNF_ENUM_UINT16                      enACstopStatus; /**< AC stop status */
    VOS_UINT16                                              ausReserve[1];  /**< 32 bit alignment */
} CPROC_CTTF_HRPD_AC_RELEASE_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CTTF_HRPD_AC_ERROR_IND_STRU
 *
 * Description : CPROC_CTTF_HRPD_AC_ERROR_IND is sent when the access data is
 * not available in time for transmission.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMACTCH_MSG_TYPE_ENUM_UINT16                   enMsgId;
    VOS_UINT16                                              usOpId;
} CPROC_CTTF_HRPD_AC_ERROR_IND_STRU;

/** ****************************************************************************
 * Name        : CTTF_CPROC_HRPD_TCH_CONFIG_REQ_STRU
 *
 * Description : This signal sent from CTTF_HRPD upon RTC/FTC MAC protocol
 * activation to CPROC_HRPD to configure RTC transmission and FTC reception.
 * This signal is only accepted by CPROC_HRPD in CC_MONITOR state.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMACTCH_MSG_TYPE_ENUM_UINT16                   enMsgId;
    VOS_UINT16                                              usOpId;
    CPROC_HRPD_CHANNEL_ENUM_UINT16                          enChannelIncluded; /**< Channel Info valid flag */
    VOS_UINT16                                              usConfigId;        /**< Config ID for this configuration */
    CPROC_HRPD_CHANNEL_RECORD_STRU                          stChannelInfo;     /**< channel */
    CPROC_HRPD_ACTIVE_SET_STRU                              stActiveSet;       /**< Active set parameters */
    CPROC_HRPD_TCH_CONFIG_STRU                              stConfigParam;     /**< TCH parameters */
} CTTF_CPROC_HRPD_TCH_CONFIG_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CTTF_HRPD_TCH_CONFIG_CNF_STRU
 *
 * Description : This signal is sent from CPROC_HRPD to CTTF_HRPD to indicate
 * start of reception and transmission of TCH as requested in
 * CTTF_CPROC_HRPD_TCH_CONFIG_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMACTCH_MSG_TYPE_ENUM_UINT16                   enMsgId;
    VOS_UINT16                                              usOpId;
    VOS_UINT32                                              ulResult; /**< 0-success, others-failure */
} CPROC_CTTF_HRPD_TCH_CONFIG_CNF_STRU;

/** ****************************************************************************
 * Name        : CTTF_CPROC_HRPD_TCH_RECONFIG_REQ_STRU
 *
 * Description : This signal sent from CTTF_HRPD to CPROC_HRPD to reconfigure
 * RTC transmission and FTC reception. This signal is only accepted in
 * CONNECTED state.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMACTCH_MSG_TYPE_ENUM_UINT16                   enMsgId;
    VOS_UINT16                                              usOpId;
    CPROC_HRPD_TCH_RECONFIG_ENUM_UINT16                     enReconfigType;    /**< subtype changed */
    CPROC_HRPD_CHANNEL_ENUM_UINT16                          enChannelIncluded; /**< Channel Info valid flag */
    CPROC_HRPD_CHANNEL_RECORD_STRU                          stChannelInfo;     /**< channel */
    VOS_UINT16                                              usConfigId;        /**< Config ID for this configuration */
    VOS_UINT16                                              ausReserved[1];    /**< 32 bit alignment */
    CPROC_HRPD_ACTIVE_SET_STRU                              stActiveSet;       /**< Active set parameters */
    CPROC_HRPD_TCH_RECONFIG_UNION                           stTchParam;
} CTTF_CPROC_HRPD_TCH_RECONFIG_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CTTF_HRPD_TCH_RECONFIG_CNF_STRU
 *
 * Description : This signal is sent from CPROC_HRPD to CTTF_HRPD to confirm
 * CTTF_CPROC_HRPD_TCH_RECONFIG_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMACTCH_MSG_TYPE_ENUM_UINT16                   enMsgId;
    VOS_UINT16                                              usOpId;
} CPROC_CTTF_HRPD_TCH_RECONFIG_CNF_STRU;

/** ****************************************************************************
 * Name        : CTTF_CPROC_HRPD_DRC_MODE_REQ_STRU
 *
 * Description : This signal is used to switch between Variable DRC and Fixed
 * DRC mode.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMACTCH_MSG_TYPE_ENUM_UINT16                   enMsgId;
    VOS_UINT16                                              usOpId;
    CPROC_HRPD_DRC_MODE_ENUM_UINT16                         enDrcMode;     /**< Fixed or Variable Mode */
    VOS_UINT16                                              ausReserve[1]; /**< 32 bit alignment */
} CTTF_CPROC_HRPD_DRC_MODE_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CTTF_HRPD_DRC_MODE_CNF_STRU
 *
 * Description : This signal is sent from CPROC_HRPD to CTTF_HRPD when
 * requested mode in CTTF_CPROC_HRPD_DRC_MODE_REQ is set.
 *
 * When switching from Variable DRC mode to Fixed mode this signal is sent when
 * the final FTC in variable mode is received.
 * usDRCValue and usDRCCover are only valid when switching to Fixed or Extended
 * fixed mode.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMACTCH_MSG_TYPE_ENUM_UINT16                   enMsgId;
    VOS_UINT16                                              usOpId;
    CPROC_HRPD_DRC_MODE_ENUM_UINT16                         enDrcMode;     /**< Fixed or Variable Mode */
    VOS_UINT16                                              ausReserve[1]; /**< 32 bit alignment */
    VOS_UINT16                                              usDRCValue;    /**< final value of DRCValue */
    VOS_UINT16                                              usDRCCover;    /**< final value of DRCCover */
} CPROC_CTTF_HRPD_DRC_MODE_CNF_STRU;

/** ****************************************************************************
 * Name        : CTTF_CPROC_HRPD_TCH_RELEASE_REQ_STRU
 *
 * Description : This signal sent from CTTF_HRPD to CPROC_HRPD to release RTC
 * transmission and FTC reception. This signal is only accepted in CONNECTED
 * state.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMACTCH_MSG_TYPE_ENUM_UINT16                   enMsgId;
    VOS_UINT16                                              usOpId;
} CTTF_CPROC_HRPD_TCH_RELEASE_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CTTF_HRPD_TCH_RELEASE_CNF_STRU
 *
 * Description : This signal is sent from CPROC_HRPD to CTTF_HRPD to indicate
 * release of TCH requested in CTTF_CPROC_HRPD_TCH_RELEASE_REQ.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMACTCH_MSG_TYPE_ENUM_UINT16                   enMsgId;
    VOS_UINT16                                              usOpId;
} CPROC_CTTF_HRPD_TCH_RELEASE_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CTTF_HRPD_SUSPENDED_IND_STRU
 *
 * Description : CPROC_CTTF_HRPD_SUSPENDED_IND is sent when HRPD is suspended
 * during AC and TCH.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMACTCH_MSG_TYPE_ENUM_UINT16                   enMsgId;
    VOS_UINT16                                              usOpId;
} CPROC_CTTF_HRPD_SUSPENDED_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_CTTF_HRPD_RESUMED_IND_STRU
 *
 * Description : CPROC_CTTF_HRPD_RESUMED_IND is sent when HRPD has resumed AC
 * and TCH.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROCHRPDCMACTCH_MSG_TYPE_ENUM_UINT16                   enMsgId;
    VOS_UINT16                                              usOpId;
} CPROC_CTTF_HRPD_RESUMED_IND_STRU;

/*******************************************************************************
 8. Global  declaration
*******************************************************************************/

/*******************************************************************************
 9. Function declarations
*******************************************************************************/

#if ((VOS_OS_VER == VOS_WIN32) || (VOS_OS_VER == VOS_NUCLEUS))
#pragma pack()
#else
#pragma pack(0)
#endif

#ifdef __cplusplus
#if __cplusplus
}
#endif /* __cpluscplus */
#endif /* __cpluscplus */

#endif
