/** ****************************************************************************

                    Huawei Technologies Sweden AB (C), 2001-2015

 ********************************************************************************
 * @author    Automatically generated by DAISY
 * @version
 * @date      2015-08-03
 * @file
 * @brief
 * CPROC1XSM provides measurement reports to 1x_Layer_3_AS.
 * -  Input: Measurement configurations and measurement requests.
 * -  Output: Required time to perform the measurements.
 * -  Output: Measurement Report with measured values per pilot. Frequency: Once
 *    per 80ms when in continuous states, at most once per DRX period in slotted
 *    mode (L1 gates reports in slotted mode).
 * @copyright Huawei Technologies Sweden AB
 *******************************************************************************/
#ifndef CPROC1XSM_H
#define CPROC1XSM_H

/*******************************************************************************
 1. Other files included
*******************************************************************************/

#include "vos.h"
#include "cproc1x.h"

#ifdef __cplusplus
#if __cplusplus
    extern "C" {
#endif /* __cpluscplus */
#endif /* __cpluscplus */
#pragma pack(4)

/*******************************************************************************
 2. Macro definitions
*******************************************************************************/

#define CPROC_1X_MAX_REPORT_NUM                             ( 50 )
#define CPROC_1X_MAX_NEIGHBOR_NUM                           ( 40 )
#define CPROC_1X_MAX_FREQUENCIES_IN_SIGNAL                  ( 200 )

/*******************************************************************************
 3. Enumerations declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : CPROC1XSM_MSG_TYPE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC1XSM_MSG_TYPE_ENUM
{
    ID_CAS_CPROC_1X_IDLEACCESS_MEAS_REQ = 0x2100, /**< @sa CAS_CPROC_1X_IDLEACCESS_MEAS_REQ_STRU */
    ID_CPROC_CAS_1X_IDLEACCESS_MEAS_CNF = 0x2101, /**< @sa CPROC_CAS_1X_IDLEACCESS_MEAS_CNF_STRU */
    ID_CPROC_CAS_1X_IDLEACCESS_MEAS_IND = 0x2102, /**< @sa CPROC_CAS_1X_IDLEACCESS_MEAS_IND_STRU */
    ID_CAS_CPROC_1X_TCH_MEAS_REQ        = 0x2103, /**< @sa CAS_CPROC_1X_TCH_MEAS_REQ_STRU */
    ID_CPROC_CAS_1X_TCH_MEAS_CNF        = 0x2104, /**< @sa CPROC_CAS_1X_TCH_MEAS_CNF_STRU */
    ID_CPROC_CAS_1X_TCH_MEAS_IND        = 0x2105, /**< @sa CPROC_CAS_1X_TCH_MEAS_IND_STRU */
    ID_CPROC1XSM_MSG_TYPE_ENUM_BUTT     = 0x2106
};
typedef VOS_UINT16 CPROC1XSM_MSG_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_MEAS_CFG_TYPE_ENUM_UINT16
 *
 * Description : This enum is used to tell layer 1 whether the requested
 * measurement is one shot or periodic.
 *******************************************************************************/
enum CPROC_1X_MEAS_CFG_TYPE_ENUM
{
    CPROC_1X_MEAS_CFG_TYPE_ONCE         = 0x0000,
    CPROC_1X_MEAS_CFG_TYPE_PERIOD       = 0x0001,
    CPROC_1X_MEAS_CFG_TYPE_BUTT         = 0x0002
};
typedef VOS_UINT16 CPROC_1X_MEAS_CFG_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_NEIGH_SRCH_PRIORITY_ENUM_UINT16
 *
 * Description : This enum is used to tell the search priority of neighbor
 * cells.
 *******************************************************************************/
enum CPROC_1X_NEIGH_SRCH_PRIORITY_ENUM
{
    CPROC_1X_NEIGH_SRCH_PRIORITY_LOW                        = 0x0000,
    CPROC_1X_NEIGH_SRCH_PRIORITY_MEDIUM                     = 0x0001,
    CPROC_1X_NEIGH_SRCH_PRIORITY_HIGH                       = 0x0002,
    CPROC_1X_NEIGH_SRCH_PRIORITY_VERY_HIGH                  = 0x0003,
    CPROC_1X_NEIGH_SRCH_PRIORITY_BUTT                       = 0x0004
};
typedef VOS_UINT16 CPROC_1X_NEIGH_SRCH_PRIORITY_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_NEIGH_SRCH_MODE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_1X_NEIGH_SRCH_MODE_ENUM
{
    CPROC_1X_NEIGH_SRCH_MODE_NONE                           = 0x0000,
    CPROC_1X_NEIGH_SRCH_MODE_SRCH_PRIORITY                  = 0x0001,
    CPROC_1X_NEIGH_SRCH_MODE_SRCH_WIN                       = 0x0002,
    CPROC_1X_NEIGH_SRCH_MODE_ALL                            = 0x0003,
    CPROC_1X_NEIGH_SRCH_MODE_BUTT                           = 0x0004
};
typedef VOS_UINT16 CPROC_1X_NEIGH_SRCH_MODE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CPROC_1X_MEAS_TYPE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CPROC_1X_MEAS_TYPE_ENUM
{
    CPROC_1X_MEAS_TYPE_SETUP            = 0x0000,
    CPROC_1X_MEAS_TYPE_RECFG            = 0x0001,
    CPROC_1X_MEAS_TYPE_REL              = 0x0002,
    CPROC_1X_MEAS_TYPE_BUTT             = 0x0003
};
typedef VOS_UINT16 CPROC_1X_MEAS_TYPE_ENUM_UINT16;

/*******************************************************************************
 4. Message Header declaration
*******************************************************************************/

/*******************************************************************************
 5. Message declaration
*******************************************************************************/

/*******************************************************************************
 6. STRUCT and UNION declaration
*******************************************************************************/

/** ****************************************************************************
 * Name        : CPROC_1X_NEIGH_MEAS_INFO_STRU
 *
 * Description : This struct carries measurement information per cell/pilot.
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usBandClass;       /**< 0..31, Band Class on which the pilot is */
    VOS_UINT16                          usFrequency;       /**< 0..2047, Frequency on which the pilot is */
    VOS_UINT16                          usReserved;        /**< 32bit alignment */
    VOS_UINT16                          usPNOffset;        /**< 0..511. PN Offset of the pilot. */
    VOS_UINT32                          uPnPhase;          /**< 0..524287. PN Phase in 1/16 chips of the first used path. */
    VOS_INT16                           sPilotStrength;    /**< -200..-8, resolution 1/8dB, Ec/Io of the pilot */
    VOS_INT16                           sEc;               /**< -1080..-8, resolution 1/8dB. Measured Ec (RSCP)of the pilot */
    VOS_INT16                           sTotalRxPower;     /**< -880..0, Resolution 1/8dB. RSSI of the serving frequency */
    VOS_INT16                           sRelativeStrength; /**< -200..-8, Resolution 1/8dB. Sum of pilot strength of AS pilots stronger than this pilot. See c:s0005Av6.0, 2.6.6.2.3. */
} CPROC_1X_NEIGH_MEAS_INFO_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_NEIGH_MEAS_INFO_LIST_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usNeighNum;
    VOS_UINT16                          usReserv;
    CPROC_1X_NEIGH_MEAS_INFO_STRU       astNeighMeasInd[CPROC_1X_MAX_REPORT_NUM];
} CPROC_1X_NEIGH_MEAS_INFO_LIST_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_NEIGH_INFO_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CPROC_1X_BOOL_ENUM_UINT16                               enOpSearchPriority;   /**< Is enSearchPriority included */
    CPROC_1X_BOOL_ENUM_UINT16                               enSrchWinNeigh;       /**< Is enSrchWinNeigh included */
    CPROC_1X_BOOL_ENUM_UINT16                               enSrchWinOffsetNeigh; /**< Is enSrchWinOffsetNeigh included */
    VOS_UINT16                                              usNeighPN;            /**< 0..511, PN offset of the pilot */
    CPROC_1X_NEIGH_SRCH_PRIORITY_ENUM_UINT16                enSearchPriority;
    VOS_UINT16                                              usSrchWinNeigh;       /**< 0..15, see table 2.6.6.2.1-1 SRCH_WIN_NGHBR */
    VOS_UINT16                                              usSrchWinOffsetNeigh; /**< 0..6, see table 2.6.6.2.1-2 SRCH_OFFSET_NGHBR */
    VOS_UINT16                                              usFreq;               /**< NGHBR_FREQ */
    VOS_UINT16                                              usBandClass;          /**< NGHBR_BAND */
    VOS_UINT16                                              usReseved;            /**< 32 bit alignment */
} CPROC_1X_NEIGH_INFO_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_SF_NEIGH_MEAS_IND_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usBandClass;           /**< Band class of the SF cells */
    VOS_UINT16                          usFreq;                /**< Frequency of the SF cells */
    VOS_UINT16                          usRefPN;               /**< 0..511, PNOffset of the reference pilot */
    VOS_INT16                           sSfTotalRxPower;       /**< -880..0, Resolution 0.125dB, RSSI of the frequency */
    VOS_INT16                           sTotalAsEc;            /**< Range TBD, total Ec of the active set. Valid in TCH only. */
    VOS_INT16                           sTotalSfEcIo;          /**< Range TBD, Total Ec/No of the serving frequency.  Valid in TCH only. */
    CPROC_1X_NEIGH_MEAS_INFO_LIST_STRU  stSfNeighMeasInfoList;
} CPROC_1X_SF_NEIGH_MEAS_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_CF_NEIGH_MEAS_IND_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usBandClass;           /**< Band class of the CF cells */
    VOS_UINT16                          usFreq;                /**< Frequency of the CF cells */
    VOS_INT16                           sSFTotalRxPower;       /**< -880..0, Resolution 0.125dB, RSSI of the serving frequency */
    VOS_INT16                           sCFTotalRxPower;       /**< -880..0, Resolution 0.125dB, RSSI of the candidate frequency */
    VOS_INT16                           sCFTotalEcIo;          /**< -25..20, Total EcIo of the candidate frequency */
    VOS_UINT16                          usReserved1;           /**< 32 bit alignment */
    CPROC_1X_NEIGH_MEAS_INFO_LIST_STRU  stCfNeighMeasInfoList;
} CPROC_1X_CF_NEIGH_MEAS_IND_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_NEIGH_CFG_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                                              usSrchWinA;                              /**< 0..15, see table 2.6.6.2.1-1. Search window size for Active and Candidate set. SRCH_WIN_A */
    VOS_UINT16                                              usSrchWinN;                              /**< 0..15, see table 2.6.6.2.1-1. Search window size for neighbor set. SRCH_WIN_N */
    VOS_UINT16                                              usSrchWinR;                              /**< 0..15, see table 2.6.6.2.1-1. Search window size for remaining set. SRCH_WIN_R */
    VOS_UINT16                                              usPilotIncrement;                        /**< 1..15 for remaining set search, PILOT_INC */
    CPROC_1X_NEIGH_SRCH_MODE_ENUM_UINT16                    enNeighSearchMode;                       /**< use window size and/or offsets? NGHBR_SRCH_MODE */
    CPROC_1X_BOOL_ENUM_UINT16                               enRemainingSetSearchFlag;
    VOS_UINT16                                              usReserved;                              /**< 32 bit alignment */
    VOS_UINT16                                              usNeighNum;                              /**< Number of configured pilots in the astNeighInfo array */
    CPROC_1X_NEIGH_INFO_STRU                                astNeighInfo[CPROC_1X_MAX_NEIGHBOR_NUM];
} CPROC_1X_NEIGH_CFG_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_SF_NEIGH_CFG_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CPROC_1X_MEAS_TYPE_ENUM_UINT16                          enMeasmentType;                            /**< setup ,config, release */
    VOS_UINT16                                              usSrchWinA;                                /**< 0..15, see table 2.6.6.2.1-1. Search window size for Active and Candidate set.  SRCH_WIN_A */
    VOS_UINT16                                              usSrchWinN;                                /**< 0..15, see table 2.6.6.2.1-1. Search window size for neighbor set. SRCH_WIN_N */
    VOS_UINT16                                              usSrchWinR;                                /**< 0..15, see table 2.6.6.2.1-1. Search window size for remaining set. SRCH_WIN_R */
    VOS_UINT16                                              usPilotIncrement;                          /**< 1..15 for remaining set search, PILOT_INC */
    CPROC_1X_BOOL_ENUM_UINT16                               enRemainingSetSearchFlag;
    CPROC_1X_NEIGH_SRCH_MODE_ENUM_UINT16                    enNeighSearchMode;                         /**< Use win size and or offset, NGHBR_SRCH_MODE */
    VOS_UINT16                                              usNeighNum;                                /**< Number of pilots in astSFNeighInfo array */
    CPROC_1X_NEIGH_INFO_STRU                                astSFNeighInfo[CPROC_1X_MAX_NEIGHBOR_NUM];
} CPROC_1X_SF_NEIGH_CFG_STRU;

/** ****************************************************************************
 * Name        : CPROC_1X_CF_NEIGH_CFG_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    CPROC_1X_MEAS_TYPE_ENUM_UINT16                          enMeasmentType;                            /**< setup ,config, release */
    VOS_UINT16                                              usActionTime;                              /**< 0..63, in increments of 80ms, ACTION_TIME */
    CPROC_1X_MEAS_CFG_TYPE_ENUM_UINT16                      enSearchType;                              /**< one time or period search */
    VOS_UINT16                                              usSearchPeriod;                            /**< 0..15, see table 2.6.6.2.8.3.2-1, SEARCH_PERIOD */
    VOS_UINT16                                              usBandClass;                               /**< 0..31, BAND_CLASS */
    VOS_UINT16                                              usFreq;                                    /**< 0..2047, CDMA_FREQ */
    VOS_UINT16                                              usSFTotalEcThresh;                         /**< 0..31, 31 = do not use threshold. Total Ec threshold over which no CF meas needs to be done. SF_TOTAL_EC_THRESH */
    VOS_UINT16                                              usSFTotalEcIoThresh;                       /**< 0..31, 31 = do not use threshold. Total Ec/Io threshold over which no CF meas shall be done. SF_TOTAL_EC-IO_THRESH */
    VOS_UINT16                                              usDiffRxPowerThresh;                       /**< 0..31, DIFF_RX_PWR_THRESH */
    VOS_UINT16                                              usMinCFTotalEcIoThresh;                    /**< 0..31. Threshold for handoff fail, see MIN_TOTAL_PILOT_EC_IO */
    VOS_UINT16                                              usCFPilotIncrement;                        /**< 1..15, CF_PILOT_INC */
    VOS_UINT16                                              usCFSearchWinN;                            /**< 0..15, see table 2.6.6.2.1-1. Search window size for CF neighbor set. CF_SRCH_WIN_N */
    VOS_UINT16                                              usCFSearchWinR;                            /**< 0..15, see table 2.6.6.2.1-1. Search window size for CF remaining set.CF_SRCH_WIN_R */
    VOS_UINT16                                              usCFNeighNum;                              /**< Number of configured pilots in astCFNeighInfo array. NUM_PILOTS */
    CPROC_1X_BOOL_ENUM_UINT16                               enAlignTimingInd;                          /**< ALIGN_TIMING */
    VOS_UINT16                                              usSearchOffset;                            /**< 0..63, in 1.25ms, valid only if enAlignTimingInd is set. SEARCH_OFFSET */
    VOS_UINT16                                              usCfTAdd;                                  /**< 0..63, threshold for including pilots in the calculation of CF Total EcIo, CF_T_ADD */
    CPROC_1X_NEIGH_SRCH_MODE_ENUM_UINT16                    enNeighSearchMode;                         /**< Use win size and or priority CF_NGHBR_SRCH_MODE */
    CPROC_1X_NEIGH_INFO_STRU                                astCFNeighInfo[CPROC_1X_MAX_NEIGHBOR_NUM];
} CPROC_1X_CF_NEIGH_CFG_STRU;

/*******************************************************************************
 7. OTHER declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_IDLEACCESS_MEAS_REQ_STRU
 *
 * Description : This signal is used to configure measurements in IDLE and
 * ACCESS states.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XSM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    CPROC_1X_MEAS_TYPE_ENUM_UINT16      enMeasmentType; /**< setup, reconfig or release */
    VOS_UINT16                          usReserved1;    /**< 32 bit alignment */
    CPROC_1X_NEIGH_CFG_STRU             stNeighConfig;
} CAS_CPROC_1X_IDLEACCESS_MEAS_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_IDLEACCESS_MEAS_CNF_STRU
 *
 * Description : This signal is used to confirm configuration of measurements
 * in IDLE and ACCESS states.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XSM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    CPROC_1X_RSLT_ENUM_UINT16           enResult;
    CPROC_1X_MEAS_TYPE_ENUM_UINT16      enMeasmentType; /**< Setup, reconfig or release */
} CPROC_CAS_1X_IDLEACCESS_MEAS_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_IDLEACCESS_MEAS_IND_STRU
 *
 * Description : This is the measurements report from CPROC to CAS in IDLE and
 * ACCESS.
 * In idle non slotted mode and Access, the signal is sent every 80ms.
 * In idle slotted mode the signal is sent once per paging period.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XSM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT32                          uwTimeRefMs;         /**< 0..14399999, resolution 1ms. System time mode 14400000, CS0022 TIME_REF_MS */
    VOS_INT16                           shwMobSysTOffset;    /**< -512..511.9375, resolution 1/16chip CS0022 MOB_SYS_T_OFFSET */
    VOS_UINT16                          usReserved;          /**< 32 bit alignment */
    CPROC_1X_NEIGH_MEAS_INFO_LIST_STRU  stNeighMeasInfoList;
} CPROC_CAS_1X_IDLEACCESS_MEAS_IND_STRU;

/** ****************************************************************************
 * Name        : CAS_CPROC_1X_TCH_MEAS_REQ_STRU
 *
 * Description : This signal is used to configure measurements in TCH state.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XSM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    CPROC_1X_BOOL_ENUM_UINT16           enServNeighConfigFlag;      /**< Is the SF Neighbor configuration included */
    CPROC_1X_BOOL_ENUM_UINT16           enCandidateNeighConfigFlag; /**< Is the CF Neighbor configuration included */
    CPROC_1X_SF_NEIGH_CFG_STRU          stServNeighConfig;          /**< SF neighbor configuration */
    CPROC_1X_CF_NEIGH_CFG_STRU          stCandidateNeighConfig;     /**< CF neighbor configuration */
} CAS_CPROC_1X_TCH_MEAS_REQ_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_TCH_MEAS_CNF_STRU
 *
 * Description : This signal is used to confirm configuration of measurements
 * in TCH state. The signal contains the calculated measurement pattern
 * necessary for CF measurements if CF was configured.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XSM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    CPROC_1X_RSLT_ENUM_UINT16           enResult;
    CPROC_1X_BOOL_ENUM_UINT16           enCandidateNeighConfigFlag;
    VOS_UINT16                          usForwardTotalOffTime;      /**< 0..63, in PCG or 20ms, see enPCGOffTimeInd. Sum of the time off, TOTAL_OFF_TIME_FWD */
    VOS_UINT16                          usForwardMaxOffTime;        /**< 0..63,  in PCG or 20ms, see enPCGOffTimeInd. Time off per visit to CF, MAX_OFF_TIME_FWD */
    VOS_UINT16                          usReverseTotalOffTime;      /**< 0..63,  in PCG or 20ms, see enPCGOffTimeInd. Sum of the time off, TOTAL_OFF_TIME_REV */
    VOS_UINT16                          usReverseMaxOffTime;        /**< 0..63,  in PCG or 20ms, see enPCGOffTimeInd. Time off per visit to CF, MAX_OFF_TIME_REV */
    CPROC_1X_BOOL_ENUM_UINT16           enPCGOffTimeInd;            /**< 0 => time off in 20ms, 1 => time off in PCG, PCG_OFF_TIMES */
    CPROC_1X_BOOL_ENUM_UINT16           enAlignUsedInd;             /**< ALIGN_TIMING_USED */
    VOS_UINT16                          usVisitNum;                 /**< 0..31, max number of visits to CF per measurement period -1 , MAX_NUM_VISITS */
    VOS_UINT16                          usInterVisitTime;           /**< INTER_VISIT_TIME */
} CPROC_CAS_1X_TCH_MEAS_CNF_STRU;

/** ****************************************************************************
 * Name        : CPROC_CAS_1X_TCH_MEAS_IND_STRU
 *
 * Description : This is the measurements report from CPROC to CAS in TCH. The
 * signal is sent every 80ms.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CPROC1XSM_MSG_TYPE_ENUM_UINT16      enMsgId;
    VOS_UINT16                          usOpId;
    VOS_UINT32                          uwTimeRefMs;          /**< 0..14399999, resolution 1ms. System time mode 14400000, CS0022 TIME_REF_MS */
    VOS_INT16                           shwMobSysTOffset;     /**< -512..511.9375, resolution 1/16chip CS0022 MOB_SYS_T_OFFSET */
    CPROC_1X_BOOL_ENUM_UINT16           enSfNeighMeasIndFlag;
    CPROC_1X_SF_NEIGH_MEAS_IND_STRU     stSfNeighMeasInd;
    CPROC_1X_BOOL_ENUM_UINT16           enCfNeighMeasIndFlag;
    VOS_UINT16                          usReserve1;
    CPROC_1X_CF_NEIGH_MEAS_IND_STRU     stCfNeighMeasInd;
} CPROC_CAS_1X_TCH_MEAS_IND_STRU;

/*******************************************************************************
 8. Global  declaration
*******************************************************************************/

/*******************************************************************************
 9. Function declarations
*******************************************************************************/

#if ((VOS_OS_VER == VOS_WIN32) || (VOS_OS_VER == VOS_NUCLEUS))
#pragma pack()
#else
#pragma pack(0)
#endif

#ifdef __cplusplus
#if __cplusplus
}
#endif /* __cpluscplus */
#endif /* __cpluscplus */

#endif
