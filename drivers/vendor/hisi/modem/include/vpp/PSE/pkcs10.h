/*

                Copyright 2005, Huawei Technologies Co. Ltd.
                           ALL RIGHTS RESERVED

------------------------------------------------------------------------------

                              pkcs10.h

  Project Code: SeCert
   Module Name: PKCS10
   Version: 1
  Date Created: 2005-06-30
        Author: Binil Nair
   Description: This header file declares all the strutures and methods that are
			required to generate, sign and verify PKCS10 Certificate Request

*/

#include "ipsi_pse_build_conf.h"

#ifndef _SSL_
#ifndef _IPSI_PKCS10_H_
#define _IPSI_PKCS10_H_

#include "asn-types.h"
#include "sec_sys.h"
#include "sec_crypto.h"
#include "x509_basictypes.h"
#include "ipsi_types.h"
#include "sec_list.h"

#ifdef __cplusplus
extern "C" {
#endif

/*
	Version of PKCS#10 Certificate Request. Currently only Version1(0) is
	supported
*/

#define PKCS10_VERSION  0


/** @defgroup pkcs10
* This section contains the pkcs10 Structures and Functions
*/


/** @defgroup pkcs10Structures
* @ingroup pkcs10
* This section contains the pkcs10 Structures
*/

/*
	This structure contains information like version of PKCS10 certificate request,
	name of the Requester, public key and the list of attributes. Attributes can be
	a challenge pwd or an extension request(list of X509 extensions)
*/
/**
* @defgroup PKCS10_REQINFO_S
* @ingroup pkcs10Structures
* @code
* typedef struct stPKCS10_CertReqInfo
* {
*	SEC_UINT32          ulVer;
*	SEC_NAME_S*         pstSubj;
*	SEC_PUBKEY_INFO_S*  pstPubKey;
*	SEC_List_S*         pstAttrList
* } PKCS10_REQINFO_S;
* @endcode
*
* @datastruct ulVer Version of PKCS10 Request.
* @datastruct pstSubj Name of the Requester.
* @datastruct pstPubKey Public Key in the request.
* @datastruct pstAttrList List of Attributes.
*/
typedef struct stPKCS10_CertReqInfo
{
    SEC_UINT32 ulVer;
    SEC_NAME_S* pstSubj;
    SEC_PUBKEY_INFO_S* pstPubKey;
    SEC_List_S* pstAttrList;
} PKCS10_REQINFO_S;


/*	PKCS10 certificate requests are sent to a CA/RA, which creates certificate
	from the information provided in the Certiticate request.PKCS10_REQ_S
	conatins following information about the Requester :
		* Version of PKCS10 request
		* Subject Name
		* Public Key
		* List of Attributes
		* Signature algorithm identifier
		* Signature
*/
/**
* @defgroup PKCS10_REQ_S
* @ingroup pkcs10Structures
* @code
* typedef struct stPKCS10_CertReq
* {
*	PKCS10_REQINFO_S*     pstCertReqInfo;
*	SEC_ALG_IDENTIFIER_S* pstSigAlg;
*	SEC_AsnBits_S         stSig;
* } PKCS10_REQ_S;
* @endcode
*
* @datastruct pstCertReqInfo Certificate Request Information containing
* Version, Subject, PubKey and Attribute list.
* @datastruct pstSigAlg Signature Algorithm Identifier.
* @datastruct stSig Signature.
*/
typedef struct stPKCS10_CertReq
{
    PKCS10_REQINFO_S*     pstCertReqInfo;
    SEC_ALG_IDENTIFIER_S* pstSigAlg;
    SEC_AsnBits_S         stSig;
} PKCS10_REQ_S;


/** @defgroup pkcs10Functions
* @ingroup pkcs10
* This section contains the pkcs10 Functions
*/


/**
* @defgroup PKCS10_createCertReq
* @ingroup pkcs10Functions
* @par Prototype
* @code
* PKCS10_REQ_S*  PKCS10_createCertReq(SEC_UINT32  ulVer,
* SEC_NAME_S*	pstSubj,
* SEC_PKEY_S*    pstPubKey);
* @endcode
*
* @par Purpose
* To create a PKCS10 Certificate request message.
* @par Description
* This function generates a PKCS10 certficate request and sets
* the version, subject name and public key field in the certificate
* request. This API generates an unsigned certificate request without
* any attributes. Certificate requests are generated by an End Entity
* and sent to CA, which generates an X.509 public-key certificate from the
* request. Currently, only version V1 is supported. Since corresponding
* value of V1 is 0, user needs to pass value 0 for ulVer. If the key passed
* to this API is a key-pair, public key is extracted from the key-pair and
* set in the certificate request. For signing, the private key corresponding
* to the public key set in the request or the key-pair which is used in the
* creation of certificate request, should only be used.
* To create pstPubKey, call CRYPT_genKeyPair().
* To create pstSubj, call X509_createDN().
* Following API may be called to make the certificate request complete.\n
* * PKCS10_addExtn	 (Optional)  This API can be called any number of times.\n
* * PKCS10_addChallengePwd  (Optional)  This API can be called any number of
* times (Each time the pwd is overwritten).\n
* * PKCS10_addExtn and PKCS10_addChallengePwd can be called in any sequence.
* * PKCS10_signCertReq should be called at the end i.e. after addition
* of challenge password and all the extension to PKCS10 certificate request.
* If PKCS10_addExtn or PKCS10_addChallengePwd is called after the
* PKCS10_signCertReq then PKCS10_signCertReq should be called again
* to update the signature of the PKCS10 request.
*
* @param[in] ulVer Version of Certificate Request [N/A]
* @param[in] pstSubj Subject name of the Requester [N/A]
* @param[in] pstPubKey Public key/public-private key pair [N/A]
* @param[out] N/A N/A [N/A]
*
* @retval PKCS10_REQ_S* If the API is executed successfully
* [PKCS10 Certificate Request|N/A]
* @retval PKCS10_REQ_S* If the Certificate Request generation fails.
* It can fail due to:\n
* *	Invalid input arguments (Invalid pstSubj, pstPubKey)\n
* *	Version passed is not V1 i.e 0\n
* *	Memory allocation failure\n
* *	Duplication of data failed\n
* *	X509_createPubKeyInfo function failure [SEC_NULL|N/A]
*
* @par Dependency
* pkcs10.h
*
* @par Memory Handling
* ipsi will allocate the memory for the created PKCS10 request, to free
* this memory application has to call the PKCS10_freeCertReq.
*
* @par Note
*
* N/A
*
* @par Related Topics
* N/A
*
* 
*/

PSELINKDLL PKCS10_REQ_S*  PKCS10_createCertReq(SEC_UINT32  ulVer,
                                 SEC_NAME_S*    pstSubj,
                                 SEC_PKEY_S*    pstPubKey);




/**
* @defgroup PKCS10_signCertReq
* @ingroup pkcs10Functions
* @par Prototype
* @code
* SEC_UINT32  PKCS10_signCertReq(PKCS10_REQ_S*  pstCertReq,
* SEC_PKEY_S* pstPrivKey,
* SEC_UINT32 ulHashAlgId);
* @endcode
*
* @par Purpose
* To sign a PKCS10 certificate request message using the given key.
* @par Description
* This function generates signature on PKCS10_REQINFO_S structure and
* sets the signature and signature algorithm field in the Certificate
* Request. For signing, the private key corresponding to the public key
* set in the request or the key-pair which is used in the creation of
* certificate request, should only be used. If the key pair does not match,
* signing will be performed but verify certificate request will fail.
* To create pstCertReq, call PKCS10_createCertReq().
* To create pstPrivKey, call CRYPT_genKeyPair().
* Following APIs need to be called before this API:\n
* * PKCS10_createCertReq.\n
* * PKCS10_addExtn	  (Optional)  This API can be called any number of times.\n
* * PKCS10_addChallengePwd  (Optional)  This API can be called any number of
* times.
*
* @param[in] pstCertReq Certifcate Request structure [N/A]
* @param[in] pstPrivKey Private key used for signing [N/A]
* @param[in] ulHashAlgId Hash Algorithm ID [N/A]
* @param[out] N/A N/A [N/A]
*
* @retval SEC_UINT32 If certificate Request is signed successfully
* [SEC_SUCCESS|N/A]
* @retval SEC_UINT32 If input parameter is invalid. It may be due to:\n
* 1. Version set is not V1(0) or \n
* 2. pstCertReq/pstPrivKey passed to the API is NULL [SEC_ERR_INVALID_ARG|N/A]
* @retval SEC_UINT32 If hash alg id passed, is invalid
* [SEC_ERR_INVALID_ALGID|N/A]
* @retval SEC_UINT32 If signature algorithm id created internally, is invalid
* [SEC_ERR_INVALID_CID|N/A]
* @retval SEC_UINT32 If encode of Certificate Request Info failed
* [SEC_ERR_ENCODE_FAILED|N/A]
* @retval SEC_UINT32 If memory allocation failed [SEC_ERR_MALLOC_FAIL|N/A]
* @retval SEC_UINT32 If copying of OID failed [SEC_ERR_DATA_COPY_FAILED|N/A]
* @retval SEC_UINT32 If signing of certitificate request failed
* [SEC_ERR_SIGNING_FAILED|N/A]
*
* @par Dependency
* pkcs10.h
*
* @par Note
* 1. If the request is already signed, the signature will be overwritten,\n
* 2. Only Hash algorithm id should be passed, not the signing algorithm.
*
* @par Related Topics
* N/A
*
* 
*/

PSELINKDLL SEC_UINT32  PKCS10_signCertReq(PKCS10_REQ_S*  pstCertReq,
                               SEC_PKEY_S*    pstPrivKey,
                               SEC_UINT32     ulHashAlgId);




/**
* @defgroup PKCS10_addExtn
* @ingroup pkcs10Functions
* @par Prototype
* @code
* SEC_UINT32  PKCS10_addExtn(PKCS10_REQ_S*  pstCertReq,
* SEC_EXTN_S* pstExtn);
* @endcode
*
* @par Purpose
* To add an X509 Extension to the attribute list in the certificate request.
* @par Description
* Any of the X509 extensions can be added.
* These extensions contain information to appear in X509 certificates.
* This API may be called more than once, to add more extensions to the
* certificate request.
* To create pstCertReq, call PKCS10_createCertReq().
* To create pstExtn, call X509_createExtn().
*
* @param[in] pstCertReq PKCS10 Certificate Request [N/A]
* @param[in] pstExtn Extension to be added [N/A]
* @param[out] N/A N/A [N/A]
*
* @retval SEC_UINT32 Extension added successfully [SEC_SUCCESS|N/A]
* @retval SEC_UINT32 Input parameter(pstCertReq/pstExtn) passed is NULL/invalid
* [SEC_ERR_INVALID_ARG|N/A]
* @retval SEC_UINT32 Memory allocation failed [SEC_ERR_MALLOC_FAIL|N/A]
* @retval SEC_UINT32 Copying/Duplication of data failed
* [SEC_ERR_DATA_COPY_FAILED|N/A]
* @retval SEC_UINT32 List operation failed. It may be due to:\n
* 1. List creation failure\n
* 2. Addition of extension to the extension list failed 
*     [SEC_ERR_LIST_OPERATION_FAILED|N/A]
*
* @par Dependency
* pkcs10.h
*
* @par Note
*
* N/A
*
* @par Related Topics
* N/A
*
*/

PSELINKDLL SEC_UINT32  PKCS10_addExtn(PKCS10_REQ_S*  pstCertReq,
                           SEC_EXTN_S*    pstExtn);




/**
* @defgroup PKCS10_addChallengePwd
* @ingroup pkcs10Functions
* @par Prototype
* @code
* SEC_UINT32  PKCS10_addChallengePwd(PKCS10_REQ_S* pstCertReq,
* SEC_UCHAR* pucChallPwd,
* SEC_UINT32 ulChallPwdLen);
* @endcode
*
* @par Purpose
* To add a challenge password to the given PKCS10 certificate request message.
* @par Description
* PKCS10 certificate request can have only one challenge password
* at a time. If the user, calls this API more than once, that is after setting
* the challenge password, the old challenge password is replaced by the new one.
* This challenge password can be used by the End Entity for certificate request
* revocation.\n
* Challenge password passed must be a printable string.
* If the length of challenge password is less than the passed
* length(ulChallPwdLen), this API does not add the challenge password. But, if
* the length of the challenge password is more than ulChallPwdLen, that number
* of initial characters are extracted from the challenge password and only
* those characters will be treated as the challenge password.
* To create pstCertReq, call PKCS10_createCertReq().
*
* @param[in] pstCertReq PKCS10 Certificate Request [N/A]
* @param[in] pucChallPwd Challenge pwd (Printable string) [N/A]
* @param[in] ulChallPwdLen Length of challenge password [N/A]
* @param[out] N/A N/A [N/A]
*
* @retval SEC_UINT32 Challenge pwd added successfully [SEC_SUCCESS|N/A]
* @retval SEC_UINT32 Input parameter(pstCertReq/pucChallPwd) passed
* is NULL/invalid or ulChallPwdLen is 0 [SEC_ERR_INVALID_ARG|N/A]
* @retval SEC_UINT32 Memory allocation failed [SEC_ERR_MALLOC_FAIL|N/A]
* @retval SEC_UINT32 Copy function failed [SEC_ERR_DATA_COPY_FAILED|N/A]
* @retval SEC_UINT32 List operation failed. It may be due to:\n
* 1. List creation failure\n
* 2. Addition of challenge pwd to the attribute failed
*    [SEC_ERR_LIST_OPERATION_FAILED|N/A]
*
* @par Dependency
* pkcs10.h
*
* @par Note
* 1. Certificate Request can have only one challenge pwd at a time. If
*  this API is called again, the pwd is reset.\n
* 2. Challenge pwd should be a printable string. The list of acceptable characters
*	 is as follows :
*	    A to Z,\n
*		a to z,\n
*		0 to 9,\n
*		' ' :		 space\n
*		'\'':		 apostrophe\n
*		'(':		 left parenthesis\n
*		')':		 right parenthesis n
*		'+':		 plus sign\n
*		',':		 comma\n
*		'-':		 hyphen\n
*		'.':		 full stop (period)\n
*		'/':		 solidus\n
*		':':		 colon\n
*		'=':		 equal sign\n
*		'?':		 question mark\n
* If the challenge password string is passed apart from the characters which are mentioned above then it 
* will be added as Teletext String in the PKCS10 request.
*
* @par Related Topics
* N/A
*
* 
*/

PSELINKDLL SEC_UINT32  PKCS10_addChallengePwd(PKCS10_REQ_S* pstCertReq,
                            SEC_UCHAR*           pucChallPwd,
                            SEC_UINT32           ulChallPwdLen);




/**
* @defgroup PKCS10_extractPubKey
* @ingroup pkcs10Functions
* @par Prototype
* @code
* SEC_PKEY_S*  PKCS10_extractPubKey(const PKCS10_REQ_S* pstCertReq);
* @endcode
*
* @par Purpose
* To fetch the Public Key from the given PKCS10 certificate request message.
* @par Description
* This function retrieves public key from the certificate request.
* To create pstCertReq, call PKCS10_createCertReq(). The key returned
* by this API is used as a public key.
* If the request does not have a public key, SEC_NULL is returned.
*
* @param[in] pstCertReq PKCS10 Certificate Request [N/A]
* @param[out] N/A N/A [N/A]
*
* @retval SEC_PKEY_S* Public key set in the request [SEC_PKEY_S*|N/A]
* @retval SEC_PKEY_S* SEC_NULL may be returned beacuse:\n
* 1. Certificate request is invalid\n
* 2. Algorithm set in the subject public key is invalid\n
* 3. Decoding of public key failed [SEC_NULL|N/A]
*
* @par Dependency
* pkcs10.h
*
* @par Memory Handling
* ipsi will allocate the memory for the extracted key, to free this memory
* application has to call the CRYPT_PKEY_free.
*
* @par Note
* Memory allocated to the returned public key must be freed
* by the user.
*
* @par Related Topics
* N/A
*/

PSELINKDLL SEC_PKEY_S*  PKCS10_extractPubKey(const PKCS10_REQ_S* pstCertReq);




/**
* @defgroup PKCS10_getSubject
* @ingroup pkcs10Functions
* @par Prototype
* @code
* SEC_NAME_S*  PKCS10_getSubject(const PKCS10_REQ_S*  pstCertReq);
* @endcode
*
* @par Purpose
* To fetch the Subject Name from the given PKCS10 Certificate request message.
* @par Description
* This function retrieves subject name from the certificate request.
* If the request does not have a subject name, SEC_NULL is returned.
*
* @param[in] pstCertReq PKCS10 Certificate Request [N/A]
* @param[out] N/A N/A [N/A]
*
* @retval SEC_NAME_S* Upon successful completion, the Subject name set in the
* certificate request is returned [SEC_NAME_S*|N/A]
* @retval SEC_NAME_S* Subject name is not set in the certificate request
* [SEC_NULL|N/A]
*
* @par Dependency
* pkcs10.h
*
* @par Note
*
* N/A
*
* @par Related Topics
* N/A
*/

PSELINKDLL SEC_NAME_S*  PKCS10_getSubject(const PKCS10_REQ_S*  pstCertReq);




/**
* @defgroup PKCS10_getExtnList
* @ingroup pkcs10Functions
* @par Prototype
* @code
* SEC_List_S*  PKCS10_getExtnList(const PKCS10_REQ_S*  pstCertReq);
* @endcode
*
* @par Purpose
* To fetch the extension list from the given PKCS10 Certificate request message.
* @par Description
* This function retrieves the extension list from the certificate request.
* Extension list returned is the list of X509 extensions set in the
* request. List APIs (SEC_LIST_GET_ELEMENT/ SEC_LIST_GET_FIRST/
* SEC_LIST_GET_NEXT) can be used to retrieve the extensions from the
* extension list. If the extension list is not set in the request, SEC_NULL
* is returned.
*
* @param[in] pstCertReq PKCS10 Certificate Request [N/A]
* @param[out] N/A N/A [N/A]
*
* @retval SEC_List_S* Extension list set in the certificate request
* [SEC_List_S*|N/A]
* @retval SEC_List_S* SEC_NULL may be returned because:\n
* 1. Certificate request is invalid\n
* 2. Certificate request does not have an attribute having extension list
* [SEC_NULL|N/A]
*
* @par Dependency
* pkcs10.h
*
* @par Note
*
* N/A
*
* @par Related Topics
* N/A
*/

PSELINKDLL SEC_List_S*  PKCS10_getExtnList(const PKCS10_REQ_S*  pstCertReq);




/**
* @defgroup PKCS10_getChallengePwd
* @ingroup pkcs10Functions
* @par Prototype
* @code
* SEC_UCHAR*  PKCS10_getChallengePwd(const PKCS10_REQ_S*  pstCertReq,
* SEC_UINT32* pulChallPwdLen);
* @endcode
*
* @par Purpose
* To fetch the Challenge Password that is set in the given
* PKCS10 Certificate request message.
* @par Description
* This function retrieves challenge password from the Certificate Request.
* The challenge password retrieved can be used by the user for revocation of
* the certificate. The length of the challenge password is set in the parameter
* pulChallPwdLen.
* If the challenge password is not set in the request, SEC_NULL is returned.
*
* @param[in] pstCertReq PKCS10 Certificate Request [N/A]
* @param[out] pulChallPwdLen Length of challenge password [N/A]
*
* @retval SEC_UCHAR* Challenge password set in the certificate request
* [SEC_UCHAR*|N/A]
* @retval SEC_UCHAR* SEC_NULL may be returned beacuse:\n
* 1. pstCertReq/pulChallPwdLen is NULL\n
* 2. Certificate request is invalid\n
* 3. Certificate request does not have an attribute having challenge password
* [SEC_NULL|N/A]
*
* @par Dependency
* pkcs10.h
*
* @par Note
*
* N/A
*
* @par Related Topics
* N/A
*
*/

PSELINKDLL SEC_UCHAR*  PKCS10_getChallengePwd(const PKCS10_REQ_S*  pstCertReq,
                                    SEC_UINT32* pulChallPwdLen);




/**
* @defgroup PKCS10_getVersion
* @ingroup pkcs10Functions
* @par Prototype
* @code
* SEC_UINT32 PKCS10_getVersion(const PKCS10_REQ_S*  pstCertReq);
* @endcode
*
* @par Purpose
* To fetch the version from the given PKCS10 Certificate request message.
* @par Description
* This function retrieves version from the Certificate Request.
* If the certificate request is not NULL, the value of version set is
* returned. Currently, the version set in the certificate request should
* only be V1 that is 0.
*
* @param[in] pstCertReq PKCS10 Certificate Request [N/A]
* @param[out] N/A N/A [N/A]
*
* @retval SEC_UINT32 Version of the certificate request [SEC_UINT32|N/A]
* @retval SEC_UINT32 Certificate request is invalid/NULL
* [SEC_ERR_INVALID_ARG|N/A]
*
* @par Dependency
* pkcs10.h
*
* @par Note
*
* N/A
*
* @par Related Topics
* N/A
*/

PSELINKDLL SEC_UINT32 PKCS10_getVersion(const PKCS10_REQ_S*  pstCertReq);




/**
* @defgroup PKCS10_encodeCertReq
* @ingroup pkcs10Functions
* @par Prototype
* @code
* SEC_UCHAR* PKCS10_encodeCertReq(PKCS10_REQ_S* pstCertReq,
* SEC_UINT32* pulCertReqLen);
* @endcode
*
* @par Purpose
* To encode the given PKCS10 Certificate request message.
* @par Description
* This function encodes the Certificate Request and returns the
* certificate request in DER format. The certificate request
* must be valid and all the mandatory fields(version, subject name,
* public key, signing algorithm and signature) must be set, before this
* API is called.
* The length of the encoded certificate request is set in the pulCertReqLen
* parameter.
* Following APIs need to be called before this.\n
* * PKCS10_createCertReq : Creates a certificate request\n
* * PKCS10_addExtn		  (Optional)  This API can be called any number of times\n
* * PKCS10_addChallengePwd  (Optional)  This API can be called any number
*    of time\n
* * PKCS10_signCertReq
*
* @param[in] pstCertReq PKCS10 Certificate Request [N/A]
* @param[out] pulCertReqLen Length of encoded request [N/A]
*
* @retval SEC_UCHAR* Encoded certifcate request [SEC_UCHAR*|N/A]
* @retval SEC_UCHAR* SEC_NULL may be returned beacuse of:\n
* 1. pstCertReq/pulCertReqLen is NULL\n
* 2. Mandatory field(s) in the certificate request is/are not set\n
* 3. Encoding of certificate request failed [SEC_NULL|N/A]
*
* @par Dependency
* pkcs10.h
*
* @par Memory Handling
* ipsi will allocate the memory for the character pointer returned to
* application, to free this memory application has to call the ipsi_free.
*
* @par Note
* The certificate request, must be valid and signed.
*
* @par Related Topics
* N/A
*/

PSELINKDLL SEC_UCHAR* PKCS10_encodeCertReq(PKCS10_REQ_S* pstCertReq,
                                SEC_UINT32*   pulCertReqLen);




/**
* @defgroup PKCS10_decodeCertReq
* @ingroup pkcs10Functions
* @par Prototype
* @code
* PKCS10_REQ_S* PKCS10_decodeCertReq(SEC_UCHAR* pucEncCertReq,
* SEC_UINT32 ulLen,
* SEC_UINT32 *pulLenDecoded);
* @endcode
*
* @par Purpose
* To generate the decoded PKCS10 Certificate request message from
* the given encoded Certificate request message.
* @par Description
* This function decodes the encoded certificate request(DER) and returns
* the PKCS10 certificate request. The number of bytes decoded	is set in
* pulLenDecoded. After the successful execution of this API, the value of
* uLen and pulLenDecoded must be same. To generate an encoded certificate
* request, call PKCS10_encodeCertReq.
*
* @param[in] pucEncCertReq Encoded certificate request [N/A]
* @param[in] ulLen Length of encoded request [N/A]
* @param[out] pulLenDecoded Number of bytes decoded [N/A]
*
* @retval PKCS10_REQ_S* Decoded certificate request [PKCS10_REQ_S*|N/A]
* @retval PKCS10_REQ_S* SEC_NULL may be returned beacuse of:\n
* 1. pucEncCertReq/pulLenDecoded is NULL\n
* 2. ulLen passed is 0\n
* 3. Memory allocation failed\n
* 4. Decoding of encoded certificate request failed [SEC_NULL|N/A]
*
* @par Dependency
* pkcs10.h
*
* @par Memory Handling
* ipsi will allocate the memory for the created PKCS10 request, to free
* this memory application has to call the PKCS10_freeCertReq.
*
* @par Note
*
* N/A
*
* @par Related Topics
* N/A
*/

PSELINKDLL PKCS10_REQ_S* PKCS10_decodeCertReq(SEC_UCHAR* pucEncCertReq,
                                   SEC_UINT32 ulLen,
                                   SEC_UINT32 *pulLenDecoded);




/**
* @defgroup PKCS10_verify
* @ingroup pkcs10Functions
* @par Prototype
* @code
* SEC_UINT32  PKCS10_verify(PKCS10_REQ_S* pstCertReq);
* @endcode
*
* @par Purpose
* To verify the signature in the given PKCS10 Certificate Request message.
* @par Description
* If the private key corresponding to the public key set in the certificate
* request or the same key-pair(which is passed to PKCS10_createCertReq API) is
* used for signing, this API succeeds. This API can be used by the CA/RA for
* verifying the certificate request.
* Following APIs need to be called before calling this API.\n
* * PKCS10_createCertReq\n
* * PKCS10_addExtn		  (Optional)  This API can be called any number of times\n
* * PKCS10_addChallengePwd  (Optional)  This API can be called any number of
*    times\n
* * PKCS10_signCertReq\n
* * PKCS10_addExtn and PKCS10_addChallengePwd can be called in any sequence.
*
* @param[in] pstCertReq PKCS10 Certificate Request [N/A]
* @param[out] N/A N/A [N/A]
*
* @retval SEC_UINT32 The signature in the given PKCS10 request message is valid
* [SEC_SUCCESS|N/A]
* @retval SEC_UINT32 Input parameter is invalid. It may be due to:\n
* 1. Version set is not V1(0)\n
* 2. pstCertReq passed to the API is NULL [SEC_ERR_INVALID_ARG|N/A]
* @retval SEC_UINT32 Encoding of Certificate Request Info failed
* [SEC_ERR_ENCODE_FAILED|N/A]
* @retval SEC_UINT32 Alg ID set in the public key structure in the request is
* invalid [SEC_ERR_INVALID_ALGID|N/A]
* @retval SEC_UINT32 Decoding of pub key failed [SEC_ERR_DECODE_FAILED|N/A]
* @retval SEC_UINT32 Verification of certificate request failed
* [SEC_ERR_SIGN_VERIFY_FAILED|N/A]
*
* @par Dependency
* pkcs10.h
*
* @par Note
* The given PKCS10 request message should have been signed already.
*
* @par Related Topics
* N/A
*
* 
*/

PSELINKDLL SEC_UINT32  PKCS10_verify(PKCS10_REQ_S* pstCertReq);




/**
* @defgroup PKCS10_freeCertReq
* @ingroup pkcs10Functions
* @par Prototype
* @code
* SEC_VOID  PKCS10_freeCertReq(PKCS10_REQ_S* pstCertReq);
* @endcode
*
* @par Purpose
* To free a PKCS10_REQ_S structure.
* @par Description
* This function is used to free the memory allocated to Certificate Request.
*
* @param[in] pstCertReq PKCS10 Certificate Request [N/A]
* @param[out] N/A N/A [N/A]
*
* @retval SEC_VOID This function does not return any value [N/A|N/A]
*
* @par Dependency
* pkcs10.h
*
* @par Note
*
* N/A
*
* @par Related Topics
* N/A
*/

PSELINKDLL SEC_VOID  PKCS10_freeCertReq(PKCS10_REQ_S* pstCertReq);




/**
* @defgroup PKCS10_dupCertReq
* @ingroup pkcs10Functions
* @par Prototype
* @code
* PKCS10_REQ_S* PKCS10_dupCertReq(PKCS10_REQ_S* pstCertReq);
* @endcode
*
* @par Purpose
* To duplicate a PKCS10_REQ_S structure.
* @par Description
* This function duplicates the PKCS10 certificate request.
*
* @param[in] pstCertReq PKCS10 Certificate Request [N/A]
* @param[out] N/A N/A [N/A]
*
* @retval PKCS10_REQ_S* Duplicated certificate request [PKCS10_REQ_S*|N/A]
* @retval PKCS10_REQ_S* Duplication operation failed [SEC_NULL|N/A]
* @par Dependency
* pkcs10.h
*
* @par Memory Handling
* ipsi will allocate the memory for the created PKCS10 request, to free
* this memory application has to call the PKCS10_freeCertReq.
*
* @par Note
*
* N/A
*
* @par Related Topics
* N/A
*/

PSELINKDLL PKCS10_REQ_S* PKCS10_dupCertReq(PKCS10_REQ_S* pstCertReq);




#ifdef __cplusplus
}
#endif

#endif /* _IPSI_PKCS10_H_ */
#endif  /* _SSL_  */
