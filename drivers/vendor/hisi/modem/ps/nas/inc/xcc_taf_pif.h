/** ****************************************************************************

                    Huawei Technologies Sweden AB (C), 2001-2011

 ********************************************************************************
 * @author    Automatically generated by DAISY
 * @version
 * @date      2014-09-03
 * @file
 * @brief
 * The common interface between 1X Call Control and TAF.
 * @copyright Huawei Technologies Sweden AB
 *******************************************************************************/
#ifndef XCC_TAF_PIF_H
#define XCC_TAF_PIF_H

/*******************************************************************************
 1. Other files included
*******************************************************************************/
#include "vos.h"

#ifdef __cplusplus
#if __cplusplus
    extern "C" {
#endif /* __cpluscplus */
#endif /* __cpluscplus */
#pragma pack(4)

/*******************************************************************************
 2. Macro definitions
*******************************************************************************/
#define TAF_XCC_CAUSE_XCC_INT_BEGIN     (0x00001000)

/* Added by y00314741 for AGPS_PROJECT, 2015-8-31, begin */
#define TAF_XCC_XPDS_MSG_BASE          (0x3000)
/* Added by y00314741 for AGPS_PROJECT, 2015-8-31, end */
#define TAF_XCC_CSMS_MSG_BASE          (0x2000)
#define TAF_XCC_XCALL_MSG_BASE         (0x1000)
#define TAF_XCC_APS_MSG_BASE           (0x0000)
#define TAF_XCC_TAF_MSG_MASK           (0xF000)

#define TAF_XCC_CALLID_NULL            (0xFF)

/*******************************************************************************
 3. Enumerations declarations
*******************************************************************************/
/** ****************************************************************************
 * Name        : TAF_CDMA_SO_TYPE_ENUM_UINT16
 * Description :
 *******************************************************************************/
enum TAF_CDMA_SO_TYPE_ENUM
{
    TAF_CDMA_SO_2_LOOPBACK              = 0x0002,
    TAF_CDMA_SO_3_EVRC                  = 0x0003,
    TAF_CDMA_SO_6_SMS                   = 0x0006,
    TAF_CDMA_SO_7_PPP_PKT_DATA_PRE707   = 0x0007,
    TAF_CDMA_SO_14_RS2_SMS              = 0x000E,
    TAF_CDMA_SO_33_PPP_PKT_DATA         = 0x0021,
    TAF_CDMA_SO_35_LOC_SERV             = 0x0023,
    TAF_CDMA_SO_36_LOC_SERV             = 0x0024,
    TAF_CDMA_SO_68_EVRC_B               = 0x0044,
    TAF_CDMA_SO_73_EVRC_NW              = 0x0049,
    TAF_CDMA_SO_BUTT                    = 0x004A
};
typedef VOS_UINT16 TAF_CDMA_SO_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : TAF_XCC_FAIL_LAYER_ENUM_UINT8
 * Description :
 *******************************************************************************/
enum TAF_XCC_FAIL_LAYER_ENUM
{
    TAF_XCC_FAIL_LAYER_L2               = 0x00, /* \x{5c42}\x{4e8c}\x{7684}\x{5f02}\x{5e38} */
    TAF_XCC_FAIL_LAYER_L3               = 0x01, /* \x{5c42}\x{4e09}\x{7684}\x{5f02}\x{5e38} */
    TAF_XCC_FAIL_LAYER_BUTT             = 0x02
};
typedef VOS_UINT8 TAF_XCC_FAIL_LAYER_ENUM_UINT8;

/** ****************************************************************************
 * Name        : TAF_XCC_CAUSE_ENUM_UINT32
 * Description :
 *******************************************************************************/
enum TAF_XCC_CAUSE_ENUM
{
    TAF_XCC_CAUSE_SUCCESS                                       = 0x00000000,   /* Access Success */

    /* 以下原因是认为是AS失败，接入层提供 */
    TAF_XCC_CAUSE_NO_SERVICE                                    = 0x00000001,   /* No Service\x{ff0c}Call Redial */
    TAF_XCC_CAUSE_MAX_ACCESS_PROBES                             = 0x00000002,   /* Max Access Probes, Call Redial */
    TAF_XCC_CAUSE_REORDER                                       = 0x00000003,   /* Reorder Order, Call Redial */
    TAF_XCC_CAUSE_INTERCEPT                                     = 0x00000004,   /* Intercept Order, Call not Redial */
    TAF_XCC_CAUSE_ACCESS_DENYIED                                = 0x00000005,   /* Access Denied, Call Redial */
    TAF_XCC_CAUSE_LOCK                                          = 0x00000006,   /* Lock, Call not Redial */
    TAF_XCC_CAUSE_ACCT_BLOCK                                    = 0x00000007,   /* Acct Block, Call Redial */
    TAF_XCC_CAUSE_NDSS                                          = 0x00000008,   /* Access Control based on Call Type, redial */
    TAF_XCC_CAUSE_REDIRECTION                                   = 0x00000009,   /* Redirection, Call Redial */
    TAF_XCC_CAUSE_ACCEPT_BY_BS                                  = 0x0000000A,   /* BS Reject, used in Register process call not redial */
    TAF_XCC_CAUSE_ACCESS_IN_PROGRESS                            = 0x0000000B,   /* Access In Progress, Call Redial */
    TAF_XCC_CAUSE_ACCESS_FAIL                                   = 0x0000000C,   /* Access fail, Call Redial */
    TAF_XCC_CAUSE_ABORT                                         = 0x0000000D,   /* State can not Process Call, Call Redial */
    TAF_XCC_CAUSE_SIGNAL_FADE                                   = 0x0000000E,   /* Signal Fade, Call Redial */
    TAF_XCC_CAUSE_CHANNEL_ASSIGN_TIMEOUT                        = 0x0000000F,   /* Access Time Out, Call Redial */
    TAF_XCC_CAUSE_BS_RELEASE                                    = 0x00000010,   /* BS, Call Redial */
    TAF_XCC_CAUSE_NOT_ACCEPT_BY_BS                              = 0x00000011,   /* BS Reject, Call not Redial */
    TAF_XCC_CAUSE_SO_REJ                                        = 0x00000012,   /* CAS_CNAS_1X_TERMINATE_REASON_SO_REJ */
    TAF_XCC_CAUSE_RELEASE_TIME_OUT                              = 0x00000013,   /* CAS_CNAS_1X_TERMINATE_REASON_RELEASE_TIME_OUT */
    TAF_XCC_CAUSE_NORMAL_RELEASE                                = 0x00000014,   /* Normal Call end, Call not Redial */
    TAF_XCC_CAUSE_RETRY_FAIL                                    = 0x00000015,   /* AS Retry Fail, Call not Redial */


    /* XCC层内部通用原因值 */
    TAF_XCC_CAUSE_UNKNOWN                                       = (TAF_XCC_CAUSE_XCC_INT_BEGIN),
    TAF_XCC_CAUSE_OTHER_SERVICE_IN_TCH                                = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 1),   /* Already In Traffic Channel, no need dial */
    TAF_XCC_CAUSE_CCS_NOT_SUPPORT                               = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 2),   /* Concurrent Service not Support, Call Redial */
    TAF_XCC_CAUSE_CONNECT_ORDER_ACK_FAILURE                     = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 3),   /* L2 ACK FAILURE */
    TAF_XCC_CAUSE_INCOMING_RSP_TIME_OUT                         = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 4),   /* TiWaitForXcallIncomingRsp TIME OUT */
    TAF_XCC_CAUSE_L2_ACK_TIME_OUT                               = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 5),   /* TiWaitL2Ack TIME OUT */
    TAF_XCC_CAUSE_POWER_DOWN_IND                                = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 6),   /* 关机原因导致的原因 */
    TAF_XCC_CAUSE_CONNID_NOT_FOUND                              = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 7),
    TAF_XCC_CAUSE_ACCESS_CNF_TIMEOUT                            = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 8),
    TAF_XCC_CAUSE_ACCESS_TCH_TIMEOUT                            = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 9),    /* 接入层进TCH超时 */
    TAF_XCC_CAUSE_T53M_TIME_OUT                                 = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 10),
    TAF_XCC_CAUSE_XCALL_HANGUP                                  = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 11),
    TAF_XCC_CAUSE_CALL_NOT_ALLOWED                              = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 12),
    TAF_XCC_CAUSE_ABNORMAL_STATE                                = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 13),   /* 状态异常 */
    TAF_XCC_CAUSE_ENCODE_FAIL                                   = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 14),   /* 编码失败 */
    TAF_XCC_CAUSE_WAIT_L2_ACK_CALL_RELEASE                      = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 15),   /* 等待L2 ACK时，发生呼叫释放 */
    TAF_XCC_CAUSE_L2_ACK_FAIL                                   = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 16),   /* 收到L2 ACK，结果失败 */
    TAF_XCC_CAUSE_CANNOT_FIND_CALL_INSTANCE                     = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 17),   /* 找不对对应的call instance */
    TAF_XCC_CAUSE_ABORTED_BY_RECEIVED_MO_CALL                   = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 18),   /* 呼叫被主叫终止 */
    TAF_XCC_CAUSE_ABORTED_BY_RECEIVED_MT_CALL                   = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 19),   /* 呼叫被收到的被叫终止 */
    TAF_XCC_CAUSE_ALLOC_SRID_FAIL                               = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 20),
    TAF_XCC_CAUSE_NO_RF                                         = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 21),   /* 由于X模NO RF XCALL请求被XCC拒绝 */
    TAF_XCC_CAUSE_PROTOTAL_REV_NOT_SUPPORT                      = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 22),
    TAF_XCC_CAUSE_MT_SMS_IN_TCH                                 = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 23),   /* 被叫短线在传输信道*/

    /* 语音业务专用原因值 + 100 */
    TAF_XCC_CAUSE_NDSS_REDIAL_IND                               = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 100),
    TAF_XCC_CAUSE_EMERGENCY_CALL_FLASHED                        = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 101),   /* 紧急呼叫以Flash消息发出去 */
    TAF_XCC_CAUSE_EMERGENCY_CALL_ABORT                          = (TAF_XCC_CAUSE_XCC_INT_BEGIN + 102),   /* 紧急呼叫被打断,上层后续重拨 */

    /* SS业务专用原因值 + 200 */

    /* 数据业务专用原因值 + 300 */


    TAF_XCC_CAUSE_BUTT
};
typedef VOS_UINT32 TAF_XCC_CAUSE_ENUM_UINT32;

/** ****************************************************************************
 * Name        : TAF_XCC_END_REASON_ENUM_UINT8
 * Description :
 *******************************************************************************/
enum TAF_XCC_END_REASON_ENUM
{
    TAF_XCC_END_REASON_NORMAL_RELEASE                       = 0x00, /* Normal Release */
    TAF_XCC_END_REASON_POWER_DOWN_RELEASE                   = 0x01, /* release with a powerdown indication */
    TAF_XCC_END_REASON_SERVICE_INACTIVE                     = 0x02, /* release with service inactive indication */
    TAF_XCC_END_REASON_BUTT                                 = 0x03
};
typedef VOS_UINT8 TAF_XCC_END_REASON_ENUM_UINT8;


/*******************************************************************************
 4. Message Header declaration
*******************************************************************************/

/*******************************************************************************
 5. Message declaration
*******************************************************************************/

/*******************************************************************************
 6. STRUCT and UNION declaration
*******************************************************************************/

/*******************************************************************************
 7. OTHER declarations
*******************************************************************************/

/*******************************************************************************
 8. Global  declaration
*******************************************************************************/

/*******************************************************************************
 9. Function declarations
*******************************************************************************/

#if ((VOS_OS_VER == VOS_WIN32) || (VOS_OS_VER == VOS_NUCLEUS))
#pragma pack()
#else
#pragma pack(0)
#endif

#ifdef __cplusplus
#if __cplusplus
}
#endif /* __cpluscplus */
#endif /* __cpluscplus */

#endif
