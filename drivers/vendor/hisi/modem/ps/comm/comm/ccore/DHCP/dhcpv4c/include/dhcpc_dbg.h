
#ifndef __DHCPC_DBG_H__
#define __DHCPC_DBG_H__

#include "taf_aps_dhcp_pif.h"

#define DHCPV6C_DBGCNT_ADD(x) {((x) < E_DHCPV6C_END)?(g_ulDHCPV6CDbgCnt[x])++:0;}

#ifdef __WIN32_PLATFORM__
#define DHCPC_DebugPrint DHCPC_DebugOut_Stub
#else
#define DHCPC_DebugPrint(level, fmt...) \
        /*lint -e774*/                     \
        if(g_ulDhcpcPrintLevel || (PTM_LOG_ERR >= (level))){DHCPC_NewDebugOut(level, __FILE__, __LINE__, __FUNCTION__, ##fmt);} \
        /*lint +e774*/

#endif

#define DHCPC_FUNC_ENTRY() \
    DHCP_INFO_LOG("entry");

#define DHCPC_FUNC_EXIT(ret) \
    DHCP_INFO_LOG1("exit. [ret=%u]", (ret));

#define DHCPC_GET_STR(a) #a
extern ULONG g_ulDhcpcPrintLevel;
extern struct Command_Group_S DHCPDebugCommandGroup;
extern ULONG g_ulDHCPV6CDbgCnt[];


/* DHCPV6C计数枚举值 */
typedef enum
{
    /* 消息相关 */
    E_DHCPV6C_MSGLEN_ERR,

    E_DHCPV6C_NO_CI,
    E_DHCPV6C_CIDUID_TYPE_ERR,
    E_DHCPV6C_CIDUID_ENTERNUM_ERR,
    E_DHCPV6C_CIDUID_LEN_ERR,
    E_DHCPV6C_CIDUID_DATA_ERR,

    E_DHCPV6C_NO_SI,
    E_DHCPV6C_SIDUID_LEN_ERR,
    E_DHCPV6C_SIDUID_LEN2_ERR,
    E_DHCPV6C_SIDUID_TYPE_ERR,
    E_DHCPV6C_SIDUID_DATA_ERR,

    E_DHCPV6C_NO_IANA,
    E_DHCPV6C_IANA_LEN_ERR,
    E_DHCPV6C_IANA_TEIDC_ERR,
    E_DHCPV6C_IANA_T1T2_ERR,
    E_DHCPV6C_IANA_T1T2_ERR_2,

    E_DHCPV6C_NO_IAADDR,
    E_DHCPV6C_IAADDR_LEN_ERR,
    E_DHCPV6C_IAADDR_TIME_ERR,
    E_DHCPV6C_IAADDR_DATA_ERR,

    E_DHCPV6C_NO_DNS,
    E_DHCPV6C_DNS_LEN_ERR,
    E_DHCPV6C_DNS_MAIN_ERR,
    E_DHCPV6C_DNS_SECD_ERR,
    E_DHCPV6C_DNS_SAME,

    E_DHCPV6C_STATUSCODE_LEN_ERR,
    E_DHCPV6C_STATUSCODE_NOADDR,
    E_DHCPV6C_STATUSCODE_UNSPECFAIL,
    E_DHCPV6C_STATUSCODE_UNSPECFAIL_2,
    E_DHCPV6C_STATUSCODE_USEMULTICAST,
    E_DHCPV6C_STATUSCODE_NOBIND,

    E_DHCPV6C_TID_EXHAUST,
    E_DHCPV6C_SEQNUM_REMAIN,
    E_DHCPV6C_SERVER_NO_RSP,

    E_DHCPV6C_ALLOC_MBUF_ERR,
    E_DHCPV6C_COPY_MBUF_ERR,
    E_DHCPV6C_UDPOUT_ERR,

    E_DHCPV6C_REV_SERVER_MSG,
    E_DHCPV6C_REV_ADVERTISE_MSG,
    E_DHCPV6C_REV_REPLY_MSG,
    E_DHCPV6C_REV_SERVER_OTHER_MSG,

    E_DHCPV6C_FSM_PRE_PROC_ENTER,
    E_DHCPV6C_FSM_PRE_PROC_OK,

    E_DHCPV6C_REQUEST_RCV_UNEXCEPT_MSG,
    E_DHCPV6C_REQUEST_ADDR_NOT_EQUAL,
    E_DHCPV6C_REQUEST_T1T2_NOT_EQUAL,
    E_DHCPV6C_REQUEST_LEASE_NOT_EQUAL,
    E_DHCPV6C_REL_DEC_RCV_UNEXCEPT_MSG,
    E_DHCPV6C_RENEW_RCV_UNEXCEPT_MSG,
    E_DHCPV6C_RENEW_ADDR_NOT_EQUAL,
    E_DHCPV6C_RENEW_VALID_TIME_IS_0,
    E_DHCPV6C_FSM_RCV_UNEXCEPT_MSG,

    E_DHCPV6C_SEND_PACKET_ENTER,
    E_DHCPV6C_SEND_PKT_SELECT_SVR_FAIL,

    E_DHCPV6C_SEND_SOLICIT_OK,
    E_DHCPV6C_SEND_REQUEST_OK,
    E_DHCPV6C_SEND_RENEW_OK,
    E_DHCPV6C_SEND_RELEASE_OK,
    E_DHCPV6C_SEND_DECLINE_OK,
    E_DHCPV6C_SEND_SERVER_OTHER_OK,
    E_DHCPV6C_SEND_PACKET_OK,

    E_DHCPV6C_SEND_SOLICIT_ERR,
    E_DHCPV6C_SEND_REQUEST_ERR,
    E_DHCPV6C_SEND_RENEW_ERR,
    E_DHCPV6C_SEND_RELEASE_ERR,
    E_DHCPV6C_SEND_DECLINE_ERR,
    E_DHCPV6C_SEND_SERVER_OTHER_ERR,

    E_DHCPV6C_REV_LAP_REQ_MSG,
    E_DHCPV6C_REV_LAP_RELEASE_MSG,
    E_DHCPV6C_REV_LAP_CONFLICT_MSG,
    E_DHCPV6C_REV_LAP_CONFLICT_FAIL,

    E_DHCPV6C_SEND_LAP_SUCCESS_OK,
    E_DHCPV6C_SEND_LAP_FAIL_OK,
    E_DHCPV6C_SEND_LAP_REL_OK,
    E_DHCPV6C_SEND_LAP_SVR_NO_RSP_OK,
    E_DHCPV6C_SEND_LAP_OTHER_OK,

    E_DHCPV6C_SEND_LAP_SUCCESS_ERR,
    E_DHCPV6C_SEND_LAP_FAIL_ERR,
    E_DHCPV6C_SEND_LAP_REL_ERR,
    E_DHCPV6C_SEND_LAP_SVR_NO_RSP_ERR,
    E_DHCPV6C_SEND_LAP_OTHER_ERR,

    E_DHCPV6C_CREAT_CONTEXT_FAIL,
    E_DHCPV6C_INIT_CONTEXT_FAIL,
    E_DHCPV6C_CONTEXT_EXIST_FAIL,
    E_DHCPV6C_FIND_SDB_FAIL,
    E_DHCPV6C_UNPACKET_FAIL,
    E_DHCPV6C_SERVER_QRY_TEIDC_FAIL,
    E_DHCPV6C_SERVER_QRY_CONTEXT_FAIL,
    E_DHCPV6C_LAPREL_QRY_CONTEXT_FAIL,

    E_DHCPV6C_FSM_START_T1_FAIL,
    E_DHCPV6C_FSM_START_T2_FAIL,
    E_DHCPV6C_FSM_START_LEASE_TM_FAIL,
    E_DHCPV6C_FSM_BOUNDIP_START_TM_FAIL,
    E_DHCPV6C_FSM_START_RESEND_TM_FAIL,
    E_DHCPV6C_FSM_1ST_BOUNDIP_FAIL,
    E_DHCPV6C_FSM_SND_LAP_SUCC_FAIL,
    E_DHCPV6C_FSM_RNEW_QUERY_PDP_FAIL,

    E_DHCPV6C_FSM_REQ_IP_SUCC,
    E_DHCPV6C_FSM_RENEW_IP_SUCC,
    E_DHCPV6C_FSM_BOUNDIP_SUCC,

    E_DHCPV6C_BLK_MALLOC_NUM,
    E_DHCPV6C_BLK_CRT_NUM,
    E_DHCPV6C_BLK_CRT_INPUT_NULL,
    E_DHCPV6C_BLK_CRTNEW_NOTMALLOC,
    E_DHCPV6C_BLK_CRTNEW_MALLOC,
    E_DHCPV6C_BLK_CRTNEW_MALLOC_FAIL,
    E_DHCPV6C_BLK_MANAGE_INPUT_NULL,
    E_DHCPV6C_BLK_INSERTIDLE_NUM,
    E_DHCPV6C_BLK_INSERTIDLE_INPUT_NULL,
    E_DHCPV6C_BLK_INSERTWAIT_NUM,
    E_DHCPV6C_BLK_INSERTWAIT_INPUT_NULL,
    E_DHCPV6C_BLK_CRT_CRTNEW_FAIL,
    E_DHCPV6C_BLK_CRT_GETBLK_FAIL,
    E_DHCPV6C_BLK_QRY_INPUT_NULL,
    E_DHCPV6C_BLK_QRY_OK,
    E_DHCPV6C_BLK_QRY_FAIL,
    E_DHCPV6C_BLK_ADD_NUM,
    E_DHCPV6C_BLK_ADD_INPUT_NULL,
    E_DHCPV6C_BLK_ADD_CONFLICT,
    E_DHCPV6C_BLK_DEL_NUM,
    E_DHCPV6C_BLK_DEL_FAIL,
    E_DHCPV6C_BLK_DEL_OK,
    E_DHCPV6C_BLK_DEL_NOTFOUND,
    E_DHCPV6C_BLK_DELWHOLE_NUM,
    E_DHCPV6C_BLK_DELWHOLE_INPUT_FAIL,
    E_DHCPV6C_BLK_DELWHOLE_DELSING_FAIL,
    E_DHCPV6C_BLK_DELSINGLE_NUM,
    E_DHCPV6C_BLK_DELSINGLE_INPUT_FAIL,
    E_DHCPV6C_BLK_FREEMEM_NUM,
    E_DHCPV6C_BLK_FREEMEM_ALL,
    E_DHCPV6C_BLK_FREEMEM_DELBLK_FAIL,
    E_DHCPV6C_BLK_FREEMEM_DELNOD_FAIL,
    E_DHCPV6C_BLK_FREEMEM_OK,
    E_DHCPV6C_BLK_DELWAITNOD_NUM,
    E_DHCPV6C_BLK_DELWAITNOD_NODEQU,
    E_DHCPV6C_BLK_MEMCANBEFREE_NUM,

    E_DHCPV6C_NO_NODE_IN_HASH_LIST,
    E_DHCPV6C_NODE_NOT_IN_HASH_LIST,
    E_DHCPV6C_MALLOC_ERR_FOR_TIMER_NODE,
    E_DHCPV6C_SECONDNODE_CANNOT_BE_HEAD,
    E_DHCPV6C_SECONDLIST_LINK_ERROR,
    E_DHCPV6C_HOURNODE_CANNOT_BE_HEAD,
    E_DHCPV6C_HOURLIST_LINK_ERROR,
    E_DHCPV6C_SECOND_FIELD_VALUE_ERROR,
    E_DHCPV6C_FIND_NODE_CANNOT_BE_HEAD,
    E_DHCPV6C_FIND_SAME_CONFLICT_NODE,
    E_DHCPV6C_TIMER_UP_FIND_HASH_ERROR,

    E_DHCPV6C_CHECK_BLKDEL,
    E_DHCPV6C_BAK_IPTYPEERR,
    E_DHCPV6C_BAK_IPV6,
    E_DHCPV6C_BAKRESTORE_IPTYPEERR,
    E_DHCPV6C_BAKRESTORE,
    E_DHCPV6C_BAKRESTORE_STAT_ERR,
    E_DHCPV6C_BAKRESTORE_DELEERR,
    E_DHCPV6C_BAKRESTORE_CRTERR,
    E_DHCPV6C_BAKRESTORE_TIMERR,
    E_DHCPV6C_BAKRESTORE_STOPTIMERR,
    E_DHCPV6C_BAKRDEL_STOPTIMERR,
    E_DHCPV6C_BAKRESTORE_RENEW,
    E_DHCPV6C_BAKDEL_NOTFOUND,
    E_DHCPV6C_BAKDEL_FREEFAIL,

    E_DHCPV6C_TIMRES_EXTIM,
    E_DHCPV6C_TIMRES_T1TIM,
    E_DHCPV6C_TIMRES_T2TIM,
    E_DHCPV6C_TIMRES_T2EXTIM,
    E_DHCPV6C_TIMRES_EXTIM_ERR,
    E_DHCPV6C_STANDBYTIM_T1,
    E_DHCPV6C_STANDBYTIM_T2,
    E_DHCPV6C_STANDBYTIM_LEASE,
    E_DHCPV6C_STANDBYTIM_ERR,
    E_DHCPV6C_RENEW_RCVREPLYBK,
    E_DHCPV6C_SENDTIM_SPUDRESTORE,
    E_DHCPV6C_TIME_SPUDRESTORE_ENTER,
    E_DHCPV6C_TIME_HASEXIST,
    E_DHCPV6C_TIME_SPUDRESTORE,
    E_DHCPV6C_TIME_SPUDRESTORE_FAIL,
    E_DHCPV6C_TIMRES_NOTRESTORE,

    E_DHCPV6C_BLK_DELSINGLE_TAIL_FAIL,
    E_DHCPV6C_BLK_DELSINGLE_FAIL,
    E_DHCPV6C_BLK_DELWAITNOD_ERR,
    E_DHCPV6C_BLK_DELWAITNOD_COUNT_ERR,

    E_DHCPV6C_CNT_TRC_1,
    E_DHCPV6C_CNT_TRC_2,
    E_DHCPV6C_CNT_TRC_3,
    E_DHCPV6C_CNT_TRC_4,
    E_DHCPV6C_CNT_TRC_5,    /* no use */

    E_DHCPV6C_CNT_ERR_1,    /* no use */
    E_DHCPV6C_CNT_ERR_2,
    E_DHCPV6C_CNT_ERR_3,    /* no use */
    E_DHCPV6C_CNT_ERR_4,    /* no use */
    E_DHCPV6C_CNT_ERR_5,    /* no use */

    /* CAUTION!!!!此计数用于检查枚举值与字符串的对应关系,如果被打印出来,说明对应关系不一致 */
    E_DHCPV6C_ALARM_CNT_ERRRRRRRRRRRR,
    E_DHCPV6C_END
}E_DHCPV6C_COUNT;


/* add by w00316385 start */

/*----------------------------------------------*
 * 宏定义                                       *
 *----------------------------------------------*/
 
#ifdef _lint
/* DHCP日志输出 */
#define DHCP_INFO_LOG(String)
#define DHCP_INFO_LOG1(String, Para1)
#define DHCP_INFO_LOG2(String, Para1, Para2)
#define DHCP_INFO_LOG3(String, Para1, Para2, Para3)
#define DHCP_INFO_LOG4(String, Para1, Para2, Para3, Para4)

#define DHCP_WARNING_LOG(String)
#define DHCP_WARNING_LOG1(String, Para1)
#define DHCP_WARNING_LOG2(String, Para1, Para2)
#define DHCP_WARNING_LOG3(String, Para1, Para2, Para3)
#define DHCP_WARNING_LOG4(String, Para1, Para2, Para3, Para4)

#define DHCP_ERROR_LOG(String)
#define DHCP_ERROR_LOG1(String, Para1)
#define DHCP_ERROR_LOG2(String, Para1, Para2)
#define DHCP_ERROR_LOG3(String, Para1, Para2, Para3)
#define DHCP_ERROR_LOG4(String, Para1, Para2, Para3, Para4)
#else
/* DHCP日志输出 */
#define DHCP_INFO_LOG(String)                                                   LPS_LOG(MSPS_PID_DHCP, 0,LOG_LEVEL_INFO, String)
#define DHCP_INFO_LOG1(String, Para1)                                           LPS_LOG1(MSPS_PID_DHCP, 0,LOG_LEVEL_INFO, String, (VOS_INT32)Para1)
#define DHCP_INFO_LOG2(String, Para1, Para2)                                    LPS_LOG2(MSPS_PID_DHCP, 0,LOG_LEVEL_INFO, String, (VOS_INT32)Para1, (VOS_INT32)Para2)
#define DHCP_INFO_LOG3(String, Para1, Para2, Para3)                             LPS_LOG3(MSPS_PID_DHCP, 0,LOG_LEVEL_INFO, String, (VOS_INT32)Para1, (VOS_INT32)Para2, (VOS_INT32)Para3)
#define DHCP_INFO_LOG4(String, Para1, Para2, Para3, Para4)                      LPS_LOG4(MSPS_PID_DHCP, 0,LOG_LEVEL_INFO, String, (VOS_INT32)Para1, (VOS_INT32)Para2, (VOS_INT32)Para3,(VOS_INT32)Para4)

#define DHCP_WARNING_LOG(String)                                                LPS_LOG(MSPS_PID_DHCP, 0,LOG_LEVEL_WARNING, String)
#define DHCP_WARNING_LOG1(String, Para1)                                        LPS_LOG1(MSPS_PID_DHCP, 0,LOG_LEVEL_WARNING, String, (VOS_INT32)Para1)
#define DHCP_WARNING_LOG2(String, Para1, Para2)                                 LPS_LOG2(MSPS_PID_DHCP, 0,LOG_LEVEL_WARNING, String, (VOS_INT32)Para1, (VOS_INT32)Para2)
#define DHCP_WARNING_LOG3(String, Para1, Para2, Para3)                          LPS_LOG3(MSPS_PID_DHCP, 0,LOG_LEVEL_WARNING, String, (VOS_INT32)Para1, (VOS_INT32)Para2, (VOS_INT32)Para3)
#define DHCP_WARNING_LOG4(String, Para1, Para2, Para3, Para4)                   LPS_LOG4(MSPS_PID_DHCP, 0,LOG_LEVEL_WARNING, String, (VOS_INT32)Para1, (VOS_INT32)Para2, (VOS_INT32)Para3,(VOS_INT32)Para4)

#define DHCP_ERROR_LOG(String)                                                  LPS_LOG(MSPS_PID_DHCP, 0,LOG_LEVEL_ERROR, String)
#define DHCP_ERROR_LOG1(String, Para1)                                          LPS_LOG1(MSPS_PID_DHCP, 0,LOG_LEVEL_ERROR, String, (VOS_INT32)Para1)
#define DHCP_ERROR_LOG2(String, Para1, Para2)                                   LPS_LOG2(MSPS_PID_DHCP, 0,LOG_LEVEL_ERROR, String, (VOS_INT32)Para1, (VOS_INT32)Para2)
#define DHCP_ERROR_LOG3(String, Para1, Para2, Para3)                            LPS_LOG3(MSPS_PID_DHCP, 0,LOG_LEVEL_ERROR, String, (VOS_INT32)Para1, (VOS_INT32)Para2, (VOS_INT32)Para3)
#define DHCP_ERROR_LOG4(String, Para1, Para2, Para3, Para4)                     LPS_LOG4(MSPS_PID_DHCP, 0,LOG_LEVEL_ERROR, String, (VOS_INT32)Para1, (VOS_INT32)Para2, (VOS_INT32)Para3,(VOS_INT32)Para4)
#endif

/* add by w00316385 end */



/*----------------------------------------------*
 * 外部函数原型说明                             *
 *----------------------------------------------*/

/* extern int atoi(const char* str); */

/*----------------------------------------------*
 * 内部函数原型说明                             *
 *----------------------------------------------*/
VOID DHCPC_DebugPrintLevelSet( ULONG ulArgc, CHAR *szArgv[] );
extern VOID DHCPC_Debug_ShowTimerInfo(ULONG argc, CHAR *argv[]);
VOID DHCPC_NewDebugOut(ULONG ulLevel, CHAR* pszFile, ULONG ulLineNo, CHAR *pszFuncName, CHAR *pszFormat, ...);
#endif /* __DHCPC_DBG_H__ */
