/******************************************************************************

                  版权所有 (C), 2001-2011, 华为技术有限公司

 ******************************************************************************
  文 件 名   : test_immzc.cpp
  版 本 号   : 初稿
  作    者   :
  生成日期   : 2014年05月15日
  最近修改   :
  功能描述   : UT测试脚本
  函数列表   :
  修改历史   :
  1.日    期   : 2013年01月29日
    作    者   :
    修改内容   : 创建文件

******************************************************************************/

/*****************************************************************************
  1 头文件包含
*****************************************************************************/
#include "gtest/gtest.h"
#include "llt_mockcpp.h"

using namespace testing;

#ifdef __cplusplus
extern "C"
{
#endif
/* Test case */
extern int test_NFExt_RegHooks(void);
extern int test_NFExt_ReRegHooks(int iTest);
extern int test_NFExt_ConfigEffective(int iTest);
extern int test_NFExt_Get1stInetIpv4Addr(int iTest);
extern int test_NFExt_RcvNfExtInfoCfgReq(int iTest);
extern int test_NFExt_SelfTaskInit(int iTest);
extern int test_NFExt_RingBufferPut(int iTest);
extern int test_NFExt_RingBufferGet(int iTest);
extern int test_NFExt_FlushRingBuffer(int iTest);
extern int test_NFExt_AddDataToRingBuf(int iTest);
extern int test_NFExt_CtrlTxMsgTask(int iTest);
extern int test_NFExt_ReadNvCfg(int iTest);
extern int test_NFExt_Init(int iTest);
extern int test_NFExt_BrFlowCtrl(int iTest);
extern int test_NFExt_SaveBrDev(int iTest);
extern int test_NFExt_ResetPri(int iTest);
extern int test_NFExt_RcvOmMsg(int iTest);
extern int test_NFExt_MsgProc(int iTest);
extern int test_NFExt_FidInit(int iTest);

/* extern kernel function */
extern int nf_register_hook(void *reg);
extern void nf_unregister_hook(void *reg);
extern void IPS_MNTN_SndCfgCnf2Om
(
    unsigned short      usPrimId,
    unsigned int        ulTransMsgContentLen,
    void               *pTransMsgContent
);
extern void *OM_RingBufferCreate( int nbytes );
extern int OM_RingBufferFreeBytes( void * ringId);
extern int OM_RingBufferPut( void * rngId, char *buffer, int nbytes );
extern unsigned int OM_RingBufferIsEmpty( void * ringId );
extern int OM_RingBufferGet( void * rngId, char *buffer, int maxbytes );
extern void OM_RingBufferFlush( void * ringId );
extern void kfree(const void *ptr);
extern int NFExt_RingBufferPut( void * rngId, char *buffer, int nbytes );
extern int NFExt_RingBufferGet( void * rngId, char *buffer, int maxbytes );
extern void NFExt_FlushRingBuffer(void * rngId);
extern unsigned int NV_ReadEx(unsigned short            enModemID,
                            unsigned short                  usID,
                            void                           *pItem,
                            unsigned int                    ulLength);
extern int  NFExt_RegHooks(unsigned int ulMask);
extern void NFExt_UnregHooks(unsigned int ulMask);
extern void IPS_MNTN_FlowCtrl(unsigned int ulFcType, unsigned short usType);
extern void *dev_get_by_name(void *net, const char *name);
extern unsigned int NFExt_Get1stInetIpv4Addr(void *pstDev);
extern int  NFExt_ReRegHooks(unsigned int ulMask);
extern void IPS_MNTN_TraceAdvancedCfgReq(void *pMsg);
extern void NFExt_RcvNfExtInfoCfgReq(void *pMsg);
extern void IPS_MNTN_IPInfoCfgReq(void *pMsg);
extern void NFExt_RcvOmMsg(void *pMsg);
extern int NFExt_Init(void);
extern unsigned int VOS_RegisterPIDInfo( unsigned int ulPID,
                                void* pfnInitFun,
                                void* pfnMsgFun);
extern unsigned int VOS_RegisterMsgTaskPrio( unsigned int ulFID,
                                    int TaskPrio );
extern unsigned char VOS_RegisterSelfTask( unsigned int                   ulFID,
                                void*       pfnSelfTask,
                                int  TaskPrio,
                                unsigned int                ulStackSize);

extern int __init_waitqueue_head();
extern int __raw_spin_lock_init();
extern int _raw_spin_lock_irqsave();
extern int _raw_spin_unlock_irqrestore();
extern int __wake_up();
/* 全局变量 */
extern unsigned int uDataRingSize;

#ifdef __cplusplus
}
#endif

/*****************************************************************************
  2 测试用例
*****************************************************************************/

TEST(test_test_NFExt_RegHooks, RegHooksTest01)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(nf_register_hook).stubs().will(returnValue(0));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_RegHooks();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_RegHooks, RegHooksTest02)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(nf_register_hook).stubs().will(returnValue(-1));
    MOCKER(NFExt_UnregHooks).expects(once());

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_RegHooks();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_ReRegHooks, ReRegHooksTest01)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(nf_register_hook).stubs().will(returnValue(0));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_ReRegHooks(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_ReRegHooks, ReRegHooksTest02)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(nf_register_hook).stubs().will(returnValue(0));
    MOCKER(nf_unregister_hook).expects(once());

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_ReRegHooks(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_ConfigEffective, ConfigEffectiveTest01)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(nf_register_hook).stubs().will(returnValue(-1));
    MOCKER(nf_unregister_hook).expects(once());

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_ConfigEffective(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_ConfigEffective, ConfigEffectiveTest02)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(nf_register_hook).stubs().will(returnValue(0));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_ConfigEffective(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_Get1stInetIpv4Addr, NFExt_Get1stInetIpv4AddrTest01)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_Get1stInetIpv4Addr(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_Get1stInetIpv4Addr, NFExt_Get1stInetIpv4AddrTest02)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_Get1stInetIpv4Addr(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_Get1stInetIpv4Addr, NFExt_Get1stInetIpv4AddrTest03)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_Get1stInetIpv4Addr(2);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_Get1stInetIpv4Addr, NFExt_Get1stInetIpv4AddrTest04)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_Get1stInetIpv4Addr(3);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_RcvNfExtInfoCfgReq, NFExt_RcvNfExtInfoCfgReqTest01)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(IPS_MNTN_SndCfgCnf2Om).expects(once());

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_RcvNfExtInfoCfgReq(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_SelfTaskInit, NFExt_SelfTaskInitTest01)
{
    int     iRet;
    unsigned char buf[80] = {0};

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(OM_RingBufferCreate).stubs().will(returnValue((void *)&buf[0]));
	MOCKER(__init_waitqueue_head).stubs().will(returnValue(0));
	MOCKER(__raw_spin_lock_init).stubs().will(returnValue(0));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_SelfTaskInit(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_SelfTaskInit, NFExt_SelfTaskInitTest02)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(OM_RingBufferCreate).stubs().will(returnValue((void *)0));
	MOCKER(__init_waitqueue_head).stubs().will(returnValue(0));
	MOCKER(__raw_spin_lock_init).stubs().will(returnValue(0));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_SelfTaskInit(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_RingBufferPut, NFExt_RingBufferPutTest01)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(OM_RingBufferFreeBytes).stubs().will(returnValue(100));
    MOCKER(OM_RingBufferPut).stubs().will(returnValue(10));
	MOCKER(_raw_spin_lock_irqsave).stubs().will(returnValue(0));
	MOCKER(_raw_spin_unlock_irqrestore).stubs().will(returnValue(0));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_RingBufferPut(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_RingBufferGet, NFExt_RingBufferGetTest01)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(OM_RingBufferGet).stubs().will(returnValue(10));
	MOCKER(_raw_spin_lock_irqsave).stubs().will(returnValue(0));
	MOCKER(_raw_spin_unlock_irqrestore).stubs().will(returnValue(0));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_RingBufferGet(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_FlushRingBuffer, NFExt_FlushRingBufferTest01)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(OM_RingBufferIsEmpty).stubs().will(returnValue((unsigned int)0)).then(returnValue((unsigned int)1));
    MOCKER(OM_RingBufferGet).expects(once());
    MOCKER(OM_RingBufferFlush).expects(once());
    MOCKER(kfree).expects(once());
    //MOCKER(kfree).expects(exactly(3)).will(returnObjectList(0,0,0));
	MOCKER(_raw_spin_lock_irqsave).stubs().will(returnValue(0));
	MOCKER(_raw_spin_unlock_irqrestore).stubs().will(returnValue(0));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_FlushRingBuffer(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_AddDataToRingBuf, NFExt_AddDataToRingBufTest01)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_AddDataToRingBuf(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_AddDataToRingBuf, NFExt_AddDataToRingBufTest02)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(NFExt_RingBufferPut).stubs().will(returnValue(0));
	MOCKER(__wake_up).stubs().will(returnValue(0));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_AddDataToRingBuf(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_AddDataToRingBuf, NFExt_AddDataToRingBufTest03)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(NFExt_RingBufferPut).stubs().will(returnValue(1));
    MOCKER(NFExt_RingBufferGet).stubs().will(returnValue(1));
	MOCKER(__wake_up).stubs().will(returnValue(0));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_AddDataToRingBuf(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_AddDataToRingBuf, NFExt_AddDataToRingBufTest04)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(NFExt_RingBufferPut).stubs().will(returnValue(uDataRingSize));
	MOCKER(__wake_up).stubs().will(returnValue(0));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_AddDataToRingBuf(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_CtrlTxMsgTask, NFExt_CtrlTxMsgTaskTest01)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_CtrlTxMsgTask(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_CtrlTxMsgTask, NFExt_CtrlTxMsgTaskTest02)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(OM_RingBufferIsEmpty).stubs().will(returnValue((unsigned int)0));
    MOCKER(NFExt_RingBufferGet).stubs().will(returnValue(1));
    MOCKER(NFExt_FlushRingBuffer).expects(once());

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_CtrlTxMsgTask(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_CtrlTxMsgTask, NFExt_CtrlTxMsgTaskTest03)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(OM_RingBufferIsEmpty).stubs().will(returnValue((unsigned int)0));
    MOCKER(NFExt_RingBufferGet).stubs().will(returnValue(0));
    MOCKER(kfree).expects(once());

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_CtrlTxMsgTask(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_ReadNvCfg, NFExt_ReadNvCfgTest01)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(NV_ReadEx).stubs().will(returnValue((unsigned int)0));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_ReadNvCfg(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_ReadNvCfg, NFExt_ReadNvCfgTest02)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(NV_ReadEx).stubs().will(returnValue((unsigned int)1));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_ReadNvCfg(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_Init, NFExt_InitTest01)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(NV_ReadEx).stubs().will(returnValue(1));
    MOCKER(OM_RingBufferCreate).stubs().will(returnValue((void *)0));
    MOCKER(NFExt_RegHooks).stubs().will(returnValue(0));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_Init(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_BrFlowCtrl, NFExt_BrFlowCtrlTest01)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(NFExt_RegHooks).stubs().will(returnValue(1));
    MOCKER(IPS_MNTN_FlowCtrl).expects(exactly(2));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_BrFlowCtrl(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_SaveBrDev, NFExt_SaveBrDevTest01)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(dev_get_by_name).stubs().will(returnValue((void *)0));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_SaveBrDev(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_SaveBrDev, NFExt_SaveBrDevTest02)
{
    int     iRet;
    unsigned char buf[80] = {0};

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(dev_get_by_name).stubs().will(returnValue((void *)&buf[0]));
    MOCKER(NFExt_Get1stInetIpv4Addr).stubs().will(returnValue((unsigned int)0));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_SaveBrDev(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_ResetPri, NFExt_ResetPriTest01)
{
    int     iRet;
    unsigned char buf[80] = {0};

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(NFExt_ReRegHooks).expects(never());

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_ResetPri(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_ResetPri, NFExt_ResetPriTest02)
{
    int     iRet;
    unsigned char buf[80] = {0};

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(NFExt_ReRegHooks).expects(once()).will(returnValue(0));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_ResetPri(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_RcvOmMsg, NFExt_RcvOmMsgTest01)
{
    int     iRet;
    unsigned char buf[80] = {0};

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(IPS_MNTN_TraceAdvancedCfgReq).expects(once());
    MOCKER(NFExt_RcvNfExtInfoCfgReq).expects(once());
    MOCKER(IPS_MNTN_IPInfoCfgReq).expects(once());

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_RcvOmMsg(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_MsgProc, NFExt_MsgProcTest01)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(NFExt_RcvOmMsg).expects(never());

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_MsgProc(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_MsgProc, NFExt_MsgProcTest02)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(NFExt_RcvOmMsg).expects(never());

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_MsgProc(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_MsgProc, NFExt_MsgProcTest03)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(NFExt_RcvOmMsg).expects(once());

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_MsgProc(2);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_FidInit, NFExt_FidInitTest01)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(NFExt_Init).expects(never());

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_FidInit(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_FidInit, NFExt_FidInitTest02)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(NFExt_Init).expects(never());

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_FidInit(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_FidInit, NFExt_FidInitTest03)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(NFExt_Init).expects(once()).will(returnValue(1));
    MOCKER(VOS_RegisterPIDInfo).expects(never());

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_FidInit(2);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_FidInit, NFExt_FidInitTest04)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(NFExt_Init).expects(once()).will(returnValue(0));
    MOCKER(VOS_RegisterPIDInfo).expects(once()).will(returnValue((unsigned int)1));
    MOCKER(VOS_RegisterMsgTaskPrio).expects(never());

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_FidInit(2);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_FidInit, NFExt_FidInitTest05)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(NFExt_Init).expects(once()).will(returnValue(0));
    MOCKER(VOS_RegisterPIDInfo).expects(once()).will(returnValue((unsigned int)0));
    MOCKER(VOS_RegisterMsgTaskPrio).expects(once()).will(returnValue((unsigned int)1));
    MOCKER(VOS_RegisterSelfTask).expects(never());

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_FidInit(2);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}
TEST(test_test_NFExt_FidInit, NFExt_FidInitTest06)
{
    int     iRet;

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(NFExt_Init).expects(once()).will(returnValue(0));
    MOCKER(VOS_RegisterPIDInfo).expects(once()).will(returnValue((unsigned int)0));
    MOCKER(VOS_RegisterMsgTaskPrio).expects(once()).will(returnValue((unsigned int)0));
    MOCKER(VOS_RegisterSelfTask).expects(once()).will(returnValue((unsigned char)0));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    iRet = test_NFExt_FidInit(2);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, iRet);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

    /* 还原打的函数桩 */
    GlobalMockObject::reset();
}


