/** ****************************************************************************

                    Huawei Technologies Sweden AB (C), 2001-2015

 ********************************************************************************
 * @author    Automatically generated by DAISY
 * @version
 * @date      2015-08-26
 * @file
 * @brief
 * @copyright Huawei Technologies Sweden AB
 *******************************************************************************/
#ifndef LRRCCASHRPDINTERFACE_H
#define LRRCCASHRPDINTERFACE_H

/*******************************************************************************
 1. Other files included
*******************************************************************************/

#include "vos.h"
#include "PsTypeDef.h"

#ifdef __cplusplus
#if __cplusplus
    extern "C" {
#endif /* __cpluscplus */
#endif /* __cpluscplus */
#pragma pack(4)

/*******************************************************************************
 2. Macro definitions
*******************************************************************************/

#define CAS_LRRC_IDLE_RESEL_PLMN_ID_MAX_NUM                 ( 8 )
#define CAS_LRRC_HRPD_MAX_SUBNET_ID_LENGTH                  ( 16 )
#define CAS_LRRC_HRPD_MAX_SYSTEM_NUM                        ( 16 )
#define LRRC_CAS_HRPD_BSR_MAX_HIGH_PLMN_NUM                 ( 16 )
#define LRRC_CAS_HRPD_BSR_MAX_LOW_PLMN_NUM                  ( 16 )
#define LRRC_CAS_HRPD_PLMN_MAX_LENGTH                       ( 3 )
/**
 * the max number of cell for one LTE frequency suppported,it's just a limited
 * size
 */
#define CAS_LRRC_HRPD_MAX_CELL_NUM_PER_EUTRAN_FREQ          ( 32 )
/**
 * maximum number of EUTRAN frequency configured by CDMA overhead message, It's
 * limited by HW
 */
#define CAS_LRRC_HRPD_MAX_EUTRA_FREQ_NUM                    ( 7 )
/**
 * maximum number of CDMA PNs configured by LTE for  measurement per freq, per
 * 36.331,It's a limited size by HW
 */
#define CAS_LRRC_HRPD_MAX_PN_NUM_PER_FREQ                   ( 8 )
/**
 * maximum number of CDMA freq configured by LTE in SIB8/meas config IE, per
 * 36.331,it's a limited size by HW
 */
#define CAS_LRRC_HRPD_MEAS_MAX_CDMA_FREQ_NUM                ( 3 )

/*******************************************************************************
 3. Enumerations declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM
{
    ID_CAS_LRRC_HRPD_IDLE_MEAS_REQ                          = 0x0000, /**< @sa CAS_LRRC_HRPD_IDLE_MEAS_REQ_STRU */
    ID_LRRC_CAS_HRPD_IDLE_MEAS_CNF                          = 0x0001, /**< @sa LRRC_CAS_HRPD_IDLE_MEAS_CNF_STRU */
    ID_LRRC_CAS_HRPD_IDLE_MEAS_IND                          = 0x0002, /**< @sa LRRC_CAS_HRPD_IDLE_MEAS_IND_STRU */
    ID_CAS_LRRC_HRPD_IDLE_RESEL_REQ                         = 0x0003, /**< @sa CAS_LRRC_HRPD_IDLE_RESEL_REQ_STRU */
    ID_LRRC_CAS_HRPD_IDLE_RESEL_CNF                         = 0x0004, /**< @sa LRRC_CAS_HRPD_IDLE_RESEL_CNF_STRU */
    ID_CAS_LRRC_HRPD_IDLE_RESEL_STOP_REQ                    = 0x0005, /**< @sa CAS_LRRC_HRPD_IDLE_RESEL_STOP_REQ_STRU */
    ID_LRRC_CAS_HRPD_IDLE_RESEL_STOP_CNF                    = 0x0006, /**< @sa LRRC_CAS_HRPD_IDLE_RESEL_STOP_CNF_STRU */
    ID_CAS_LRRC_HRPD_BSR_REQ                                = 0x0007, /**< @sa CAS_LRRC_HRPD_BSR_REQ_STRU */
    ID_LRRC_CAS_HRPD_BSR_CNF                                = 0x0008, /**< @sa LRRC_CAS_HRPD_BSR_CNF_STRU */
    ID_LRRC_CAS_HRPD_BSR_IND                                = 0x0009, /**< @sa LRRC_CAS_HRPD_BSR_IND_STRU */
    ID_CAS_LRRC_HRPD_BSR_STOP_REQ                           = 0x000A, /**< @sa CAS_LRRC_HRPD_BSR_STOP_REQ_STRU */
    ID_LRRC_CAS_HRPD_BSR_STOP_CNF                           = 0x000B, /**< @sa LRRC_CAS_HRPD_BSR_STOP_CNF_STRU */
    ID_CAS_LRRC_HRPD_REL_ALL_REQ                            = 0x000C, /**< @sa CAS_LRRC_HRPD_REL_ALL_REQ_STRU */
    ID_LRRC_CAS_HRPD_REL_ALL_CNF                            = 0x000D, /**< @sa LRRC_CAS_HRPD_REL_ALL_CNF_STRU */
    ID_LRRC_CAS_HRPD_REL_ALL_REQ                            = 0x000E, /**< @sa LRRC_CAS_HRPD_REL_ALL_REQ_STRU */
    ID_CAS_LRRC_HRPD_REL_ALL_CNF                            = 0x000F, /**< @sa CAS_LRRC_HRPD_REL_ALL_CNF_STRU */
    ID_LRRC_CAS_HRPD_IDLE_MEAS_REQ                          = 0x0010, /**< @sa LRRC_CAS_HRPD_IDLE_MEAS_REQ_STRU */
    ID_CAS_LRRC_HRPD_IDLE_MEAS_CNF                          = 0x0011, /**< @sa CAS_LRRC_HRPD_IDLE_MEAS_CNF_STRU */
    ID_CAS_LRRC_HRPD_IDLE_MEAS_IND                          = 0x0012, /**< @sa CAS_LRRC_HRPD_IDLE_MEAS_IND_STRU */
    ID_LRRC_CAS_HRPD_CONNECTED_MEAS_REQ                     = 0x0013, /**< @sa LRRC_CAS_HRPD_CONNECTED_MEAS_REQ_STRU */
    ID_CAS_LRRC_HRPD_CONNECTED_MEAS_CNF                     = 0x0014, /**< @sa CAS_LRRC_HRPD_CONNECTED_MEAS_CNF_STRU */
    ID_CAS_LRRC_HRPD_CONNECTED_MEAS_IND                     = 0x0015, /**< @sa CAS_LRRC_HRPD_CONNECTED_MEAS_IND_STRU */
    ID_LRRC_CAS_HRPD_IDLE_RESEL_REQ                         = 0x0016, /**< @sa LRRC_CAS_HRPD_IDLE_RESEL_REQ_STRU */
    ID_CAS_LRRC_HRPD_IDLE_RESEL_CNF                         = 0x0017, /**< @sa CAS_LRRC_HRPD_IDLE_RESEL_CNF_STRU */
    ID_LRRC_CAS_HRPD_RESEL_STOP_REQ                         = 0x0018, /**< @sa LRRC_CAS_HRPD_RESEL_STOP_REQ_STRU */
    ID_CAS_LRRC_HRPD_RESEL_STOP_CNF                         = 0x0019, /**< @sa CAS_LRRC_HRPD_RESEL_STOP_CNF_STRU */
    ID_LRRC_CAS_HRPD_REDIRECT_REQ                           = 0x001A, /**< @sa LRRC_CAS_HRPD_REDIRECT_REQ_STRU */
    ID_CAS_LRRC_HRPD_REDIRECT_CNF                           = 0x001B, /**< @sa CAS_LRRC_HRPD_REDIRECT_CNF_STRU */
    ID_LRRC_CAS_HRPD_REDIRECT_STOP_REQ                      = 0x001C, /**< @sa LRRC_CAS_HRPD_REDIRECT_STOP_REQ_STRU */
    ID_CAS_LRRC_HRPD_REDIRECT_STOP_CNF                      = 0x001D, /**< @sa CAS_LRRC_HRPD_REDIRECT_STOP_CNF_STRU */
    ID_LRRC_CAS_HRPD_BSR_REQ                                = 0x001E, /**< @sa LRRC_CAS_HRPD_BSR_REQ_STRU */
    ID_CAS_LRRC_HRPD_BSR_CNF                                = 0x001F, /**< @sa CAS_LRRC_HRPD_BSR_CNF_STRU */
    ID_CAS_LRRC_HRPD_BSR_IND                                = 0x0020, /**< @sa CAS_LRRC_HRPD_BSR_IND_STRU */
    ID_LRRC_CAS_HRPD_BSR_STOP_REQ                           = 0x0021, /**< @sa LRRC_CAS_HRPD_BSR_STOP_REQ_STRU */
    ID_CAS_LRRC_HRPD_BSR_STOP_CNF                           = 0x0022, /**< @sa CAS_LRRC_HRPD_BSR_STOP_CNF_STRU */
    ID_LRRC_CAS_HRPD_BSR_SUSPEND_REQ                        = 0x0023, /**< @sa LRRC_CAS_HRPD_BSR_SUSPEND_REQ_STRU */
    ID_CAS_LRRC_HRPD_BSR_SUSPEND_CNF                        = 0x0024, /**< @sa CAS_LRRC_HRPD_BSR_SUSPEND_CNF_STRU */
    ID_LRRC_CAS_HRPD_BSR_RESUME_REQ                         = 0x0025, /**< @sa LRRC_CAS_HRPD_BSR_RESUME_REQ_STRU */
    ID_CAS_LRRC_HRPD_BSR_RESUME_CNF                         = 0x0026, /**< @sa CAS_LRRC_HRPD_BSR_RESUME_CNF_STRU */
    ID_LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_BUTT              = 0x0027
};
typedef VOS_UINT16 LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_MEAS_BAND_WIDTH_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CAS_LRRC_HRPD_MEAS_BAND_WIDTH_ENUM
{
    CAS_LRRC_HRPD_MEAS_BAND_WIDTH_6RB   = 0x0000,
    CAS_LRRC_HRPD_MEAS_BAND_WIDTH_15RB  = 0x0001,
    CAS_LRRC_HRPD_MEAS_BAND_WIDTH_25RB  = 0x0002,
    CAS_LRRC_HRPD_MEAS_BAND_WIDTH_50RB  = 0x0003,
    CAS_LRRC_HRPD_MEAS_BAND_WIDTH_75RB  = 0x0004,
    CAS_LRRC_HRPD_MEAS_BAND_WIDTH_100RB = 0x0005,
    CAS_LRRC_HRPD_MEAS_BAND_WIDTH_ENUM_BUTT= 0x0006
};
typedef VOS_UINT16 CAS_LRRC_HRPD_MEAS_BAND_WIDTH_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_BSR_RSLT_ENUM_UINT8
 *
 * Description :
 *******************************************************************************/
enum CAS_LRRC_HRPD_BSR_RSLT_ENUM
{
    CAS_LRRC_HRPD_BSR_RSLT_SUCC         = 0x00,
    CAS_LRRC_HRPD_BSR_RSLT_FAIL         = 0x01,
    CAS_LRRC_HRPD_BSR_RSLT_ABORT        = 0x02,
    CAS_LRRC_HRPD_BSR_RSLT_ENUM_BUTT    = 0x03
};
typedef VOS_UINT8 CAS_LRRC_HRPD_BSR_RSLT_ENUM_UINT8;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_CDMA_SYSTEM_TIME_TYPE_ENUM_UINT8
 *
 * Description :
 *******************************************************************************/
enum CAS_LRRC_HRPD_CDMA_SYSTEM_TIME_TYPE_ENUM
{
    CAS_LRRC_HRPD_CDMA_SYSTEM_TIME_TYPE_SYNC                = 0x00,
    CAS_LRRC_HRPD_CDMA_SYSTEM_TIME_TYPE_ASYNC               = 0x01,
    CAS_LRRC_HRPD_CDMA_SYSTEM_TIME_TYPE_ENUM_BUTT           = 0x02
};
typedef VOS_UINT8 CAS_LRRC_HRPD_CDMA_SYSTEM_TIME_TYPE_ENUM_UINT8;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_CONNECTED_MEAS_RESULT_ENUM_UINT32
 *
 * Description :
 *******************************************************************************/
enum CAS_LRRC_HRPD_CONNECTED_MEAS_RESULT_ENUM
{
    CAS_LRRC_HRPD_CONNECTED_MEAS_RESULT_SUCC                = 0x00000000,
    CAS_LRRC_HRPD_CONNECTED_MEAS_RESULT_FAIL                = 0x00000001,
    CAS_LRRC_HRPD_CONNECTED_MEAS_RESULT_ENUM_BUTT           = 0x00000002
};
typedef VOS_UINT32 CAS_LRRC_HRPD_CONNECTED_MEAS_RESULT_ENUM_UINT32;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_IDLE_MEAS_RESULT_ENUM_UINT32
 *
 * Description :
 *******************************************************************************/
enum CAS_LRRC_HRPD_IDLE_MEAS_RESULT_ENUM
{
    CAS_LRRC_HRPD_IDLE_MEAS_RESULT_SUCC                     = 0x00000000,
    CAS_LRRC_HRPD_IDLE_MEAS_RESULT_FAIL                     = 0x00000001,
    CAS_LRRC_HRPD_IDLE_MEAS_RESULT_ENUM_BUTT                = 0x00000002
};
typedef VOS_UINT32 CAS_LRRC_HRPD_IDLE_MEAS_RESULT_ENUM_UINT32;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_IDLE_RESEL_RESULT_ENUM_UINT32
 *
 * Description :
 *******************************************************************************/
enum CAS_LRRC_HRPD_IDLE_RESEL_RESULT_ENUM
{
    CAS_LRRC_HRPD_IDLE_RESEL_RESULT_SUCC                    = 0x00000000,
    CAS_LRRC_HRPD_IDLE_RESEL_RESULT_FAIL                    = 0x00000001,
    CAS_LRRC_HRPD_IDLE_RESEL_RESULT_ENUM_BUTT               = 0x00000002
};
typedef VOS_UINT32 CAS_LRRC_HRPD_IDLE_RESEL_RESULT_ENUM_UINT32;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_MEAS_CMD_ENUM_UINT8
 *
 * Description :
 *******************************************************************************/
enum CAS_LRRC_HRPD_MEAS_CMD_ENUM
{
    CAS_LRRC_HRPD_MEAS_CMD_RELEASE      = 0x00,
    CAS_LRRC_HRPD_MEAS_CMD_SETUP        = 0x01,
    CAS_LRRC_HRPD_MEAS_CMD_ENUM_BUTT    = 0x02
};
typedef VOS_UINT8 CAS_LRRC_HRPD_MEAS_CMD_ENUM_UINT8;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_MEAS_RESULT_ENUM_UINT8
 *
 * Description :
 *******************************************************************************/
enum CAS_LRRC_HRPD_MEAS_RESULT_ENUM
{
    CAS_LRRC_HRPD_MEAS_SUCCSS           = 0x00,
    CAS_LRRC_HRPD_BAND_NOT_SUPPORTED    = 0x01,
    CAS_LRRC_HRPD_MEAS_FAIL             = 0x02,
    CAS_LRRC_HRPD_MEAS_RESULT_ENUM_BUTT = 0x03
};
typedef VOS_UINT8 CAS_LRRC_HRPD_MEAS_RESULT_ENUM_UINT8;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_REDIRECT_RESULT_ENUM_UINT32
 *
 * Description :
 *******************************************************************************/
enum CAS_LRRC_HRPD_REDIRECT_RESULT_ENUM
{
    CAS_LRRC_HRPD_REDIRECT_RESULT_SUCCESS                   = 0x00000000,
    CAS_LRRC_HRPD_REDIRECT_RESULT_FAIL                      = 0x00000001,
    CAS_LRRC_HRPD_REDIRECT_RESULT_ENUM_BUTT                 = 0x00000002
};
typedef VOS_UINT32 CAS_LRRC_HRPD_REDIRECT_RESULT_ENUM_UINT32;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_REDIRECT_STOP_RESULT_ENUM_UINT32
 *
 * Description :
 *******************************************************************************/
enum CAS_LRRC_HRPD_REDIRECT_STOP_RESULT_ENUM
{
    CAS_LRRC_HRPD_REDIRECT_STOP_RESULT_SUCC                 = 0x00000000,
    CAS_LRRC_HRPD_REDIRECT_STOP_RESULT_FAIL                 = 0x00000001,
    CAS_LRRC_HRPD_REDIRECT_STOP_RESULT_ENUM_BUTT            = 0x00000002
};
typedef VOS_UINT32 CAS_LRRC_HRPD_REDIRECT_STOP_RESULT_ENUM_UINT32;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_IDLE_MEAS_RESULT_ENUM_UINT8
 *
 * Description :
 *******************************************************************************/
enum LRRC_CAS_HRPD_IDLE_MEAS_RESULT_ENUM
{
    LRRC_CAS_HRPD_IDLE_MEAS_RESULT_SUCC                     = 0x00,
    LRRC_CAS_HRPD_IDLE_MEAS_RESULT_FAIL                     = 0x01,
    LRRC_CAS_HRPD_IDLE_MEAS_RESULT_ARFCN_NOT_SUPP           = 0x02,
    LRRC_CAS_HRPD_IDLE_MEAS_RESULT_ENUM_BUTT                = 0x03
};
typedef VOS_UINT8 LRRC_CAS_HRPD_IDLE_MEAS_RESULT_ENUM_UINT8;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_IDLE_RESEL_RESULT_ENUM_UINT8
 *
 * Description :
 *******************************************************************************/
enum LRRC_CAS_HRPD_IDLE_RESEL_RESULT_ENUM
{
    LRRC_CAS_HRPD_IDLE_RESEL_RESULT_SUCC                    = 0x00,
    LRRC_CAS_HRPD_IDLE_RESEL_RESULT_SIB_REV_FAIL            = 0x01,
    LRRC_CAS_HRPD_IDLE_RESEL_RESULT_CELL_BARRED             = 0x02,
    LRRC_CAS_HRPD_IDLE_RESEL_RESULT_CELL_FORBID             = 0x03,
    LRRC_CAS_HRPD_IDLE_RESEL_RESULT_ACCESS_FAIL             = 0x04,
    LRRC_CAS_HRPD_IDLE_RESEL_RESULT_FAIL                    = 0x05,
    LRRC_CAS_HRPD_IDLE_RESEL_RESULT_ENUM_BUTT               = 0x06
};
typedef VOS_UINT8 LRRC_CAS_HRPD_IDLE_RESEL_RESULT_ENUM_UINT8;

/*******************************************************************************
 4. Message Header declaration
*******************************************************************************/

/*******************************************************************************
 5. Message declaration
*******************************************************************************/

/*******************************************************************************
 6. STRUCT and UNION declaration
*******************************************************************************/

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_REDIR_INFO_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usBand;    /**< the band of target cell */
    VOS_UINT16                          usChannel; /**< CDMA frequency */
} LRRC_CAS_HRPD_REDIR_INFO_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_PLMN_INFO_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_UINT8                           aucPlmnId[LRRC_CAS_HRPD_PLMN_MAX_LENGTH];
    VOS_UINT8                           aucRsv[1];
} LRRC_CAS_HRPD_PLMN_INFO_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_PILOT_MEAS_RESULT_STRU
 *
 * Description : CDMA pilot strength for one PN
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usPn;          /**< the PN code of cell */
    VOS_UINT16                          usPhase;       /**< CDMA pilot phase, in chips */
    VOS_INT16                           sStrength;     /**< CDMA pilot strength in 1/8 dB format,[-24*8,0],Ecio */
    VOS_UINT8                           aucReserve[2];
} CAS_LRRC_HRPD_PILOT_MEAS_RESULT_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_IDLE_MEAS_CELL_RESULT_STRU
 *
 * Description : the measurement result for one LTE cell when HRPD is master
 * mode
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usPhysCellID; /**< physical layer identity of the cell, FDD is (0-511), TDD is (0-127)D */
    VOS_INT16                           sRSRP;        /**< RSRP measurement result,the value range is [-141*8,-44*8],unit is dBm, precision is 1/8 */
    VOS_INT16                           sRSRQ;        /**< RSRQ measurement result,the value range is [-20*8,-3*8],unit is dB,precision is 1/8 */
    VOS_INT16                           sRSSI;        /**< RSSI measurement result,the value range is [-110*8,-20*8],unit is dBm,precision is 1/8 */
} LRRC_CAS_HRPD_IDLE_MEAS_CELL_RESULT_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_IDLE_RESEL_CELL_INFO_STRU
 *
 * Description : the targert cell info UE reselects from LTE to HRPD
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usBand;        /**< the band of target cell */
    VOS_UINT16                          usChannel;     /**< CDMA frequency */
    VOS_UINT16                          usPn;
    VOS_UINT8                           aucReserve[2];
} LRRC_CAS_HRPD_IDLE_RESEL_CELL_INFO_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_BSR_SYSTEM_INFO_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usBand;                                          /**< the band of target cell */
    VOS_UINT16                          usChannel;                                       /**< CDMA frequency */
    VOS_UINT8                           aucSubNetId[CAS_LRRC_HRPD_MAX_SUBNET_ID_LENGTH];
} CAS_LRRC_HRPD_BSR_SYSTEM_INFO_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_EUTRAN_MEAR_PARA_STRU
 *
 * Description : Measurement parameters corresponding to EUTRAN system when
 * HRPD is master mode,the definition is according 7.1 E-UTRAN Neighbor List
 * Record
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                                              usEarfcn;        /**< E-UTRAN channel number as received in CDMA overhead message */
    CAS_LRRC_HRPD_MEAS_BAND_WIDTH_ENUM_UINT16               enMeasBandWidth; /**< 3 bits, it is defined by the parameter Transmission Bandwidth Configuration, Nrb(TS36.304). */
} CAS_LRRC_HRPD_EUTRAN_MEAR_PARA_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_IDLE_RESEL_CELL_INFO_STRU
 *
 * Description : the targert cell UE reselects from HRPD to LTE
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usArfcn;                                        /**< LTE frequency */
    VOS_UINT16                          usPhysCellID;                                   /**< INTEGER (0..503) 36.331 */
    VOS_UINT8                           ucPlmnIdNum;                                    /**< LTE plmn id num 0~7 */
    VOS_UINT8                           aucReserve[3];
    VOS_UINT32                          aulPlmnId[CAS_LRRC_IDLE_RESEL_PLMN_ID_MAX_NUM]; /**< LTE plmn id 24bits */
} CAS_LRRC_HRPD_IDLE_RESEL_CELL_INFO_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_MEAS_RESULT_STRU
 *
 * Description : the measure result about HRPD cells when LTE is master mode
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                                              usFreq;                                      /**< contains the CDMA channle for which this measurement result is valid */
    VOS_UINT8                                               ucband;                                      /**< contains CDMA band for which this measurement result is valid */
    VOS_UINT8                                               ucNumPN;                                     /**< the number of PN,not exceed CAS_LRRC_HRPD_MAX_PN_NUM_PER_FREQ */
    CAS_LRRC_HRPD_PILOT_MEAS_RESULT_STRU                    astPilot[CAS_LRRC_HRPD_MAX_PN_NUM_PER_FREQ]; /**< list of CDMA pilot result */
} CAS_LRRC_HRPD_MEAS_RESULT_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_CDMA_SYSTEM_TIME_STRU
 *
 * Description : the CDMA system time in SIB8, per the IE
 * SystemTimeInfoCDMA2000  in 36.331
 * synchronousSystemTime  BIT STRING (SIZE (39))
 * asynchronousSystemTime  BIT STRING (SIZE (49))
 *******************************************************************************/
typedef struct
{
    CAS_LRRC_HRPD_CDMA_SYSTEM_TIME_TYPE_ENUM_UINT8          ucSystemTimeType;           /**< synchronousSystemTime or asynchronousSystemTime */
    VOS_UINT8                                               aucReserve[3];
    VOS_UINT32                                              ulSystemTimeLow32BitsValue; /**< the low 32 bits value of system time */
    VOS_UINT32                                              ulSystemTimeHighBitsValue;  /**< the other high bits value of system time */
} LRRC_CAS_HRPD_CDMA_SYSTEM_TIME_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_MEAS_FREQ_INFO_STRU
 *
 * Description : the cell list info need to be measured when LTE is master
 * mode, per SIB8 36.331
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                          usArfcn;                                  /**< ARFCN-ValueCDMA2000 */
    VOS_UINT8                           ucBand;                                   /**< contains CDMA band for which this measurement info is valid */
    VOS_UINT8                           ucNumPn;                                  /**< number of CDMA pilot result included, the maximum value shall not be exceed CAS_LRRC_HRPD_MAX_PN_NUM_PER_FREQ */
    VOS_UINT16                          ausPn[CAS_LRRC_HRPD_MAX_PN_NUM_PER_FREQ]; /**< list of CDMA Pns need to measured */
} LRRC_CAS_HRPD_MEAS_FREQ_INFO_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_IDLE_MEAS_RESULT_FREQ_INFO_STRU
 *
 * Description : HRPD is master mode, the measurement result of LTE cells
 *******************************************************************************/
typedef struct
{
    VOS_UINT16                                              usEarfcn;                                                          /**< the EUTAN frequency */
    VOS_UINT8                                               ucNumCell;                                                         /**< the cell number */
    VOS_UINT8                                               aucReserve[1];
    LRRC_CAS_HRPD_IDLE_MEAS_CELL_RESULT_STRU                astMeasResultCellList[CAS_LRRC_HRPD_MAX_CELL_NUM_PER_EUTRAN_FREQ]; /**< the max cell number */
} LRRC_CAS_HRPD_IDLE_MEAS_RESULT_FREQ_INFO_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_EUTRAN_MEAR_INFO_LIST_STRU
 *
 * Description : Measurement info for LTE cell list
 *******************************************************************************/
typedef struct
{
    VOS_UINT8                           ucNumberOfEarfcn;                                   /**< NumEUTRAFrequencies, maximun is CAS_LRRC_HRPD_MAX_EUTRA_FREQ_NUM */
    VOS_UINT8                           aucReserve[3];
    CAS_LRRC_HRPD_EUTRAN_MEAR_PARA_STRU stEutranMeasPara[CAS_LRRC_HRPD_MAX_EUTRA_FREQ_NUM]; /**< the measurement parameters about the EUTRAN frequencies */
} CAS_LRRC_HRPD_EUTRAN_MEAR_INFO_LIST_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_SYSTEM_TIME_INFO_STRU
 *
 * Description : the CDMA and LTE system time info, per SystemTimeInfoCDMA2000
 * IE 36.331
 *******************************************************************************/
typedef struct
{
    LRRC_CAS_HRPD_CDMA_SYSTEM_TIME_STRU stSystemTimeInfoCDMA; /**< absolute time in the current cell */
    VOS_UINT16                          usLTESFN;             /**< SFN boundary at or after the ending boundary of the SI-Window in which SystemInformationBlockType8 is transmitted */
    VOS_UINT8                           aucReserve[2];
    VOS_UINT32                          aulTimeStamp[2];      /**< TimeStamp[0] is Lte's timing;TimeStamp[1] is  32k comm timing */
} LRRC_CAS_HRPD_SYSTEM_TIME_INFO_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_MEAS_INFO_STRU
 *
 * Description : the HRPD measure info configured in SIB8 IE, per
 * CellReselectionParametersCDMA2000 IE in 36.331
 *******************************************************************************/
typedef struct
{
    PS_BOOL_ENUM_UINT8                  enSearchWinSizePresent;                            /**< TRUE:ucSearchWinSize present;FALSE: not present */
    VOS_UINT8                           ucSearchWinSize;                                   /**< CDMA pilot search window size from base station,not the real value */
    VOS_UINT8                           ucFreqNum;                                         /**< the number of Fequency */
    PS_BOOL_ENUM_UINT8                  enSystemTimeInfoPresent;                           /**< TRUE:stHRPDCDMASystemTimeInfo present;FALSE: not present */
    LRRC_CAS_HRPD_SYSTEM_TIME_INFO_STRU stSystemTimeInfoCDMA;                              /**< absolute time in the current cell */
    LRRC_CAS_HRPD_MEAS_FREQ_INFO_STRU   astFreqInfo[CAS_LRRC_HRPD_MEAS_MAX_CDMA_FREQ_NUM]; /**< list of CDMA cells received in SIB8 */
} LRRC_CAS_HRPD_MEAS_INFO_STRU;

/*******************************************************************************
 7. OTHER declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_IDLE_MEAS_REQ_STRU
 *
 * Description : the measurement info about measure LTE cell when HRPD is
 * master mode
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
    CAS_LRRC_HRPD_MEAS_CMD_ENUM_UINT8                       enMeasCmd;                /**< the measure cmd, release or start */
    VOS_UINT8                                               aucReserve[3];
    CAS_LRRC_HRPD_EUTRAN_MEAR_INFO_LIST_STRU                stIdleEUTRANMeasInfoList; /**< the EUTRAN cells need to measure */
} CAS_LRRC_HRPD_IDLE_MEAS_REQ_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_IDLE_MEAS_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
    LRRC_CAS_HRPD_IDLE_MEAS_RESULT_ENUM_UINT8               enResult;         /**< measurement result */
    VOS_UINT8                                               ucValidEarfcnNum; /**< real meas freq num */
    VOS_UINT8                                               aucReserve[2];
} LRRC_CAS_HRPD_IDLE_MEAS_CNF_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_IDLE_MEAS_IND_STRU
 *
 * Description : HRPD is master mode, the measurement result of LTE cells
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
    VOS_UINT8                                               ucEUTANFreqNum;                                         /**< the EUTRAN frequencies been measured */
    VOS_UINT8                                               aucReserve[3];
    LRRC_CAS_HRPD_IDLE_MEAS_RESULT_FREQ_INFO_STRU           ustMeasResultFeqList[CAS_LRRC_HRPD_MAX_EUTRA_FREQ_NUM]; /**< the measurement result for all the frequencies */
} LRRC_CAS_HRPD_IDLE_MEAS_IND_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_IDLE_RESEL_REQ_STRU
 *
 * Description : the measurement request from the HRDP to LTE
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
    CAS_LRRC_HRPD_IDLE_RESEL_CELL_INFO_STRU                 stTargetEUTRANCellInfo; /**< target EUTRAN cell info */
} CAS_LRRC_HRPD_IDLE_RESEL_REQ_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_IDLE_RESEL_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
    LRRC_CAS_HRPD_IDLE_RESEL_RESULT_ENUM_UINT8              enResult;
    VOS_UINT8                                               ucReserve[3];
    VOS_UINT32                                              ulBarRemainingTime; /**< rslt is LRRC_CAS_HRPD_IDLE_RESEL_RESULT_SIB_REV_FAIL or LRRC_CAS_HRPD_IDLE_RESEL_RESULT_CELL_BARRED or LRRC_CAS_HRPD_IDLE_RESEL_RESULT_ACCESS_FAILcarry this; ms */
} LRRC_CAS_HRPD_IDLE_RESEL_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_IDLE_RESEL_STOP_REQ_STRU
 *
 * Description : CAS request the reselection from HRPD to LTE
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
} CAS_LRRC_HRPD_IDLE_RESEL_STOP_REQ_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_IDLE_RESEL_STOP_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
} LRRC_CAS_HRPD_IDLE_RESEL_STOP_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_BSR_REQ_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
} CAS_LRRC_HRPD_BSR_REQ_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_BSR_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
    CAS_LRRC_HRPD_BSR_RSLT_ENUM_UINT8                       ucRslt;
    VOS_UINT8                                               aucRsv[3];
} LRRC_CAS_HRPD_BSR_CNF_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_BSR_IND_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
    CAS_LRRC_HRPD_BSR_RSLT_ENUM_UINT8                       ucRslt;
    VOS_UINT8                                               ucHighPlmnNum;
    VOS_UINT8                                               aucRsv[2];
    LRRC_CAS_HRPD_PLMN_INFO_STRU                            astHighPlmnList[LRRC_CAS_HRPD_BSR_MAX_HIGH_PLMN_NUM];
    VOS_UINT8                                               ucLowPlmnNum;
    VOS_UINT8                                               aucRsv1[3];
    LRRC_CAS_HRPD_PLMN_INFO_STRU                            astLowPlmnList[LRRC_CAS_HRPD_BSR_MAX_LOW_PLMN_NUM];
} LRRC_CAS_HRPD_BSR_IND_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_BSR_STOP_REQ_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
} CAS_LRRC_HRPD_BSR_STOP_REQ_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_BSR_STOP_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
} LRRC_CAS_HRPD_BSR_STOP_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_REL_ALL_REQ_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
} CAS_LRRC_HRPD_REL_ALL_REQ_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_REL_ALL_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
} LRRC_CAS_HRPD_REL_ALL_CNF_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_REL_ALL_REQ_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
} LRRC_CAS_HRPD_REL_ALL_REQ_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_REL_ALL_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
} CAS_LRRC_HRPD_REL_ALL_CNF_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_IDLE_MEAS_REQ_STRU
 *
 * Description : the measurement info about HRPD cell when LTE is master mode
 * at idle state, per the SIB8 in 36.331
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
    CAS_LRRC_HRPD_MEAS_CMD_ENUM_UINT8                       ucMeasCmd;          /**< the measurement command, setup or release */
    VOS_UINT8                                               aucReserve[3];
    LRRC_CAS_HRPD_MEAS_INFO_STRU                            stIdleHRPDMeasInfo; /**< the HRPD cell list info need to measure when LTE is at idle state */
} LRRC_CAS_HRPD_IDLE_MEAS_REQ_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_IDLE_MEAS_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
    CAS_LRRC_HRPD_IDLE_MEAS_RESULT_ENUM_UINT32              enResult;
} CAS_LRRC_HRPD_IDLE_MEAS_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_IDLE_MEAS_IND_STRU
 *
 * Description : the measurement result from the HRDP when UE is at LTE idle
 * state
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
    VOS_UINT8                                               ucHRPDMeasFreqNum;                                       /**< the HRPD frequency number has measured */
    VOS_UINT8                                               aucReserve[3];
    CAS_LRRC_HRPD_MEAS_RESULT_STRU                          astMeasResultList[CAS_LRRC_HRPD_MEAS_MAX_CDMA_FREQ_NUM];
} CAS_LRRC_HRPD_IDLE_MEAS_IND_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_CONNECTED_MEAS_REQ_STRU
 *
 * Description : the measure info configured in MeasConfig IE when UE is LTE
 * connected state
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
    CAS_LRRC_HRPD_MEAS_CMD_ENUM_UINT8                       ucMeasCmd;      /**< the measurement command, setup or release */
    VOS_UINT8                                               aucReserve[3];
    LRRC_CAS_HRPD_MEAS_INFO_STRU                            stHRPDMeasInfo; /**< the HRPD cell list need to measure */
} LRRC_CAS_HRPD_CONNECTED_MEAS_REQ_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_CONNECTED_MEAS_CNF_STRU
 *
 * Description : the confirmation for the message
 * ID_LRRC_CAS_HRPD_CONNECTED_MEAS_REQ,
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
    CAS_LRRC_HRPD_CONNECTED_MEAS_RESULT_ENUM_UINT32         enResult;
} CAS_LRRC_HRPD_CONNECTED_MEAS_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_CONNECTED_MEAS_IND_STRU
 *
 * Description : the measurement result from the HRDP when UE is at LTE
 * connected state
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
    VOS_UINT8                                               ucHRPDMeasFeqNum;                                        /**< the HRPD Feq number has measured */
    VOS_UINT8                                               aucReserve[3];
    CAS_LRRC_HRPD_MEAS_RESULT_STRU                          astMeasResultList[CAS_LRRC_HRPD_MEAS_MAX_CDMA_FREQ_NUM]; /**< measurement result info */
} CAS_LRRC_HRPD_CONNECTED_MEAS_IND_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_IDLE_RESEL_REQ_STRU
 *
 * Description : LRRC request UE reselection from LTE to HRPD
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
    LRRC_CAS_HRPD_IDLE_RESEL_CELL_INFO_STRU                 stTargetCellListInfo;
} LRRC_CAS_HRPD_IDLE_RESEL_REQ_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_IDLE_RESEL_CNF_STRU
 *
 * Description : the result of UE reselection from LTE to HRPD
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
    CAS_LRRC_HRPD_IDLE_RESEL_RESULT_ENUM_UINT32             enResult; /**< the IRAT result */
} CAS_LRRC_HRPD_IDLE_RESEL_CNF_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_RESEL_STOP_REQ_STRU
 *
 * Description : LRRC request to stop the reselection from LTE to HRPD
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
} LRRC_CAS_HRPD_RESEL_STOP_REQ_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_RESEL_STOP_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
} CAS_LRRC_HRPD_RESEL_STOP_CNF_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_REDIRECT_REQ_STRU
 *
 * Description : UE redirects from LTE to HRPD
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
    LRRC_CAS_HRPD_REDIR_INFO_STRU                           stTargetFreqInfo;
} LRRC_CAS_HRPD_REDIRECT_REQ_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_REDIRECT_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
    CAS_LRRC_HRPD_REDIRECT_RESULT_ENUM_UINT32               enResult; /**< the IRAT result */
} CAS_LRRC_HRPD_REDIRECT_CNF_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_REDIRECT_STOP_REQ_STRU
 *
 * Description : LRRC request to stop the redirection from LTE to HRPD
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
} LRRC_CAS_HRPD_REDIRECT_STOP_REQ_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_REDIRECT_STOP_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
} CAS_LRRC_HRPD_REDIRECT_STOP_CNF_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_BSR_REQ_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
} LRRC_CAS_HRPD_BSR_REQ_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_BSR_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
    CAS_LRRC_HRPD_BSR_RSLT_ENUM_UINT8                       enRslt;
    VOS_UINT8                                               aucReserve[3];
} CAS_LRRC_HRPD_BSR_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_BSR_IND_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
    CAS_LRRC_HRPD_BSR_RSLT_ENUM_UINT8                       enRslt;
    VOS_UINT8                                               ucReserve;
    VOS_UINT16                                              usNumSystem;
    CAS_LRRC_HRPD_BSR_SYSTEM_INFO_STRU                      stSystemInfo[CAS_LRRC_HRPD_MAX_SYSTEM_NUM];
} CAS_LRRC_HRPD_BSR_IND_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_BSR_STOP_REQ_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
} LRRC_CAS_HRPD_BSR_STOP_REQ_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_BSR_STOP_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
} CAS_LRRC_HRPD_BSR_STOP_CNF_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_BSR_SUSPEND_REQ_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
} LRRC_CAS_HRPD_BSR_SUSPEND_REQ_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_BSR_SUSPEND_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
} CAS_LRRC_HRPD_BSR_SUSPEND_CNF_STRU;

/** ****************************************************************************
 * Name        : LRRC_CAS_HRPD_BSR_RESUME_REQ_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
} LRRC_CAS_HRPD_BSR_RESUME_REQ_STRU;

/** ****************************************************************************
 * Name        : CAS_LRRC_HRPD_BSR_RESUME_CNF_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    LRRCCASHRPDINTERFACE_MSG_TYPE_ENUM_UINT16               enMsgId;
    VOS_UINT16                                              usOpId;
} CAS_LRRC_HRPD_BSR_RESUME_CNF_STRU;

/*******************************************************************************
 8. Global  declaration
*******************************************************************************/

/*******************************************************************************
 9. Function declarations
*******************************************************************************/

#if ((VOS_OS_VER == VOS_WIN32) || (VOS_OS_VER == VOS_NUCLEUS))
#pragma pack()
#else
#pragma pack(0)
#endif

#ifdef __cplusplus
#if __cplusplus
}
#endif /* __cpluscplus */
#endif /* __cpluscplus */

#endif
